bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
2	[BUG]  [BUGGY]  ch  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  ch  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	ch  =  currEntry.read(buf,  offset,  numToRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
3	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  ch  =  is.read(buf,  offset,  totalRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	ch  =  is.read(buf,  offset,  totalRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
4	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  count(numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  ch  =  is.read(buf,  offset,  count(numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	ch  =  is.read(buf,  offset,  count(numToRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
5	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	ch  =  is.read(buf,  offset,  numToRead,  len);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
6	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  ch  =  is.read(buf,  offset,  0,  numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	ch  =  is.read(buf,  offset,  0,  numToRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
7	[BUG]  [BUGGY]  if(entryOffset  ==  0  &&  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  &&  totalRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  &&  totalRead  ==  0)  {	  if(entryOffset    ==    0    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
8	[BUG]  [BUGGY]  if(numToRead  ==  0  ||  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  ==  0  ||  totalRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  0  ||  totalRead  ==  0)  {	  if(entryOffset    ==    0    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
9	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  totalRead!=  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  ||  totalRead!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  ||  totalRead!=  0)  {	  if(entryOffset    ==    0    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
10	[BUG]  [BUGGY]  if(numToRead  ==  -1  ||  entryOffset  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  ==  -1  ||  entryOffset  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  -1  ||  entryOffset  ==  -1)  {	  if(numToRead    ==    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
11	[BUG]  [BUGGY]  if(numToRead  ==  0  ||  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  ==  0  ||  totalRead  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  0  ||  totalRead  ==  -1)  {	  if(numToRead    ==    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
12	[BUG]  [BUGGY]  if(numToRead  ==  -1  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  ==  -1  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  -1  ||  hasHitEOF)  {	  if(numToRead    ==    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
13	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream(numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getInputStream(numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getInputStream(numToRead);	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
14	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream(),  totalRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getInputStream(),  totalRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getInputStream(),  totalRead);	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
15	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getErrorStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getErrorStream();  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getErrorStream();	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
16	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getRawInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getRawInputStream();  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getRawInputStream();	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
17	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getRecordSize();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getRecordSize();  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getRecordSize();	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
18	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getOutputStream();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getOutputStream();  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getOutputStream();	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
19	[BUG]  [BUGGY]  if(numToRead  ==  -1  ||  entryOffset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  ==  -1  ||  entryOffset  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  -1  ||  entryOffset  ==  0)  {	  if(numToRead    ==    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
20	[BUG]  [BUGGY]  if(entryOffset  >=  0  &&  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  0  &&  totalRead  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  0  &&  totalRead  ==  -1)  {	  if(entryOffset    >=    0    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
21	[BUG]  [BUGGY]  if(numToRead  >=  0  ||  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  >=  0  ||  totalRead  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  >=  0  ||  totalRead  ==  -1)  {	  if(entryOffset    >=    0    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
22	[BUG]  [BUGGY]  if(entryOffset  ==  0  &&  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  &&  totalRead  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  &&  totalRead  ==  -1)  {	  if(entryOffset    >=    0    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
23	[BUG]  [BUGGY]  if(entryOffset!=  0  &&  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  0  &&  totalRead  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  0  &&  totalRead  ==  -1)  {	  if(entryOffset    >=    0    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
24	[BUG]  [BUGGY]  if(entryOffset  ==  -1  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  &&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  &&  hasHitEOF)  {	  if(entryOffset    ==    -1    &&    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
25	[BUG]  [BUGGY]  if(numToRead  ==  -1  &&  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  ==  -1  &&  totalRead  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  -1  &&  totalRead  ==  -1)  {	  if(entryOffset    ==    -1    &&    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
26	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  totalRead!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  ||  totalRead!=  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  ||  totalRead!=  -1)  {	  if(entryOffset    ==    -1    ||    totalRead!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
27	[BUG]  [BUGGY]  if(numToRead  ==  -1  ||  totalRead!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  ==  -1  ||  totalRead!=  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  -1  ||  totalRead!=  -1)  {	  if(entryOffset    ==    -1    ||    totalRead!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
28	[BUG]  [BUGGY]  if(entryOffset  ==  -1  &&  totalRead!=  -1)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  &&  totalRead!=  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  &&  totalRead!=  -1)  {	  if(entryOffset    ==    -1    ||    totalRead!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
29	[BUG]  [BUGGY]  if(entryOffset  ==  -1  ||  entrySize!=  -1)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  ||  entrySize!=  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  ||  entrySize!=  -1)  {	  if(entryOffset    ==    -1    ||    totalRead!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
30	[BUG]  [BUGGY]  if(numToRead  <  entrySize)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  <  entrySize)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  <  entrySize)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    <    numToRead)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
31	[BUG]  [BUGGY]  if(numToRead  <  entryOffset)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  <  entryOffset)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  <  entryOffset)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    <    numToRead)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
32	[BUG]  [BUGGY]  if(numToRead  <  totalRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  <  totalRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  <  totalRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    <    numToRead)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
33	[BUG]  [BUGGY]  if(numToRead  <  len)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  <  len)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  <  len)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    <    numToRead)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
34	[BUG]  [BUGGY]  if(numToRead  <  length)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  <  length)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  <  length)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    <    numToRead)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
35	[BUG]  [BUGGY]  if(numToRead  <  entryOffset)  {  if(hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  <  entryOffset)  {  if(hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  <  entryOffset)  {  if(hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    <    numToRead)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
36	[BUG]  [BUGGY]  if(entrySize!=  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entrySize!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize!=  0)  {	  if(entrySize!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
37	[BUG]  [BUGGY]  if(entryOffset  >=  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  0  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  0  ||  hasHitEOF)  {	  if(entryOffset    <    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  if(numToRead  <  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  <  0  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  <  0  ||  hasHitEOF)  {	  if(entryOffset    <    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  if(entrySize  <  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entrySize  <  0  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize  <  0  ||  hasHitEOF)  {	  if(entryOffset    <    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
40	[BUG]  [BUGGY]  if(entryOffset!=  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  0  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  0  ||  hasHitEOF)  {	  if(entryOffset    <    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
41	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  <  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  totalRead  <  0)  {	  if(entryOffset    <    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
42	[BUG]  [BUGGY]  if(entryOffset!=  0  &&  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  0  &&  totalRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  0  &&  totalRead  ==  0)  {	  if(entryOffset!=    -1    &&    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
43	[BUG]  [BUGGY]  if(numToRead!=  -1  &&  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead!=  -1  &&  totalRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead!=  -1  &&  totalRead  ==  0)  {	  if(entryOffset!=    -1    &&    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
44	[BUG]  [BUGGY]  if(entryOffset  >=  0  &&  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  0  &&  totalRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  0  &&  totalRead  ==  0)  {	  if(entryOffset!=    -1    &&    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
45	[BUG]  [BUGGY]  if(entryOffset  >=  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {	  if(entryOffset    <    0    ||    entrySize    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
46	[BUG]  [BUGGY]  if(entrySize  <  0  ||  entryOffset  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entrySize  <  0  ||  entryOffset  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize  <  0  ||  entryOffset  >  SMALL_BUFFER_SIZE)  {	  if(entryOffset    <    0    ||    entrySize    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
47	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  SMALL_BUFFER_SIZE  +  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  SMALL_BUFFER_SIZE  +  1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  entrySize  >  SMALL_BUFFER_SIZE  +  1)  {	  if(entryOffset    <    0    ||    entrySize    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
48	[BUG]  [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  >  SMALL_BUFFER_SIZE)  {	  if(entryOffset    <    0    ||    entrySize    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
49	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  >=  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  entrySize  >=  SMALL_BUFFER_SIZE)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  entrySize  >=  SMALL_BUFFER_SIZE)  {	  if(entryOffset    <    0    ||    entrySize    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
50	[BUG]  [BUGGY]  if(numToRead  <  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  <  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  <  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {	  if(entryOffset    <    0    ||    entrySize    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
51	[BUG]  [BUGGY]  if(numToRead  <  0  ||  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  <  0  ||  totalRead  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  <  0  ||  totalRead  ==  -1)  {	  if(entryOffset    <    0    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
52	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead!=  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  totalRead!=  -1)  {	  if(entryOffset    <    0    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
53	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  ==  -1  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  ==  -1  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  totalRead  ==  -1  ||  hasHitEOF)  {	  if(entryOffset    <    0    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
54	[BUG]  [BUGGY]  if(entryOffset  >=  -1  ||  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  -1  ||  totalRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  -1  ||  totalRead  ==  0)  {	  if(entryOffset    >    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
55	[BUG]  [BUGGY]  if(entryOffset  <  -1  ||  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  -1  ||  totalRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  -1  ||  totalRead  ==  0)  {	  if(entryOffset    >    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
56	[BUG]  [BUGGY]  if(entryOffset  >  0  ||  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >  0  ||  totalRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  0  ||  totalRead  ==  0)  {	  if(entryOffset    >    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
57	[BUG]  [BUGGY]  if(numToRead  >  -1  ||  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  >  -1  ||  totalRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  >  -1  ||  totalRead  ==  0)  {	  if(entryOffset    >    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
58	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
59	[BUG]  [BUGGY]  int  numRecords  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  numRecords  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  numRecords  =  currEntry.read(buf,  offset,  numToRead);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
60	[BUG]  [BUGGY]  byte  numRecords  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  byte  numRecords  =  is.read(buf,  offset,  numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	byte  numRecords  =  is.read(buf,  offset,  numToRead);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
61	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  length);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead,  length);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
62	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead,  len);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
63	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  totalRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  numRecords  =  is.read(buf,  offset,  totalRead);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
64	[BUG]  [BUGGY]  if(entrySize  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entrySize  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize  >  0)  {	  if(entrySize    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
65	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  >=  0)  {	  if(entrySize    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
66	[BUG]  [BUGGY]  if(numToRead  <  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  <  0)  {	  if(entrySize    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
67	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  <  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  entrySize  <  SMALL_BUFFER_SIZE)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  entrySize  <  SMALL_BUFFER_SIZE)  {	  if(entrySize    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
68	[BUG]  [BUGGY]  if(numToRead  <  0  ||  entrySize  <  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  <  0  ||  entrySize  <  SMALL_BUFFER_SIZE)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  <  0  ||  entrySize  <  SMALL_BUFFER_SIZE)  {	  if(entrySize    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
69	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
70	[BUG]  [BUGGY]  if(entryOffset  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
71	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  totalRead;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  totalRead;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  totalRead;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
73	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  entryOffset;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  entryOffset;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  entryOffset;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
74	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
75	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
76	[BUG]  [BUGGY]  if(numToRead!=  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead!=  0)  {	  if(numToRead!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
77	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  numToRead!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  -1  &&  numToRead!=  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  &&  numToRead!=  -1)  {	  if(numToRead!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
78	[BUG]  [BUGGY]  if(entryOffset  <  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  -1)  {	  if(entryOffset    >    -1)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
79	[BUG]  [BUGGY]  if(entryOffset  >=  0  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  0  &&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  0  &&  hasHitEOF)  {	  if(entryOffset    >=    -1    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
80	[BUG]  [BUGGY]  if(entryOffset!=  0  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  0  &&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  0  &&  hasHitEOF)  {	  if(entryOffset    >=    -1    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
81	[BUG]  [BUGGY]  if(entryOffset  >=  -1  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  -1  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  -1  ||  hasHitEOF)  {	  if(entryOffset    >=    -1    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
82	[BUG]  [BUGGY]  if(entryOffset  ==  0  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  &&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  &&  hasHitEOF)  {	  if(entryOffset    >=    -1    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
83	[BUG]  [BUGGY]  int  numRecords  =  currEntry.length  -  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  numRecords  =  currEntry.length  -  1;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  numRecords  =  currEntry.length  -  1;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
84	[BUG]  [BUGGY]  int  numRecords  =  currEntry.length  +  1;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  numRecords  =  currEntry.length  +  1;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  numRecords  =  currEntry.length  +  1;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
85	[BUG]  [BUGGY]  int  numRecords  =  currEntry.length  -  2;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  numRecords  =  currEntry.length  -  2;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  numRecords  =  currEntry.length  -  2;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
86	[BUG]  [BUGGY]  int  numRecords  =  this.currEntry.length;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  numRecords  =  this.currEntry.length;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  numRecords  =  this.currEntry.length;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
87	[BUG]  [BUGGY]  Integer  numRecords  =  currEntry.length;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  Integer  numRecords  =  currEntry.length;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	Integer  numRecords  =  currEntry.length;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
88	[BUG]  [BUGGY]  int  numRecords  =  currEntry.length  -  offset;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  numRecords  =  currEntry.length  -  offset;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  numRecords  =  currEntry.length  -  offset;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
89	[BUG]  [BUGGY]  if(entryOffset  >=  -1  ||  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  -1  ||  totalRead  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  -1  ||  totalRead  ==  -1)  {	  if(entryOffset    >    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
90	[BUG]  [BUGGY]  if(entryOffset  >  0  ||  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >  0  ||  totalRead  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  0  ||  totalRead  ==  -1)  {	  if(entryOffset    >    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
91	[BUG]  [BUGGY]  if(entryOffset  <  -1  ||  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  -1  ||  totalRead  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  -1  ||  totalRead  ==  -1)  {	  if(entryOffset    >    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
92	[BUG]  [BUGGY]  if(numToRead  >  -1  ||  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  >  -1  ||  totalRead  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  >  -1  ||  totalRead  ==  -1)  {	  if(entryOffset    >    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
93	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  i.remove();  hasHitEOF  =  false;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	i.remove();  hasHitEOF  =  false;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
94	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
95	[BUG]  [BUGGY]  if(!shouldReset)  {  i.remove();  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(!shouldReset)  {  i.remove();  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(!shouldReset)  {  i.remove();  hasHitEOF  =  true;  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
96	[BUG]  [BUGGY]  n.remove();  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  n.remove();  hasHitEOF  =  true;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	n.remove();  hasHitEOF  =  true;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
97	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
98	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  entryOffset  +=  numToRead;  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
99	[BUG]  [BUGGY]  if(entryOffset  +  numToRead  >=  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  +  numToRead  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  numToRead  >=  0)  {	  if(entryOffset    +    totalRead    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
100	[BUG]  [BUGGY]  if(entryOffset  +  numToRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  +  numToRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  numToRead  ==  0)  {	  if(entryOffset    +    totalRead    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
101	[BUG]  [BUGGY]  if(entryOffset  +  numToRead  >>  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  +  numToRead  >>  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  numToRead  >>  0)  {	  if(entryOffset    +    totalRead    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
102	[BUG]  [BUGGY]  if(entryOffset  +  numToRead!=  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  +  numToRead!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  numToRead!=  0)  {	  if(entryOffset    +    totalRead    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
103	[BUG]  [BUGGY]  if(numToRead  +  totalRead  >=  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  +  totalRead  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  +  totalRead  >=  0)  {	  if(entryOffset    +    totalRead    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
104	[BUG]  [BUGGY]  if(entryOffset  +  numToRead  >  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  +  numToRead  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  numToRead  >  0)  {	  if(entryOffset    +    totalRead    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
105	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  entrySize  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  ||  entrySize  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  ||  entrySize  ==  -1)  {	  if(entryOffset    ==    -1    ||    entrySize    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
106	[BUG]  [BUGGY]  if(entrySize  ==  -1  ||  entryOffset  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entrySize  ==  -1  ||  entryOffset  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize  ==  -1  ||  entryOffset  ==  -1)  {	  if(entryOffset    ==    -1    ||    entrySize    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
107	[BUG]  [BUGGY]  if(entryOffset  ==  -1  &&  entrySize  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  &&  entrySize  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  &&  entrySize  ==  -1)  {	  if(entryOffset    ==    -1    ||    entrySize    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
108	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  entrySize  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  ||  entrySize  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  ||  entrySize  ==  0)  {	  if(entryOffset    ==    -1    ||    entrySize    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
109	[BUG]  [BUGGY]  if(entryOffset  ==  -1  ||  entrySize  ==  -1  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  ||  entrySize  ==  -1  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  ||  entrySize  ==  -1  ||  hasHitEOF)  {	  if(entryOffset    ==    -1    ||    entrySize    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
110	[BUG]  [BUGGY]  if(numToRead  >=  0  ||  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  >=  0  ||  totalRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  >=  0  ||  totalRead  ==  0)  {	  if(entryOffset    >=    0    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
111	[BUG]  [BUGGY]  if(numToRead  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  >  0)  {	  if(entryOffset    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
112	[BUG]  [BUGGY]  if(numToRead  ==  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  ==  0  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  0  ||  hasHitEOF)  {	  if(entryOffset    ==    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
113	[BUG]  [BUGGY]  if(entrySize  ==  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entrySize  ==  0  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize  ==  0  ||  hasHitEOF)  {	  if(entryOffset    ==    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
114	[BUG]  [BUGGY]  if(entryOffset  >  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >  0  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  0  ||  hasHitEOF)  {	  if(entryOffset    >    -1    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
115	[BUG]  [BUGGY]  if(entryOffset  <  -1  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  -1  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  -1  ||  hasHitEOF)  {	  if(entryOffset    >    -1    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
116	[BUG]  [BUGGY]  if(entryOffset  >  -1  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >  -1  &&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  -1  &&  hasHitEOF)  {	  if(entryOffset    >    -1    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
117	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  ==  numRecords)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  ==  numRecords)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  totalRead  ==  numRecords)  {	  if(entryOffset    <    0    ||    totalRead    >    numRecords)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
118	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  >=  numRecords)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  >=  numRecords)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  totalRead  >=  numRecords)  {	  if(entryOffset    <    0    ||    totalRead    >    numRecords)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
119	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead!=  numRecords)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead!=  numRecords)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  totalRead!=  numRecords)  {	  if(entryOffset    <    0    ||    totalRead    >    numRecords)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
120	[BUG]  [BUGGY]  if(numToRead  <  0  ||  totalRead  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  <  0  ||  totalRead  >  entrySize)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  <  0  ||  totalRead  >  entrySize)  {	  if(entryOffset    <    0    ||    totalRead    >    numRecords)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
121	[BUG]  [BUGGY]  if(numToRead  <  0  ||  totalRead  >  numRecords)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  <  0  ||  totalRead  >  numRecords)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  <  0  ||  totalRead  >  numRecords)  {	  if(entryOffset    <    0    ||    totalRead    >    numRecords)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
122	[BUG]  [BUGGY]  if(numRecords  <  0  ||  totalRead  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numRecords  <  0  ||  totalRead  >  entrySize)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numRecords  <  0  ||  totalRead  >  entrySize)  {	  if(entryOffset    <    0    ||    totalRead    >    numRecords)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
123	[BUG]  [BUGGY]  if(entryOffset  ==  -1  ||  entrySize!=  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  ||  entrySize!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  ||  entrySize!=  0)  {	  if(entryOffset    ==    -1    ||    totalRead!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
124	[BUG]  [BUGGY]  if(entryOffset  ==  -1  ||  totalRead  >=  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  ||  totalRead  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  ||  totalRead  >=  0)  {	  if(entryOffset    ==    -1    ||    totalRead!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
125	[BUG]  [BUGGY]  if(numToRead  ==  -1  ||  totalRead!=  0)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  ==  -1  ||  totalRead!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  -1  ||  totalRead!=  0)  {	  if(entryOffset    ==    -1    ||    totalRead!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
126	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  numRecords.length)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  numRecords.length)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  entrySize  >  numRecords.length)  {	  if(entryOffset    <    0    ||    entrySize    <    numRecords.length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
127	[BUG]  [BUGGY]  if(numToRead  <  0  ||  entrySize  <  numRecords.length)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  <  0  ||  entrySize  <  numRecords.length)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  <  0  ||  entrySize  <  numRecords.length)  {	  if(entryOffset    <    0    ||    entrySize    <    numRecords.length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
128	[BUG]  [BUGGY]  if(entryOffset  >=  0  ||  entrySize  <  numRecords.length)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  0  ||  entrySize  <  numRecords.length)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  0  ||  entrySize  <  numRecords.length)  {	  if(entryOffset    <    0    ||    entrySize    <    numRecords.length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
129	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  >=  numRecords.length)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  entrySize  >=  numRecords.length)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  entrySize  >=  numRecords.length)  {	  if(entryOffset    <    0    ||    entrySize    <    numRecords.length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
130	[BUG]  [BUGGY]  if(entrySize  <  0  ||  entryOffset  <  numRecords.length)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entrySize  <  0  ||  entryOffset  <  numRecords.length)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize  <  0  ||  entryOffset  <  numRecords.length)  {	  if(entryOffset    <    0    ||    entrySize    <    numRecords.length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
131	[BUG]  [BUGGY]  if(numRecords  <  0  ||  entrySize  <  entryOffset.length)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numRecords  <  0  ||  entrySize  <  entryOffset.length)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numRecords  <  0  ||  entrySize  <  entryOffset.length)  {	  if(entryOffset    <    0    ||    entrySize    <    numRecords.length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
132	[BUG]  [BUGGY]  if(entryOffset!=  0  &&  currEntry.getMethod()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  0  &&  currEntry.getMethod()  ==  Token.GETPROP)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  0  &&  currEntry.getMethod()  ==  Token.GETPROP)  {	  if(entryOffset!=    -1    &&    currEntry.getMethod()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
133	[BUG]  [BUGGY]  if(entryOffset  ==  -1  &&  currEntry.getMethod()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  &&  currEntry.getMethod()  ==  Token.GETPROP)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  &&  currEntry.getMethod()  ==  Token.GETPROP)  {	  if(entryOffset!=    -1    &&    currEntry.getMethod()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
134	[BUG]  [BUGGY]  if(entryOffset  ==  0  &&  currEntry.getMethod()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  &&  currEntry.getMethod()  ==  Token.GETPROP)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  &&  currEntry.getMethod()  ==  Token.GETPROP)  {	  if(entryOffset!=    -1    &&    currEntry.getMethod()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
135	[BUG]  [BUGGY]  if(entryOffset  >=  0  &&  currEntry.getMethod()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  0  &&  currEntry.getMethod()  ==  Token.GETPROP)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  0  &&  currEntry.getMethod()  ==  Token.GETPROP)  {	  if(entryOffset!=    -1    &&    currEntry.getMethod()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
136	[BUG]  [BUGGY]  if(entryOffset  >=  -1  &&  currEntry.getMethod()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  -1  &&  currEntry.getMethod()  ==  Token.GETPROP)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  -1  &&  currEntry.getMethod()  ==  Token.GETPROP)  {	  if(entryOffset!=    -1    &&    currEntry.getMethod()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
137	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  currEntry.getMethod()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  -1  &&  currEntry.getMethod()  ==  Token.GETELEM)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  &&  currEntry.getMethod()  ==  Token.GETELEM)  {	  if(entryOffset!=    -1    &&    currEntry.getMethod()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
138	[BUG]  [BUGGY]  if(numToRead!=  -1  &&  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead!=  -1  &&  totalRead  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead!=  -1  &&  totalRead  ==  -1)  {	  if(entryOffset!=    -1    &&    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
139	[BUG]  [BUGGY]  if(numToRead  ==  0  ||  numToRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  ==  0  ||  numToRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  0  ||  numToRead  ==  0)  {	  if(numToRead    ==    -1    ||    numToRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
140	[BUG]  [BUGGY]  if(numToRead  ==  -1  ||  numToRead  >  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  ==  -1  ||  numToRead  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  -1  ||  numToRead  >  0)  {	  if(numToRead    ==    -1    ||    numToRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
141	[BUG]  [BUGGY]  if(numToRead  ==  -1  ||  numToRead  <  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  ==  -1  ||  numToRead  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  -1  ||  numToRead  <  0)  {	  if(numToRead    ==    -1    ||    numToRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
142	[BUG]  [BUGGY]  if(numToRead  ==  -1  ||  numToRead!=  0)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  ==  -1  ||  numToRead!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  -1  ||  numToRead!=  0)  {	  if(numToRead    ==    -1    ||    numToRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
143	[BUG]  [BUGGY]  if(entryOffset  ==  -1  ||  entrySize  ==  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  ||  entrySize  ==  SMALL_BUFFER_SIZE)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  ||  entrySize  ==  SMALL_BUFFER_SIZE)  {	  if(entrySize    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
144	[BUG]  [BUGGY]  if(numToRead  ==  -1  &&  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  ==  -1  &&  totalRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  -1  &&  totalRead  ==  0)  {	  if(entryOffset    ==    -1    &&    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
145	[BUG]  [BUGGY]  if(entryOffset  ==  0  &&  totalRead!=  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  &&  totalRead!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  &&  totalRead!=  0)  {	  if(entryOffset    ==    -1    &&    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
146	[BUG]  [BUGGY]  int  ch  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  ch  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  ch  =  currEntry.read(buf,  offset,  numToRead);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
147	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
148	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  ch  =  is.read(buf,  offset,  totalRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  ch  =  is.read(buf,  offset,  totalRead);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
149	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  ch  =  is.read(buf,  offset,  numToRead,  len);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
150	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  count(numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  ch  =  is.read(buf,  offset,  count(numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  ch  =  is.read(buf,  offset,  count(numToRead);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
151	[BUG]  [BUGGY]  byte  ch  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  byte  ch  =  is.read(buf,  offset,  numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	byte  ch  =  is.read(buf,  offset,  numToRead);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
152	[BUG]  [BUGGY]  if(numToRead!=  0  ||  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead!=  0  ||  totalRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead!=  0  ||  totalRead  ==  0)  {	  if(entryOffset!=    0    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
153	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  entrySize  ==  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  ||  entrySize  ==  SMALL_BUFFER_SIZE)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  ||  entrySize  ==  SMALL_BUFFER_SIZE)  {	  if(entrySize    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
154	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  entrySize  ==  numRecords)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  ||  entrySize  ==  numRecords)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  ||  entrySize  ==  numRecords)  {	  if(entrySize    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
155	[BUG]  [BUGGY]  if(entryOffset!=  0  ||  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  0  ||  totalRead  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  0  ||  totalRead  ==  -1)  {	  if(entryOffset!=    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
156	[BUG]  [BUGGY]  if(numToRead!=  -1  ||  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead!=  -1  ||  totalRead  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead!=  -1  ||  totalRead  ==  -1)  {	  if(entryOffset!=    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
157	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	readNow  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
158	[BUG]  [BUGGY]  readNow  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  readNow  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	readNow  =  currEntry.read(buf,  offset,  numToRead);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
159	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  readNow  =  is.read(buf,  offset,  totalRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	readNow  =  is.read(buf,  offset,  totalRead);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
160	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	readNow  =  is.read(buf,  offset,  numToRead,  len);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
161	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  count(numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  readNow  =  is.read(buf,  offset,  count(numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	readNow  =  is.read(buf,  offset,  count(numToRead);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
162	[BUG]  [BUGGY]  if(entryOffset  +  numToRead  <  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  +  numToRead  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  numToRead  <  0)  {	  if(entryOffset    +    totalRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
163	[BUG]  [BUGGY]  if(numToRead  +  totalRead  <  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  +  totalRead  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  +  totalRead  <  0)  {	  if(entryOffset    +    totalRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
164	[BUG]  [BUGGY]  if(entryOffset  +  totalRead  <  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  +  totalRead  <  0  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  totalRead  <  0  ||  hasHitEOF)  {	  if(entryOffset    +    totalRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
165	[BUG]  [BUGGY]  if(entryOffset  +  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  +  totalRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  totalRead  ==  0)  {	  if(entryOffset    +    totalRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
166	[BUG]  [BUGGY]  if(numToRead  <  0  ||  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  <  0  ||  totalRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  <  0  ||  totalRead  ==  0)  {	  if(entryOffset    <    0    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
167	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead!=  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  totalRead!=  0)  {	  if(entryOffset    <    0    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
168	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  totalRead  >  0)  {	  if(entryOffset    <    0    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
169	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  >=  0)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  totalRead  >=  0)  {	  if(entryOffset    <    0    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
170	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
171	[BUG]  [BUGGY]  int  ch  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  ch  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  ch  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
172	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
173	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
174	[BUG]  [BUGGY]  Integer  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  Integer  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	Integer  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
175	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	readNow  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;	  readNow    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
176	[BUG]  [BUGGY]  readNow  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  readNow  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	readNow  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  readNow    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
177	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  totalRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  totalRead);	  InputStream    is    =    currEntry.getInputStream();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
178	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getErrorStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getErrorStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getErrorStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);	  InputStream    is    =    currEntry.getInputStream();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
179	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  InputStream    is    =    currEntry.getInputStream();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
180	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getRecordSize();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getRecordSize();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getRecordSize();  hasHitEOF  =  is.read(buf,  offset,  numToRead);	  InputStream    is    =    currEntry.getInputStream();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
181	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getRawInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getRawInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getRawInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);	  InputStream    is    =    currEntry.getInputStream();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
182	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead  +  1);	  InputStream    is    =    currEntry.getInputStream();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
183	[BUG]  [BUGGY]  if(entrySize  ==  -1  ||  entryOffset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entrySize  ==  -1  ||  entryOffset  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize  ==  -1  ||  entryOffset  ==  0)  {	  if(entryOffset    ==    -1    ||    entrySize    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
184	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  entrySize  ==  numRecords.length)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  ||  entrySize  ==  numRecords.length)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  ||  entrySize  ==  numRecords.length)  {	  if(entryOffset    ==    -1    ||    entrySize    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
185	[BUG]  [BUGGY]  if(entryOffset  ==  -1  ||  entrySize  >  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  ||  entrySize  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  ||  entrySize  >  0)  {	  if(entryOffset    ==    -1    ||    entrySize    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
186	[BUG]  [BUGGY]  if(entryOffset!=  -1  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  -1  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  ||  hasHitEOF)  {	  if(entryOffset    ==    -1    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
187	[BUG]  [BUGGY]  int  entrySize  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  entrySize  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  entrySize  =  currEntry.read(buf,  offset,  numToRead);	  int    entrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
188	[BUG]  [BUGGY]  int  entrySize  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  entrySize  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  entrySize  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  int    entrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
189	[BUG]  [BUGGY]  int  entrySize  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  entrySize  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  entrySize  =  is.read(buf,  offset,  numToRead,  len);	  int    entrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
190	[BUG]  [BUGGY]  int  entrySize  =  is.read(buf,  offset,  numToRead,  blockSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  entrySize  =  is.read(buf,  offset,  numToRead,  blockSize);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  entrySize  =  is.read(buf,  offset,  numToRead,  blockSize);	  int    entrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
191	[BUG]  [BUGGY]  int  entrySize  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  entrySize  =  is.read(buf,  offset,  totalRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  entrySize  =  is.read(buf,  offset,  totalRead);	  int    entrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
192	[BUG]  [BUGGY]  long  entrySize  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  long  entrySize  =  is.read(buf,  offset,  numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	long  entrySize  =  is.read(buf,  offset,  numToRead);	  int    entrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
193	[BUG]  [BUGGY]  if(numToRead  +  totalRead  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  +  totalRead  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  +  totalRead  >  0)  {	  if(entryOffset    +    totalRead    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
194	[BUG]  [BUGGY]  if(offset  +  totalRead  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(offset  +  totalRead  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(offset  +  totalRead  >  0)  {	  if(entryOffset    +    totalRead    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
195	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  >=  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  >=  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
196	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  ==  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
197	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  >  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  >  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
198	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead!=  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead!=  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
199	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  >=  0)  {  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  >=  0)  {  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
200	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  <  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  <  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
201	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  0)  {  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  0)  {  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
202	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  totalRead  ==  -1  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  ||  totalRead  ==  -1  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  ||  totalRead  ==  -1  ||  hasHitEOF)  {	  if(entryOffset    ==    0    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
203	[BUG]  [BUGGY]  if(numToRead!=  -1  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead!=  -1  &&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead!=  -1  &&  hasHitEOF)  {	  if(entryOffset!=    -1    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
204	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  offset;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  offset;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numRecords  >  0)  {  for(int  i  =  offset;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    0)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
205	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize  >  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    0)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
206	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    0)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
207	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numRecords  >  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    0)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
208	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  offset;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  offset;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numRecords  <  0)  {  for(int  i  =  offset;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    0)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
209	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  offset;  i  <  totalRead;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  offset;  i  <  totalRead;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numRecords  >  0)  {  for(int  i  =  offset;  i  <  totalRead;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    0)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
210	[BUG]  [BUGGY]  int  entrySize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  entrySize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  entrySize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;	  int    entrySize    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
211	[BUG]  [BUGGY]  int  entrySize  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  entrySize  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  entrySize  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  int    entrySize    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
212	[BUG]  [BUGGY]  long  entrySize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  long  entrySize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	long  entrySize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  int    entrySize    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
213	[BUG]  [BUGGY]  byte  entrySize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  byte  entrySize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	byte  entrySize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  int    entrySize    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
214	[BUG]  [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  hasHitEOF  =  is.read(buf,  offset,  numToRead);	  int    entrySize    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
215	[BUG]  [BUGGY]  if(entryOffset!=  0  &&  is.read(buf,  offset,  totalRead))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  0  &&  is.read(buf,  offset,  totalRead))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  0  &&  is.read(buf,  offset,  totalRead))  {	  if(entryOffset!=    -1    &&    is.read(buf,    offset,    totalRead))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
216	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  -1  &&  is.read(buf,  offset,  numToRead))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  &&  is.read(buf,  offset,  numToRead))  {	  if(entryOffset!=    -1    &&    is.read(buf,    offset,    totalRead))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
217	[BUG]  [BUGGY]  if(numToRead!=  -1  &&  is.read(buf,  offset,  totalRead))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead!=  -1  &&  is.read(buf,  offset,  totalRead))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead!=  -1  &&  is.read(buf,  offset,  totalRead))  {	  if(entryOffset!=    -1    &&    is.read(buf,    offset,    totalRead))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
218	[BUG]  [BUGGY]  if(numToRead!=  0  &&  is.read(buf,  offset,  totalRead))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead!=  0  &&  is.read(buf,  offset,  totalRead))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead!=  0  &&  is.read(buf,  offset,  totalRead))  {	  if(entryOffset!=    -1    &&    is.read(buf,    offset,    totalRead))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
219	[BUG]  [BUGGY]  if(entryOffset  ==  0  &&  is.read(buf,  offset,  totalRead))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  &&  is.read(buf,  offset,  totalRead))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  &&  is.read(buf,  offset,  totalRead))  {	  if(entryOffset!=    -1    &&    is.read(buf,    offset,    totalRead))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
220	[BUG]  [BUGGY]  if(numToRead!=  -1  &&  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead!=  -1  &&  is.read(buf,  offset,  numToRead))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead!=  -1  &&  is.read(buf,  offset,  numToRead))  {	  if(entryOffset!=    -1    &&    is.read(buf,    offset,    totalRead))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
221	[BUG]  [BUGGY]  if(offset!=  -1  &&  is.read(buf,  offset,  totalRead))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(offset!=  -1  &&  is.read(buf,  offset,  totalRead))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(offset!=  -1  &&  is.read(buf,  offset,  totalRead))  {	  if(entryOffset!=    -1    &&    is.read(buf,    offset,    totalRead))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
222	[BUG]  [BUGGY]  if(entryOffset!=  0  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  0  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  0  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(entryOffset!=    -1    &&    currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
223	[BUG]  [BUGGY]  if(entryOffset  ==  0  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(entryOffset!=    -1    &&    currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
224	[BUG]  [BUGGY]  if(entryOffset  ==  -1  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(entryOffset!=    -1    &&    currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
225	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  -1  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(entryOffset!=    -1    &&    currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
226	[BUG]  [BUGGY]  if(entryOffset  >=  0  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  0  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  0  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(entryOffset!=    -1    &&    currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
227	[BUG]  [BUGGY]  if(numToRead!=  -1  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead!=  -1  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead!=  -1  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(entryOffset!=    -1    &&    currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
228	[BUG]  [BUGGY]  if(entryOffset  ==  -1  ||  totalRead!=  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  ||  totalRead!=  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  ||  totalRead!=  hasHitEOF)  {	  if(entryOffset    ==    -1    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
229	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  ch  =  is.read(buf,  offset,  numToRead  +  1);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
230	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  ch  =  is.read(buf,  offset,  0,  numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  ch  =  is.read(buf,  offset,  0,  numToRead);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
231	[BUG]  [BUGGY]  if  (entryOffset  >  -1  ||  totalRead  >  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if  (entryOffset  >  -1  ||  totalRead  >  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if  (entryOffset  >  -1  ||  totalRead  >  -1)  {	  if    (numToRead    >    -1)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
232	[BUG]  [BUGGY]  if  (entryOffset  >  -1  ||  totalRead  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if  (entryOffset  >  -1  ||  totalRead  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if  (entryOffset  >  -1  ||  totalRead  >  0)  {	  if    (numToRead    >    -1)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
233	[BUG]  [BUGGY]  if(entryOffset  +  totalRead!=  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  +  totalRead!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  totalRead!=  0)  {	  if(entryOffset    +    totalRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
234	[BUG]  [BUGGY]  if(entryOffset  +  totalRead  *  numRecords  <  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  +  totalRead  *  numRecords  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  totalRead  *  numRecords  <  0)  {	  if(entryOffset    +    totalRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
235	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  totalRead  >  -1)  {	  if(entryOffset    <    0    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
236	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entrySize  >=  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize  >=  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
237	[BUG]  [BUGGY]  if(numRecords  <  0  ||  totalRead  >  entryOffset)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numRecords  <  0  ||  totalRead  >  entryOffset)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numRecords  <  0  ||  totalRead  >  entryOffset)  {	  if(entryOffset    <    0    ||    totalRead    >    numRecords)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
238	[BUG]  [BUGGY]  if(entryOffset  >=  0  ||  totalRead  >  numRecords)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  0  ||  totalRead  >  numRecords)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  0  ||  totalRead  >  numRecords)  {	  if(entryOffset    <    0    ||    totalRead    >    numRecords)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
239	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  totalRead!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  -1  &&  totalRead!=  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  &&  totalRead!=  -1)  {	  if(numToRead!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
240	[BUG]  [BUGGY]  if(entryOffset  ==  -1  &&  entrySize  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  &&  entrySize  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  &&  entrySize  ==  0)  {	  if(entryOffset    ==    -1    ||    entrySize    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
241	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  entrySize  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  entrySize  ==  0)  {	  if(entryOffset    ==    -1    ||    entrySize    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
242	[BUG]  [BUGGY]  if(entryOffset  >=  0  ||  entrySize  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  0  ||  entrySize  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  0  ||  entrySize  ==  0)  {	  if(entryOffset    ==    -1    ||    entrySize    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
243	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	ch  =  is.read(buf,  offset,  numToRead  +  1);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
244	[BUG]  [BUGGY]  if(entryOffset  >=  -1  &&  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  -1  &&  totalRead  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  -1  &&  totalRead  ==  -1)  {	  if(entryOffset!=    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
245	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead  +  1);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
246	[BUG]  [BUGGY]  if(entryOffset  >=  numToRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  numToRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  numToRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    <    numToRead)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
247	[BUG]  [BUGGY]  if(entryOffset  ==  numToRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  numToRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  numToRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    <    numToRead)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
248	[BUG]  [BUGGY]  if(entryOffset!=  numToRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  numToRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  numToRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    <    numToRead)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
249	[BUG]  [BUGGY]  if(entryOffset  ==  -1  ||  numToRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  ||  numToRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  ||  numToRead  ==  0)  {	  if(numToRead    ==    -1    ||    numToRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
250	[BUG]  [BUGGY]  if(numToRead  ==  -1  ||  numToRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numToRead  ==  -1  ||  numToRead  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  -1  ||  numToRead  ==  -1)  {	  if(numToRead    ==    -1    ||    numToRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
251	[BUG]  [BUGGY]  int  entrySize  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  entrySize  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  entrySize  =  is.read(buf,  offset,  numToRead  +  1);	  int    entrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
252	[BUG]  [BUGGY]  int  entrySize  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  entrySize  =  is.read(buf,  offset,  0);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  entrySize  =  is.read(buf,  offset,  0);	  int    entrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
253	[BUG]  [BUGGY]  if(entryOffset  +  totalRead  *  numToRead  >=  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  +  totalRead  *  numToRead  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  totalRead  *  numToRead  >=  0)  {	  if(entryOffset    +    totalRead    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
254	[BUG]  [BUGGY]  if(entryOffset  +  totalRead  *  numRecords  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  +  totalRead  *  numRecords  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  totalRead  *  numRecords  >  0)  {	  if(entryOffset    +    totalRead    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
255	[BUG]  [BUGGY]  if(entryOffset  +  totalRead  *  numRecords  >=  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  +  totalRead  *  numRecords  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  totalRead  *  numRecords  >=  0)  {	  if(entryOffset    +    totalRead    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
256	[BUG]  [BUGGY]  if(offset  +  totalRead  >=  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(offset  +  totalRead  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(offset  +  totalRead  >=  0)  {	  if(entryOffset    +    totalRead    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
257	[BUG]  [BUGGY]  if(currEntry!=  null  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(currEntry!=  null  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(currEntry!=  null  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(entryOffset!=    -1    &&    currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
258	[BUG]  [BUGGY]  if(currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(entryOffset!=    -1    &&    currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
259	[BUG]  [BUGGY]  if(entryOffset  +  totalRead  *  numToRead  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  +  totalRead  *  numToRead  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  totalRead  *  numToRead  >  0)  {	  if(entryOffset    +    totalRead    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
260	[BUG]  [BUGGY]  if(entryOffset  +  totalRead  >  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  +  totalRead  >  0  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  totalRead  >  0  ||  hasHitEOF)  {	  if(entryOffset    +    totalRead    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
261	[BUG]  [BUGGY]  if(entryOffset  +  totalRead  >  1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  +  totalRead  >  1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  totalRead  >  1)  {	  if(entryOffset    +    totalRead    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
262	[BUG]  [BUGGY]  if(entryOffset  ==  -1  &&  totalRead!=  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  &&  totalRead!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  &&  totalRead!=  0)  {	  if(entryOffset    ==    -1    ||    totalRead!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
263	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  totalRead!=  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  -1  &&  totalRead!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  &&  totalRead!=  0)  {	  if(entryOffset    ==    -1    ||    totalRead!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
264	[BUG]  [BUGGY]  if(entryOffset  >=  -1  &&  totalRead!=  0)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  -1  &&  totalRead!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  -1  &&  totalRead!=  0)  {	  if(entryOffset    ==    -1    ||    totalRead!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
265	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
266	[BUG]  [BUGGY]  i.set();  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  i.set();  hasHitEOF  =  true;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	i.set();  hasHitEOF  =  true;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
267	[BUG]  [BUGGY]  i.remove();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  i.remove();  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	i.remove();	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
268	[BUG]  [BUGGY]  if(entryOffset  >  0  &&  totalRead!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >  0  &&  totalRead!=  null)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  0  &&  totalRead!=  null)  {	  if(entryOffset    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
269	[BUG]  [BUGGY]  if(currEntry!=  null)  {  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(currEntry!=  null)  {  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(currEntry!=  null)  {  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }	  InputStream    is    =    currEntry.getInputStream();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
270	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getOutputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getOutputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getOutputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);	  InputStream    is    =    currEntry.getInputStream();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
271	[BUG]  [BUGGY]  if(currEntry!=  null)  {  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  else  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(currEntry!=  null)  {  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  else  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(currEntry!=  null)  {  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  else  {	  InputStream    is    =    currEntry.getInputStream();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
272	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  totalRead  >  hasHitEOF)  {	  if(entryOffset    <    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
273	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	readNow  =  is.read(buf,  offset,  numToRead  +  1);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
274	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    0)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
275	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  offset;  i  <  entryOffset;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  offset;  i  <  entryOffset;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numRecords  >  0)  {  for(int  i  =  offset;  i  <  entryOffset;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    0)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
276	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numRecords  >  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    0)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
277	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  totalRead  >=  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  -1  &&  totalRead  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  &&  totalRead  >=  0)  {	  if(entryOffset!=    -1    &&    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
278	[BUG]  [BUGGY]  if(entryOffset  >=  -1  &&  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  -1  &&  totalRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  -1  &&  totalRead  ==  0)  {	  if(entryOffset!=    -1    &&    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
279	[BUG]  [BUGGY]  if(entryOffset  ==  -1  &&  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  &&  is.read(buf,  offset,  numToRead))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  &&  is.read(buf,  offset,  numToRead))  {	  if(entryOffset!=    -1    &&    is.read(buf,    offset,    totalRead))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
280	[BUG]  [BUGGY]  if(hasHitEOF  &&  is.read(buf,  offset,  totalRead))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(hasHitEOF  &&  is.read(buf,  offset,  totalRead))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(hasHitEOF  &&  is.read(buf,  offset,  totalRead))  {	  if(entryOffset!=    -1    &&    is.read(buf,    offset,    totalRead))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
281	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  currEntry.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  -1  &&  currEntry.read(buf,  offset,  numToRead))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  &&  currEntry.read(buf,  offset,  numToRead))  {	  if(entryOffset!=    -1    &&    is.read(buf,    offset,    totalRead))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
282	[BUG]  [BUGGY]  if(entrySize  >  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entrySize  >  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize  >  -1)  {	  if(entrySize    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
283	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  totalRead  >  SMALL_BUFFER_SIZE)  {	  if(entryOffset    <    0    ||    entrySize    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
284	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  numRecords)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  numRecords)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  entrySize  >  numRecords)  {	  if(entryOffset    <    0    ||    entrySize    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
285	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {	  if(entryOffset    <    0    ||    entrySize    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
286	[BUG]  [BUGGY]  if(entryOffset  >  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {	  if(entryOffset    <    0    ||    entrySize    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
287	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream(totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getInputStream(totalRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getInputStream(totalRead);	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
288	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream(offset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getInputStream(offset);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getInputStream(offset);	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
289	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream(i);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getInputStream(i);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getInputStream(i);	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
290	[BUG]  [BUGGY]  if(entryOffset  >  -1  &&  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >  -1  &&  totalRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  -1  &&  totalRead  ==  0)  {	  if(entryOffset    >    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
291	[BUG]  [BUGGY]  if(entryOffset  ==  -1  &&  currEntry.getMethod()!=  Token.GETPROP)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  &&  currEntry.getMethod()!=  Token.GETPROP)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  &&  currEntry.getMethod()!=  Token.GETPROP)  {	  if(entryOffset!=    -1    &&    currEntry.getMethod()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
292	[BUG]  [BUGGY]  if(entryOffset  >>  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >>  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >>  0)  {	  if(entryOffset!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
293	[BUG]  [BUGGY]  if(entryOffset  >  -1  &&  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >  -1  &&  totalRead  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  -1  &&  totalRead  ==  -1)  {	  if(entryOffset    >    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
294	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  is.readNow())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  -1  &&  is.readNow())  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  &&  is.readNow())  {	  if(entryOffset!=    -1    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
295	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  totalRead;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  totalRead;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize  >  0)  {  for(int  i  =  0;  i  <  totalRead;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
296	[BUG]  [BUGGY]  Integer  ch  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  Integer  ch  =  is.read(buf,  offset,  numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	Integer  ch  =  is.read(buf,  offset,  numToRead);	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
297	[BUG]  [BUGGY]  int  numRecords  =  totalRead.length;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  numRecords  =  totalRead.length;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  numRecords  =  totalRead.length;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
298	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  <  numRecords.length)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  <  numRecords.length)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  totalRead  <  numRecords.length)  {	  if(entryOffset    <    0    ||    entrySize    <    numRecords.length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
299	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  entrySize  <  numRecords.length)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  ||  entrySize  <  numRecords.length)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  ||  entrySize  <  numRecords.length)  {	  if(entryOffset    <    0    ||    entrySize    <    numRecords.length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
300	[BUG]  [BUGGY]  if(entryOffset!=  0  ||  entrySize  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  0  ||  entrySize  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  0  ||  entrySize  ==  0)  {	  if(entryOffset    ==    -1    ||    entrySize    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
301	[BUG]  [BUGGY]  if(entryOffset!=  -1  ||  entrySize  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  -1  ||  entrySize  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  ||  entrySize  ==  0)  {	  if(entryOffset    ==    -1    ||    entrySize    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
302	[BUG]  [BUGGY]  if(entryOffset  *  totalRead  <  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  *  totalRead  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  *  totalRead  <  0)  {	  if(entryOffset    +    totalRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
303	[BUG]  [BUGGY]  if(hashEOF)  {  int  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(hashEOF)  {  int  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(hashEOF)  {  int  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  }	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
304	[BUG]  [BUGGY]  if(hashEOF)  {  int  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(hashEOF)  {  int  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(hashEOF)  {  int  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  }  else  {  entryOffset  +=  numToRead;  }	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
305	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  is.readNow  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  -1  &&  is.readNow  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  &&  is.readNow  ==  -1)  {	  if(entryOffset!=    -1    &&    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
306	[BUG]  [BUGGY]  if(entryOffset  >  0  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >  0  &&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  0  &&  hasHitEOF)  {	  if(entryOffset    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
307	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
308	[BUG]  [BUGGY]  if(entryOffset  >  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
309	[BUG]  [BUGGY]  if(entryOffset!=  -1  ||  totalRead!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  -1  ||  totalRead!=  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  ||  totalRead!=  -1)  {	  if(entryOffset    ==    -1    ||    totalRead!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
310	[BUG]  [BUGGY]  if(entryOffset  >=  0  ||  totalRead!=  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  0  ||  totalRead!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  0  ||  totalRead!=  0)  {	  if(entryOffset    ==    -1    ||    totalRead!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
311	[BUG]  [BUGGY]  int  entrySize  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  entrySize  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  entrySize  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;	  int    entrySize    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
312	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  ch  =  is.read(buf,  offset,  0);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  ch  =  is.read(buf,  offset,  0);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
313	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  totalRead  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  -1  &&  totalRead  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  &&  totalRead  <  =  0)  {	  if(entryOffset!=    -1    &&    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
314	[BUG]  [BUGGY]  if(entryOffset  *  totalRead  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  *  totalRead  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  *  totalRead  >  0)  {	  if(entryOffset    +    totalRead    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
315	[BUG]  [BUGGY]  if(entryOffset  ==  -1  &&  is.read(buf,  offset,  totalRead))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  -1  &&  is.read(buf,  offset,  totalRead))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  &&  is.read(buf,  offset,  totalRead))  {	  if(entryOffset!=    -1    &&    is.read(buf,    offset,    totalRead))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
316	[BUG]  [BUGGY]  if(entryOffset  >=  0  &&  is.read(buf,  offset,  totalRead))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >=  0  &&  is.read(buf,  offset,  totalRead))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  0  &&  is.read(buf,  offset,  totalRead))  {	  if(entryOffset!=    -1    &&    is.read(buf,    offset,    totalRead))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
317	[BUG]  [BUGGY]  if(entryOffset!=  0  &&  is.read(buf,  offset,  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  0  &&  is.read(buf,  offset,  hasHitEOF))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  0  &&  is.read(buf,  offset,  hasHitEOF))  {	  if(entryOffset!=    -1    &&    is.read(buf,    offset,    totalRead))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
318	[BUG]  [BUGGY]  int  numRecords  =  entrySize;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  numRecords  =  entrySize;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  numRecords  =  entrySize;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
319	[BUG]  [BUGGY]  InputStream  is  =  i.getInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  i.getInputStream();  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  i.getInputStream();	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
320	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  this.currEntry.getInputStream();  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  this.currEntry.getInputStream();	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
321	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  0);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  0);	  InputStream    is    =    currEntry.getInputStream();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
322	[BUG]  [BUGGY]  InputStream  is  =  i.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  i.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  i.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);	  InputStream    is    =    currEntry.getInputStream();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
323	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  count(numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  count(numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  count(numToRead);	  InputStream    is    =    currEntry.getInputStream();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
324	[BUG]  [BUGGY]  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  hasHitEOF  =  true;  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	hasHitEOF  =  true;	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
325	[BUG]  [BUGGY]  int  entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
326	[BUG]  [BUGGY]  if(entryOffset!=  -1  ||  totalRead!=  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  -1  ||  totalRead!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  ||  totalRead!=  0)  {	  if(entryOffset    ==    -1    ||    totalRead!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
327	[BUG]  [BUGGY]  if(entryOffset!=  0  ||  totalRead!=  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  0  ||  totalRead!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  0  ||  totalRead!=  0)  {	  if(entryOffset    ==    -1    ||    totalRead!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
328	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  padding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  padding);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead,  padding);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
329	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  count(numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  count(numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  numRecords  =  is.read(buf,  offset,  count(numToRead);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
330	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  numRecords  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  numRecords  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  totalRead  >  numRecords  ||  hasHitEOF)  {	  if(entryOffset    <    0    ||    totalRead    >    numRecords)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
331	[BUG]  [BUGGY]  int  entrySize  =  is.read(buf,  offset,  count(numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  int  entrySize  =  is.read(buf,  offset,  count(numToRead);  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  entrySize  =  is.read(buf,  offset,  count(numToRead);	  int    entrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
332	[BUG]  [BUGGY]  if(entryOffset!=  -1  ||  entrySize  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset!=  -1  ||  entrySize  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  ||  entrySize  ==  -1)  {	  if(entryOffset    ==    -1    ||    entrySize    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
333	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0  ||  entrySize  ==  -1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  entrySize  ==  -1)  {	  if(entryOffset    ==    -1    ||    entrySize    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
334	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  numToRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  ==  0  ||  numToRead  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  ||  numToRead  ==  0)  {	  if(numToRead    ==    -1    ||    numToRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
335	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  entryOffset  +=  len;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  entryOffset  +=  len;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  entryOffset  +=  len;  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
336	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  entryOffset  +=  length;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  entryOffset  +=  length;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  entryOffset  +=  length;  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
337	[BUG]  [BUGGY]  if(entryOffset  >  0  ||  entrySize  <  numRecords.length)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >  0  ||  entrySize  <  numRecords.length)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  0  ||  entrySize  <  numRecords.length)  {	  if(entryOffset    <    0    ||    entrySize    <    numRecords.length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
338	[BUG]  [BUGGY]  if(entryOffset  *  totalRead  >=  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  *  totalRead  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  *  totalRead  >=  0)  {	  if(entryOffset    +    totalRead    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
339	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    <    numToRead)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
340	[BUG]  [BUGGY]  if(entryOffset  >  -1  ||  totalRead  >  -1  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  >  -1  ||  totalRead  >  -1  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  -1  ||  totalRead  >  -1  ||  hasHitEOF)  {	  if    (numToRead    >    -1)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
341	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    0)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
342	[BUG]  [BUGGY]  if(entrySize!=  -1  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);      [BUGGY]  if(entrySize!=  -1  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize!=  -1  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(entryOffset!=    -1    &&    currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
