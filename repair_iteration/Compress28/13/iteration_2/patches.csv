bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  entryOffset  +=  numToRead  +  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  +  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  +  2;	  entryOffset    +=    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  entryOffset  +=  numToRead  +  1L;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  +  1L;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  +  1L;	  entryOffset    +=    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  entryOffset  +=  numToRead  *  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  *  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  *  1;	  entryOffset    +=    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  entryOffset  +=  numToRead  +  3;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  +  3;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  +  3;	  entryOffset    +=    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	hasHitEOF  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
6	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	hasHitEOF  =  is.read(buf,  offset,  numToRead  +  1);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
7	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  0);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	hasHitEOF  =  is.read(buf,  offset,  0);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
8	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead,  false);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	hasHitEOF  =  is.read(buf,  offset,  numToRead,  false);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
9	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	hasHitEOF  =  is.read(buf,  offset,  numToRead,  len);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
10	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead,  true);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	hasHitEOF  =  is.read(buf,  offset,  numToRead,  true);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
11	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  SMALL_BUFFER_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead  *  SMALL_BUFFER_SIZE  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead  *  SMALL_BUFFER_SIZE  +  1;	  entryOffset    -=    numToRead    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
12	[BUG]  [BUGGY]  entryOffset  -=  totalRead  *  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  totalRead  *  SMALL_BUFFER_SIZE;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  totalRead  *  SMALL_BUFFER_SIZE;	  entryOffset    -=    numToRead    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
13	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  recordSize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead  *  recordSize;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead  *  recordSize;	  entryOffset    -=    numToRead    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
14	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead  *  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead  *  2;	  entryOffset    -=    numToRead    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
15	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  SMALL_BUFFER_SIZE  +  2;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead  *  SMALL_BUFFER_SIZE  +  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead  *  SMALL_BUFFER_SIZE  +  2;	  entryOffset    -=    numToRead    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
16	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  SMALL_BUFFER_SIZE  +  4;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead  *  SMALL_BUFFER_SIZE  +  4;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead  *  SMALL_BUFFER_SIZE  +  4;	  entryOffset    -=    numToRead    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
17	[BUG]  [BUGGY]  entryOffset  +=  length  *  numRecords.length;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  *  numRecords.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  *  numRecords.length;	  entryOffset    +=    length    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
18	[BUG]  [BUGGY]  entryOffset  +=  length  /  numRecords;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  /  numRecords;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  /  numRecords;	  entryOffset    +=    length    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
19	[BUG]  [BUGGY]  entryOffset  +=  totalRead  *  numRecords;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  totalRead  *  numRecords;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  totalRead  *  numRecords;	  entryOffset    +=    length    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
20	[BUG]  [BUGGY]  entryOffset  +=  length  *  numRecords,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  *  numRecords,  hasHitEOF;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  *  numRecords,  hasHitEOF;	  entryOffset    +=    length    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
21	[BUG]  [BUGGY]  entryOffset  +=  numToRead  *  length;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  *  length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  *  length;	  entryOffset    +=    length    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
22	[BUG]  [BUGGY]  entryOffset  +=  length  *  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  *  numRecords  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  *  numRecords  +  1;	  entryOffset    +=    length    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
23	[BUG]  [BUGGY]  entryOffset  +=  rest.length  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  rest.length  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  rest.length  +  1;	  entryOffset    +=    read    +    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
24	[BUG]  [BUGGY]  entryOffset  +=  read.length  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  read.length  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  read.length  +  1;	  entryOffset    +=    read    +    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
25	[BUG]  [BUGGY]  entryOffset  +=  length  -(int)Math.pow(10,  is.read(buf,  offset,  numToRead));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  -(int)Math.pow(10,  is.read(buf,  offset,  numToRead));  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  -(int)Math.pow(10,  is.read(buf,  offset,  numToRead));	  entryOffset    +=    length    -(int)Math.pow(10,    is.read(buf,    offset,    hasHitEOF));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
26	[BUG]  [BUGGY]  entryOffset  +=  numToRead  -(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  -(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  -(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));	  entryOffset    +=    length    -(int)Math.pow(10,    is.read(buf,    offset,    hasHitEOF));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
27	[BUG]  [BUGGY]  entryOffset  +=  offset  -(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  offset  -(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  offset  -(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));	  entryOffset    +=    length    -(int)Math.pow(10,    is.read(buf,    offset,    hasHitEOF));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
28	[BUG]  [BUGGY]  entryOffset  +=  hasHitEOF  -(int)Math.pow(10,  is.read(buf,  offset,  length));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  hasHitEOF  -(int)Math.pow(10,  is.read(buf,  offset,  length));  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  hasHitEOF  -(int)Math.pow(10,  is.read(buf,  offset,  length));	  entryOffset    +=    length    -(int)Math.pow(10,    is.read(buf,    offset,    hasHitEOF));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
29	[BUG]  [BUGGY]  entryOffset  +=  width  -(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  width  -(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  width  -(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));	  entryOffset    +=    length    -(int)Math.pow(10,    is.read(buf,    offset,    hasHitEOF));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
30	[BUG]  [BUGGY]  entryOffset  +=  length  -(long)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  -(long)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  -(long)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));	  entryOffset    +=    length    -(int)Math.pow(10,    is.read(buf,    offset,    hasHitEOF));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
31	[BUG]  [BUGGY]  i  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  i    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
32	[BUG]  [BUGGY]  i  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i  =  is.read(buf,  offset,  numToRead  +  1);	  i    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
33	[BUG]  [BUGGY]  i  =  rest.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i  =  rest.read(buf,  offset,  numToRead);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i  =  rest.read(buf,  offset,  numToRead);	  i    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
34	[BUG]  [BUGGY]  i  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i  =  is.read(buf,  offset,  numToRead,  len);	  i    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
35	[BUG]  [BUGGY]  i  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i  =  is.read(buf,  offset,  totalRead);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i  =  is.read(buf,  offset,  totalRead);	  i    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
36	[BUG]  [BUGGY]  entryOffset  -=  SMALL_BUFFER_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  SMALL_BUFFER_SIZE  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  SMALL_BUFFER_SIZE  +  1;	  entryOffset    -=    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
37	[BUG]  [BUGGY]  entrySize  -=  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entrySize  -=  SMALL_BUFFER_SIZE;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entrySize  -=  SMALL_BUFFER_SIZE;	  entryOffset    -=    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
38	[BUG]  [BUGGY]  entryOffset  -=  SMALL_BUFFER_SIZE  *  numRecords;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  SMALL_BUFFER_SIZE  *  numRecords;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  SMALL_BUFFER_SIZE  *  numRecords;	  entryOffset    -=    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
39	[BUG]  [BUGGY]  entryOffset  -=  buf.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  buf.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  buf.length;	  entryOffset    -=    offset;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
40	[BUG]  [BUGGY]  entryOffset  -=  numtoRead;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numtoRead;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numtoRead;	  entryOffset    -=    offset;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
41	[BUG]  [BUGGY]  entryOffset  -=  offset  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  offset  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  offset  +  1;	  entryOffset    -=    offset;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
42	[BUG]  [BUGGY]  entryOffset  +=  remaining.length  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  remaining.length  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  remaining.length  +  1;	  entryOffset    +=    recordSize    +    1;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
43	[BUG]  [BUGGY]  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;	  is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
44	[BUG]  [BUGGY]  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	hasHitEOF  =  true;	  is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
45	[BUG]  [BUGGY]  is.readByte(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  is.readByte(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	is.readByte(buf,  offset,  numToRead);  hasHitEOF  =  true;	  is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
46	[BUG]  [BUGGY]  is.readFully(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  is.readFully(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	is.readFully(buf,  offset,  numToRead);  hasHitEOF  =  true;	  is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
47	[BUG]  [BUGGY]  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;	  is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
48	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  false;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	readNow  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  false;	  readNow    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
49	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	readNow  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  readNow    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
50	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  1;	  entryOffset    +=    numRecords    +    1;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
51	[BUG]  [BUGGY]  entryOffset  -=  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRecords  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRecords  +  1;	  entryOffset    +=    numRecords    +    1;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
52	[BUG]  [BUGGY]  entryOffset  +=  numRecords  +  4;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  +  4;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  +  4;	  entryOffset    +=    numRecords    +    1;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
53	[BUG]  [BUGGY]  entryOffset  +=  numRecords  +  1L;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  +  1L;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  +  1L;	  entryOffset    +=    numRecords    +    1;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
54	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  2  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  2  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  2  +  1;	  entryOffset    +=    numRecords    *    2;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
55	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  2  +  length;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  2  +  length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  2  +  length;	  entryOffset    +=    numRecords    *    2;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
56	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  3;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  3;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  3;	  entryOffset    +=    numRecords    *    2;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
57	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  2  +  offset;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  2  +  offset;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  2  +  offset;	  entryOffset    +=    numRecords    *    2;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
58	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  0);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.remove();  hasHitEOF  =  is.read(buf,  offset,  0);	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
59	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
60	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead  +  1);	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
61	[BUG]  [BUGGY]  n.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  n.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	n.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
62	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
63	[BUG]  [BUGGY]  record.remove();  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  record.remove();  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	record.remove();  hasHitEOF  =  true;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
64	[BUG]  [BUGGY]  n.remove();  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  n.remove();  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	n.remove();  hasHitEOF  =  true;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
65	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  numToRead;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  numToRead;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  numToRead;	  entryOffset    +=    numRecords    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
66	[BUG]  [BUGGY]  entryOffset  -=  numRecords  *  numRecords;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRecords  *  numRecords;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRecords  *  numRecords;	  entryOffset    +=    numRecords    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
67	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  recordSize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  recordSize;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  recordSize;	  entryOffset    +=    numRecords    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
68	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  numSkip;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  numSkip;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  numSkip;	  entryOffset    +=    numRecords    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
69	[BUG]  [BUGGY]  entryOffset  -=  0L;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  0L;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  0L;	  entryOffset    +=    0L;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
70	[BUG]  [BUGGY]  EntryOffset  entryOffset  +=  0L;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  EntryOffset  entryOffset  +=  0L;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	EntryOffset  entryOffset  +=  0L;	  entryOffset    +=    0L;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
71	[BUG]  [BUGGY]  EntryOffset  entryOffset  +=  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  EntryOffset  entryOffset  +=  0;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	EntryOffset  entryOffset  +=  0;	  entryOffset    +=    0L;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
72	[BUG]  [BUGGY]  entryOffset  /=  0L;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  /=  0L;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  /=  0L;	  entryOffset    +=    0L;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
73	[BUG]  [BUGGY]  entryOffset  -=  numToRead  +  1L;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead  +  1L;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead  +  1L;	  entryOffset    -=    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
74	[BUG]  [BUGGY]  entryOffset  -=  numToRead  +  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead  +  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead  +  2;	  entryOffset    -=    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
75	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead  *  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead  *  1;	  entryOffset    -=    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
76	[BUG]  [BUGGY]  entryOffset  -=  numToRead  +  3;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead  +  3;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead  +  3;	  entryOffset    -=    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
77	[BUG]  [BUGGY]  entryOffset  -=  numToRead  +  4;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead  +  4;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead  +  4;	  entryOffset    -=    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
78	[BUG]  [BUGGY]  entryOffset  -=  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  1;	  entryOffset    -=    0;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
79	[BUG]  [BUGGY]  entryOffset  -=  2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  2;	  entryOffset    -=    0;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
80	[BUG]  [BUGGY]  entryOffset  +=  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  2;	  entryOffset    +=    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
81	[BUG]  [BUGGY]  entryOffset  +=  numRead.length  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRead.length  -  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRead.length  -  1;	  entryOffset    +=    numRead.length;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
82	[BUG]  [BUGGY]  entryOffset  +=  numToRead.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead.length;	  entryOffset    +=    numRead.length;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
83	[BUG]  [BUGGY]  entryOffset  -=  numRead.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRead.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRead.length;	  entryOffset    +=    numRead.length;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
84	[BUG]  [BUGGY]  entryOffset  +=  numRead.length  -  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRead.length  -  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRead.length  -  2;	  entryOffset    +=    numRead.length;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
85	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  SMALL_BUFFER_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  SMALL_BUFFER_SIZE  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  SMALL_BUFFER_SIZE  +  1;	  entryOffset    +=    numRecords    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
86	[BUG]  [BUGGY]  entryOffset  -=  numRecords  *  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRecords  *  SMALL_BUFFER_SIZE;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRecords  *  SMALL_BUFFER_SIZE;	  entryOffset    +=    numRecords    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
87	[BUG]  [BUGGY]  entryOffset  +=  totalRead  *  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  totalRead  *  SMALL_BUFFER_SIZE;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  totalRead  *  SMALL_BUFFER_SIZE;	  entryOffset    +=    numRecords    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
88	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  SMALL_BUFFER_SIZE  +  2;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  SMALL_BUFFER_SIZE  +  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  SMALL_BUFFER_SIZE  +  2;	  entryOffset    +=    numRecords    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
89	[BUG]  [BUGGY]  entryOffset  +=  length  *  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  *  SMALL_BUFFER_SIZE;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  *  SMALL_BUFFER_SIZE;	  entryOffset    +=    numRecords    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
90	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  SMALL_BUFFER_SIZE  +  4;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  SMALL_BUFFER_SIZE  +  4;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  SMALL_BUFFER_SIZE  +  4;	  entryOffset    +=    numRecords    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
91	[BUG]  [BUGGY]  entryOffset  +=  numRead  +  2;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRead  +  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRead  +  2;	  entryOffset    +=    numRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
92	[BUG]  [BUGGY]  entryOffset  -=  numRead  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRead  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRead  +  1;	  entryOffset    +=    numRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
93	[BUG]  [BUGGY]  entryOffset  -=  numRecords.length  -  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRecords.length  -  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRecords.length  -  1;	  entryOffset    -=    numRecords.length;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
94	[BUG]  [BUGGY]  entryOffset  -=  numRecords.length  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRecords.length  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRecords.length  +  1;	  entryOffset    -=    numRecords.length;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
95	[BUG]  [BUGGY]  entryOffset  -=  numRecords.length  -  2;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRecords.length  -  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRecords.length  -  2;	  entryOffset    -=    numRecords.length;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
96	[BUG]  [BUGGY]  entryOffset  -=  numRecords.length  *  2;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRecords.length  *  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRecords.length  *  2;	  entryOffset    -=    numRecords.length;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
97	[BUG]  [BUGGY]  entryOffset  -=  numRecords.length  +  2;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRecords.length  +  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRecords.length  +  2;	  entryOffset    -=    numRecords.length;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
98	[BUG]  [BUGGY]  entryOffset  +=  totalRead  *  2;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  totalRead  *  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  totalRead  *  2;	  entryOffset    +=    totalRead    +    2;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
99	[BUG]  [BUGGY]  entryOffset  +=  totalRead  /  2;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  totalRead  /  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  totalRead  /  2;	  entryOffset    +=    totalRead    +    2;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
100	[BUG]  [BUGGY]  entryOffset  +=  offset  +  2;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  offset  +  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  offset  +  2;	  entryOffset    +=    totalRead    +    2;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
101	[BUG]  [BUGGY]  entryOffset  +=  remainingRead  +  2;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  remainingRead  +  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  remainingRead  +  2;	  entryOffset    +=    totalRead    +    2;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
102	[BUG]  [BUGGY]  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	is.read(buf,  offset,  numToRead,  hasHitEOF);	  is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
103	[BUG]  [BUGGY]  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	is.read(buf,  offset,  hasHitEOF);	  is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
104	[BUG]  [BUGGY]  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	is.read(buf,  offset,  numToRead  +  1);	  is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
105	[BUG]  [BUGGY]  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	is.read(buf,  offset,  numToRead,  len);	  is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
106	[BUG]  [BUGGY]  is.read(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  is.read(buf,  offset,  numToRead,  totalRead);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	is.read(buf,  offset,  numToRead,  totalRead);	  is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
107	[BUG]  [BUGGY]  is.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  is.read(buf,  offset,  numToRead,  false);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	is.read(buf,  offset,  numToRead,  false);	  is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
108	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	if(i.hasNext())  {  i.remove();  }  else  {  hasHitEOF  =  true;  }	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
109	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  totalRead  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  totalRead  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	if(i.hasNext())  {  i.remove();  }  else  {  totalRead  =  is.read(buf,  offset,  numToRead);  }	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
110	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	if(i.hasNext())  {  i.remove();  }  else  {  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
111	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	if(i.hasNext())  {  i.remove();  }  else  {  hasHitEOF  =  false;  }	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
112	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  }  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(i.hasNext())  {  i.remove();  }  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	if(i.hasNext())  {  i.remove();  }	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
113	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  totalRead  =  is.read(buf,  offset,  0);  }  [CE]  illegal  start  of  type  [FE]                                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  totalRead  =  is.read(buf,  offset,  0);  }  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	if(i.hasNext())  {  i.remove();  }  else  {  totalRead  =  is.read(buf,  offset,  0);  }	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
114	[BUG]  [BUGGY]  entryOffset  +=  numToRead,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead,  hasHitEOF;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead,  hasHitEOF;	  entryOffset    +=    length,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
115	[BUG]  [BUGGY]  entryOffset  +=  totalRead,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  totalRead,  hasHitEOF;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  totalRead,  hasHitEOF;	  entryOffset    +=    length,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
116	[BUG]  [BUGGY]  entryOffset  +=  numRecords,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords,  hasHitEOF;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords,  hasHitEOF;	  entryOffset    +=    length,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
117	[BUG]  [BUGGY]  entryOffset  -=  length,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  length,  hasHitEOF;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  length,  hasHitEOF;	  entryOffset    +=    length,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
118	[BUG]  [BUGGY]  entryOffset  +=  length,  hasHitEOF  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length,  hasHitEOF  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length,  hasHitEOF  ||  is.read(buf,  offset,  numToRead);	  entryOffset    +=    length,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
119	[BUG]  [BUGGY]  entryOffset  +=  length,  hasHitEOF  &&  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length,  hasHitEOF  &&  is.read(buf,  offset,  numToRead);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length,  hasHitEOF  &&  is.read(buf,  offset,  numToRead);	  entryOffset    +=    length,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
120	[BUG]  [BUGGY]  entryOffset  -=  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  hasHitEOF  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  hasHitEOF  +  1;	  entryOffset    -=    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
121	[BUG]  [BUGGY]  entryOffset  -=  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  is.read(buf,  offset,  hasHitEOF);	  entryOffset    -=    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
122	[BUG]  [BUGGY]  entryOffset  -=  length  *  numRecords;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  length  *  numRecords;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  length  *  numRecords;	  entryOffset    +=    numRecords    *    length;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
123	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  length  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  length  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  length  +  1;	  entryOffset    +=    numRecords    *    length;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
124	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  totalRead;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  totalRead;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  totalRead;	  entryOffset    +=    numRecords    *    length;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
125	[BUG]  [BUGGY]  entryOffset  -=  numRecords  *  length;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRecords  *  length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRecords  *  length;	  entryOffset    +=    numRecords    *    length;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
126	[BUG]  [BUGGY]  entryOffset  +=  numToSkip  *  numRecords;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToSkip  *  numRecords;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToSkip  *  numRecords;	  entryOffset    +=    numRecords    *    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
127	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  numToSkip  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  numToSkip  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  numToSkip  +  1;	  entryOffset    +=    numRecords    *    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
128	[BUG]  [BUGGY]  entryOffset  +=  totalRead  *  numToSkip;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  totalRead  *  numToSkip;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  totalRead  *  numToSkip;	  entryOffset    +=    numRecords    *    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
129	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  numToSkip,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  numToSkip,  hasHitEOF;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  numToSkip,  hasHitEOF;	  entryOffset    +=    numRecords    *    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
130	[BUG]  [BUGGY]  entryOffset  +=  length  *  numToSkip;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  *  numToSkip;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  *  numToSkip;	  entryOffset    +=    numRecords    *    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
131	[BUG]  [BUGGY]  entryOffset  +=  numToRead  -  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  -  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  -  1;	  entryOffset    +=    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
132	[BUG]  [BUGGY]  entryOffset  +=  totalRead  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  totalRead  -  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  totalRead  -  1;	  entryOffset    +=    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
133	[BUG]  [BUGGY]  entryOffset  +=  totalRead.length  -  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  totalRead.length  -  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  totalRead.length  -  1;	  entryOffset    +=    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
134	[BUG]  [BUGGY]  entryOffset  +=  length  /  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  /  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  /  1;	  entryOffset    +=    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
135	[BUG]  [BUGGY]  entryOffset  +=  numRecords  -  1;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  -  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  -  1;	  entryOffset    +=    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
136	[BUG]  [BUGGY]  entryOffset  +=  len  -  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  len  -  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  len  -  1;	  entryOffset    +=    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
137	[BUG]  [BUGGY]  entryOffset  -=  numToSkip;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToSkip;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToSkip;	  entryOffset    +=    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
138	[BUG]  [BUGGY]  entryOffset  +=  numToSkip  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToSkip  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToSkip  +  1;	  entryOffset    +=    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
139	[BUG]  [BUGGY]  entryOffset  -=  numRead  *  numRecords;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRead  *  numRecords;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRead  *  numRecords;	  entryOffset    +=    numRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
140	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  numRecords.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  numRecords.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  numRecords.length;	  entryOffset    +=    numRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
141	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  numRead;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  numRead;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  numRead;	  entryOffset    +=    numRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
142	[BUG]  [BUGGY]  entryOffset  -=  length  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  length  -  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  length  -  1;	  entryOffset    -=    length;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
143	[BUG]  [BUGGY]  entryOffset  -=  length  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  length  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  length  +  1;	  entryOffset    -=    length;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
144	[BUG]  [BUGGY]  entryOffset  +=  numToRead  *  numRecords.length;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  *  numRecords.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  *  numRecords.length;	  entryOffset    +=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
145	[BUG]  [BUGGY]  entryOffset  +=  numToRead  *  numRecords,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  *  numRecords,  hasHitEOF;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  *  numRecords,  hasHitEOF;	  entryOffset    +=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
146	[BUG]  [BUGGY]  entryOffset  +=  numToRead  *  recordSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  *  recordSize;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  *  recordSize;	  entryOffset    +=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
147	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	readNow  =  is.read(buf,  offset,  numToRead  +  1);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
148	[BUG]  [BUGGY]  readNow  =  rest.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  readNow  =  rest.read(buf,  offset,  numToRead);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	readNow  =  rest.read(buf,  offset,  numToRead);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
149	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	readNow  =  is.read(buf,  offset,  numToRead,  len);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
150	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  readNow  =  is.read(buf,  offset,  totalRead);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	readNow  =  is.read(buf,  offset,  totalRead);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
151	[BUG]  [BUGGY]  entryOffset  -=  remaining;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  remaining;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  remaining;	  entryOffset    +=    remaining;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
152	[BUG]  [BUGGY]  entryOffset  +=  remaining.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  remaining.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  remaining.length;	  entryOffset    +=    remaining;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
153	[BUG]  [BUGGY]  entryOffset  +=  rest.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  rest.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  rest.length;	  entryOffset    +=    remaining;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
154	[BUG]  [BUGGY]  entryOffset  +=  numRecords.length  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords.length  -  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords.length  -  1;	  entryOffset    +=    numRecords.length;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
155	[BUG]  [BUGGY]  entryOffset  +=  numRecords.length  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords.length  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords.length  +  1;	  entryOffset    +=    numRecords.length;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
156	[BUG]  [BUGGY]  entryOffset  +=  numRecords.length  *  2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords.length  *  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords.length  *  2;	  entryOffset    +=    numRecords.length;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
157	[BUG]  [BUGGY]  entryOffset  +=  numRecords.length  -  2;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords.length  -  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords.length  -  2;	  entryOffset    +=    numRecords.length;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
158	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  4  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  4  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  4  +  1;	  entryOffset    +=    numRecords    *    4;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
159	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  4  +  length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  4  +  length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  4  +  length;	  entryOffset    +=    numRecords    *    4;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
160	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  8;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  8;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  8;	  entryOffset    +=    numRecords    *    4;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
161	[BUG]  [BUGGY]  entryOffset  -=  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  buf.length  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  buf.length  +  1;	  entryOffset    -=    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
162	[BUG]  [BUGGY]  entryOffset  -=  totalRead  +  1L;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  totalRead  +  1L;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  totalRead  +  1L;	  entryOffset    -=    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
163	[BUG]  [BUGGY]  entryOffset  -=  buf  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  buf  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  buf  +  1;	  entryOffset    -=    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
164	[BUG]  [BUGGY]  entryOffset  -=  totalRead  +  2;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  totalRead  +  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  totalRead  +  2;	  entryOffset    -=    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
165	[BUG]  [BUGGY]  entryOffset  +=  numToRead  *  2  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  *  2  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  *  2  +  1;	  entryOffset    +=    numToRead    *    2;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
166	[BUG]  [BUGGY]  entryOffset  +=  numToRead  *  4;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  *  4;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  *  4;	  entryOffset    +=    numToRead    *    2;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
167	[BUG]  [BUGGY]  entryOffset  +=  numToRead  *  2  +  length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  *  2  +  length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  *  2  +  length;	  entryOffset    +=    numToRead    *    2;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
168	[BUG]  [BUGGY]  entryOffset  +=  numToRead  *  3;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  *  3;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  *  3;	  entryOffset    +=    numToRead    *    2;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
169	[BUG]  [BUGGY]  entryOffset  -=  available.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  available.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  available.length;	  entryOffset    -=    available;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
170	[BUG]  [BUGGY]  entryOffset  -=  this.entrySize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  this.entrySize;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  this.entrySize;	  entryOffset    -=    available;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
171	[BUG]  [BUGGY]  entryOffset  -=  numRecords  *  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRecords  *  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRecords  *  2;	  entryOffset    -=    numRecords;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
172	[BUG]  [BUGGY]  entryOffset  -=  numRecords  *  numToSkip;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRecords  *  numToSkip;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRecords  *  numToSkip;	  entryOffset    -=    numRecords;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
173	[BUG]  [BUGGY]  entryOffset  +=  hasHitEOF  +  1L;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  hasHitEOF  +  1L;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  hasHitEOF  +  1L;	  entryOffset    +=    hasHitEOF    +    1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
174	[BUG]  [BUGGY]  entryOffset  +=  hasHitEOF  /  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  hasHitEOF  /  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  hasHitEOF  /  1;	  entryOffset    +=    hasHitEOF    +    1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
175	[BUG]  [BUGGY]  entryOffset  +=  hasHitEOF  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  hasHitEOF  -  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  hasHitEOF  -  1;	  entryOffset    +=    hasHitEOF    +    1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
176	[BUG]  [BUGGY]  entryOffset  +=  buf.length;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  buf.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  buf.length;	  entryOffset    +=    totalRead.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
177	[BUG]  [BUGGY]  entryOffset  +=  totalRead.length  -  offset;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  totalRead.length  -  offset;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  totalRead.length  -  offset;	  entryOffset    +=    totalRead.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
178	[BUG]  [BUGGY]  entryOffset  +=  totalRead.length  -  2;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  totalRead.length  -  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  totalRead.length  -  2;	  entryOffset    +=    totalRead.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
179	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	readNow  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;	  readNow    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
180	[BUG]  [BUGGY]  readNow  =  is.readByte(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  readNow  =  is.readByte(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	readNow  =  is.readByte(buf,  offset,  numToRead);  hasHitEOF  =  true;	  readNow    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
181	[BUG]  [BUGGY]  entryOffset  +=  buf.length  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  buf.length  -  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  buf.length  -  1;	  entryOffset    +=    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
182	[BUG]  [BUGGY]  entryOffset  +=  buf.length  /  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  buf.length  /  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  buf.length  /  1;	  entryOffset    +=    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
183	[BUG]  [BUGGY]  entryOffset  +=  buf.length  *  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  buf.length  *  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  buf.length  *  1;	  entryOffset    +=    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
184	[BUG]  [BUGGY]  entryOffset  +=  buf.length  +  2;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  buf.length  +  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  buf.length  +  2;	  entryOffset    +=    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
185	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
186	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  0);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	int  totalRead  =  is.read(buf,  offset,  0);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
187	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead  +  1);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
188	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  len);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
189	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  true);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  true);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
190	[BUG]  [BUGGY]  byte  totalRead  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  byte  totalRead  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	byte  totalRead  =  is.read(buf,  offset,  numToRead);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
191	[BUG]  [BUGGY]  entryOffset  +=  numRecords.length  +  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords.length  +  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords.length  +  2;	  entryOffset    +=    numRecords    +    2;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
192	[BUG]  [BUGGY]  entryOffset  +=  numRecords  +  3;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  +  3;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  +  3;	  entryOffset    +=    numRecords    +    2;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
193	[BUG]  [BUGGY]  entryOffset  +=  numToRead  *  SMALL_BUFFER_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  *  SMALL_BUFFER_SIZE  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  *  SMALL_BUFFER_SIZE  +  1;	  entryOffset    +=    numToRead    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
194	[BUG]  [BUGGY]  entryOffset  +=  numToRead  *  SMALL_BUFFER_SIZE  +  2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  *  SMALL_BUFFER_SIZE  +  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  *  SMALL_BUFFER_SIZE  +  2;	  entryOffset    +=    numToRead    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
195	[BUG]  [BUGGY]  entryOffset  +=  offset  +  numToRead;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  offset  +  numToRead;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  offset  +  numToRead;	  entryOffset    +=    offset    +    1;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
196	[BUG]  [BUGGY]  entryOffset  +=  numRecords  +  recordSize;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  +  recordSize;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  +  recordSize;	  entryOffset    +=    recordSize    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
197	[BUG]  [BUGGY]  entryOffset  +=  totalRead  +  numRecords;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  totalRead  +  numRecords;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  totalRead  +  numRecords;	  entryOffset    +=    recordSize    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
198	[BUG]  [BUGGY]  entryOffset  +=  numToRead  +  recordSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  +  recordSize;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  +  recordSize;	  entryOffset    +=    recordSize    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
199	[BUG]  [BUGGY]  entryOffset  +=  length  +  numRecords;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  +  numRecords;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  +  numRecords;	  entryOffset    +=    recordSize    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
200	[BUG]  [BUGGY]  entryOffset  +=  offset  +  numRecords;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  offset  +  numRecords;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  offset  +  numRecords;	  entryOffset    +=    recordSize    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
201	[BUG]  [BUGGY]  entryOffset  +=  numToSkip  +  numRecords;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToSkip  +  numRecords;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToSkip  +  numRecords;	  entryOffset    +=    recordSize    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
202	[BUG]  [BUGGY]  entryOffset  +=  recordSize  +  numRecords.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  recordSize  +  numRecords.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  recordSize  +  numRecords.length;	  entryOffset    +=    recordSize    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
203	[BUG]  [BUGGY]  entryOffset  -=  numToRead.length  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead.length  -  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead.length  -  1;	  entryOffset    -=    numToRead.length;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
204	[BUG]  [BUGGY]  entryOffset  -=  numToRead.length  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead.length  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead.length  +  1;	  entryOffset    -=    numToRead.length;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
205	[BUG]  [BUGGY]  entryOffset  -=  numToRead.length  -  2;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead.length  -  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead.length  -  2;	  entryOffset    -=    numToRead.length;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
206	[BUG]  [BUGGY]  entryOffset  -=  numToRead.length  *  2;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead.length  *  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead.length  *  2;	  entryOffset    -=    numToRead.length;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
207	[BUG]  [BUGGY]  entryOffset  -=  numToRead.length  +  2;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead.length  +  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead.length  +  2;	  entryOffset    -=    numToRead.length;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
208	[BUG]  [BUGGY]  entryOffset  =  entrySize  +  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  =  entrySize  +  SMALL_BUFFER_SIZE;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  =  entrySize  +  SMALL_BUFFER_SIZE;	  entryOffset    +=    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
209	[BUG]  [BUGGY]  entryOffset  +=  SMALL_BUFFER_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  SMALL_BUFFER_SIZE  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  SMALL_BUFFER_SIZE  +  1;	  entryOffset    +=    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
210	[BUG]  [BUGGY]  entryOffset  -=  totalRead.length  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  totalRead.length  -  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  totalRead.length  -  1;	  entryOffset    -=    totalRead.length;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
211	[BUG]  [BUGGY]  entryOffset  -=  totalRead.length  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  totalRead.length  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  totalRead.length  +  1;	  entryOffset    -=    totalRead.length;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
212	[BUG]  [BUGGY]  entryOffset  -=  totalRead.length  -  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  totalRead.length  -  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  totalRead.length  -  2;	  entryOffset    -=    totalRead.length;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
213	[BUG]  [BUGGY]  entryOffset  +=  totalRead  +  numToRead;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  totalRead  +  numToRead;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  totalRead  +  numToRead;	  entryOffset    +=    totalRead    +    1L;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
214	[BUG]  [BUGGY]  entryOffset  +=  length  +  1L;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  +  1L;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  +  1L;	  entryOffset    +=    totalRead    +    1L;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
215	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  numRecords.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead  *  numRecords.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead  *  numRecords.length;	  entryOffset    -=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
216	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead  *  numRecords  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead  *  numRecords  +  1;	  entryOffset    -=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
217	[BUG]  [BUGGY]  entryOffset  -=  numRecords  *  numToRead;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRecords  *  numToRead;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRecords  *  numToRead;	  entryOffset    -=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
218	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  totalRead;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead  *  totalRead;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead  *  totalRead;	  entryOffset    -=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
219	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  false;  }  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  false;  }	  i.remove();    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
220	[BUG]  [BUGGY]  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  hasHitEOF  =  false;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	hasHitEOF  =  false;	  i.remove();    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
221	[BUG]  [BUGGY]  n.remove();  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  n.remove();  hasHitEOF  =  false;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	n.remove();  hasHitEOF  =  false;	  i.remove();    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
222	[BUG]  [BUGGY]  record.remove();  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  record.remove();  hasHitEOF  =  false;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	record.remove();  hasHitEOF  =  false;	  i.remove();    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
223	[BUG]  [BUGGY]  entryOffset  +=  length  -(int)Math.ceil(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  -(int)Math.ceil(buf,  offset,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  -(int)Math.ceil(buf,  offset,  hasHitEOF);	  entryOffset    +=    length    -(int)Math.ceil(offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
224	[BUG]  [BUGGY]  entryOffset  +=  length  -(long)Math.ceil(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  -(long)Math.ceil(buf,  offset,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  -(long)Math.ceil(buf,  offset,  hasHitEOF);	  entryOffset    +=    length    -(int)Math.ceil(offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
225	[BUG]  [BUGGY]  entryOffset  +=  hasHitEOF  -(int)Math.ceil(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  hasHitEOF  -(int)Math.ceil(buf,  offset,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  hasHitEOF  -(int)Math.ceil(buf,  offset,  hasHitEOF);	  entryOffset    +=    length    -(int)Math.ceil(offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
226	[BUG]  [BUGGY]  entryOffset  +=  numToRead  -(int)Math.ceil(offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  -(int)Math.ceil(offset,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  -(int)Math.ceil(offset,  hasHitEOF);	  entryOffset    +=    length    -(int)Math.ceil(offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
227	[BUG]  [BUGGY]  entryOffset  +=  rest.length  -(int)Math.ceil(offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  rest.length  -(int)Math.ceil(offset,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  rest.length  -(int)Math.ceil(offset,  hasHitEOF);	  entryOffset    +=    length    -(int)Math.ceil(offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
228	[BUG]  [BUGGY]  entryOffset  +=  width  -(int)Math.ceil(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  width  -(int)Math.ceil(buf,  offset,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  width  -(int)Math.ceil(buf,  offset,  hasHitEOF);	  entryOffset    +=    length    -(int)Math.ceil(offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
229	[BUG]  [BUGGY]  entryOffset  +=  offset  -(int)Math.ceil(offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  offset  -(int)Math.ceil(offset,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  offset  -(int)Math.ceil(offset,  hasHitEOF);	  entryOffset    +=    length    -(int)Math.ceil(offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
230	[BUG]  [BUGGY]  entryOffset  -=  numrecords;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numrecords;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numrecords;	  entryOffset    +=    numrecords;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
231	[BUG]  [BUGGY]  entryOffset  +=  length  *  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  *  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  *  1;	  entryOffset    +=    length    +    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
232	[BUG]  [BUGGY]  entryOffset  +=  read.length;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  read.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  read.length;	  entryOffset    +=    totalRead.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
233	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  HITEOF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  HITEOF;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  HITEOF;	  entryOffset    +=    numRecords    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
234	[BUG]  [BUGGY]  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  is.read(buf,  offset,  0);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	is.read(buf,  offset,  0);	  is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
235	[BUG]  [BUGGY]  is.readByte(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  is.readByte(buf,  offset,  numToRead);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	is.readByte(buf,  offset,  numToRead);	  is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
236	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  HITEOF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead  *  HITEOF;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead  *  HITEOF;	  entryOffset    -=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
237	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead  *  length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead  *  length;	  entryOffset    -=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
238	[BUG]  [BUGGY]  entryOffset  +=  length  -(long)Math.ceil(offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  -(long)Math.ceil(offset,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  -(long)Math.ceil(offset,  hasHitEOF);	  entryOffset    +=    length    -(int)Math.ceil(offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
239	[BUG]  [BUGGY]  entryOffset  +=  len  -(int)Math.ceil(offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  len  -(int)Math.ceil(offset,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  len  -(int)Math.ceil(offset,  hasHitEOF);	  entryOffset    +=    length    -(int)Math.ceil(offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
240	[BUG]  [BUGGY]  entryOffset  -=  recordSize  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  recordSize  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  recordSize  +  1;	  entryOffset    -=    recordSize;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
241	[BUG]  [BUGGY]  entryOffset  +=  length  /(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  /(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  /(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));	  entryOffset    +=    length    -(int)Math.pow(10,    is.read(buf,    offset,    hasHitEOF));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
242	[BUG]  [BUGGY]  entryOffset  +=  totalRead  -(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  totalRead  -(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  totalRead  -(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));	  entryOffset    +=    length    -(int)Math.pow(10,    is.read(buf,    offset,    hasHitEOF));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
243	[BUG]  [BUGGY]  entryOffset  -=  numRecords  *  4;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRecords  *  4;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRecords  *  4;	  entryOffset    -=    numRecords;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
244	[BUG]  [BUGGY]  entryOffset  +=  hasHitEOF  +  2;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  hasHitEOF  +  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  hasHitEOF  +  2;	  entryOffset    +=    totalRead    +    2;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
245	[BUG]  [BUGGY]  entryOffset  +=  length  +  2;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  +  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  +  2;	  entryOffset    +=    totalRead    +    2;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
246	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  readNow  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	readNow  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;	  readNow    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
247	[BUG]  [BUGGY]  entryOffset  +=  read  +  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  read  +  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  read  +  2;	  entryOffset    +=    read    +    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
248	[BUG]  [BUGGY]  entryOffset  +=  read  +  1L;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  read  +  1L;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  read  +  1L;	  entryOffset    +=    read    +    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
249	[BUG]  [BUGGY]  entryOffset  +=  numRead.length  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRead.length  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRead.length  +  1;	  entryOffset    +=    numRead.length;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
250	[BUG]  [BUGGY]  entryOffset  -=  0,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  0,  hasHitEOF;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  0,  hasHitEOF;	  entryOffset    -=    0;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
251	[BUG]  [BUGGY]  if(i!=  null)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(i!=  null)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	if(i!=  null)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
252	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  -1);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.remove();  hasHitEOF  =  is.read(buf,  offset,  -1);	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
253	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  -numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  -numToRead);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.remove();  hasHitEOF  =  is.read(buf,  offset,  -numToRead);	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
254	[BUG]  [BUGGY]  entryOffset  +=  numtoRead  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numtoRead  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numtoRead  +  1;	  entryOffset    +=    offset    +    1;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
255	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead)+  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead)+  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	hasHitEOF  =  is.read(buf,  offset,  numToRead)+  1;	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
256	[BUG]  [BUGGY]  entryOffset  -=  recordSize  +  numRecords;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  recordSize  +  numRecords;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  recordSize  +  numRecords;	  entryOffset    +=    recordSize    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
257	[BUG]  [BUGGY]  entryOffset  +=  recordSize  +  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  recordSize  +  numRecords  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  recordSize  +  numRecords  +  1;	  entryOffset    +=    recordSize    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
258	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  readNow  =  is.read(buf,  offset,  0);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	readNow  =  is.read(buf,  offset,  0);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
259	[BUG]  [BUGGY]  entryOffset  +=  numrecords  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numrecords  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numrecords  +  1;	  entryOffset    +=    numrecords;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
260	[BUG]  [BUGGY]  entryOffset  +=  length  -  2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  -  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  -  2;	  entryOffset    +=    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
261	[BUG]  [BUGGY]  entryOffset  +=  read.length  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  read.length  -  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  read.length  -  1;	  entryOffset    +=    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
262	[BUG]  [BUGGY]  entryOffset  -=  offset  *  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  offset  *  SMALL_BUFFER_SIZE;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  offset  *  SMALL_BUFFER_SIZE;	  entryOffset    -=    numToRead    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
263	[BUG]  [BUGGY]  i.remove(0);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.remove(0);  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.remove(0);  hasHitEOF  =  true;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
264	[BUG]  [BUGGY]  i.set();  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.set();  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.set();  hasHitEOF  =  true;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
265	[BUG]  [BUGGY]  i.remove(numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.remove(numToRead);  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.remove(numToRead);  hasHitEOF  =  true;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
266	[BUG]  [BUGGY]  i.set(offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.set(offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.set(offset,  numToRead);  hasHitEOF  =  true;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
267	[BUG]  [BUGGY]  i.remove(offset);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.remove(offset);  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.remove(offset);  hasHitEOF  =  true;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
268	[BUG]  [BUGGY]  is.read(buf,  offset,  0);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  is.read(buf,  offset,  0);  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	is.read(buf,  offset,  0);  hasHitEOF  =  true;	  is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
269	[BUG]  [BUGGY]  entryOffset  +=  length  *  2;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  *  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  *  2;	  entryOffset    +=    length    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
270	[BUG]  [BUGGY]  entryOffset  +=  length  *  recordSize;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  *  recordSize;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  *  recordSize;	  entryOffset    +=    length    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
271	[BUG]  [BUGGY]  entryOffset  +=  totalRead  +  2L;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  totalRead  +  2L;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  totalRead  +  2L;	  entryOffset    +=    totalRead    +    1L;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
272	[BUG]  [BUGGY]  entryOffset  +=  length  -  1,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length  -  1,  hasHitEOF;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length  -  1,  hasHitEOF;	  entryOffset    +=    length,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
273	[BUG]  [BUGGY]  entryOffset  +=  length,  hasHitEOF  &&  is.read(buf);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length,  hasHitEOF  &&  is.read(buf);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length,  hasHitEOF  &&  is.read(buf);	  entryOffset    +=    length,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
274	[BUG]  [BUGGY]  entryOffset  -=  read.length;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  read.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  read.length;	  entryOffset    -=    totalRead.length;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
275	[BUG]  [BUGGY]  entryOffset  -=  offset.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  offset.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  offset.length;	  entryOffset    -=    totalRead.length;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
276	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead)+  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead)+  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead)+  1;	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
277	[BUG]  [BUGGY]  entryOffset  -=  availableRecords;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  availableRecords;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  availableRecords;	  entryOffset    -=    available;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
278	[BUG]  [BUGGY]  entryOffset  -=  availableRecords.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  availableRecords.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  availableRecords.length;	  entryOffset    -=    available;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
279	[BUG]  [BUGGY]  entryOffset  -=  availableLength;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  availableLength;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  availableLength;	  entryOffset    -=    available;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
280	[BUG]  [BUGGY]  i  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i  =  is.read(buf,  offset,  0);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i  =  is.read(buf,  offset,  0);	  i    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
281	[BUG]  [BUGGY]  i  =  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i  =  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i  =  is.read(buf,  offset,  hasHitEOF);	  i    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
282	[BUG]  [BUGGY]  i.remove(0);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.remove(0);  hasHitEOF  =  false;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.remove(0);  hasHitEOF  =  false;	  i.remove();    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
283	[BUG]  [BUGGY]  i.remove(offset);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.remove(offset);  hasHitEOF  =  false;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.remove(offset);  hasHitEOF  =  false;	  i.remove();    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
284	[BUG]  [BUGGY]  i.set();  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.set();  hasHitEOF  =  false;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.set();  hasHitEOF  =  false;	  i.remove();    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
285	[BUG]  [BUGGY]  i.remove(numToRead);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.remove(numToRead);  hasHitEOF  =  false;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.remove(numToRead);  hasHitEOF  =  false;	  i.remove();    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
286	[BUG]  [BUGGY]  i.set(offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.set(offset,  numToRead,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.set(offset,  numToRead,  hasHitEOF);	  i.remove();    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
287	[BUG]  [BUGGY]  entryOffset  -=  numRecords  +  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRecords  +  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRecords  +  2;	  entryOffset    +=    numRecords    +    2;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
288	[BUG]  [BUGGY]  i.remove(buf);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.remove(buf);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.remove(buf);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
289	[BUG]  [BUGGY]  i.remove(buf,  offset);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.remove(buf,  offset);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.remove(buf,  offset);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
290	[BUG]  [BUGGY]  i.setIndex(offset);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.setIndex(offset);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.setIndex(offset);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
291	[BUG]  [BUGGY]  i.removeChild(buf);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.removeChild(buf);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.removeChild(buf);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
292	[BUG]  [BUGGY]  i.remove(offset);  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.remove(offset);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.remove(offset);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
293	[BUG]  [BUGGY]  i.remove(0);  [CE]  illegal  start  of  type  [FE]                                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.remove(0);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.remove(0);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
294	[BUG]  [BUGGY]  entryOffset  +=  available;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  available;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  available;	  entryOffset    +=    remaining;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
295	[BUG]  [BUGGY]  entryOffset  -=  read  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  read  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  read  +  1;	  entryOffset    -=    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
296	[BUG]  [BUGGY]  entryOffset  -=  available  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  available  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  available  +  1;	  entryOffset    -=    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
297	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  0);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  readNow  =  is.read(buf,  offset,  0);  hasHitEOF  =  false;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	readNow  =  is.read(buf,  offset,  0);  hasHitEOF  =  false;	  readNow    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
298	[BUG]  [BUGGY]  entryOffset  +=  len  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  len  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  len  +  1;	  entryOffset    +=    offset    +    1;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
299	[BUG]  [BUGGY]  entryOffset  +=  readSize  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  readSize  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  readSize  +  1;	  entryOffset    +=    read    +    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
300	[BUG]  [BUGGY]  entryOffset  +=  numToRead  /  2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  /  2;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  /  2;	  entryOffset    +=    numToRead    *    2;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
301	[BUG]  [BUGGY]  EntryOffset  entrySize  -=  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  EntryOffset  entrySize  -=  SMALL_BUFFER_SIZE;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	EntryOffset  entrySize  -=  SMALL_BUFFER_SIZE;	  entryOffset    -=    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
302	[BUG]  [BUGGY]  entryOffset  -=  numToRead.length  -  4;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead.length  -  4;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead.length  -  4;	  entryOffset    -=    numToRead.length;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
303	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  -1);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  readNow  =  is.read(buf,  offset,  -1);  hasHitEOF  =  false;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	readNow  =  is.read(buf,  offset,  -1);  hasHitEOF  =  false;	  readNow    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
304	[BUG]  [BUGGY]  entryOffset  +=  numRecords.length,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords.length,  hasHitEOF;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords.length,  hasHitEOF;	  entryOffset    +=    numRecords.length;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
305	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  -1);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  readNow  =  is.read(buf,  offset,  -1);  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	readNow  =  is.read(buf,  offset,  -1);  hasHitEOF  =  true;	  readNow    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
306	[BUG]  [BUGGY]  is.read(buf,  offset,  -1);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  is.read(buf,  offset,  -1);  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	is.read(buf,  offset,  -1);  hasHitEOF  =  true;	  is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
307	[BUG]  [BUGGY]  is.read(buf,  offset,  0);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  is.read(buf,  offset,  0);  hasHitEOF  =  false;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	is.read(buf,  offset,  0);  hasHitEOF  =  false;	  is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
308	[BUG]  [BUGGY]  is.read(buf,  offset,  -numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  is.read(buf,  offset,  -numToRead);  hasHitEOF  =  true;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	is.read(buf,  offset,  -numToRead);  hasHitEOF  =  true;	  is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
309	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  -1);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	hasHitEOF  =  is.read(buf,  offset,  -1);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
310	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead,  hashCode);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead,  hashCode);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	hasHitEOF  =  is.read(buf,  offset,  numToRead,  hashCode);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
311	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  SMALL_BUFFER_SIZE);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	hasHitEOF  =  is.read(buf,  offset,  SMALL_BUFFER_SIZE);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
312	[BUG]  [BUGGY]  i.setRead(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.setRead(buf,  offset,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.setRead(buf,  offset,  hasHitEOF);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
313	[BUG]  [BUGGY]  i.removeChild(buf,  offset);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.removeChild(buf,  offset);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.removeChild(buf,  offset);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
314	[BUG]  [BUGGY]  i.setRead(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.setRead(buf,  offset,  numToRead);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.setRead(buf,  offset,  numToRead);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
315	[BUG]  [BUGGY]  entryOffset  +=  padding  *  numToSkip;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  padding  *  numToSkip;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  padding  *  numToSkip;	  entryOffset    +=    numRecords    *    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
316	[BUG]  [BUGGY]  if(i.hasNext())  {  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(i.hasNext())  {  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	if(i.hasNext())  {  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
317	[BUG]  [BUGGY]  i.set(offset,  0);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.set(offset,  0);  hasHitEOF  =  false;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.set(offset,  0);  hasHitEOF  =  false;	  i.remove();    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
318	[BUG]  [BUGGY]  i.set(offset,  numToRead);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.set(offset,  numToRead);  hasHitEOF  =  false;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.set(offset,  numToRead);  hasHitEOF  =  false;	  i.remove();    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
319	[BUG]  [BUGGY]  entryOffset  -=  numRecords.length,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numRecords.length,  hasHitEOF;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numRecords.length,  hasHitEOF;	  entryOffset    -=    numRecords.length;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
320	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  -1);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	int  totalRead  =  is.read(buf,  offset,  -1);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
321	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  SMALL_BUFFER_SIZE);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	int  totalRead  =  is.read(buf,  offset,  SMALL_BUFFER_SIZE);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
322	[BUG]  [BUGGY]  int  totalRead  =  i.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  int  totalRead  =  i.read(buf,  offset,  numToRead);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	int  totalRead  =  i.read(buf,  offset,  numToRead);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
323	[BUG]  [BUGGY]  entryOffset  +=  numToRead  *  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numToRead  *  numRecords  +  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numToRead  *  numRecords  +  1;	  entryOffset    +=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
324	[BUG]  [BUGGY]  entryOffset  -=  recordSize.length;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  recordSize.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  recordSize.length;	  entryOffset    -=    totalRead.length;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
325	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i.remove();  hasHitEOF  =  is.read(buf,  offset,  hasHitEOF);	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
326	[BUG]  [BUGGY]  i  =  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i  =  is.read(buf,  offset,  -1);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i  =  is.read(buf,  offset,  -1);	  i    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
327	[BUG]  [BUGGY]  i  =  is.read(buf,  offset,  numToRead,  hashitEOF);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i  =  is.read(buf,  offset,  numToRead,  hashitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i  =  is.read(buf,  offset,  numToRead,  hashitEOF);	  i    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
328	[BUG]  [BUGGY]  i  =  is.read(buf,  offset,  numToRead  *  numRecords);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  i  =  is.read(buf,  offset,  numToRead  *  numRecords);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	i  =  is.read(buf,  offset,  numToRead  *  numRecords);	  i    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
329	[BUG]  [BUGGY]  entryOffset  +=  buf.length  +  1L;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  buf.length  +  1L;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  buf.length  +  1L;	  entryOffset    +=    totalRead    +    1L;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
330	[BUG]  [BUGGY]  entryOffset  +=  offset  +  1L;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  offset  +  1L;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  offset  +  1L;	  entryOffset    +=    totalRead    +    1L;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
331	[BUG]  [BUGGY]  entryOffset  +=  len  +  1L;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  len  +  1L;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  len  +  1L;	  entryOffset    +=    totalRead    +    1L;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
332	[BUG]  [BUGGY]  entryOffset  +=  length,  hasHitEOF  ||  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  length,  hasHitEOF  ||  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  length,  hasHitEOF  ||  is.read(buf,  offset,  hasHitEOF);	  entryOffset    +=    length,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
333	[BUG]  [BUGGY]  entryOffset  +=  recordSize.length;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  recordSize.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  recordSize.length;	  entryOffset    +=    totalRead.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
334	[BUG]  [BUGGY]  entryOffset  +=  offset.length;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  offset.length;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  offset.length;	  entryOffset    +=    totalRead.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
335	[BUG]  [BUGGY]  entryOffset  +=  len  -(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  len  -(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  len  -(int)Math.pow(10,  is.read(buf,  offset,  hasHitEOF));	  entryOffset    +=    length    -(int)Math.pow(10,    is.read(buf,    offset,    hasHitEOF));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
336	[BUG]  [BUGGY]  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  is.read(buf,  offset,  -1);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	is.read(buf,  offset,  -1);	  is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
337	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  SMALL_BUFFER_SIZE,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  numRecords  *  SMALL_BUFFER_SIZE,  hasHitEOF;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  numRecords  *  SMALL_BUFFER_SIZE,  hasHitEOF;	  entryOffset    +=    numRecords    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
338	[BUG]  [BUGGY]  entryOffset  +=  pad  -(int)Math.ceil(offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  +=  pad  -(int)Math.ceil(offset,  hasHitEOF);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  +=  pad  -(int)Math.ceil(offset,  hasHitEOF);	  entryOffset    +=    length    -(int)Math.ceil(offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
339	[BUG]  [BUGGY]  EntryOffset  entrySize  +=  0L;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  EntryOffset  entrySize  +=  0L;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	EntryOffset  entrySize  +=  0L;	  entryOffset    +=    0L;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
340	[BUG]  [BUGGY]  entryOffset  -=  length  *  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  length  *  SMALL_BUFFER_SIZE;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  length  *  SMALL_BUFFER_SIZE;	  entryOffset    -=    numToRead    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
341	[BUG]  [BUGGY]  entryOffset  -=  SMALL_BUFFER_SIZE  *  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  SMALL_BUFFER_SIZE  *  SMALL_BUFFER_SIZE;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  SMALL_BUFFER_SIZE  *  SMALL_BUFFER_SIZE;	  entryOffset    -=    numToRead    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
342	[BUG]  [BUGGY]  entryOffset  -=  len;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  len;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  len;	  entryOffset    -=    offset;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
343	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  readNow  =  is.read(buf,  offset,  -1);  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	readNow  =  is.read(buf,  offset,  -1);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
344	[BUG]  [BUGGY]  entryOffset  -=  numToRead  /  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {      [BUGGY]  entryOffset  -=  numToRead  /  1;  [BUGGY]      }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	588	588	1	replace	entryOffset  -=  numToRead  /  1;	  entryOffset    -=    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
