bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  haveHitEOF  =   "shouldReset ".equals(getRecordSize()  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =   "shouldReset ".equals(getRecordSize()  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =   "shouldReset ".equals(getRecordSize()  +  1);	  haveHitEOF    =   "shouldReset   ".equals(getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
2	[BUG]  [BUGGY]  haveHitEOF  =   "shouldReset: ".equals(getRecordSize());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =   "shouldReset: ".equals(getRecordSize());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =   "shouldReset: ".equals(getRecordSize());	  haveHitEOF    =   "shouldReset   ".equals(getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
3	[BUG]  [BUGGY]  haveHitEOF  =  hasHitEOF.equals(getRecordSize());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  hasHitEOF.equals(getRecordSize());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  hasHitEOF.equals(getRecordSize());	  haveHitEOF    =   "shouldReset   ".equals(getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
4	[BUG]  [BUGGY]  hasHitEOF  =   "shouldReset ".equals(getRecordSize()  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =   "shouldReset ".equals(getRecordSize()  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =   "shouldReset ".equals(getRecordSize()  +  1);	  haveHitEOF    =   "shouldReset   ".equals(getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
5	[BUG]  [BUGGY]  hasHitEOF  =   "shouldReset: ".equals(getRecordSize());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =   "shouldReset: ".equals(getRecordSize());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =   "shouldReset: ".equals(getRecordSize());	  haveHitEOF    =   "shouldReset   ".equals(getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
6	[BUG]  [BUGGY]  haveHitEOF  =   "shouldReset ".equals(getRecordSize()  -  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =   "shouldReset ".equals(getRecordSize()  -  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =   "shouldReset ".equals(getRecordSize()  -  1);	  haveHitEOF    =   "shouldReset   ".equals(getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
7	[BUG]  [BUGGY]  haveHitEOF  =   "shouldReset ".equals(getRecordSize(),  totalRead);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =   "shouldReset ".equals(getRecordSize(),  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =   "shouldReset ".equals(getRecordSize(),  totalRead);	  haveHitEOF    =   "shouldReset   ".equals(getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
8	[BUG]  [BUGGY]  haveHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  hasHitEOF;	  haveHitEOF    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
9	[BUG]  [BUGGY]  haveHitEOF  =  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  is.read(buf,  offset,  hasHitEOF);	  haveHitEOF    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
10	[BUG]  [BUGGY]  hasHitEOF  |=  false;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  |=  false;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  |=  false;	  hasHitEOF    &=    false;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
11	[BUG]  [BUGGY]  hasHitEOF  &=  is.readNow();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.readNow();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.readNow();	  hasHitEOF    &=    false;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
12	[BUG]  [BUGGY]  hasHitEOF  &=  is.readNow(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.readNow(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.readNow(buf,  offset,  numToRead);	  hasHitEOF    &=    false;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
13	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entryOffset  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  entryOffset  +  1);	  hasHitEOF    &=    is.read(buf,    offset,    totalRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
14	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entrySize  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  entrySize  +  1);	  hasHitEOF    &=    is.read(buf,    offset,    totalRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
15	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  totalRead  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  totalRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  totalRead  +  1);	  hasHitEOF    &=    is.read(buf,    offset,    totalRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
16	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  totalRead  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  totalRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  totalRead  +  1);	  hasHitEOF    &=    is.read(buf,    offset,    totalRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
17	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  len  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  len  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  len  +  1);	  hasHitEOF    &=    is.read(buf,    offset,    totalRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
18	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  entryOffset,  numToRead);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    totalRead,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
19	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  numToRead);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    totalRead,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
20	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead,  entryOffset,  numToRead);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    totalRead,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
21	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  totalRead,  numToRead);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  totalRead,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  totalRead,  numToRead);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    totalRead,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
22	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  totalRead,  numToRead);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  totalRead,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  totalRead,  numToRead);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    totalRead,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
23	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead,  entrySize);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    totalRead,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
24	[BUG]  [BUGGY]  ||  entryOffset  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset  ==  0)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
25	[BUG]  [BUGGY]  ||  entrySize  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entrySize  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entrySize  ==  0)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
26	[BUG]  [BUGGY]  allowSkip(entryOffset)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  allowSkip(entryOffset)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	allowSkip(entryOffset)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
27	[BUG]  [BUGGY]  ||  entryOffset  ==  0)  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset  ==  0)  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset  ==  0)  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(entryOffset    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
28	[BUG]  [BUGGY]  trecută  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  trecută  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	trecută  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
29	[BUG]  [BUGGY]  ||  entryOffset  ==  0)  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset  ==  0)  {  throw  new  IllegalStateException( " ");  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset  ==  0)  {  throw  new  IllegalStateException( " ");	  if(entryOffset    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
30	[BUG]  [BUGGY]  ||  entryOffset  ==  0)  {  throw  new  IllegalStateException( "TarArchiveEntry  is  not  in  use. ");  }  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset  ==  0)  {  throw  new  IllegalStateException( "TarArchiveEntry  is  not  in  use. ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset  ==  0)  {  throw  new  IllegalStateException( "TarArchiveEntry  is  not  in  use. ");  }	  if(entryOffset    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
31	[BUG]  [BUGGY]  hasHitEOF  =(numToRead  >  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(numToRead  >  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(numToRead  >  0);	  hasHitEOF    =(numToRead    ==    0);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
32	[BUG]  [BUGGY]  hasHitEOF  =(numToRead  ==  0)&&  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(numToRead  ==  0)&&  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(numToRead  ==  0)&&  is.read(buf,  offset,  totalRead);	  hasHitEOF    =(numToRead    ==    0);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
33	[BUG]  [BUGGY]  hasHitEOF  =(numToRead  ==  0)&&  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(numToRead  ==  0)&&  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(numToRead  ==  0)&&  is.read(buf,  offset,  numToRead);	  hasHitEOF    =(numToRead    ==    0);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
34	[BUG]  [BUGGY]  hasHitEOF  =(numToRead  <  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(numToRead  <  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(numToRead  <  0);	  hasHitEOF    =(numToRead    ==    0);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
35	[BUG]  [BUGGY]  hasHitEOF  =(numToRead  >=  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(numToRead  >=  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(numToRead  >=  0);	  hasHitEOF    =(numToRead    ==    0);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
36	[BUG]  [BUGGY]  hasHitEOF  |=!hasHitEOF;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  |=!hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  |=!hasHitEOF;	  hasHitEOF    |=    true;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
37	[BUG]  [BUGGY]  hasHitEOF  |=  is.hashCode();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  |=  is.hashCode();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  |=  is.hashCode();	  hasHitEOF    |=    true;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
38	[BUG]  [BUGGY]  hasHitEOF  |=  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  |=  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  |=  1;	  hasHitEOF    |=    true;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
39	[BUG]  [BUGGY]  hasHitEOF  |=  is.hasNext();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  |=  is.hasNext();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  |=  is.hasNext();	  hasHitEOF    |=    true;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
40	[BUG]  [BUGGY]  hasHitEOF  |=!shouldReset;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  |=!shouldReset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  |=!shouldReset;	  hasHitEOF    |=    true;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
41	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >  SMALL_BUFFER_SIZE;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >  SMALL_BUFFER_SIZE;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
42	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >=  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >=  SMALL_BUFFER_SIZE;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >=  SMALL_BUFFER_SIZE;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
43	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  +  1;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
44	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  ==  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  ==  SMALL_BUFFER_SIZE;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  ==  SMALL_BUFFER_SIZE;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
45	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()!=  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()!=  SMALL_BUFFER_SIZE;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()!=  SMALL_BUFFER_SIZE;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
46	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >>  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >>  SMALL_BUFFER_SIZE;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >>  SMALL_BUFFER_SIZE;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
47	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(numToRead,  entryOffset);	  hasHitEOF    &=    currEntry.hashCode(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
48	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entrySize,  totalRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entrySize,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(entrySize,  totalRead);	  hasHitEOF    &=    currEntry.hashCode(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
49	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(0,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(0,  entryOffset);	  hasHitEOF    &=    currEntry.hashCode(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
50	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entrySize,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entrySize,  entryOffset  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(entrySize,  entryOffset  +  1);	  hasHitEOF    &=    currEntry.hashCode(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
51	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entry,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entry,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(entry,  offset,  entryOffset);	  hasHitEOF    &=    currEntry.hashCode(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
52	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(offset,  entrySize);	  hasHitEOF    &=    currEntry.hashCode(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
53	[BUG]  [BUGGY]  haveHitEOF  =   "shouldReset: ".equals(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =   "shouldReset: ".equals(currEntry.getName());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =   "shouldReset: ".equals(currEntry.getName());	  haveHitEOF    =   "shouldReset   ".equals(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
54	[BUG]  [BUGGY]  haveHitEOF  =  hasHitEOF.equals(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  hasHitEOF.equals(currEntry.getName());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  hasHitEOF.equals(currEntry.getName());	  haveHitEOF    =   "shouldReset   ".equals(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
55	[BUG]  [BUGGY]  hasHitEOF  =   "shouldReset ".equals(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =   "shouldReset ".equals(currEntry.getName());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =   "shouldReset ".equals(currEntry.getName());	  haveHitEOF    =   "shouldReset   ".equals(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
56	[BUG]  [BUGGY]  hasHitEOF  =   "shouldReset: ".equals(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =   "shouldReset: ".equals(currEntry.getName());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =   "shouldReset: ".equals(currEntry.getName());	  haveHitEOF    =   "shouldReset   ".equals(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
57	[BUG]  [BUGGY]  haveHitEOF  =   "shouldReset ".equals(currEntry.getName())&&  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =   "shouldReset ".equals(currEntry.getName())&&  hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =   "shouldReset ".equals(currEntry.getName())&&  hasHitEOF;	  haveHitEOF    =   "shouldReset   ".equals(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
58	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  &&  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  &&  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  &&  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.hashCode()    ||    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
59	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.hashCode()  ||  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.hashCode()  ||  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.hashCode()  ||  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.hashCode()    ||    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
60	[BUG]  [BUGGY]  hasHitEOF  =  hasHitEOF  ||  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  hasHitEOF  ||  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  hasHitEOF  ||  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.hashCode()    ||    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
61	[BUG]  [BUGGY]  hasHitEOF  =  i.hashCode()  ||  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  i.hashCode()  ||  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  i.hashCode()  ||  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.hashCode()    ||    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
62	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  totalRead);	  hasHitEOF    =    is.hashCode()    ||    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
63	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entryOffset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  entryOffset,  hasHitEOF);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    totalRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
64	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  entryOffset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  entryOffset);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    totalRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
65	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  totalRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  totalRead,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  totalRead,  entryOffset);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    totalRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
66	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  totalRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  totalRead);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    totalRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
67	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  totalRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  totalRead,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  totalRead,  entryOffset);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    totalRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
68	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead,  entryOffset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead,  entryOffset,  hasHitEOF);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    totalRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
69	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entryOffset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  entryOffset,  totalRead);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    totalRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
70	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  entrySize);	  hasHitEOF    &=    is.read(buf,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
71	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  entrySize);	  hasHitEOF    &=    is.read(buf,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
72	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  entrySize);	  hasHitEOF    &=    is.read(buf,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
73	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  entrySize  :  is.read(buf,  offset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  entrySize  :  is.read(buf,  offset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  entrySize  :  is.read(buf,  offset);	  hasHitEOF    &=    is.read(buf,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
74	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  entrySize);	  hasHitEOF    &=    is.read(buf,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
75	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset);	  hasHitEOF    &=    is.read(buf,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
76	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  if(entryOffset  >=  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	if(entryOffset  >=  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >    entrySize)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
77	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  if(entryOffset  <  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	if(entryOffset  <  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >    entrySize)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
78	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  if(entryOffset  ==  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	if(entryOffset  ==  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >    entrySize)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
79	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  if(entryOffset  >  entrySize)  {  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	if(entryOffset  >  entrySize)  {  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >    entrySize)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
80	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  if(entryOffset  <  entrySize)  {  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	if(entryOffset  <  entrySize)  {  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >    entrySize)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
81	[BUG]  [BUGGY]  if(entryOffset  >  totalRead)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  if(entryOffset  >  totalRead)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	if(entryOffset  >  totalRead)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >    entrySize)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
82	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
83	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entryOffset);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
84	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  entryOffset,  hasHitEOF);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
85	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(buf,  offset,  entryOffset);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
86	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  entryOffset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  entryOffset,  entrySize);	  hasHitEOF    &=    currEntry.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
87	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(entryOffset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(entryOffset,  totalRead);	  hasHitEOF    &=    currEntry.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
88	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(entry,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(entry,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(entry,  offset,  entrySize);	  hasHitEOF    &=    currEntry.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
89	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(entryOffset,  entrySize,  totalRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(entryOffset,  entrySize,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(entryOffset,  entrySize,  totalRead);	  hasHitEOF    &=    currEntry.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
90	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(entryOffset,  entrySize,  numRecords);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(entryOffset,  entrySize,  numRecords);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(entryOffset,  entrySize,  numRecords);	  hasHitEOF    &=    currEntry.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
91	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(entryOffset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(entryOffset,  entrySize  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(entryOffset,  entrySize  +  1);	  hasHitEOF    &=    currEntry.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
92	[BUG]  [BUGGY]  hasHitEOF  =(entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entryOffset  +  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entryOffset  +  numToRead);	  hasHitEOF    =(entryOffset    {    0);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
93	[BUG]  [BUGGY]  hasHitEOF  =(entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entryOffset  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entryOffset  +  1);	  hasHitEOF    =(entryOffset    {    0);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
94	[BUG]  [BUGGY]  hasHitEOF  =(entryOffset  >  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entryOffset  >  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entryOffset  >  0);	  hasHitEOF    =(entryOffset    {    0);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
95	[BUG]  [BUGGY]  hasHitEOF  =(entryOffset  +  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entryOffset  +  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entryOffset  +  0);	  hasHitEOF    =(entryOffset    {    0);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
96	[BUG]  [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  is.read(buf,  offset,  entryOffset);	  haveHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
97	[BUG]  [BUGGY]  haveHitEOF  &=  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  currEntry.read(buf,  offset,  numToRead);	  haveHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
98	[BUG]  [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  is.read(buf,  offset,  entrySize);	  haveHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
99	[BUG]  [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  is.read(buf,  offset,  numToRead,  hasHitEOF);	  haveHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
100	[BUG]  [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  is.read(buf,  offset,  entryOffset,  numToRead);	  haveHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
101	[BUG]  [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  is.read(buf,  offset,  totalRead);	  haveHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
102	[BUG]  [BUGGY]  haveHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead);	  haveHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
103	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  -entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  -entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  -entryOffset);	  hasHitEOF    &=    is.read(buf,    offset,    -entryOffset);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
104	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  -entrySize);	  hasHitEOF    &=    is.read(buf,    offset,    -entryOffset);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
105	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  -numToRead);	  hasHitEOF    &=    is.read(buf,    offset,    -entryOffset);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
106	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -entryOffset  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  -entryOffset  +  1);	  hasHitEOF    &=    is.read(buf,    offset,    -entryOffset);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
107	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  -entryOffset,  numToRead);	  hasHitEOF    &=    is.read(buf,    offset,    -entryOffset);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
108	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  -entryOffset);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  -entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  -entryOffset);	  hasHitEOF    &=    is.read(buf,    offset,    -entryOffset);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
109	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ch  =  is.read(buf,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	ch  =  is.read(buf,  offset,  entryOffset);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
110	[BUG]  [BUGGY]  ch  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ch  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	ch  =  currEntry.read(buf,  offset,  numToRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
111	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ch  =  is.read(buf,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	ch  =  is.read(buf,  offset,  entrySize);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
112	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ch  =  is.read(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	ch  =  is.read(buf,  offset,  entryOffset  +  numToRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
113	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ch  =  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	ch  =  is.read(buf,  offset,  totalRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
114	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ch  =  is.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	ch  =  is.read(buf,  offset,  entryOffset,  numToRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
115	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.isEOF(entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.isEOF(entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.isEOF(entryOffset);	  hasHitEOF    =    is.isEOF(entryOffset);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
116	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF(entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF(entryOffset  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF(entryOffset  +  1);	  hasHitEOF    =    is.isEOF(entryOffset);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
117	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF(entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF(entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF(entryOffset,  numToRead);	  hasHitEOF    =    is.isEOF(entryOffset);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
118	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF(entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF(entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF(entrySize);	  hasHitEOF    =    is.isEOF(entryOffset);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
119	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF(entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF(entryOffset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF(entryOffset,  totalRead);	  hasHitEOF    =    is.isEOF(entryOffset);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
120	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF(entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF(entryOffset  +  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF(entryOffset  +  numToRead);	  hasHitEOF    =    is.isEOF(entryOffset);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
121	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  entryOffset);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
122	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  entrySize);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
123	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  entryOffset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  entryOffset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  entryOffset  +  1,  totalRead);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
124	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  totalRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  totalRead,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  totalRead,  entrySize);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
125	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  2,  totalRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  2,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  2,  totalRead);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
126	[BUG]  [BUGGY]  hasHitEOF  &=  2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  2;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  2;	  hasHitEOF    &=    1;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
127	[BUG]  [BUGGY]  hasHitEOF  &=  0;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  0;	  hasHitEOF    &=    1;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
128	[BUG]  [BUGGY]  hasHitEOF  &=  1L;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  1L;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  1L;	  hasHitEOF    &=    1;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
129	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.read(buf,  offset  +  1,  totalRead);	  hasHitEOF    &=    1;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
130	[BUG]  [BUGGY]  hasHitEOF  &=  is.readNow  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.readNow  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.readNow  +  1;	  hasHitEOF    &=    is.readNow;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
131	[BUG]  [BUGGY]  hasHitEOF  &=  is.readByte;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.readByte;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.readByte;	  hasHitEOF    &=    is.readNow;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
132	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode;	  hasHitEOF    &=    is.readNow;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
133	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.readNow;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.readNow;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.readNow;	  hasHitEOF    &=    is.readNow;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
134	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  entryOffset);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
135	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  numToRead,  hasHitEOF);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
136	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  entrySize);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
137	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  numToRead  +  1);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
138	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()!=  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()!=  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()!=  0;	  hasHitEOF    =    is.hashCode()    ==    -1;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
139	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.hashCode()  ==  -1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.hashCode()  ==  -1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.hashCode()  ==  -1;	  hasHitEOF    =    is.hashCode()    ==    -1;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
140	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >=  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >=  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >=  0;	  hasHitEOF    =    is.hashCode()    ==    -1;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
141	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >  -1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >  -1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >  -1;	  hasHitEOF    =    is.hashCode()    ==    -1;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
142	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >>  0;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >>  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >>  0;	  hasHitEOF    =    is.hashCode()    ==    -1;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
143	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
144	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  &&  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  &&  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  &&  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
145	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  ==  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  ==  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  ==  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
146	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
147	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()!=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()!=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()!=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
148	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >>  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >>  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >>  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
149	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  buf.length  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  buf.length  -  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  buf.length  -  1);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
150	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  buf.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  buf.length);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  buf.length);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
151	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entryOffset,  buf.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entryOffset,  buf.length);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  entryOffset,  buf.length);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
152	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  buf.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  buf.length);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  buf.length);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
153	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  buf.length,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  buf.length,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  buf.length,  numToRead);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
154	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF(buf,  offset,  numToRead,  hasHitEOF);	  hasHitEOF    &=    currEntry.isEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
155	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF(buf,  offset,  entryOffset,  numToRead);	  hasHitEOF    &=    currEntry.isEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
156	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF(buf,  offset,  entrySize);	  hasHitEOF    &=    currEntry.isEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
157	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF(buf,  offset,  totalRead);	  hasHitEOF    &=    currEntry.isEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
158	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF(buf,  offset,  entryOffset);	  hasHitEOF    &=    currEntry.isEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
159	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  numToRead,  is.read);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  numToRead,  is.read);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF(buf,  offset,  numToRead,  is.read);	  hasHitEOF    &=    currEntry.isEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
160	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  entrySize,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF(buf,  offset,  entrySize,  numToRead);	  hasHitEOF    &=    currEntry.isEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
161	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  len);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  len);	  hasHitEOF    &=    is.read(buf,    offset,    len);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
162	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  len,  entryOffset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  len,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  len,  entryOffset);	  hasHitEOF    &=    is.read(buf,    offset,    len);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
163	[BUG]  [BUGGY]  hasHitEOF  =  shouldReset  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  shouldReset  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  shouldReset  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    shouldReset;    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
164	[BUG]  [BUGGY]  hasHitEOF  =!hashRecord.hashCode;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashRecord.hashCode;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashRecord.hashCode;	  hasHitEOF    =!hashRecord;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
165	[BUG]  [BUGGY]  hasHitEOF  =!hashRecords;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashRecords;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashRecords;	  hasHitEOF    =!hashRecord;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
166	[BUG]  [BUGGY]  hasHitEOF  =!hashRecord.hashCode();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashRecord.hashCode();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashRecord.hashCode();	  hasHitEOF    =!hashRecord;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
167	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.readNow();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.readNow();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.readNow();	  hasHitEOF    =    is.isEOF()    &&    is.readNow();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
168	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  currEntry.readNow();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  currEntry.readNow();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  currEntry.readNow();	  hasHitEOF    =    is.isEOF()    &&    is.readNow();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
169	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  &&  is.readNow();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  &&  is.readNow();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  &&  is.readNow();	  hasHitEOF    =    is.isEOF()    &&    is.readNow();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
170	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.isEOF()  &&  is.readNow();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.isEOF()  &&  is.readNow();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.isEOF()  &&  is.readNow();	  hasHitEOF    =    is.isEOF()    &&    is.readNow();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
171	[BUG]  [BUGGY]  hasHitEOF  =  is.shouldReset()  &&  is.readNow();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.shouldReset()  &&  is.readNow();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.shouldReset()  &&  is.readNow();	  hasHitEOF    =    is.isEOF()    &&    is.readNow();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
172	[BUG]  [BUGGY]  hasHitEOF  =  is.hasHitEOF()  &&  is.readNow();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hasHitEOF()  &&  is.readNow();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hasHitEOF()  &&  is.readNow();	  hasHitEOF    =    is.isEOF()    &&    is.readNow();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
173	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  len);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    len);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
174	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  len,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  len,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  len,  numToRead);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    len);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
175	[BUG]  [BUGGY]  hasHitEOF  =!encoding.hashCode();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!encoding.hashCode();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!encoding.hashCode();	  hasHitEOF    =!encoding;    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
176	[BUG]  [BUGGY]  hasHitEOF  =(entryOffset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entryOffset  +  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entryOffset  +  entrySize);	  hasHitEOF    =(entryOffset    >=    0);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
177	[BUG]  [BUGGY]  hasHitEOF  =(entryOffset  -  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entryOffset  -  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entryOffset  -  0);	  hasHitEOF    =(entryOffset    >=    0);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
178	[BUG]  [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  entryOffset);	  hasHitEOF    &=    is.readAndClearBuffer(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
179	[BUG]  [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  entrySize);	  hasHitEOF    &=    is.readAndClearBuffer(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
180	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.readAndClearBuffer(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.readAndClearBuffer(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.readAndClearBuffer(buf,  offset,  numToRead);	  hasHitEOF    &=    is.readAndClearBuffer(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
181	[BUG]  [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  totalRead);	  hasHitEOF    &=    is.readAndClearBuffer(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
182	[BUG]  [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  entryOffset,  numToRead);	  hasHitEOF    &=    is.readAndClearBuffer(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
183	[BUG]  [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  entryOffset  +  numToRead);	  hasHitEOF    &=    is.readAndClearBuffer(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
184	[BUG]  [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  0,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  0,  numToRead);	  hasHitEOF    &=    is.readAndClearBuffer(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
185	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  entrySize,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  entrySize,  hasHitEOF);	  hasHitEOF    &=    is.read(buf,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
186	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  hasHitEOF):  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  hasHitEOF):  hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  hasHitEOF):  hasHitEOF;	  hasHitEOF    &=    is.read(buf,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
187	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(buf,  offset,  hasHitEOF);	  hasHitEOF    &=    is.read(buf,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
188	[BUG]  [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    &=    is.read(buf,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
189	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  entryOffset);	  hasHitEOF    &=    currEntry.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
190	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  entrySize);	  hasHitEOF    &=    currEntry.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
191	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  entryOffset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  entryOffset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  entryOffset  +  1,  totalRead);	  hasHitEOF    &=    currEntry.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
192	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset  +  1,  totalRead);	  hasHitEOF    &=    currEntry.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
193	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  2,  totalRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  2,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset  +  2,  totalRead);	  hasHitEOF    &=    currEntry.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
194	[BUG]  [BUGGY]  entryOffset  +=  len;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entryOffset  +=  len;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entryOffset  +=  len;	  i.remove();    entryOffset    +=    len;    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
195	[BUG]  [BUGGY]  i.remove();  entryOffset  +=  totalRead;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  i.remove();  entryOffset  +=  totalRead;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	i.remove();  entryOffset  +=  totalRead;	  i.remove();    entryOffset    +=    len;    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
196	[BUG]  [BUGGY]  i.remove();  entryOffset  +=  numToRead;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  i.remove();  entryOffset  +=  numToRead;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	i.remove();  entryOffset  +=  numToRead;	  i.remove();    entryOffset    +=    len;    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
197	[BUG]  [BUGGY]  entrySize  =  i.remove();  entryOffset  +=  len;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entrySize  =  i.remove();  entryOffset  +=  len;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entrySize  =  i.remove();  entryOffset  +=  len;	  i.remove();    entryOffset    +=    len;    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
198	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getEntry(numToRead);  entryOffset  +=  entry.length;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  Entry  entry  =  currEntry.getEntry(numToRead);  entryOffset  +=  entry.length;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	Entry  entry  =  currEntry.getEntry(numToRead);  entryOffset  +=  entry.length;	  i.remove();    entryOffset    +=    len;    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
199	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getEntry(numToRead,  numToRead);  entryOffset  +=  entrySize;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  Entry  entry  =  currEntry.getEntry(numToRead,  numToRead);  entryOffset  +=  entrySize;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	Entry  entry  =  currEntry.getEntry(numToRead,  numToRead);  entryOffset  +=  entrySize;	  i.remove();    entryOffset    +=    len;    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
200	[BUG]  [BUGGY]  entryOffset  +=  numToRead;  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entryOffset  +=  numToRead;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entryOffset  +=  numToRead;	  i.remove();    entryOffset    +=    len;    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
201	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  0);	  int    totalRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
202	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  -1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  -1);	  int    totalRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
203	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  0,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  0,  numToRead);	  int    totalRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
204	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  0L);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  0L);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  0L);	  int    totalRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
205	[BUG]  [BUGGY]  byte  totalRead  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  byte  totalRead  =  is.read(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	byte  totalRead  =  is.read(buf,  offset,  0);	  int    totalRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
206	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entryOffset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(entryOffset,  totalRead);	  hasHitEOF    &=    currEntry.hashCode(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
207	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entryOffset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entryOffset,  entrySize  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(entryOffset,  entrySize  +  1);	  hasHitEOF    &=    currEntry.hashCode(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
208	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(numToRead,  entrySize);	  hasHitEOF    &=    currEntry.hashCode(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
209	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  entryOffset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(numToRead,  entryOffset,  entrySize);	  hasHitEOF    &=    currEntry.hashCode(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
210	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entryOffset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entryOffset  +  1,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(entryOffset  +  1,  entrySize);	  hasHitEOF    &=    currEntry.hashCode(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
211	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entry,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entry,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(entry,  offset,  entrySize);	  hasHitEOF    &=    currEntry.hashCode(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
212	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset,  numToRead);	  hasHitEOF    &=    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
213	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset  +  numToRead);	  hasHitEOF    &=    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
214	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  0,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  0,  numToRead);	  hasHitEOF    &=    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
215	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  entryOffset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  entryOffset,  entrySize);	  hasHitEOF    &=    is.read(buf,    entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
216	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  entryOffset  :  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  entryOffset  :  is.read(buf,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  entryOffset  :  is.read(buf,  offset,  entrySize);	  hasHitEOF    &=    is.read(buf,    entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
217	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  entryOffset  +  1  :  is.read(buf,  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  entryOffset  +  1  :  is.read(buf,  entryOffset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  entryOffset  +  1  :  is.read(buf,  entryOffset,  entrySize);	  hasHitEOF    &=    is.read(buf,    entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
218	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  entryOffset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF(buf,  entryOffset,  entrySize);	  hasHitEOF    &=    is.read(buf,    entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
219	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode  +  1;	  hasHitEOF    =    is.hashCode;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
220	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode  &&  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode  &&  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode  &&  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.hashCode;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
221	[BUG]  [BUGGY]  hasHitEOF  =  i.hashCode;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  i.hashCode;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  i.hashCode;	  hasHitEOF    =    is.hashCode;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
222	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.hashCode;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.hashCode;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.hashCode;	  hasHitEOF    =    is.hashCode;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
223	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode  +  numToRead;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode  +  numToRead;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode  +  numToRead;	  hasHitEOF    =    is.hashCode;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
224	[BUG]  [BUGGY]  HasHitEOF  &=  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  HasHitEOF  &=  is.read(buf,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	HasHitEOF  &=  is.read(buf,  offset,  entryOffset);	  HasHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
225	[BUG]  [BUGGY]  HasHitEOF  &=  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  HasHitEOF  &=  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	HasHitEOF  &=  currEntry.read(buf,  offset,  numToRead);	  HasHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
226	[BUG]  [BUGGY]  HasHitEOF  &=  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  HasHitEOF  &=  is.read(buf,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	HasHitEOF  &=  is.read(buf,  offset,  entrySize);	  HasHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
227	[BUG]  [BUGGY]  HasHitEOF  &=  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  HasHitEOF  &=  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	HasHitEOF  &=  is.read(buf,  offset,  numToRead,  hasHitEOF);	  HasHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
228	[BUG]  [BUGGY]  HasHitEOF  &=  is.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  HasHitEOF  &=  is.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	HasHitEOF  &=  is.read(buf,  offset,  entryOffset,  numToRead);	  HasHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
229	[BUG]  [BUGGY]  HasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  HasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	HasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead);	  HasHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
230	[BUG]  [BUGGY]  HasHitEOF  &=  currEntry.isEOF(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  HasHitEOF  &=  currEntry.isEOF(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	HasHitEOF  &=  currEntry.isEOF(buf,  offset,  numToRead);	  HasHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
231	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entrySize);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
232	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entryOffset,  numToRead);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
233	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  hasHitEOF);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
234	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  len);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
235	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  ch);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  ch);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  ch);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
236	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  is.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  is.length);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  is.length);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
237	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.isEOF();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.isEOF();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.isEOF();	  hasHitEOF    =    is.isEOF()    ||    is.isEOF();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
238	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isISOControl();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isISOControl();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.isISOControl();	  hasHitEOF    =    is.isEOF()    ||    is.isEOF();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
239	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isOSD();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isOSD();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.isOSD();	  hasHitEOF    =    is.isEOF()    ||    is.isEOF();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
240	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isECS();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isECS();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.isECS();	  hasHitEOF    =    is.isEOF()    ||    is.isEOF();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
241	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isIOF();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isIOF();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.isIOF();	  hasHitEOF    =    is.isEOF()    ||    is.isEOF();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
242	[BUG]  [BUGGY]  entryOffset  +=  length;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entryOffset  +=  length;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entryOffset  +=  length;	  i.remove();    entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
243	[BUG]  [BUGGY]  EntryEntry  currEntry  =  currEntry.getEntry(numToRead);  entryOffset  +=  currEntry.length;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  EntryEntry  currEntry  =  currEntry.getEntry(numToRead);  entryOffset  +=  currEntry.length;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	EntryEntry  currEntry  =  currEntry.getEntry(numToRead);  entryOffset  +=  currEntry.length;	  i.remove();    entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
244	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getEntry(numToRead);  entryOffset  +=  entrySize;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  Entry  entry  =  currEntry.getEntry(numToRead);  entryOffset  +=  entrySize;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	Entry  entry  =  currEntry.getEntry(numToRead);  entryOffset  +=  entrySize;	  i.remove();    entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
245	[BUG]  [BUGGY]  entrySize  =  i.remove();  entryOffset  +=  length;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entrySize  =  i.remove();  entryOffset  +=  length;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entrySize  =  i.remove();  entryOffset  +=  length;	  i.remove();    entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
246	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  &&  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  &&  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  &&  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.hashCode()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
247	[BUG]  [BUGGY]  hasHitEOF  =  numToRead.hashCode()  ||  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  numToRead.hashCode()  ||  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  numToRead.hashCode()  ||  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.hashCode()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
248	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  numToRead,  hasHitEOF);	  hasHitEOF    =    is.hashCode()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
249	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  numToRead  +  1);	  hasHitEOF    =    is.hashCode()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
250	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.hashCode()  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.hashCode()  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.hashCode()  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.hashCode()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
251	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  0);	  hasHitEOF    =    is.hashCode()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
252	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  numRecords);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  numRecords);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
253	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  hasHitEOF);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
254	[BUG]  [BUGGY]  haveHitEOF  &=  true;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  true;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  true;	  haveHitEOF    &=    false;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
255	[BUG]  [BUGGY]  haveHitEOF  &=  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  1;	  haveHitEOF    &=    false;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
256	[BUG]  [BUGGY]  haveHitEOF  &=  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  null;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  null;	  haveHitEOF    &=    false;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
257	[BUG]  [BUGGY]  haveHitEOF  |=  false;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  |=  false;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  |=  false;	  haveHitEOF    &=    false;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
258	[BUG]  [BUGGY]  haveHitEOF  &=  is.readNow();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  is.readNow();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  is.readNow();	  haveHitEOF    &=    false;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
259	[BUG]  [BUGGY]  haveHitEOF  &=  is.readNow;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  is.readNow;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  is.readNow;	  haveHitEOF    &=    false;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
260	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  entryOffset);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
261	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset  +  1,  totalRead);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
262	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  entrySize);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
263	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  currEntry.read(buf,  offset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  currEntry.read(buf,  offset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  currEntry.read(buf,  offset  +  1,  totalRead);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
264	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  entryOffset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  entryOffset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.read(buf,  entryOffset  +  1,  totalRead);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
265	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  2,  totalRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  2,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  2,  totalRead);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
266	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(numToRead,  offset,  entryOffset);	  hasHitEOF    &=    currEntry.hashCode(buf,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
267	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  entryOffset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(numToRead,  entryOffset,  hasHitEOF);	  hasHitEOF    &=    currEntry.hashCode(buf,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
268	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entryOffset,  buf,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entryOffset,  buf,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(entryOffset,  buf,  numToRead);	  hasHitEOF    &=    currEntry.hashCode(buf,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
269	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(numToRead,  offset,  numToRead);	  hasHitEOF    &=    currEntry.hashCode(buf,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
270	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entry,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entry,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(entry,  offset,  numToRead);	  hasHitEOF    &=    currEntry.hashCode(buf,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
271	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  toHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  toHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  toHitEOF);	  hasHitEOF    &=    is.read(buf,    offset,    toHitEOF);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
272	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  toHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  toHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  toHitEOF);	  hasHitEOF    &=    is.read(buf,    offset,    toHitEOF);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
273	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  count(toHitEOF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  count(toHitEOF));  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  count(toHitEOF));	  hasHitEOF    &=    is.read(buf,    offset,    toHitEOF);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
274	[BUG]  [BUGGY]  hasHitEOF  =(numToRead  >>  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(numToRead  >>  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(numToRead  >>  0);	  hasHitEOF    =(entryOffset    >>    0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
275	[BUG]  [BUGGY]  hasHitEOF  =(entrySize  >>  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entrySize  >>  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entrySize  >>  0);	  hasHitEOF    =(entryOffset    >>    0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
276	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  offset  +  1,  totalRead);	  hasHitEOF    &=    is.read(buf,    entryOffset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
277	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  entryOffset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  entryOffset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF(buf,  entryOffset  +  1,  totalRead);	  hasHitEOF    &=    is.read(buf,    entryOffset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
278	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset  +  1,  totalRead);	  hasHitEOF    &=    is.read(buf,    entryOffset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
279	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  entryOffset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(buf,  entryOffset,  entrySize);	  hasHitEOF    &=    currEntry.in.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
280	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(buf,  offset,  entrySize);	  hasHitEOF    &=    currEntry.in.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
281	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  entrySize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(buf,  entrySize);	  hasHitEOF    &=    currEntry.in.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
282	[BUG]  [BUGGY]  haveHitEOF  &=  currEntry.in.read(buf,  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  currEntry.in.read(buf,  entryOffset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  currEntry.in.read(buf,  entryOffset,  entrySize);	  hasHitEOF    &=    currEntry.in.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
283	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(entryOffset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(entryOffset,  totalRead);	  hasHitEOF    &=    currEntry.in.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
284	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  entryOffset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  entryOffset  +  1,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(buf,  entryOffset  +  1,  entrySize);	  hasHitEOF    &=    currEntry.in.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
285	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(numToRead,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(numToRead,  entrySize);	  hasHitEOF    &=    currEntry.in.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
286	[BUG]  [BUGGY]  haveHitEOF  =  is.hashCode()  >  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  is.hashCode()  >  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  is.hashCode()  >  1;	  haveHitEOF    =    is.hashCode()    >    0;    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
287	[BUG]  [BUGGY]  haveHitEOF  =  is.hashCode()  <  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  is.hashCode()  <  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  is.hashCode()  <  0;	  haveHitEOF    =    is.hashCode()    >    0;    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
288	[BUG]  [BUGGY]  haveHitEOF  =  is.hashCode()  >=  0;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  is.hashCode()  >=  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  is.hashCode()  >=  0;	  haveHitEOF    =    is.hashCode()    >    0;    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
289	[BUG]  [BUGGY]  haveHitEOF  =  is.hashCode()!=  0;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  is.hashCode()!=  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  is.hashCode()!=  0;	  haveHitEOF    =    is.hashCode()    >    0;    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
290	[BUG]  [BUGGY]  hasHitEOF  =  is.hasHitEOF  &&  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hasHitEOF  &&  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hasHitEOF  &&  is.read(buf,  offset,  numToRead);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
291	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode(buf,  offset,  numToRead);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
292	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset,  entryOffset);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
293	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset,  entrySize);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
294	[BUG]  [BUGGY]  hasHitEOF  =  is.hasHitEOF(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hasHitEOF(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hasHitEOF(buf,  offset,  numToRead);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
295	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >  1;	  hasHitEOF    =    is.hashCode()    >    0;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
296	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  <  0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  <  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  <  0;	  hasHitEOF    =    is.hashCode()    >    0;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
297	[BUG]  [BUGGY]  hasHitEOF  =  is.shouldReset  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.shouldReset  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.shouldReset  +  1;	  hasHitEOF    =    is.shouldReset;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
298	[BUG]  [BUGGY]  hasHitEOF  =  is.shouldReset  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.shouldReset  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.shouldReset  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.shouldReset;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
299	[BUG]  [BUGGY]  hasHitEOF  =  is.shouldReset  &&  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.shouldReset  &&  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.shouldReset  &&  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.shouldReset;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
300	[BUG]  [BUGGY]  hasHitEOF  =  is.shouldReset  +  numToRead;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.shouldReset  +  numToRead;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.shouldReset  +  numToRead;	  hasHitEOF    =    is.shouldReset;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
301	[BUG]  [BUGGY]  hasHitEOF  =  i.shouldReset;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  i.shouldReset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  i.shouldReset;	  hasHitEOF    =    is.shouldReset;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
302	[BUG]  [BUGGY]  hasHitEOF  =  is.shouldReset  &&  is.readNow();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.shouldReset  &&  is.readNow();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.shouldReset  &&  is.readNow();	  hasHitEOF    =    is.shouldReset;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
303	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead,  entryOffset);	  hasHitEOF    &=    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
304	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead,  totalRead);	  hasHitEOF    &=    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
305	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead,  entrySize);	  hasHitEOF    &=    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
306	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  totalRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  totalRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  totalRead,  hasHitEOF);	  hasHitEOF    &=    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
307	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);	  hasHitEOF    &=    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
308	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);	  hasHitEOF    &=    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
309	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  &  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  &  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  &  1;	  hasHitEOF    =!hasHitEOF    +    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
310	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  /  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  /  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  /  1;	  hasHitEOF    =!hasHitEOF    +    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
311	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  +  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  +  2;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  +  2;	  hasHitEOF    =!hasHitEOF    +    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
312	[BUG]  [BUGGY]  hasHitEOF  =  is.hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hasHitEOF  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hasHitEOF  +  1;	  hasHitEOF    =!hasHitEOF    +    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
313	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -1,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -1,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  -1,  numToRead);	  hasHitEOF    &=    is.read(buf,    offset,    -1);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
314	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  -1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  -1);	  hasHitEOF    &=    is.read(buf,    offset,    -1);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
315	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  -1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  -1);	  hasHitEOF    &=    is.read(buf,    offset,    -1);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
316	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  0,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  0,  numToRead);	  hasHitEOF    &=    is.read(buf,    offset,    -1);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
317	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    isHitEOF    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
318	[BUG]  [BUGGY]  hasHitEOF  =  hasHitEOF  &&  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  hasHitEOF  &&  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  hasHitEOF  &&  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    isHitEOF    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
319	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCodeOf(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCodeOf(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCodeOf(buf,  offset,  numToRead);	  hasHitEOF    =    isHitEOF    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
320	[BUG]  [BUGGY]  haveHitEOF  =  is.hashCode();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  is.hashCode();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  is.hashCode();	  haveHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
321	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hashCode  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hashCode  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hashCode  +  1;	  hasHitEOF    =!currEntry.hashCode;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
322	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hashCodeAndClearBuffer(numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hashCodeAndClearBuffer(numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hashCodeAndClearBuffer(numToRead);	  hasHitEOF    =!currEntry.hashCode;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
323	[BUG]  [BUGGY]  hasHitEOF  =  hasHitEOF  &&  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  hasHitEOF  &&  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  hasHitEOF  &&  is.read(buf,  offset,  totalRead);	  hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
324	[BUG]  [BUGGY]  hasHitEOF  =  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  hasHitEOF  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  hasHitEOF  +  1;	  hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
325	[BUG]  [BUGGY]  hasHitEOF  =  hasHitEOF  ||  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  hasHitEOF  ||  hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  hasHitEOF  ||  hasHitEOF;	  hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
326	[BUG]  [BUGGY]  hasHitEOF  =  hasHitEOF  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  hasHitEOF  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  hasHitEOF  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
327	[BUG]  [BUGGY]  haveHitEOF  =   "shouldReset: ".equals(currEntry.record);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =   "shouldReset: ".equals(currEntry.record);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =   "shouldReset: ".equals(currEntry.record);	  haveHitEOF    =   "shouldReset   ".equals(currEntry.record);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
328	[BUG]  [BUGGY]  haveHitEOF  =  hasHitEOF.equals(currEntry.record);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  hasHitEOF.equals(currEntry.record);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  hasHitEOF.equals(currEntry.record);	  haveHitEOF    =   "shouldReset   ".equals(currEntry.record);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
329	[BUG]  [BUGGY]  hasHitEOF  =   "shouldReset ".equals(currEntry.record);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =   "shouldReset ".equals(currEntry.record);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =   "shouldReset ".equals(currEntry.record);	  haveHitEOF    =   "shouldReset   ".equals(currEntry.record);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
330	[BUG]  [BUGGY]  haveHitEOF  =   "shouldReset ".equals(currEntry.record)&&  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =   "shouldReset ".equals(currEntry.record)&&  hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =   "shouldReset ".equals(currEntry.record)&&  hasHitEOF;	  haveHitEOF    =   "shouldReset   ".equals(currEntry.record);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
331	[BUG]  [BUGGY]  hasHitEOF  =   "shouldReset: ".equals(currEntry.record);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =   "shouldReset: ".equals(currEntry.record);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =   "shouldReset: ".equals(currEntry.record);	  haveHitEOF    =   "shouldReset   ".equals(currEntry.record);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
332	[BUG]  [BUGGY]  haveHitEOF  :  true;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  :  true;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  :  true;	  haveHitEOF    :    false;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
333	[BUG]  [BUGGY]  hasHitEOF  :  true;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  :  true;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  :  true;	  haveHitEOF    :    false;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
334	[BUG]  [BUGGY]  hasHitEOF  :  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  :  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  :  is.read(buf,  offset,  numToRead);	  haveHitEOF    :    false;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
335	[BUG]  [BUGGY]  haveHitEOF  :  null;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  :  null;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  :  null;	  haveHitEOF    :    false;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
336	[BUG]  [BUGGY]  hasHitEOF  :  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  :  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  :  is.read(buf,  offset,  hasHitEOF);	  haveHitEOF    :    false;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
337	[BUG]  [BUGGY]  hasHitEOF  :  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  :  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  :  is.read(buf,  offset,  totalRead);	  haveHitEOF    :    false;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
338	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset  +  1,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset  +  1,  hasHitEOF);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
339	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.isEOF()  &&  is.read(buf,  offset  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.isEOF()  &&  is.read(buf,  offset  +  1,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.isEOF()  &&  is.read(buf,  offset  +  1,  hasHitEOF);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
340	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  currEntry.read(buf,  offset  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  currEntry.read(buf,  offset  +  1,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  currEntry.read(buf,  offset  +  1,  hasHitEOF);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
341	[BUG]  [BUGGY]  hasHitEOF  =(entryOffset  <  0)&&  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entryOffset  <  0)&&  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entryOffset  <  0)&&  is.read(buf,  offset,  totalRead);	  hasHitEOF    =(entryOffset    <    0);    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
342	[BUG]  [BUGGY]  hasHitEOF  =(entryOfThis  ==  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entryOfThis  ==  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entryOfThis  ==  0);	  hasHitEOF    =(entryOfThis    {    0);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
343	[BUG]  [BUGGY]  hasHitEOF  =(entrySize  {  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entrySize  {  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entrySize  {  0);	  hasHitEOF    =(entryOfThis    {    0);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
344	[BUG]  [BUGGY]  hasHitEOF  =(entryOffset  ==  0));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entryOffset  ==  0));  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entryOffset  ==  0));	  hasHitEOF    =(entryOfThis    {    0);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
345	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.hasHitEOF;	  hasHitEOF    =    is.hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
346	[BUG]  [BUGGY]  hasHitEOF  =  is.hasHitEOF  ||  is.hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hasHitEOF  ||  is.hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hasHitEOF  ||  is.hasHitEOF;	  hasHitEOF    =    is.hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
347	[BUG]  [BUGGY]  hasHitEOF  =  is.hasHitEOF  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hasHitEOF  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hasHitEOF  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
348	[BUG]  [BUGGY]  i.remove(entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  i.remove(entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	i.remove(entryOffset);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
349	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  currEntry.getEntry(numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  TarArchiveEntry  currEntry  =  currEntry.getEntry(numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	TarArchiveEntry  currEntry  =  currEntry.getEntry(numToRead);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
350	[BUG]  [BUGGY]  i.removeChild(currEntry.getKey());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  i.removeChild(currEntry.getKey());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	i.removeChild(currEntry.getKey());	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
351	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  TarArchiveEntry  currEntry  =  currEntry.getValue();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	TarArchiveEntry  currEntry  =  currEntry.getValue();	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
352	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  currEntry.getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  TarArchiveEntry  currEntry  =  currEntry.getCurrentEntry();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	TarArchiveEntry  currEntry  =  currEntry.getCurrentEntry();	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
353	[BUG]  [BUGGY]  i.removeChild(currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  i.removeChild(currEntry.getValue());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	i.removeChild(currEntry.getValue());	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
354	[BUG]  [BUGGY]  hasHitEOF  =  is.hasHitEOF  &&  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hasHitEOF  &&  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hasHitEOF  &&  is.read(buf,  offset,  totalRead);	  hasHitEOF    =!hasHitEOF    ||    is.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
355	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.hashCode();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.hashCode();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.hashCode();	  hasHitEOF    =    currEntry.isEOF();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
356	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.hasHitEOF();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.hasHitEOF();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.hasHitEOF();	  hasHitEOF    =    currEntry.isEOF();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
357	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.isEOF()  &&  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.isEOF()  &&  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.isEOF()  &&  is.read(buf,  offset,  totalRead);	  hasHitEOF    =    currEntry.isEOF();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
358	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.isEOF()  &&  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.isEOF()  &&  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.isEOF()  &&  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    currEntry.isEOF();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
359	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.isEOF()  &&  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.isEOF()  &&  hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.isEOF()  &&  hasHitEOF;	  hasHitEOF    =    currEntry.isEOF();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
360	[BUG]  [BUGGY]  haveHitEOF  =  is.hashCode()  >>  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  is.hashCode()  >>  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  is.hashCode()  >>  0;	  haveHitEOF    =    is.hashCode()    ==    0;    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
361	[BUG]  [BUGGY]  haveHitEOF  =  is.hashCode()  ==  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  is.hashCode()  ==  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  is.hashCode()  ==  1;	  haveHitEOF    =    is.hashCode()    ==    0;    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
362	[BUG]  [BUGGY]  ||  entryOffset  <  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset  <  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset  <  0)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
363	[BUG]  [BUGGY]  allowSkip(entryOffset))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  allowSkip(entryOffset))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	allowSkip(entryOffset))  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
364	[BUG]  [BUGGY]  allowRecording(entryOffset))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  allowRecording(entryOffset))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	allowRecording(entryOffset))  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
365	[BUG]  [BUGGY]  allowRecord(entryOffset))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  allowRecord(entryOffset))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	allowRecord(entryOffset))  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
366	[BUG]  [BUGGY]  ||  entryOffset  <  0)  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset  <  0)  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset  <  0)  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(entryOffset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
367	[BUG]  [BUGGY]  hasHitEOF  =!hashCode  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashCode  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashCode  +  1;	  hasHitEOF    =!hashCode;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
368	[BUG]  [BUGGY]  hasHitEOF  =!entryOffset;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!entryOffset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!entryOffset;	  hasHitEOF    =!hashCode;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
369	[BUG]  [BUGGY]  hasHitEOF  =!hashCode  &&  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashCode  &&  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashCode  &&  is.read(buf,  offset,  totalRead);	  hasHitEOF    =!hashCode;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
370	[BUG]  [BUGGY]  hasHitEOF  =!record.hashCode;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!record.hashCode;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!record.hashCode;	  hasHitEOF    =!hashCode;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
371	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  numToRead,  hasHitEOF);	  hasHitEOF    =    is.isEOF()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
372	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.isEOF()  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.isEOF()  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.isEOF()  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.isEOF()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
373	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  numToRead  +  1);	  hasHitEOF    =    is.isEOF()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
374	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  entryOffset);	  hasHitEOF    =    is.isEOF()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
375	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  entrySize);	  hasHitEOF    =    is.isEOF()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
376	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  hasHitEOF;	  hasHitEOF    =    is.isEOF()    &&    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
377	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  hasHitEOF  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  hasHitEOF  +  1;	  hasHitEOF    =    is.isEOF()    &&    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
378	[BUG]  [BUGGY]  hasHitEOF  =  i.isEOF()  &&  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  i.isEOF()  &&  hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  i.isEOF()  &&  hasHitEOF;	  hasHitEOF    =    is.isEOF()    &&    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
379	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.isEOF()  ||  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.isEOF()  ||  hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.isEOF()  ||  hasHitEOF;	  hasHitEOF    =    is.isEOF()    &&    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
380	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset,  hasHitEOF);	  hasHitEOF    &=    currEntry.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
381	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  entrySize,  hasHitEOF);	  hasHitEOF    &=    currEntry.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
382	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  entryOffset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  entryOffset,  totalRead);	  hasHitEOF    &=    is.read(buf,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
383	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  entryOffset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF(buf,  entryOffset,  totalRead);	  hasHitEOF    &=    is.read(buf,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
384	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  totalRead):  null;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  totalRead):  null;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  totalRead):  null;	  hasHitEOF    &=    is.read(buf,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
385	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  0;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead)>    0;    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
386	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  0;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead)>    0;    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
387	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  &&  is.read(buf,  offset,  numToRead)>  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  &&  is.read(buf,  offset,  numToRead)>  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  &&  is.read(buf,  offset,  numToRead)>  0;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead)>    0;    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
388	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  ==  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  ==  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  ==  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  0;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead)>    0;    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
389	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()!=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  0;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()!=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()!=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  0;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead)>    0;    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
390	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >>  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  0;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >>  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >>  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  0;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead)>    0;    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
391	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.shouldReset  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.shouldReset  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.shouldReset  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =!currEntry.shouldReset;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
392	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.shouldReset  ||  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.shouldReset  ||  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.shouldReset  ||  is.read(buf,  offset,  totalRead);	  hasHitEOF    =!currEntry.shouldReset;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
393	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream(entryOffset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  InputStream  is  =  currEntry.getInputStream(entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	InputStream  is  =  currEntry.getInputStream(entryOffset);	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
394	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream(numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  InputStream  is  =  currEntry.getInputStream(numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	InputStream  is  =  currEntry.getInputStream(numToRead);	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
395	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream(),  entryOffset);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  InputStream  is  =  currEntry.getInputStream(),  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	InputStream  is  =  currEntry.getInputStream(),  entryOffset);	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
396	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getErrorStream();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  InputStream  is  =  currEntry.getErrorStream();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	InputStream  is  =  currEntry.getErrorStream();	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
397	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream(entry);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  InputStream  is  =  currEntry.getInputStream(entry);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	InputStream  is  =  currEntry.getInputStream(entry);	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
398	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getRawInputStream();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  InputStream  is  =  currEntry.getRawInputStream();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	InputStream  is  =  currEntry.getRawInputStream();	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
399	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF  ||  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF  ||  hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hasHitEOF  ||  hasHitEOF;	  hasHitEOF    =!currEntry.hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
400	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF  ||  currEntry.hasHitEOF;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF  ||  currEntry.hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hasHitEOF  ||  currEntry.hasHitEOF;	  hasHitEOF    =!currEntry.hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
401	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hasHitEOF  +  1;	  hasHitEOF    =!currEntry.hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
402	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF  &&  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF  &&  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hasHitEOF  &&  is.read(buf,  offset,  totalRead);	  hasHitEOF    =!currEntry.hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
403	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF  ||  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF  ||  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hasHitEOF  ||  is.read(buf,  offset,  totalRead);	  hasHitEOF    =!currEntry.hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
404	[BUG]  [BUGGY]  hasHitEOF  =!hished  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hished  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hished  +  1;	  hasHitEOF    =!hished;    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
405	[BUG]  [BUGGY]  hasHitEOF  =!hittle;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hittle;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hittle;	  hasHitEOF    =!hished;    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
406	[BUG]  [BUGGY]  hasHitEOF  =!hashToRead;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashToRead;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashToRead;	  hasHitEOF    =!hash;    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
407	[BUG]  [BUGGY]  hasHitEOF  =!hash  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hash  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hash  +  1;	  hasHitEOF    =!hash;    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
408	[BUG]  [BUGGY]  hasHitEOF  =!hashOffset;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashOffset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashOffset;	  hasHitEOF    =!hash;    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
409	[BUG]  [BUGGY]  hasHitEOF  &=  getHitEOF()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  getHitEOF()  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  getHitEOF()  +  1;	  hasHitEOF    &=    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
410	[BUG]  [BUGGY]  hasHitEOF  &=  getHitEOF(entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  getHitEOF(entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  getHitEOF(entryOffset);	  hasHitEOF    &=    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
411	[BUG]  [BUGGY]  hasHitEOF  &=  getHitEOF(numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  getHitEOF(numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  getHitEOF(numToRead);	  hasHitEOF    &=    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
412	[BUG]  [BUGGY]  hasHitEOF  &=  getHitEOF(0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  getHitEOF(0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  getHitEOF(0);	  hasHitEOF    &=    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
413	[BUG]  [BUGGY]  hasHitEOF  &=  getHitEOF(offset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  getHitEOF(offset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  getHitEOF(offset);	  hasHitEOF    &=    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
414	[BUG]  [BUGGY]  hasHitEOF  |=  getHitEOF();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  |=  getHitEOF();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  |=  getHitEOF();	  hasHitEOF    &=    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
415	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  1,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  1,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset  +  1,  numToRead);	  int    totalRead    =    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
416	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset  +  entryOffset);	  int    totalRead    =    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
417	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset  +  entrySize);	  int    totalRead    =    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
418	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  numToRead,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset  +  numToRead,  entryOffset);	  int    totalRead    =    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
419	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset  +  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  currEntry.read(buf,  offset  +  numToRead);	  int    totalRead    =    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
420	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset  +  entryOffset,  numToRead);	  int    totalRead    =    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
421	[BUG]  [BUGGY]  hasHitEOF  =!isHitEOF  &&  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!isHitEOF  &&  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!isHitEOF  &&  is.read(buf,  offset,  totalRead);	  hasHitEOF    =!isHitEOF;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
422	[BUG]  [BUGGY]  hasHitEOF  =!isHitEOF  &&  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!isHitEOF  &&  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!isHitEOF  &&  is.read(buf,  offset,  numToRead);	  hasHitEOF    =!isHitEOF;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
423	[BUG]  [BUGGY]  hasHitEOF  =!isHitEOF  ||  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!isHitEOF  ||  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!isHitEOF  ||  is.read(buf,  offset,  totalRead);	  hasHitEOF    =!isHitEOF;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
424	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
425	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  &&  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  &&  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  &&  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
426	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  ==  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  ==  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  ==  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
427	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
428	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()!=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()!=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()!=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
429	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >>  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >>  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >>  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
430	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  numToRead);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
431	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  entryOffset);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
432	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  entrySize);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
433	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
434	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
435	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  len);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
436	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entryOffset  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entryOffset  +  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  entryOffset  +  numToRead,  hasHitEOF);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
437	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  totalRead  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  totalRead  +  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  totalRead  +  numToRead);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
438	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entryOffset  +  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entryOffset  +  numToRead,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  entryOffset  +  numToRead,  len);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
439	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entryOffset  +  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entryOffset  +  numToRead,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  entryOffset  +  numToRead,  totalRead);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
440	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entryOffset  +  numToRead);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
441	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(buf,  offset,  totalRead);	  hasHitEOF    &=    currEntry.in.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
442	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(buf,  offset,  entryOffset,  numToRead);	  hasHitEOF    &=    currEntry.in.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
443	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(buf,  offset,  numToRead,  hasHitEOF);	  hasHitEOF    &=    currEntry.in.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
444	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(buf,  offset,  entryOffset  +  numToRead);	  hasHitEOF    &=    currEntry.in.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
445	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  0,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(buf,  offset,  0,  numToRead);	  hasHitEOF    &=    currEntry.in.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
446	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hashCode()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hashCode()  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hashCode()  +  1;	  hasHitEOF    =!currEntry.hashCode();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
447	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hashCode()  *  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hashCode()  *  2;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hashCode()  *  2;	  hasHitEOF    =!currEntry.hashCode();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
448	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.size();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.size();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.size();	  hasHitEOF    =!currEntry.hashCode();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
449	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.isEOF()?   "shouldReset "  : "should ";  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.isEOF()?   "shouldReset "  : "should ";  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.isEOF()?   "shouldReset "  : "should ";	  hasHitEOF    =    is.isEOF()?       "shouldReset   "    :   "should   ";    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
450	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()?   "shouldreset "  : "should ";  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()?   "shouldreset "  : "should ";  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()?   "shouldreset "  : "should ";	  hasHitEOF    =    is.isEOF()?       "shouldReset   "    :   "should   ";    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
451	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()?   "shouldReset "  : "should ",  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()?   "shouldReset "  : "should ",  hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()?   "shouldReset "  : "should ",  hasHitEOF;	  hasHitEOF    =    is.isEOF()?       "shouldReset   "    :   "should   ";    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
452	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()?   "should "  : "should ";  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()?   "should "  : "should ";  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()?   "should "  : "should ";	  hasHitEOF    =    is.isEOF()?       "shouldReset   "    :   "should   ";    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
453	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()?   "shouldReset "  : ",shouldReset ";  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()?   "shouldReset "  : ",shouldReset ";  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()?   "shouldReset "  : ",shouldReset ";	  hasHitEOF    =    is.isEOF()?       "shouldReset   "    :   "should   ";    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
454	[BUG]  [BUGGY]  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset  >=  0)  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "Tar    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
455	[BUG]  [BUGGY]  ||  entrySize  >=  0)  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entrySize  >=  0)  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entrySize  >=  0)  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "Tar    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
456	[BUG]  [BUGGY]  ||  entryOffset!=  0)  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset!=  0)  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset!=  0)  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "Tar    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
457	[BUG]  [BUGGY]  allowEOF(entryOffset)  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  allowEOF(entryOffset)  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	allowEOF(entryOffset)  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "Tar    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
458	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  numToRead,  hasHitEOF);	  hasHitEOF    &=    currEntry.isEOF()?    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
459	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  numToRead  +  1);	  hasHitEOF    &=    currEntry.isEOF()?    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
460	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  entrySize,  numToRead);	  hasHitEOF    &=    currEntry.isEOF()?    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
461	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  totalRead);	  hasHitEOF    &=    currEntry.isEOF()?    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
462	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  entryOffset,  numToRead);	  hasHitEOF    &=    currEntry.isEOF()?    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
463	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  numToRead  +  1);	  hasHitEOF    &=    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
464	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead  +  2);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead  +  2);	  hasHitEOF    &=    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
465	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead  *  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead  *  1);	  hasHitEOF    &=    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
466	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  entryOffset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  entryOffset,  totalRead);	  hasHitEOF    &=    currEntry.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
467	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset  +  1);	  hasHitEOF    &=    currEntry.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
468	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  off,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  off,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  off,  entryOffset);	  hasHitEOF    &=    currEntry.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
469	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  off,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  off,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  off,  numToRead);	  hasHitEOF    &=    currEntry.read(buf,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
470	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  entryOffset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  entryOffset,  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  entryOffset,  numToRead,  hasHitEOF);	  hasHitEOF    &=    currEntry.read(buf,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
471	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode(buf,  offset,  hasHitEOF);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
472	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  &&  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  &&  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  &&  is.read(buf,  offset,  totalRead);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
473	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  totalRead);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
474	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  currEntry.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  currEntry.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  currEntry.read(buf,  offset,  totalRead);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
475	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.read(buf,  offset,  entryOffset);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
476	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.read(buf,  offset,  entrySize);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
477	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.hashCode(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.hashCode(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.hashCode(buf,  offset,  numToRead);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
478	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
479	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.hasHitEOF(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.hasHitEOF(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.hasHitEOF(buf,  offset,  numToRead);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
480	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.read(buf,  offset,  entryOffset,  numToRead);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
481	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.isEOF()?  is.read(buf,  offset,  numToRead):  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.isEOF()?  is.read(buf,  offset,  numToRead):  null;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.isEOF()?  is.read(buf,  offset,  numToRead):  null;	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
482	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead);  entryOffset  +=  numToRead;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead);  entryOffset  +=  numToRead;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  numToRead);  entryOffset  +=  numToRead;	  int    totalRead    =    is.read(buf,    offset,    numToRead);    entryOffset    +=    totalRead;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
483	[BUG]  [BUGGY]  byte  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  totalRead;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  byte  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  totalRead;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	byte  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  totalRead;	  int    totalRead    =    is.read(buf,    offset,    numToRead);    entryOffset    +=    totalRead;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
484	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  numToRead;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  numToRead;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  numToRead;	  int    totalRead    =    is.read(buf,    offset,    numToRead);    entryOffset    +=    totalRead;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
485	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead);  entryOffset  +=  totalRead;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead);  entryOffset  +=  totalRead;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  numToRead);  entryOffset  +=  totalRead;	  int    totalRead    =    is.read(buf,    offset,    numToRead);    entryOffset    +=    totalRead;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
486	[BUG]  [BUGGY]  Integer  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  totalRead;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  Integer  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  totalRead;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	Integer  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  totalRead;	  int    totalRead    =    is.read(buf,    offset,    numToRead);    entryOffset    +=    totalRead;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
487	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.readAndClearBuffer();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.readAndClearBuffer();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.readAndClearBuffer();	  hasHitEOF    =    is.readAndClearBuffer();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
488	[BUG]  [BUGGY]  hasHitEOF  =  is.readAndClearBuffer(numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.readAndClearBuffer(numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.readAndClearBuffer(numToRead);	  hasHitEOF    =    is.readAndClearBuffer();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
489	[BUG]  [BUGGY]  hasHitEOF  =  is.readAndClearBuffer(entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.readAndClearBuffer(entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.readAndClearBuffer(entryOffset);	  hasHitEOF    =    is.readAndClearBuffer();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
490	[BUG]  [BUGGY]  hasHitEOF  =  is.readAndClearBuffer(offset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.readAndClearBuffer(offset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.readAndClearBuffer(offset);	  hasHitEOF    =    is.readAndClearBuffer();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
491	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entryOffset,  buf,  totalRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entryOffset,  buf,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(entryOffset,  buf,  totalRead);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
492	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entry,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entry,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(entry,  offset,  totalRead);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
493	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
494	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.isEOF()  &&  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.isEOF()  &&  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.isEOF()  &&  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
495	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  0);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
496	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  +  1;	  hasHitEOF    =    is.hashCode();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
497	[BUG]  [BUGGY]  hasHitEOF  =  is.size();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.size();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.size();	  hasHitEOF    =    is.hashCode();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
498	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  *  2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  *  2;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  *  2;	  hasHitEOF    =    is.hashCode();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
499	[BUG]  [BUGGY]  hasHitEOF  =  i.hashCode();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  i.hashCode();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  i.hashCode();	  hasHitEOF    =    is.hashCode();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
500	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  *  numToRead;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  *  numToRead;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  *  numToRead;	  hasHitEOF    =    is.hashCode();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
501	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.encodeHitEOF( "shouldReset ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.encodeHitEOF( "shouldReset ");  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.encodeHitEOF( "shouldReset ");	  hasHitEOF    =    is.encodeHitEOF(   "shouldReset   ");    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
502	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.decodeHitEOF( "shouldReset ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.decodeHitEOF( "shouldReset ");  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.decodeHitEOF( "shouldReset ");	  hasHitEOF    =    is.encodeHitEOF(   "shouldReset   ");    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
503	[BUG]  [BUGGY]  hasHitEOF  =  is.encodeHitEOF( "shouldReset:  should ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.encodeHitEOF( "shouldReset:  should ");  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.encodeHitEOF( "shouldReset:  should ");	  hasHitEOF    =    is.encodeHitEOF(   "shouldReset   ");    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
504	[BUG]  [BUGGY]  hasHitEOF  =  is.encodeHitEOF( "shouldReset ",  -1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.encodeHitEOF( "shouldReset ",  -1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.encodeHitEOF( "shouldReset ",  -1);	  hasHitEOF    =    is.encodeHitEOF(   "shouldReset   ");    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
505	[BUG]  [BUGGY]  hasHitEOF  =  is.decodeHitEOF( "shouldReset ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.decodeHitEOF( "shouldReset ");  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.decodeHitEOF( "shouldReset ");	  hasHitEOF    =    is.encodeHitEOF(   "shouldReset   ");    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
506	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  0,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  0,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  0,  entrySize);	  hasHitEOF    &=    is.read(buf,    0,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
507	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  0,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  0,  entryOffset);	  hasHitEOF    &=    is.read(buf,    0,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
508	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  0,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  0,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  0,  entrySize);	  hasHitEOF    &=    is.read(buf,    0,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
509	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  0,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  0,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(buf,  0,  entrySize);	  hasHitEOF    &=    is.read(buf,    0,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
510	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  0,  entrySize):  0;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  0,  entrySize):  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  0,  entrySize):  0;	  hasHitEOF    &=    is.read(buf,    0,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
511	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  0,  entrySize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  0,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  0,  entrySize);	  hasHitEOF    &=    is.read(buf,    0,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
512	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.hashCode(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.hashCode(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.hashCode(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
513	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.read(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
514	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.read(buf,  offset,  totalRead);	  hasHitEOF    =    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
515	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.hasHitEOF(offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.hasHitEOF(offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.hasHitEOF(offset,  hasHitEOF);	  hasHitEOF    =    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
516	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
517	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  totalRead,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  totalRead,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  totalRead,  numToRead);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
518	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  entrySize,  numToRead);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
519	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  1);	  hasHitEOF    &=    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
520	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  0L);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  0L);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  0L);	  hasHitEOF    &=    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
521	[BUG]  [BUGGY]  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
522	[BUG]  [BUGGY]  ||  entryOffset!=  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset!=  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset!=  0)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
523	[BUG]  [BUGGY]  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
524	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead);  entryOffset  +=  length;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead);  entryOffset  +=  length;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  numToRead);  entryOffset  +=  length;	  int    totalRead    =    is.read(buf,    offset,    numToRead);    entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
525	[BUG]  [BUGGY]  byte  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  length;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  byte  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  length;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	byte  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  length;	  int    totalRead    =    is.read(buf,    offset,    numToRead);    entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
526	[BUG]  [BUGGY]  Integer  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  length;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  Integer  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  length;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	Integer  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  length;	  int    totalRead    =    is.read(buf,    offset,    numToRead);    entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
527	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  numRecords;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  numRecords;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  numRecords;	  int    totalRead    =    is.read(buf,    offset,    numToRead);    entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
528	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  length  *  2;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  length  *  2;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  length  *  2;	  int    totalRead    =    is.read(buf,    offset,    numToRead);    entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
529	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  len;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  len;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  len;	  int    totalRead    =    is.read(buf,    offset,    numToRead);    entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
530	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()  >=  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()  >=  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()  >=  0;	  hasHitEOF    &=    is.read(buf,    offset,    numToRead).hashCode()    >    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
531	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()  ==  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()  ==  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()  ==  0;	  hasHitEOF    &=    is.read(buf,    offset,    numToRead).hashCode()    >    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
532	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()  >  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()  >  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()  >  1;	  hasHitEOF    &=    is.read(buf,    offset,    numToRead).hashCode()    >    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
533	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()!=  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()!=  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()!=  0;	  hasHitEOF    &=    is.read(buf,    offset,    numToRead).hashCode()    >    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
534	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()  <  =  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()  <  =  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()  <  =  0;	  hasHitEOF    &=    is.read(buf,    offset,    numToRead).hashCode()    >    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
535	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()  >>  0;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()  >>  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead).hashCode()  >>  0;	  hasHitEOF    &=    is.read(buf,    offset,    numToRead).hashCode()    >    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
536	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  -1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  -1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  -1;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead)>    -1;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
537	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  -1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  -1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  -1;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead)>    -1;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
538	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  ==  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  -1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  ==  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  -1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  ==  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  -1;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead)>    -1;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
539	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  &&  is.read(buf,  offset,  numToRead)>  -1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  &&  is.read(buf,  offset,  numToRead)>  -1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  &&  is.read(buf,  offset,  numToRead)>  -1;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead)>    -1;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
540	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()!=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  -1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()!=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  -1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()!=  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  -1;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead)>    -1;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
541	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  entrySize);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
542	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  entryOffset);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
543	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
544	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  entryOffset,  numToRead);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
545	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  numToRead,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  numToRead,  len);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
546	[BUG]  [BUGGY]  hasHitEOF  =  isReset;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  isReset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  isReset;	  hasHitEOF    =!isReset;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
547	[BUG]  [BUGGY]  hasHitEOF  =!isRecord;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!isRecord;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!isRecord;	  hasHitEOF    =!isReset;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
548	[BUG]  [BUGGY]  hasHitEOF  =  is.isReset;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isReset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isReset;	  hasHitEOF    =!isReset;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
549	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  entryOffset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  entryOffset,  hasHitEOF);	  hasHitEOF    &=    currEntry.read(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
550	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  entrySize,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  entrySize,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  entrySize,  entryOffset);	  hasHitEOF    &=    currEntry.read(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
551	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(numToRead,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(numToRead,  entryOffset);	  hasHitEOF    &=    currEntry.read(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
552	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(entry,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(entry,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(entry,  offset,  entryOffset);	  hasHitEOF    &=    currEntry.read(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
553	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(entrySize,  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(entrySize,  entryOffset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(entrySize,  entryOffset,  totalRead);	  hasHitEOF    &=    currEntry.read(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
554	[BUG]  [BUGGY]  entryOffset  +=  offset;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entryOffset  +=  offset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entryOffset  +=  offset;	  i.remove();    entryOffset    +=    offset;    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
555	[BUG]  [BUGGY]  entrySize  =  currEntry.recordSize();  entryOffset  +=  offset;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entrySize  =  currEntry.recordSize();  entryOffset  +=  offset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entrySize  =  currEntry.recordSize();  entryOffset  +=  offset;	  i.remove();    entryOffset    +=    offset;    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
556	[BUG]  [BUGGY]  entrySize  =  currEntry.recordSize();  entryOffset  +=  numToRead;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entrySize  =  currEntry.recordSize();  entryOffset  +=  numToRead;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entrySize  =  currEntry.recordSize();  entryOffset  +=  numToRead;	  i.remove();    entryOffset    +=    offset;    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
557	[BUG]  [BUGGY]  entrySize  =  currEntry.getSize();  entryOffset  +=  offset;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entrySize  =  currEntry.getSize();  entryOffset  +=  offset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entrySize  =  currEntry.getSize();  entryOffset  +=  offset;	  i.remove();    entryOffset    +=    offset;    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
558	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset  +  1,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset  +  1,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset  +  1,  entryOffset);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
559	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset  +  1,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.read(buf,  offset  +  1,  hasHitEOF);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
560	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset  +  1,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset  +  1,  entrySize);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
561	[BUG]  [BUGGY]  hasHitEOF  =  is.hasHitEOF  &&  is.read(buf,  offset  +  1,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hasHitEOF  &&  is.read(buf,  offset  +  1,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hasHitEOF  &&  is.read(buf,  offset  +  1,  entryOffset);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
562	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset  +  1,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset  +  1,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.read(buf,  offset  +  1,  numToRead);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
563	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  entryOffset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  entryOffset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  &&  is.read(buf,  entryOffset  +  1,  totalRead);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
564	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  0,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  0,  entryOffset);	  hasHitEOF    &=    is.read(buf,    offset,    0,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
565	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entryOffset,  0,  totalRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entryOffset,  0,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  entryOffset,  0,  totalRead);	  hasHitEOF    &=    is.read(buf,    offset,    0,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
566	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  0,  totalRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  0,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  0,  totalRead);	  hasHitEOF    &=    is.read(buf,    offset,    0,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
567	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  0,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  0,  entryOffset  +  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  0,  entryOffset  +  numToRead);	  hasHitEOF    &=    is.read(buf,    offset,    0,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
568	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  0,  totalRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  0,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  0,  totalRead);	  hasHitEOF    &=    is.read(buf,    offset,    0,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
569	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  1,  totalRead);	  hasHitEOF    &=    is.read(buf,    offset,    0,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
570	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  entrySize,  hasHitEOF);	  hasHitEOF    &=    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
571	[BUG]  [BUGGY]  hasHitEOF  =(entrySize  >  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entrySize  >  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entrySize  >  0);	  hasHitEOF    =(entrySize    ==    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
572	[BUG]  [BUGGY]  hasHitEOF  =(entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entrySize  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entrySize  +  1);	  hasHitEOF    =(entrySize    ==    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
573	[BUG]  [BUGGY]  hasHitEOF  =(entrySize  +  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entrySize  +  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entrySize  +  0);	  hasHitEOF    =(entrySize    ==    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
574	[BUG]  [BUGGY]  hasHitEOF  =(entrySize  <  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entrySize  <  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entrySize  <  0);	  hasHitEOF    =(entrySize    ==    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
575	[BUG]  [BUGGY]  hasHitEOF  =(entrySize  >=  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entrySize  >=  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entrySize  >=  0);	  hasHitEOF    =(entrySize    ==    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
576	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode();	  hasHitEOF    &=    is.hashCode();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
577	[BUG]  [BUGGY]  hasHitEOF  &=  is.length();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.length();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.length();	  hasHitEOF    &=    is.hashCode();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
578	[BUG]  [BUGGY]  hasHitEOF  &=  is.size();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.size();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.size();	  hasHitEOF    &=    is.hashCode();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
579	[BUG]  [BUGGY]  hasHitEOF  &=  is.hashCode()  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.hashCode()  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.hashCode()  +  1;	  hasHitEOF    &=    is.hashCode();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
580	[BUG]  [BUGGY]  hasHitEOF  &=  totalRead;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  totalRead;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  totalRead;	  hasHitEOF    &=    null;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
581	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hasHitEOF;	  hasHitEOF    &=    null;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
582	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  entryOffset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  entryOffset,  totalRead);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
583	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  entryOffset  +  numToRead);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
584	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  off,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  off,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  off,  entryOffset);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
585	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  totalRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  totalRead,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  totalRead,  entryOffset);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
586	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  off,  entrySize);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  off,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  off,  entrySize);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
587	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  numToRead);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
588	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  2,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  2,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  2,  numToRead);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
589	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entryOffset,  hasHitEOF);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
590	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  entrySize,  hasHitEOF);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
591	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  0);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
592	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode(buf,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode(buf,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode(buf,  entryOffset,  numToRead);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
593	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  &&  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  &&  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  &&  currEntry.read(buf,  offset,  numToRead);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
594	[BUG]  [BUGGY]  hasHitEOF  =(totalRead  >  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(totalRead  >  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(totalRead  >  0);	  hasHitEOF    =(totalRead    ==    0);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
595	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  ==  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  ==  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  ==  1;	  hasHitEOF    =    is.hashCode()    ==    0;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
596	[BUG]  [BUGGY]  hasHitEOF  ||  false;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  ||  false;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  ||  false;	  hasHitEOF    ||    true;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
597	[BUG]  [BUGGY]  hasHitEOF  &&  true;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &&  true;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &&  true;	  hasHitEOF    ||    true;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
598	[BUG]  [BUGGY]  hasHitEOF  ||  is.hasNext();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  ||  is.hasNext();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  ||  is.hasNext();	  hasHitEOF    ||    true;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
599	[BUG]  [BUGGY]  hasHitEOF  ||  is.hashCode()  ==  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  ||  is.hashCode()  ==  hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  ||  is.hashCode()  ==  hasHitEOF;	  hasHitEOF    ||    true;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
600	[BUG]  [BUGGY]  hasHitEOF  ||  is.hashCode();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  ||  is.hashCode();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  ||  is.hashCode();	  hasHitEOF    ||    true;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
601	[BUG]  [BUGGY]  hasHitEOF  ||  is.hashCode()!=  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  ||  is.hashCode()!=  hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  ||  is.hashCode()!=  hasHitEOF;	  hasHitEOF    ||    true;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
602	[BUG]  [BUGGY]  hasHitEOF  ||  is.hasMoreElements();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  ||  is.hasMoreElements();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  ||  is.hasMoreElements();	  hasHitEOF    ||    true;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
603	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  +  1L;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  +  1L;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  +  1L;	  hasHitEOF    =!hasHitEOF    +    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
604	[BUG]  [BUGGY]  hasHitEOF  =!shouldReset  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!shouldReset  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!shouldReset  +  1;	  hasHitEOF    =!hasHitEOF    +    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
605	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  0);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
606	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  totalRead  +  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  totalRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  totalRead  +  1);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
607	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  len);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  len);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
608	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  0,  totalRead);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  0,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  0,  totalRead);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
609	[BUG]  [BUGGY]  haveHitEOF  =  is.isEOF();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  is.isEOF();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  is.isEOF();	  haveHitEOF    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
610	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream(offset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  InputStream  is  =  currEntry.getInputStream(offset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	InputStream  is  =  currEntry.getInputStream(offset);	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
611	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  InputStream  is  =  this.currEntry.getInputStream();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	InputStream  is  =  this.currEntry.getInputStream();	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
612	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream(-1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  InputStream  is  =  currEntry.getInputStream(-1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	InputStream  is  =  currEntry.getInputStream(-1);	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
613	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream(entrySize);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  InputStream  is  =  currEntry.getInputStream(entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	InputStream  is  =  currEntry.getInputStream(entrySize);	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
614	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(offset,  entrySize);	  hasHitEOF    &=    currEntry.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
615	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead  +  3);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead  +  3);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead  +  3);	  hasHitEOF    &=    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
616	[BUG]  [BUGGY]  hasHitEOF  =!hiddle;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hiddle;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hiddle;	  hasHitEOF    =!hished;    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
617	[BUG]  [BUGGY]  hasHitEOF  =!remainder.hashCode();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!remainder.hashCode();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!remainder.hashCode();	  hasHitEOF    =!marked;    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
618	[BUG]  [BUGGY]  hasHitEOF  =!remainder.hasHitEOF;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!remainder.hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!remainder.hasHitEOF;	  hasHitEOF    =!marked;    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
619	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.isEOF()  &&  entryOffset  +=  totalRead;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.isEOF()  &&  entryOffset  +=  totalRead;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.isEOF()  &&  entryOffset  +=  totalRead;	  hasHitEOF    =    currEntry.isEOF();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
620	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.isEOF()  &&  is.read(buf,  offset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.isEOF()  &&  is.read(buf,  offset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.isEOF()  &&  is.read(buf,  offset);	  hasHitEOF    =    currEntry.isEOF();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
621	[BUG]  [BUGGY]  HasHitEOF  &=  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  HasHitEOF  &=  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	HasHitEOF  &=  is.read(buf,  offset,  numToRead  +  1);	  HasHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
622	[BUG]  [BUGGY]  HasHitEOF  &=  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  HasHitEOF  &=  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	HasHitEOF  &=  is.read(buf,  offset,  totalRead);	  HasHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
623	[BUG]  [BUGGY]  HasHitEOF  &=  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  HasHitEOF  &=  is.read(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	HasHitEOF  &=  is.read(buf,  offset,  0);	  HasHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
624	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  SMALL_BUFFER_SIZE;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  SMALL_BUFFER_SIZE;	  int    totalRead    =    is.read(buf,    offset,    numToRead);    entryOffset    +=    totalRead;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
625	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead  +  1);  entryOffset  +=  totalRead;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead  +  1);  entryOffset  +=  totalRead;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead  +  1);  entryOffset  +=  totalRead;	  int    totalRead    =    is.read(buf,    offset,    numToRead);    entryOffset    +=    totalRead;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
626	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  numToRead  +  1);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
627	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  numToRead,  entryOffset);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
628	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead,  numToRead);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
629	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  buffer.length);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead,  buffer.length);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
630	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  1;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead)>    0;    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
631	[BUG]  [BUGGY]  hasHitEOF  =!hashAndSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashAndSize;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashAndSize;	  hasHitEOF    =!hash;    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
632	[BUG]  [BUGGY]  hasHitEOF  =  is.read;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.read;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.read;	  hasHitEOF    =    marked;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
633	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.recordSize(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.recordSize(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.recordSize(buf,  offset,  totalRead);	  hasHitEOF    &=    is.read(buf,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
634	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead  +  1);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
635	[BUG]  [BUGGY]  byte  totalRead  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  byte  totalRead  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	byte  totalRead  =  is.read(buf,  offset,  numToRead);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
636	[BUG]  [BUGGY]  haveHitEOF  :  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  :  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  :  is.read(buf,  offset,  numToRead);	  haveHitEOF    :    false;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
637	[BUG]  [BUGGY]  haveHitEOF  :  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  :  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  :  is.read(buf,  offset,  hasHitEOF);	  haveHitEOF    :    false;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
638	[BUG]  [BUGGY]  haveHitEOF  :  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  :  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  :  is.read(buf,  offset,  totalRead);	  haveHitEOF    :    false;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
639	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  0,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  0,  entrySize  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  0,  entrySize  +  1);	  hasHitEOF    &=    is.read(buf,    0,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
640	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  0,  totalRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  0,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  0,  totalRead);	  hasHitEOF    &=    is.read(buf,    0,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
641	[BUG]  [BUGGY]  allowReset)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  allowReset)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	allowReset)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
642	[BUG]  [BUGGY]  ||  entryOffset  ==  0L)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset  ==  0L)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset  ==  0L)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
643	[BUG]  [BUGGY]  ||  entryOffset  ==  0)  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset  ==  0)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset  ==  0)  {  throw  new  IllegalStateException( " ".);  }	  if(entryOffset    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
644	[BUG]  [BUGGY]  safeTarEntry(currEntry,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  safeTarEntry(currEntry,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	safeTarEntry(currEntry,  entryOffset,  numToRead);	  if(entryOffset    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
645	[BUG]  [BUGGY]  ||  entryOffset  ==  0)  {  throw  new  IllegalStateException( ". ");  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset  ==  0)  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset  ==  0)  {  throw  new  IllegalStateException( ". ");  }	  if(entryOffset    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
646	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  0,  totalRead  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  0,  totalRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  0,  totalRead  +  1);	  hasHitEOF    &=    is.read(buf,    offset,    totalRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
647	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead  +  1);	  hasHitEOF    &=    is.read(buf,    offset,    totalRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
648	[BUG]  [BUGGY]  haveHitEOF  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  is.read(buf,  offset,  numToRead);	  haveHitEOF    =   "shouldReset   ";    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
649	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  2,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  2,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  2,  entrySize);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
650	[BUG]  [BUGGY]  hasHitEOF  -=  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  -=  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  -=  currEntry.read(buf,  offset,  numToRead);	  hasHitEOF    &=    currEntry.read(buf,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
651	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(numToRead,  offset,  totalRead);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
652	[BUG]  [BUGGY]  hasHitEOF  =!hashRecord  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashRecord  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashRecord  +  1;	  hasHitEOF    =!hashRecord;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
653	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hashRecord;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hashRecord;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hashRecord;	  hasHitEOF    =!hashRecord;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
654	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead  +  1);  entryOffset  +=  length;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead  +  1);  entryOffset  +=  length;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead  +  1);  entryOffset  +=  length;	  int    totalRead    =    is.read(buf,    offset,    numToRead);    entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
655	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  currEntry.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
656	[BUG]  [BUGGY]  hasHitEOF  =  is.shouldReset()  &&  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.shouldReset()  &&  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.shouldReset()  &&  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
657	[BUG]  [BUGGY]  hasHitEOF  =  shouldReset  &&  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  shouldReset  &&  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  shouldReset  &&  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    shouldReset;    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
658	[BUG]  [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  0);	  hasHitEOF    &=    is.readAndClearBuffer(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
659	[BUG]  [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  numToRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  numToRead  +  1);	  hasHitEOF    &=    is.readAndClearBuffer(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
660	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.read(buf,  offset,  0);	  hasHitEOF    =    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
661	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  0);	  hasHitEOF    &=    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
662	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  numToRead,  ch);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  numToRead,  ch);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  numToRead,  ch);	  hasHitEOF    &=    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
663	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  len  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  len  +  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  len  +  numToRead);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
664	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  fullNameData  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  fullNameData  +  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  fullNameData  +  numToRead);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
665	[BUG]  [BUGGY]  hasHitEOF  =  is.hasHitEOF  ||  is.hasMoreElements();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hasHitEOF  ||  is.hasMoreElements();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hasHitEOF  ||  is.hasMoreElements();	  hasHitEOF    =    is.hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
666	[BUG]  [BUGGY]  HasHitEOF  &=  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  HasHitEOF  &=  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	HasHitEOF  &=  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    &=    is.read(buf,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
667	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  entryOffset);	  hasHitEOF    &=    currEntry.read(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
668	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(entrySize,  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(entrySize,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(entrySize,  totalRead);	  hasHitEOF    &=    currEntry.read(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
669	[BUG]  [BUGGY]  hasHitEOF  &=  is.getHitEOF();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.getHitEOF();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.getHitEOF();	  hasHitEOF    &=    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
670	[BUG]  [BUGGY]  hasHitEOF  =  is.hash  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hash  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hash  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    isHitEOF    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
671	[BUG]  [BUGGY]  hasHitEOF  =  is.hashEOF  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashEOF  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashEOF  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    isHitEOF    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
672	[BUG]  [BUGGY]  entrySize  =  i.remove();  entryOffset  +=  offset;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entrySize  =  i.remove();  entryOffset  +=  offset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entrySize  =  i.remove();  entryOffset  +=  offset;	  i.remove();    entryOffset    +=    offset;    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
673	[BUG]  [BUGGY]  entrySize  +=  currEntry.recordSize;  entryOffset  +=  offset;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entrySize  +=  currEntry.recordSize;  entryOffset  +=  offset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entrySize  +=  currEntry.recordSize;  entryOffset  +=  offset;	  i.remove();    entryOffset    +=    offset;    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
674	[BUG]  [BUGGY]  hasHitEOF  &=  -1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  -1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  -1;	  hasHitEOF    &=    1;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
675	[BUG]  [BUGGY]  hasHitEOF  &=  4;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  4;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  4;	  hasHitEOF    &=    1;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
676	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset  +  1,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset  +  1,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset  +  1,  numToRead);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
677	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  &&  is.read(buf,  offset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  &&  is.read(buf,  offset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  &&  is.read(buf,  offset  +  1,  totalRead);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
678	[BUG]  [BUGGY]  hasHitEOF  =  is.hasHitEOF  &&  is.read(buf,  offset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hasHitEOF  &&  is.read(buf,  offset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hasHitEOF  &&  is.read(buf,  offset  +  1,  totalRead);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
679	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  &&  currEntry.read(buf,  offset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  &&  currEntry.read(buf,  offset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  &&  currEntry.read(buf,  offset  +  1,  totalRead);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
680	[BUG]  [BUGGY]  hasHitEOF  ||  is.hashCode()  ==  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  ||  is.hashCode()  ==  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  ||  is.hashCode()  ==  0;	  hasHitEOF    ||    true;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
681	[BUG]  [BUGGY]  hasHitEOF  ||  is.shouldReset;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  ||  is.shouldReset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  ||  is.shouldReset;	  hasHitEOF    ||    true;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
682	[BUG]  [BUGGY]  hasHitEOF  ||  is.hashCode()  ==  true;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  ||  is.hashCode()  ==  true;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  ||  is.hashCode()  ==  true;	  hasHitEOF    ||    true;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
683	[BUG]  [BUGGY]  hasHitEOF  ||  is.hashCode()!=  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  ||  is.hashCode()!=  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  ||  is.hashCode()!=  0;	  hasHitEOF    ||    true;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
684	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  ||  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  ||  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  ||  currEntry.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.hashCode()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
685	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode  &  0xff;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode  &  0xff;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode  &  0xff;	  hasHitEOF    =    is.hashCode;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
686	[BUG]  [BUGGY]  haveHitEOF  =  currEntry.hashCode()  ==  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  currEntry.hashCode()  ==  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  currEntry.hashCode()  ==  0;	  haveHitEOF    =    is.hashCode()    ==    0;    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
687	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getEntry(numToRead);  entryOffset  +=  length;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  Entry  entry  =  currEntry.getEntry(numToRead);  entryOffset  +=  length;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	Entry  entry  =  currEntry.getEntry(numToRead);  entryOffset  +=  length;	  i.remove();    entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
688	[BUG]  [BUGGY]  Entry  entry  =  currEntry.getEntry(numToRead,  numToRead);  entryOffset  +=  length;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  Entry  entry  =  currEntry.getEntry(numToRead,  numToRead);  entryOffset  +=  length;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	Entry  entry  =  currEntry.getEntry(numToRead,  numToRead);  entryOffset  +=  length;	  i.remove();    entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
689	[BUG]  [BUGGY]  haveHitEOF  &=  is.read(buf,  offset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  is.read(buf,  offset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  is.read(buf,  offset  +  1,  totalRead);	  hasHitEOF    &=    is.read(buf,    entryOffset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
690	[BUG]  [BUGGY]  HasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  HasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	HasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead);	  hasHitEOF    &=    is.read(buf,    entryOffset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
691	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()!=  -1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()!=  -1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()!=  -1;	  hasHitEOF    =    is.hashCode()    ==    -1;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
692	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >>  -1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >>  -1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >>  -1;	  hasHitEOF    =    is.hashCode()    ==    -1;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
693	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hashCodeAndClearBuffer();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hashCodeAndClearBuffer();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hashCodeAndClearBuffer();	  hasHitEOF    =!currEntry.hashCode;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
694	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hashCodeAndClose(numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hashCodeAndClose(numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hashCodeAndClose(numToRead);	  hasHitEOF    =!currEntry.hashCode;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
695	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hashCodeAndClose(numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hashCodeAndClose(numToRead,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hashCodeAndClose(numToRead,  totalRead);	  hasHitEOF    =!currEntry.hashCode;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
696	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  totalRead,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  totalRead,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  totalRead,  len);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
697	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  totalRead,  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  totalRead,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  totalRead,  0);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
698	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -1L);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -1L);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  -1L);	  hasHitEOF    &=    is.read(buf,    offset,    -1);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
699	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  0,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  0,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  0,  0);	  hasHitEOF    &=    is.read(buf,    offset,    -1);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
700	[BUG]  [BUGGY]  safeTarEntry())  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  safeTarEntry())  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	safeTarEntry())  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "Tar    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
701	[BUG]  [BUGGY]  aughtException( "Tar  entry  is  null. ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  aughtException( "Tar  entry  is  null. ");  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	aughtException( "Tar  entry  is  null. ");	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "Tar    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
702	[BUG]  [BUGGY]  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( "Tar  entry  is  null.. ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( "Tar  entry  is  null.. ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset  >=  0)  {  throw  new  IllegalStateException( "Tar  entry  is  null.. ");  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "Tar    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
703	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.read(buf,  offset,  numToRead  +  1);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
704	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
705	[BUG]  [BUGGY]  i.remove();  entryOffset  +=  currEntry.length;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  i.remove();  entryOffset  +=  currEntry.length;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	i.remove();  entryOffset  +=  currEntry.length;	  i.remove();    entryOffset    +=    len;    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
706	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  buf.length  *  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  buf.length  *  2);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  buf.length  *  2);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
707	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  2,  buf.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  2,  buf.length);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  2,  buf.length);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
708	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  buf.length  -  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  buf.length  -  2);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  buf.length  -  2);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
709	[BUG]  [BUGGY]  safeTarEntry())  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  safeTarEntry())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	safeTarEntry())  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
710	[BUG]  [BUGGY]  ||  entryOffset  <  0)  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset  <  0)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset  <  0)  {  throw  new  IllegalStateException( " ".);  }	  if(entryOffset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
711	[BUG]  [BUGGY]  safeTarEntry(currEntry,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  safeTarEntry(currEntry,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	safeTarEntry(currEntry,  offset,  numToRead);	  if(entryOffset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
712	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset  +  numToRead,  hasHitEOF);	  int    totalRead    =    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
713	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset  -  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset  -  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset  -  numToRead);	  int    totalRead    =    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
714	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  numToRead,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset  +  numToRead,  len);	  int    totalRead    =    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
715	[BUG]  [BUGGY]  hasHitEOF  =(entryOfThis  >  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entryOfThis  >  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entryOfThis  >  0);	  hasHitEOF    =(entryOfThis    {    0);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
716	[BUG]  [BUGGY]  hasHitEOF  =(entryOfThis  ==  -1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entryOfThis  ==  -1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entryOfThis  ==  -1);	  hasHitEOF    =(entryOfThis    {    0);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
717	[BUG]  [BUGGY]  hasHitEOF  =(numToRead  ==  -1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(numToRead  ==  -1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(numToRead  ==  -1);	  hasHitEOF    =(numToRead    ==    0);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
718	[BUG]  [BUGGY]  hasHitEOF  =(numToRead  ==  0)&&  is.read(buf);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(numToRead  ==  0)&&  is.read(buf);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(numToRead  ==  0)&&  is.read(buf);	  hasHitEOF    =(numToRead    ==    0);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
719	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	ch  =  is.read(buf,  offset,  numToRead  +  1);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
720	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
721	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  currEntry.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  currEntry.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  currEntry.read(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
722	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  toHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  toHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  toHitEOF);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
723	[BUG]  [BUGGY]  hasHitEOF  =  is.shouldReset  ||  i.hasNext();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.shouldReset  ||  i.hasNext();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.shouldReset  ||  i.hasNext();	  hasHitEOF    =    is.shouldReset;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
724	[BUG]  [BUGGY]  hasHitEOF  =  is.shouldReset  ||  is.read(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.shouldReset  ||  is.read(buf,  offset  +  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.shouldReset  ||  is.read(buf,  offset  +  numToRead);	  hasHitEOF    =    is.shouldReset;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
725	[BUG]  [BUGGY]  haveHitEOF  ='shouldReset'.equals(getRecordSize());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  ='shouldReset'.equals(getRecordSize());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  ='shouldReset'.equals(getRecordSize());	  haveHitEOF    =   "shouldReset   ".equals(getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
726	[BUG]  [BUGGY]  hasHitEOF  =   "shouldReset ".equals(getRecordSize());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =   "shouldReset ".equals(getRecordSize());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =   "shouldReset ".equals(getRecordSize());	  haveHitEOF    =   "shouldReset   ".equals(getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
727	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  entryOffset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(buf,  entryOffset,  totalRead);	  hasHitEOF    &=    currEntry.in.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
728	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset  +  1,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(buf,  offset  +  1,  entrySize);	  hasHitEOF    &=    currEntry.in.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
729	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  ||  currEntry.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  ||  currEntry.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  ||  currEntry.read(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.hashCode()    ||    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
730	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entry,  totalRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entry,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(entry,  totalRead);	  hasHitEOF    &=    currEntry.hashCode(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
731	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  length);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  length);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    len);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
732	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  in.read);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  in.read);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  in.read);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    len);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
733	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  0);	  hasHitEOF    &=    currEntry.isEOF()?    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
734	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  -1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  -1);	  hasHitEOF    &=    currEntry.isEOF()?    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
735	[BUG]  [BUGGY]  haveHitEOF  =  currEntry.shouldReset.equals( "shouldReset ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  currEntry.shouldReset.equals( "shouldReset ");  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  currEntry.shouldReset.equals( "shouldReset ");	  haveHitEOF    =   "shouldReset   ".equals(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
736	[BUG]  [BUGGY]  haveHitEOF  =   "shouldReset ".equals(currEntry.getName(),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =   "shouldReset ".equals(currEntry.getName(),  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =   "shouldReset ".equals(currEntry.getName(),  hasHitEOF);	  haveHitEOF    =   "shouldReset   ".equals(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
737	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.shouldReset()?   "shouldReset "  : "should ";  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.shouldReset()?   "shouldReset "  : "should ";  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.shouldReset()?   "shouldReset "  : "should ";	  hasHitEOF    =    is.isEOF()?       "shouldReset   "    :   "should   ";    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
738	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()?   "shouldReset "  : ",should ";  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()?   "shouldReset "  : ",should ";  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()?   "shouldReset "  : ",should ";	  hasHitEOF    =    is.isEOF()?       "shouldReset   "    :   "should   ";    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
739	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()?   "shouldReset ",  -1  :  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()?   "shouldReset ",  -1  :  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()?   "shouldReset ",  -1  :  1;	  hasHitEOF    =    is.isEOF()?       "shouldReset   "    :   "should   ";    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
740	[BUG]  [BUGGY]  hasHitEOF  =(totalRead  >=  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(totalRead  >=  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(totalRead  >=  0);	  hasHitEOF    =(totalRead    ==    0);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
741	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF(offset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF(offset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF(offset);	  hasHitEOF    =    is.isEOF(entryOffset);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
742	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.isEOF(numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.isEOF(numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.isEOF(numToRead);	  hasHitEOF    =    is.isEOF(entryOffset);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
743	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF(entryOffset,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF(entryOffset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF(entryOffset,  0);	  hasHitEOF    =    is.isEOF(entryOffset);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
744	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset,  0);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
745	[BUG]  [BUGGY]  hasHitEOF  |=!isReset;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  |=!isReset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  |=!isReset;	  hasHitEOF    |=    true;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
746	[BUG]  [BUGGY]  hasHitEOF  &=  is.readNow  +(int)Math.rint((  int)entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.readNow  +(int)Math.rint((  int)entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.readNow  +(int)Math.rint((  int)entryOffset);	  hasHitEOF    &=    is.readNow;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
747	[BUG]  [BUGGY]  hasHitEOF  =  is.shouldReset()  &&  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.shouldReset()  &&  hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.shouldReset()  &&  hasHitEOF;	  hasHitEOF    =    is.isEOF()    &&    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
748	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  totalRead,  len);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  totalRead,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  totalRead,  len);	  hasHitEOF    &=    currEntry.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
749	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  totalRead,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  totalRead,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset  +  1,  totalRead,  0);	  hasHitEOF    &=    currEntry.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
750	[BUG]  [BUGGY]  hasHitEOF  =  is.readEOF()  &&  is.readNow();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.readEOF()  &&  is.readNow();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.readEOF()  &&  is.readNow();	  hasHitEOF    =    is.isEOF()    &&    is.readNow();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
751	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hashReset;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hashReset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hashReset;	  hasHitEOF    =!currEntry.shouldReset;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
752	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.shouldReset  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.shouldReset  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.shouldReset  +  1;	  hasHitEOF    =!currEntry.shouldReset;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
753	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.shouldReset  ||  is.read(buf,  offset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.shouldReset  ||  is.read(buf,  offset  +  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.shouldReset  ||  is.read(buf,  offset  +  totalRead);	  hasHitEOF    =!currEntry.shouldReset;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
754	[BUG]  [BUGGY]  hasHitEOF  =  encoding.shouldReset;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  encoding.shouldReset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  encoding.shouldReset;	  hasHitEOF    =!encoding;    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
755	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  0,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  0,  entryOffset  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  0,  entryOffset  +  1);	  hasHitEOF    &=    is.read(buf,    offset,    0,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
756	[BUG]  [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  0,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  is.read(buf,  offset,  0,  entryOffset);	  hasHitEOF    &=    is.read(buf,    offset,    0,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
757	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead  +  1);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
758	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  totalRead);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
759	[BUG]  [BUGGY]  hasHitEOF  =!hashCode  &&  is.read(buf,  offset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashCode  &&  is.read(buf,  offset  +  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashCode  &&  is.read(buf,  offset  +  totalRead);	  hasHitEOF    =!hashCode;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
760	[BUG]  [BUGGY]  hasHitEOF  =!hashCode  &&  is.read(buf,  offset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashCode  &&  is.read(buf,  offset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashCode  &&  is.read(buf,  offset);	  hasHitEOF    =!hashCode;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
761	[BUG]  [BUGGY]  hasHitEOF  &=  is.read;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read;	  hasHitEOF    &=    null;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
762	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF  ||  is.read(buf,  offset  +  totalRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF  ||  is.read(buf,  offset  +  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hasHitEOF  ||  is.read(buf,  offset  +  totalRead);	  hasHitEOF    =!currEntry.hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
763	[BUG]  [BUGGY]  hasHitEOF  =(currEntry!=  null)?  currEntry.hashCode()  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(currEntry!=  null)?  currEntry.hashCode()  :  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(currEntry!=  null)?  currEntry.hashCode()  :  0;	  hasHitEOF    =!currEntry.hashCode();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
764	[BUG]  [BUGGY]  hasHitEOF  =(currEntry!=  null)?  currEntry.hashCode()  :  -1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(currEntry!=  null)?  currEntry.hashCode()  :  -1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(currEntry!=  null)?  currEntry.hashCode()  :  -1;	  hasHitEOF    =!currEntry.hashCode();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
765	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hasHitCode();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hasHitCode();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hasHitCode();	  hasHitEOF    =!currEntry.hashCode();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
766	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hashCode()  ||  totalRead  >  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hashCode()  ||  totalRead  >  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hashCode()  ||  totalRead  >  0;	  hasHitEOF    =!currEntry.hashCode();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
767	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  currEntry.getEntry(offset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  TarArchiveEntry  currEntry  =  currEntry.getEntry(offset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	TarArchiveEntry  currEntry  =  currEntry.getEntry(offset);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
768	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  currEntry.getEntry(offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  TarArchiveEntry  currEntry  =  currEntry.getEntry(offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	TarArchiveEntry  currEntry  =  currEntry.getEntry(offset,  numToRead);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
769	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >>  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  -1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >>  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  -1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >>  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  numToRead)>  -1;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead)>    -1;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
770	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  len);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
771	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  currEntry.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.isEOF()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
772	[BUG]  [BUGGY]  hasHitEOF  =  is.shouldReset()  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.shouldReset()  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.shouldReset()  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.isEOF()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
773	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(offset,  entryOffset);	  hasHitEOF    &=    currEntry.hashCode(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
774	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  fullRead,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  fullRead,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  fullRead,  numToRead);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    totalRead,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
775	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  numToRead);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
776	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  count(totalRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  count(totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  count(totalRead);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
777	[BUG]  [BUGGY]  hasHitEOF  =  is.readAndClearBuffer(0,  0);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.readAndClearBuffer(0,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.readAndClearBuffer(0,  0);	  hasHitEOF    =    is.readAndClearBuffer();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
778	[BUG]  [BUGGY]  hasHitEOF  =  is.readAndClearBuffer(0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.readAndClearBuffer(0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.readAndClearBuffer(0);	  hasHitEOF    =    is.readAndClearBuffer();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
779	[BUG]  [BUGGY]  hasHitEOF  =!shouldReset  &&  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!shouldReset  &&  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!shouldReset  &&  is.read(buf,  offset,  numToRead);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
780	[BUG]  [BUGGY]  hasHitEOF  =  is.hasHitEOF  &&  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hasHitEOF  &&  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hasHitEOF  &&  currEntry.read(buf,  offset,  numToRead);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
781	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset,  numToRead  +  1);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
782	[BUG]  [BUGGY]  if(entryOffset!=  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  if(entryOffset!=  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	if(entryOffset!=  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >    entrySize)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
783	[BUG]  [BUGGY]  entryOffset  +=  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entryOffset  +=  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entryOffset  +=  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >    entrySize)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
784	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  if(entryOffset  >=  entrySize)  {  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	if(entryOffset  >=  entrySize)  {  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >    entrySize)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
785	[BUG]  [BUGGY]  hasHitEOF  &=  is.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.length;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.length;	  hasHitEOF    &=    is.hashCode();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
786	[BUG]  [BUGGY]  hasHitEOF  &=  is.read();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read();	  hasHitEOF    &=    is.hashCode();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
787	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  [Delete]  0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  [Delete]  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  [Delete]  0;	  hasHitEOF    =    is.hashCode()    ==    0;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
788	[BUG]  [BUGGY]  hasHitEOF  =(entryOffset  +  entrySize  }  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entryOffset  +  entrySize  }  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entryOffset  +  entrySize  }  0);	  hasHitEOF    =(entryOffset    >>    0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
789	[BUG]  [BUGGY]  hasHitEOF  =(entryOffset  +  entrySize  >>  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entryOffset  +  entrySize  >>  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entryOffset  +  entrySize  >>  0);	  hasHitEOF    =(entryOffset    >>    0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
790	[BUG]  [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  is.read(buf,  offset,  numToRead  +  1);	  haveHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
791	[BUG]  [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  &=  is.read(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  &=  is.read(buf,  offset,  0);	  haveHitEOF    &=    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
792	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.encodeHitEOF( "shouldReset ",  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.encodeHitEOF( "shouldReset ",  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.encodeHitEOF( "shouldReset ",  numToRead);	  hasHitEOF    =    is.encodeHitEOF(   "shouldReset   ");    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
793	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.encodeHitEOF( ".shouldReset ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  currEntry.encodeHitEOF( ".shouldReset ");  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  currEntry.encodeHitEOF( ".shouldReset ");	  hasHitEOF    =    is.encodeHitEOF(   "shouldReset   ");    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
794	[BUG]  [BUGGY]  hasHitEOF  =!hashAndReset;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashAndReset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashAndReset;	  hasHitEOF    =!hashReset;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
795	[BUG]  [BUGGY]  hasHitEOF  =!hashReset  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashReset  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashReset  +  1;	  hasHitEOF    =!hashReset;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
796	[BUG]  [BUGGY]  if(entryOffset  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  if(entryOffset  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	if(entryOffset  >  0)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
797	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  if(entryOffset!=  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	if(entryOffset!=  0)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
798	[BUG]  [BUGGY]  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ".);  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
799	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isEORF();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isEORF();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.isEORF();	  hasHitEOF    =    is.isEOF()    ||    is.isEOF();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
800	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isERROR();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isERROR();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.isERROR();	  hasHitEOF    =    is.isEOF()    ||    is.isEOF();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
801	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isEOF(offset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isEOF(offset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.isEOF(offset);	  hasHitEOF    =    is.isEOF()    ||    is.isEOF();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
802	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isISOControl(offset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isISOControl(offset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.isISOControl(offset);	  hasHitEOF    =    is.isEOF()    ||    is.isEOF();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
803	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(offset,  buf,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(offset,  buf,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(offset,  buf,  numToRead);	  hasHitEOF    &=    currEntry.hashCode(buf,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
804	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead,  0);	  hasHitEOF    &=    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
805	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  toHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  toHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead,  toHitEOF);	  hasHitEOF    &=    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
806	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead,  len);	  hasHitEOF    &=    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
807	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  this.shouldReset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  this.shouldReset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead,  this.shouldReset);	  hasHitEOF    &=    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
808	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  2,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  2,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  2,  entryOffset);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
809	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  1);	  int    totalRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
810	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(buf,  offset,  numToRead  +  1);	  hasHitEOF    &=    currEntry.in.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
811	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(buf,  offset,  0);	  hasHitEOF    &=    currEntry.in.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
812	[BUG]  [BUGGY]  hasHitEOF  =  i.hashCode()  <  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  i.hashCode()  <  SMALL_BUFFER_SIZE;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  i.hashCode()  <  SMALL_BUFFER_SIZE;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
813	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  numToRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF(buf,  offset,  numToRead  +  1);	  hasHitEOF    &=    currEntry.isEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
814	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF(buf,  offset,  0);	  hasHitEOF    &=    currEntry.isEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
815	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -entryLimit);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -entryLimit);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  -entryLimit);	  hasHitEOF    &=    is.read(buf,    offset,    -entryOffset);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
816	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(numToRead,  offset,  hasHitEOF);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
817	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(numToRead,  buf,  offset,  hasHitEOF);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
818	[BUG]  [BUGGY]  ||  entryOffset  <  0  ||  totalRead  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ||  entryOffset  <  0  ||  totalRead  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	||  entryOffset  <  0  ||  totalRead  >  0)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
819	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	throw  new  IllegalStateException( " ");	  if(entryOffset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
820	[BUG]  [BUGGY]  aughtInvalidTarEntry(currEntry,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  aughtInvalidTarEntry(currEntry,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	aughtInvalidTarEntry(currEntry,  entryOffset,  numToRead);	  if(entryOffset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
821	[BUG]  [BUGGY]  aughtInvalidTarEntry(currEntry.getName(),  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  aughtInvalidTarEntry(currEntry.getName(),  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	aughtInvalidTarEntry(currEntry.getName(),  entryOffset,  numToRead);	  if(entryOffset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
822	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  off,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  off,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  off,  entrySize);	  hasHitEOF    &=    is.read(buf,    0,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
823	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entriesSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entriesSize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  entriesSize);	  hasHitEOF    &=    is.read(buf,    0,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
824	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  numToRead,  0);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
825	[BUG]  [BUGGY]  hasHitEOF  =  is.hasHitEOF  ||  is.hasNext();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hasHitEOF  ||  is.hasNext();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hasHitEOF  ||  is.hasNext();	  hasHitEOF    =    is.hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
826	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  entrySize);	  hasHitEOF    &=    currEntry.isEOF()?    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
827	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  numToRead  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  numToRead  -  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  is.read(buf,  offset,  numToRead  -  1);	  hasHitEOF    &=    currEntry.isEOF()?    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
828	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  entrySize,  len);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
829	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entries.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entries.length);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  entries.length);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
830	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  <  1  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  <  1  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  <  1  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
831	[BUG]  [BUGGY]  haveHitEOF  =  hasHitEOF? "shouldReset "  : "shouldReset ".equals(getRecordSize());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  hasHitEOF? "shouldReset "  : "shouldReset ".equals(getRecordSize());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  hasHitEOF? "shouldReset "  : "shouldReset ".equals(getRecordSize());	  haveHitEOF    =   "shouldReset   ".equals(getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
832	[BUG]  [BUGGY]  haveHitEOF  =  is.read(buf,  offset,  getRecordSize());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  is.read(buf,  offset,  getRecordSize());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  is.read(buf,  offset,  getRecordSize());	  haveHitEOF    =   "shouldReset   ".equals(getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
833	[BUG]  [BUGGY]  haveHitEOF  =  hasHitEOF?  getRecordSize()  : "shouldReset ".equals(getRecordSize());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  hasHitEOF?  getRecordSize()  : "shouldReset ".equals(getRecordSize());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  hasHitEOF?  getRecordSize()  : "shouldReset ".equals(getRecordSize());	  haveHitEOF    =   "shouldReset   ".equals(getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
834	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entry,  offset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entry,  offset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(entry,  offset);	  hasHitEOF    &=    currEntry.hashCode(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
835	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  -1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  -1);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
836	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  numToRead,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  numToRead,  0);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
837	[BUG]  [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  -1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.readAndClearBuffer(buf,  offset,  -1);	  hasHitEOF    &=    is.readAndClearBuffer(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
838	[BUG]  [BUGGY]  hasHitEOF  =(totalRead  <  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(totalRead  <  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(totalRead  <  0);	  hasHitEOF    =(totalRead    ==    0);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
839	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset  +  1,  entries.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset  +  1,  entries.length);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  &&  is.read(buf,  offset  +  1,  entries.length);	  hasHitEOF    =!hasHitEOF    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
840	[BUG]  [BUGGY]  entrySize  +=  i.remove();  entryOffset  +=  length;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entrySize  +=  i.remove();  entryOffset  +=  length;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entrySize  +=  i.remove();  entryOffset  +=  length;	  i.remove();    entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
841	[BUG]  [BUGGY]  entrySize  -=  i.remove();  entryOffset  +=  length;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entrySize  -=  i.remove();  entryOffset  +=  length;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entrySize  -=  i.remove();  entryOffset  +=  length;	  i.remove();    entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
842	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  <  SMALL_BUFFER_SIZE  ||  is.read(buf,  offset,  totalRead);	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
843	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  <  HIT_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  <  HIT_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  <  HIT_BUFFER_SIZE  ||  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE    ||    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
844	[BUG]  [BUGGY]  entrySize  +=  i.remove();  entryOffset  +=  len;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entrySize  +=  i.remove();  entryOffset  +=  len;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entrySize  +=  i.remove();  entryOffset  +=  len;	  i.remove();    entryOffset    +=    len;    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
845	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  count  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  count  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  count  +  1);	  hasHitEOF    &=    is.read(buf,    offset,    totalRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
846	[BUG]  [BUGGY]  hasHitEOF  =  is.hasHitEOF();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hasHitEOF();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hasHitEOF();	  hasHitEOF    =    marked;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
847	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  >=  -1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  >=  -1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  >=  -1;	  hasHitEOF    =    is.hashCode()    ==    -1;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
848	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset,  len);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
849	[BUG]  [BUGGY]  trecută  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  trecută  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	trecută  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "Tar    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
850	[BUG]  [BUGGY]  allowSkip(entryOffset  +  numToRead)  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  allowSkip(entryOffset  +  numToRead)  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	allowSkip(entryOffset  +  numToRead)  {  throw  new  IllegalStateException( "Tar  entry  is  null. ");  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "Tar    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
851	[BUG]  [BUGGY]  aughtAfterLastAccessException( "Tar  entry  is  null. ");  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  aughtAfterLastAccessException( "Tar  entry  is  null. ");  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	aughtAfterLastAccessException( "Tar  entry  is  null. ");	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "Tar    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
852	[BUG]  [BUGGY]  aughtInvalidTarEntry( "Tar  entry  is  null. ");  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  aughtInvalidTarEntry( "Tar  entry  is  null. ");  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	aughtInvalidTarEntry( "Tar  entry  is  null. ");	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "Tar    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
853	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Tar  entry  is  null. ");  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  throw  new  IllegalStateException( "Tar  entry  is  null. ");  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	throw  new  IllegalStateException( "Tar  entry  is  null. ");	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "Tar    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
854	[BUG]  [BUGGY]  hasHitEOF  =!isRecorded;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!isRecorded;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!isRecorded;	  hasHitEOF    =!marked;    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
855	[BUG]  [BUGGY]  hasHitEOF  =!remainder;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!remainder;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!remainder;	  hasHitEOF    =!marked;    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
856	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  0;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead);  entryOffset  +=  0;	  int    totalRead    =    is.read(buf,    offset,    numToRead);    entryOffset    +=    totalRead;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
857	[BUG]  [BUGGY]  hasHitEOF  =(entryOffset  +  numRecords);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entryOffset  +  numRecords);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entryOffset  +  numRecords);	  hasHitEOF    =(entryOffset    >>    0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
858	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  0);	  hasHitEOF    =    is.isEOF()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
859	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  -1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.read(buf,  offset,  -1);	  hasHitEOF    =    is.isEOF()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
860	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hasHitEOF();	  hasHitEOF    =!currEntry.shouldReset;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
861	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hasHitEffects();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hasHitEffects();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hasHitEffects();	  hasHitEOF    =!currEntry.shouldReset;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
862	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(entrySize,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(entrySize,  entryOffset  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(entrySize,  entryOffset  +  1);	  hasHitEOF    &=    currEntry.read(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
863	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(offset,  entryOffset);	  hasHitEOF    &=    currEntry.read(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
864	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  0);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
865	[BUG]  [BUGGY]  haveHitEOF  =  is.size()  ==  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  is.size()  ==  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  is.size()  ==  0;	  haveHitEOF    =    is.hashCode()    ==    0;    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
866	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(entry,  offset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(entry,  offset  +  1,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(entry,  offset  +  1,  entrySize);	  hasHitEOF    &=    currEntry.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
867	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entryStart,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entryStart,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(entryStart,  entrySize);	  hasHitEOF    &=    currEntry.hashCode(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
868	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  count(numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  count(numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  count(numToRead);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
869	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(entrySize,  entryOffset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(entrySize,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(entrySize,  entryOffset);	  hasHitEOF    &=    currEntry.in.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
870	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(entry,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(entry,  offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(entry,  offset,  entrySize);	  hasHitEOF    &=    currEntry.in.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
871	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(offset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(offset,  entrySize);	  hasHitEOF    &=    currEntry.in.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
872	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(entryOffset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(entryOffset,  entrySize  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(entryOffset,  entrySize  +  1);	  hasHitEOF    &=    currEntry.in.read(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
873	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hasHitEOF  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =!currEntry.hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
874	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF  ||  is.read(buf,  offset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hasHitEOF  ||  is.read(buf,  offset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hasHitEOF  ||  is.read(buf,  offset  +  1,  totalRead);	  hasHitEOF    =!currEntry.hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
875	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(buf,  offset  +  1,  len);	  hasHitEOF    &=    currEntry.hashCode(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
876	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  buf.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  numToRead,  buf.length);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  numToRead,  buf.length);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
877	[BUG]  [BUGGY]  hasHitEOF  &=  getHitEOF(entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  getHitEOF(entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  getHitEOF(entrySize);	  hasHitEOF    &=    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
878	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  -entryOffset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  -entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset,  -entryOffset);	  int    totalRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
879	[BUG]  [BUGGY]  hasHitEOF  =  is.readAndClearBuffer(entrySize);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.readAndClearBuffer(entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.readAndClearBuffer(entrySize);	  hasHitEOF    =    is.readAndClearBuffer();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
880	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -1,  -1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -1,  -1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  -1,  -1);	  hasHitEOF    &=    is.read(buf,    offset,    -1);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
881	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -1,  -offset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -1,  -offset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  -1,  -offset);	  hasHitEOF    &=    is.read(buf,    offset,    -1);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
882	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -1,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  -1,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  -1,  len);	  hasHitEOF    &=    is.read(buf,    offset,    -1);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
883	[BUG]  [BUGGY]  hasHitEOF  =  is.encodeHitEOF( "shouldReset: ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.encodeHitEOF( "shouldReset: ");  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.encodeHitEOF( "shouldReset: ");	  hasHitEOF    =    is.encodeHitEOF(   "shouldReset   ");    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
884	[BUG]  [BUGGY]  hasHitEOF  &=  is.size()  >  0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.size()  >  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.size()  >  0;	  hasHitEOF    &=    false;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
885	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()?   "shouldReset "  : "  <   ";  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()?   "shouldReset "  : "  <   ";  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()?   "shouldReset "  : "  <   ";	  hasHitEOF    =    is.isEOF()?       "shouldReset   "    :   "should   ";    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
886	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset,  totalRead);	  hasHitEOF    &=    currEntry.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
887	[BUG]  [BUGGY]  i.removeChild(currEntry.getImmediateParentPointer());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  i.removeChild(currEntry.getImmediateParentPointer());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	i.removeChild(currEntry.getImmediateParentPointer());	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
888	[BUG]  [BUGGY]  i.removeChild(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  i.removeChild(currEntry.getName());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	i.removeChild(currEntry.getName());	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
889	[BUG]  [BUGGY]  i.removeChild(currEntry.getMethod());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  i.removeChild(currEntry.getMethod());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	i.removeChild(currEntry.getMethod());	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
890	[BUG]  [BUGGY]  entrySize  =  i.remove();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entrySize  =  i.remove();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entrySize  =  i.remove();	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
891	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  -1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  -1);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
892	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  -entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  -entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset,  -entryOffset);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
893	[BUG]  [BUGGY]  hasHitEOF  =  is.shouldReset()  &&  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.shouldReset()  &&  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.shouldReset()  &&  is.read(buf,  offset,  totalRead);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
894	[BUG]  [BUGGY]  hasHitEOF  :  is.read(buf,  offset,  -numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  :  is.read(buf,  offset,  -numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  :  is.read(buf,  offset,  -numToRead);	  haveHitEOF    :    false;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
895	[BUG]  [BUGGY]  hasHitEOF  :  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  :  is.read(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  :  is.read(buf,  offset,  0);	  haveHitEOF    :    false;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
896	[BUG]  [BUGGY]  hasHitEOF  :  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  :  is.read(buf,  offset,  -1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  :  is.read(buf,  offset,  -1);	  haveHitEOF    :    false;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
897	[BUG]  [BUGGY]  allowSkip(entryOffset  +  numToRead)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  allowSkip(entryOffset  +  numToRead)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	allowSkip(entryOffset  +  numToRead)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
898	[BUG]  [BUGGY]  allowSkip(entryOffset  +  1))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  allowSkip(entryOffset  +  1))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	allowSkip(entryOffset  +  1))  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
899	[BUG]  [BUGGY]  allowSkip(entryOffset  +  0))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  allowSkip(entryOffset  +  0))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	allowSkip(entryOffset  +  0))  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
900	[BUG]  [BUGGY]  allowSkip(entryOffset  +  3))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  allowSkip(entryOffset  +  3))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	allowSkip(entryOffset  +  3))  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    >=    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
901	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  -1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.read(buf,  offset,  -1);	  hasHitEOF    =    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
902	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.read(buf,  offset,  len);	  hasHitEOF    =    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
903	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  toHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  toHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.read(buf,  offset,  toHitEOF);	  hasHitEOF    =    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
904	[BUG]  [BUGGY]  hasHitEOF  &=  is.readNow  *  2;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.readNow  *  2;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.readNow  *  2;	  hasHitEOF    &=    is.readNow;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
905	[BUG]  [BUGGY]  hasHitEOF  &=  is.readNow(offset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.readNow(offset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.readNow(offset);	  hasHitEOF    &=    is.readNow;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
906	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(offset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(offset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(offset);	  hasHitEOF    &=    is.readNow;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
907	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  entryOffset  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.currEntry.read(buf,  offset,  entryOffset  +  1);	  hasHitEOF    &=    currEntry.currEntry.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
908	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  fullNameData,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  fullNameData,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  fullNameData,  numToRead);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    totalRead,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
909	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead,  len);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  totalRead,  len);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    totalRead,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
910	[BUG]  [BUGGY]  allowSkip(numToRead)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  allowSkip(numToRead)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	allowSkip(numToRead)  {  throw  new  IllegalStateException( " ");  }	  if(entryOffset    ==    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
911	[BUG]  [BUGGY]  haveHitEOF  =!hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =!hasHitEOF;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =!hasHitEOF;	  haveHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
912	[BUG]  [BUGGY]  hasHitEOF  =!hashReset  &&  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashReset  &&  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashReset  &&  is.read(buf,  offset,  numToRead);	  hasHitEOF    =!hashReset;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
913	[BUG]  [BUGGY]  hasHitEOF  =!hashReset  &&  is.read(buf,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashReset  &&  is.read(buf,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashReset  &&  is.read(buf,  entryOffset,  numToRead);	  hasHitEOF    =!hashReset;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
914	[BUG]  [BUGGY]  hasHitEOF  =!hashReset  &&  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashReset  &&  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashReset  &&  is.read(buf,  offset,  totalRead);	  hasHitEOF    =!hashReset;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
915	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  len  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  len  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  len  +  1);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    len);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
916	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  &&  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  &&  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  &&  1;	  hasHitEOF    =!hasHitEOF    +    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
917	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read(numToRead  +  1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  &&  is.read(numToRead  +  1);	  hasHitEOF    =!hasHitEOF    +    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
918	[BUG]  [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hasHitEOF  &&  is.read();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hasHitEOF  &&  is.read();	  hasHitEOF    =!hasHitEOF    +    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
919	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  off,  0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  off,  0,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  off,  0,  entryOffset);	  hasHitEOF    &=    is.read(buf,    offset,    0,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
920	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entrySize,  numRecords);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entrySize,  numRecords);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  entrySize,  numRecords);	  hasHitEOF    &=    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
921	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.read(buf,  offset,  numToRead,  len);	  hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
922	[BUG]  [BUGGY]  hasHitEOF  =  is.size()  ==  0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.size()  ==  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.size()  ==  0;	  hasHitEOF    =    is.hashCode()    ==    0;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
923	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  entryOffset);	  hasHitEOF    =    is.hashCode()    ||    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
924	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  toHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  toHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  toHitEOF);	  hasHitEOF    =    is.hashCode()    ||    is.read(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
925	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hasHitCode;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hasHitCode;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hasHitCode;	  hasHitEOF    =!currEntry.hashCode;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
926	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  entryOffset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  entryOffset,  entrySize);	  hasHitEOF    &=    is.read(buf,    entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
927	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.read(buf,  offset,  entryOffset,  entrySize);	  hasHitEOF    &=    is.read(buf,    entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
928	[BUG]  [BUGGY]  hasHitEOF  =  hasHitEOF  ||  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  hasHitEOF  ||  is.read(buf,  offset,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  hasHitEOF  ||  is.read(buf,  offset,  totalRead);	  hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
929	[BUG]  [BUGGY]  hasHitEOF  =!hashCode  &&  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashCode  &&  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashCode  &&  is.read(buf,  offset,  numToRead);	  hasHitEOF    =!hashCode;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
930	[BUG]  [BUGGY]  hasHitEOF  =!hashCode  &&  is.read(buf,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashCode  &&  is.read(buf,  entryOffset);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashCode  &&  is.read(buf,  entryOffset);	  hasHitEOF    =!hashCode;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
931	[BUG]  [BUGGY]  hasHitEOF  =!hashCode  &&  is.read(buf,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashCode  &&  is.read(buf,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashCode  &&  is.read(buf,  entryOffset,  numToRead);	  hasHitEOF    =!hashCode;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
932	[BUG]  [BUGGY]  hasHitEOF  =!hashCode  &&  is.read(buf,  offset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hashCode  &&  is.read(buf,  offset  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hashCode  &&  is.read(buf,  offset  +  1,  totalRead);	  hasHitEOF    =!hashCode;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
933	[BUG]  [BUGGY]  entrySize  +=  i.remove();  entryOffset  +=  offset;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entrySize  +=  i.remove();  entryOffset  +=  offset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entrySize  +=  i.remove();  entryOffset  +=  offset;	  i.remove();    entryOffset    +=    offset;    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
934	[BUG]  [BUGGY]  entryOffset  +=  iSize;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entryOffset  +=  iSize;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entryOffset  +=  iSize;	  i.remove();    entryOffset    +=    offset;    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
935	[BUG]  [BUGGY]  entryOffset  +=  i.remove();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  entryOffset  +=  i.remove();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	entryOffset  +=  i.remove();	  i.remove();    entryOffset    +=    offset;    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
936	[BUG]  [BUGGY]  hasHitEOF  =!encoding.shouldReset;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!encoding.shouldReset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!encoding.shouldReset;	  hasHitEOF    =!encoding;    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
937	[BUG]  [BUGGY]  hasHitEOF  =!markerEncoding;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!markerEncoding;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!markerEncoding;	  hasHitEOF    =!encoding;    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
938	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isEOFRecord();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  ||  is.isEOFRecord();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  ||  is.isEOFRecord();	  hasHitEOF    =    is.isEOF()    ||    is.isEOF();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
939	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  ||  is.isEOF();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  ||  is.isEOF();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  ||  is.isEOF();	  hasHitEOF    =    is.isEOF()    ||    is.isEOF();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
940	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entryOffset,  len);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset  +  1,  entryOffset,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset  +  1,  entryOffset,  len);	  hasHitEOF    &=    is.read(buf,    offset    +    1,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
941	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF(entryOffset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF(entryOffset  +  1,  entrySize);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF(entryOffset  +  1,  entrySize);	  hasHitEOF    =    is.isEOF(entryOffset);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
942	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  in.read);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  in.read);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  in.read);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
943	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF(buf,  offset,  -1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF(buf,  offset,  -1);	  hasHitEOF    &=    currEntry.isEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
944	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  if(entryOffset  >=  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	if(entryOffset  >=  entrySize)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ".);  }	  if(entryOffset    >    entrySize)    {    if(currEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
945	[BUG]  [BUGGY]  hasHitEOF  =  is.read  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.read  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.read  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    isHitEOF    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
946	[BUG]  [BUGGY]  hasHitEOF  =  is.read()  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.read()  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.read()  ||  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    isHitEOF    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
947	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  -1);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  ||  is.read(buf,  offset,  -1);	  hasHitEOF    =    is.hashCode()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
948	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  +  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  +  is.read(buf,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  +  is.read(buf,  offset,  numToRead);	  hasHitEOF    =    is.hashCode()    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
949	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  *  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  *  SMALL_BUFFER_SIZE;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  *  SMALL_BUFFER_SIZE;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
950	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  +  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  +  SMALL_BUFFER_SIZE;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  +  SMALL_BUFFER_SIZE;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
951	[BUG]  [BUGGY]  hasHitEOF  =  is.size()  <  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.size()  <  SMALL_BUFFER_SIZE;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.size()  <  SMALL_BUFFER_SIZE;	  hasHitEOF    =    is.hashCode()    <    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
952	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.shouldReset;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.shouldReset;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.shouldReset;	  hasHitEOF    &=    null;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
953	[BUG]  [BUGGY]  haveHitEOF  =  hasHitEOF?   "shouldReset "  : "should ".equals(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  hasHitEOF?   "shouldReset "  : "should ".equals(currEntry.getName());  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  hasHitEOF?   "shouldReset "  : "should ".equals(currEntry.getName());	  haveHitEOF    =   "shouldReset   ".equals(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
954	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  len);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.in.read(buf,  offset,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.in.read(buf,  offset,  len);	  hasHitEOF    &=    currEntry.in.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
955	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  entrySize  :  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  entrySize  :  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  entrySize  :  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    &=    is.read(buf,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
956	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  entrySize  +  1  :  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.isEOF()?  entrySize  +  1  :  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.isEOF()?  entrySize  +  1  :  is.read(buf,  offset,  hasHitEOF);	  hasHitEOF    &=    is.read(buf,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
957	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  off,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  off,  hasHitEOF);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  off,  hasHitEOF);	  hasHitEOF    &=    is.read(buf,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
958	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(currEntry,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(currEntry,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(currEntry,  offset,  numToRead);	  hasHitEOF    &=    currEntry.hashCode(buf,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
959	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entrySize,  buf,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(entrySize,  buf,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(entrySize,  buf,  entryOffset,  numToRead);	  hasHitEOF    &=    currEntry.hashCode(buf,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
960	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(curr,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(curr,  offset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(curr,  offset,  numToRead);	  hasHitEOF    &=    currEntry.hashCode(buf,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
961	[BUG]  [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  currEntry.hashCode(numToRead,  entryOffset,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  currEntry.hashCode(numToRead,  entryOffset,  numToRead);	  hasHitEOF    &=    currEntry.hashCode(buf,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
962	[BUG]  [BUGGY]  hasHitEOF  =!hailed;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hailed;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hailed;	  hasHitEOF    =!hished;    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
963	[BUG]  [BUGGY]  hasHitEOF  =!hounded  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!hounded  +  1;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!hounded  +  1;	  hasHitEOF    =!hished;    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
964	[BUG]  [BUGGY]  hasHitEOF  &=  3;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  3;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  3;	  hasHitEOF    &=    1;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
965	[BUG]  [BUGGY]  InputStream  is  =  i.getInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  InputStream  is  =  i.getInputStream();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	InputStream  is  =  i.getInputStream();	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
966	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hasHit();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hasHit();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hasHit();	  hasHitEOF    =!currEntry.hashCode();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
967	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.isEOF();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.isEOF();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.isEOF();	  hasHitEOF    =!currEntry.hashCode();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
968	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hasHitCharacterEncoding();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hasHitCharacterEncoding();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hasHitCharacterEncoding();	  hasHitEOF    =!currEntry.hashCode();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
969	[BUG]  [BUGGY]  hasHitEOF  =!currEntry.hasHitElement();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =!currEntry.hasHitElement();  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =!currEntry.hasHitElement();	  hasHitEOF    =!currEntry.hashCode();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
970	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  off  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  off  +  1,  totalRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  off  +  1,  totalRead);	  hasHitEOF    &=    is.read(buf,    entryOffset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
971	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	ch  =  is.read(buf,  offset,  numToRead,  len);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
972	[BUG]  [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  entries.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  entries.length);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.isEOF()  &&  is.read(buf,  offset  +  1,  entries.length);	  hasHitEOF    =    is.isEOF()    &&    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
973	[BUG]  [BUGGY]  hasHitEOF  =(entryOffset  +  numToRead)  <  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =(entryOffset  +  numToRead)  <  0;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =(entryOffset  +  numToRead)  <  0;	  hasHitEOF    =(entryOffset    {    0);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
974	[BUG]  [BUGGY]  hasHitEOF  ||  isRecorded;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  ||  isRecorded;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  ||  isRecorded;	  hasHitEOF    ||    true;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
975	[BUG]  [BUGGY]  haveHitEOF  =  marked;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  haveHitEOF  =  marked;  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	haveHitEOF  =  marked;	  haveHitEOF    =   "shouldReset   ";    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
976	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  numToRead,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset  +  numToRead,  0);	  int    totalRead    =    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
977	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  numToRead,  numRecords);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  numToRead,  numRecords);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset  +  numToRead,  numRecords);	  int    totalRead    =    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
978	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  2,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  2,  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	int  totalRead  =  is.read(buf,  offset  +  2,  numToRead);	  int    totalRead    =    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
979	[BUG]  [BUGGY]  hasHitEOF  =  is.hashCode()  &&  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  =  is.hashCode()  &&  is.read(buf,  offset,  0);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  =  is.hashCode()  &&  is.read(buf,  offset,  0);	  hasHitEOF    =    is.hashCode();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
980	[BUG]  [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  1,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {      [BUGGY]  hasHitEOF  &=  is.read(buf,  offset,  1,  entryOffset  +  numToRead);  [BUGGY]      }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	586	586	1	replace	hasHitEOF  &=  is.read(buf,  offset,  1,  entryOffset  +  numToRead);	  hasHitEOF    &=    is.read(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
