bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().equals( "tar_ "))  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().equals( "tar_ "))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  currEntry.getName().equals( "tar_ "))  {	  if(currEntry    ==    null    ||    currEntry.getName().equals(   "tar   "))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().equals( "tar- "))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().equals( "tar- "))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  currEntry.getName().equals( "tar- "))  {	  if(currEntry    ==    null    ||    currEntry.getName().equals(   "tar   "))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
3	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.getName().equals( "tar   "))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  currEntry.getName().equals( "tar   "))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry!=  null  ||  currEntry.getName().equals( "tar   "))  {	  if(currEntry    ==    null    ||    currEntry.getName().equals(   "tar   "))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().equals( "tar/ "))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().equals( "tar/ "))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  currEntry.getName().equals( "tar/ "))  {	  if(currEntry    ==    null    ||    currEntry.getName().equals(   "tar   "))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
5	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().equals( "tar  entry "))  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().equals( "tar  entry "))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  currEntry.getName().equals( "tar  entry "))  {	  if(currEntry    ==    null    ||    currEntry.getName().equals(   "tar   "))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	int  tarRecords  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
8	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords.length;  ++i)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
9	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  offset;  i  <  numRecords.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  offset;  i  <  numRecords.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(numRecords  ==  0)  {  for(int  i  =  offset;  i  <  numRecords.length;  ++i)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  if(is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  if(is.read(buf,  offset,  numToRead);  }  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  if(is.read(buf,  offset,  numToRead);  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  InputStream  is  =  this.currEntry.getInputStream();  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	InputStream  is  =  this.currEntry.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  if(is  ==  null  ||  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(is  ==  null  ||  is.read(buf,  offset,  numToRead))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(is  ==  null  ||  is.read(buf,  offset,  numToRead))  {	  if(currEntry    ==    null    ||    is.read(buf,    offset,    numToRead))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
14	[BUG]  [BUGGY]  if(is!=  null  ||  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(is!=  null  ||  is.read(buf,  offset,  numToRead))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(is!=  null  ||  is.read(buf,  offset,  numToRead))  {	  if(currEntry    ==    null    ||    is.read(buf,    offset,    numToRead))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
15	[BUG]  [BUGGY]  if(currEntry  ==  null  &&  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  &&  is.read(buf,  offset,  numToRead))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  &&  is.read(buf,  offset,  numToRead))  {	  if(currEntry    ==    null    ||    is.read(buf,    offset,    numToRead))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
16	[BUG]  [BUGGY]  if(is  ==  null  ||  currEntry.length  ==  0  ||  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(is  ==  null  ||  currEntry.length  ==  0  ||  is.read(buf,  offset,  numToRead))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(is  ==  null  ||  currEntry.length  ==  0  ||  is.read(buf,  offset,  numToRead))  {	  if(currEntry    ==    null    ||    is.read(buf,    offset,    numToRead))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
17	[BUG]  [BUGGY]  if(is  ==  null  ||  currEntry.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(is  ==  null  ||  currEntry.read(buf,  offset,  numToRead))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(is  ==  null  ||  currEntry.read(buf,  offset,  numToRead))  {	  if(currEntry    ==    null    ||    is.read(buf,    offset,    numToRead))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  if(i  ==  null  ||  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(i  ==  null  ||  is.read(buf,  offset,  numToRead))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(i  ==  null  ||  is.read(buf,  offset,  numToRead))  {	  if(currEntry    ==    null    ||    is.read(buf,    offset,    numToRead))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
19	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasHitEOF)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  currEntry.hasHitEOF)  {	  if(currEntry!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  is.read(buf,  offset,  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  is.read(buf,  offset,  hasHitEOF))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  is.read(buf,  offset,  hasHitEOF))  {	  if(currEntry!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  currEntry.hasHitEOF)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry!=  null  ||  currEntry.hasHitEOF)  {	  if(currEntry!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  is.read(buf,  offset  +  numToRead))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  is.read(buf,  offset  +  numToRead))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  is.read(buf,  offset  +  numToRead))  {	  if(currEntry!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
24	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  entryOffset  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  entryOffset  ==  entrySize)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  hasHitEOF  ||  entryOffset  ==  entrySize)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  entryOffset!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  entryOffset!=  entrySize)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  hasHitEOF  ||  entryOffset!=  entrySize)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
26	[BUG]  [BUGGY]  if(currentEntry  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currentEntry  ==  null  ||  hasHitEOF)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currentEntry  ==  null  ||  hasHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
27	[BUG]  [BUGGY]  if(currEntry!=  null  ||  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  is.read(buf,  offset,  numToRead))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry!=  null  ||  is.read(buf,  offset,  numToRead))  {	  if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.length!=  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.length!=  0)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  currEntry.length!=  0)  {	  if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.getName()!=  null)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  currEntry.getName()!=  null)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry!=  null  ||  currEntry.getName()!=  null)  {	  if(currEntry    ==    null    ||    currEntry.getName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.getName()  ==  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  currEntry.getName()  ==  null)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry!=  null  ||  currEntry.getName()  ==  null)  {	  if(currEntry    ==    null    ||    currEntry.getName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
31	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getParent()!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.getParent()!=  null)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  currEntry.getParent()!=  null)  {	  if(currEntry    ==    null    ||    currEntry.getName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
32	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName()  >=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName()  >=  null)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  currEntry.getName()  >=  null)  {	  if(currEntry    ==    null    ||    currEntry.getName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getSize()!=  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.getSize()!=  null)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  currEntry.getSize()!=  null)  {	  if(currEntry    ==    null    ||    currEntry.getName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.getType()  ==  Token.NAME)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  currEntry.getType()  ==  Token.NAME)  {	  if(currEntry    ==    null    ||    currEntry.getName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().equals( "tar))  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().equals( "tar))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  currEntry.getName().equals( "tar))  {	  if(currEntry    ==    null    ||    currEntry.getName().equals(   "tar   "))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
36	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  currEntry.length  ==  0)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry!=  null  ||  currEntry.length  ==  0)  {	  if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  if(currEntry!=  null  ||  is.read(buf,  offset  +  numToRead))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  is.read(buf,  offset  +  numToRead))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry!=  null  ||  is.read(buf,  offset  +  numToRead))  {	  if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  if(currEntry!=  null  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  &&  hasHitEOF)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry!=  null  &&  hasHitEOF)  {	  if(currEntry!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
39	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName()  ==  null)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName()  ==  null)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  currEntry.getName()  ==  null)  {	  if(currEntry    ==    null    ||    currEntry.getName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
40	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getRawClass()!=  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.getRawClass()!=  null)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  currEntry.getRawClass()!=  null)  {	  if(currEntry    ==    null    ||    currEntry.getName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
41	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  is.read())  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  is.read())  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  is.read())  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  is.available())  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  is.available())  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  is.available())  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
43	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  containsHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  containsHitEOF)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  containsHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
44	[BUG]  [BUGGY]  int  tarRecord  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  int  tarRecord  =  is.read(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	int  tarRecord  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]  int  tarSize  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  int  tarSize  =  is.read(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	int  tarSize  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  Integer  tar  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  Integer  tar  =  is.read(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	Integer  tar  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
47	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	readNow  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
48	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	ch  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
49	[BUG]  [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	int  tarRecords  =  getRecordSize(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
50	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  is.read(buf,  offset,  numToRead)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  is.read(buf,  offset,  numToRead)||  hasHitEOF)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  is.read(buf,  offset,  numToRead)||  hasHitEOF)  {	  if(currEntry    ==    null    ||    is.read(buf,    offset,    numToRead))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
51	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  is.read(buf,  offset,  numToRead)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  is.read(buf,  offset,  numToRead)&&  hasHitEOF)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  is.read(buf,  offset,  numToRead)&&  hasHitEOF)  {	  if(currEntry    ==    null    ||    is.read(buf,    offset,    numToRead))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
52	[BUG]  [BUGGY]  if(currEntry!=  null  &&  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  &&  is.read(buf,  offset,  numToRead))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry!=  null  &&  is.read(buf,  offset,  numToRead))  {	  if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
53	[BUG]  [BUGGY]  if(currEntry!=  null  &&  is.read(buf,  offset,  numToRead)>  entrySize)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  &&  is.read(buf,  offset,  numToRead)>  entrySize)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry!=  null  &&  is.read(buf,  offset,  numToRead)>  entrySize)  {	  if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
54	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.getName().endsWith( "/ "))  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  currEntry.getName().endsWith( "/ "))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry!=  null  ||  currEntry.getName().endsWith( "/ "))  {	  if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
55	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.getName().equals(entrySize))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  currEntry.getName().equals(entrySize))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry!=  null  ||  currEntry.getName().equals(entrySize))  {	  if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
56	[BUG]  [BUGGY]  if(currEntry  >=  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  >=  null  ||  hasHitEOF)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  >=  null  ||  hasHitEOF)  {	  if(currEntry!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
57	[BUG]  [BUGGY]  if(currentEntry!=  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currentEntry!=  null  ||  hasHitEOF)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currentEntry!=  null  ||  hasHitEOF)  {	  if(currEntry!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
58	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getTar()!=  null)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.getTar()!=  null)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  currEntry.getTar()!=  null)  {	  if(currEntry    ==    null    ||    currEntry.getName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
59	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  entryOffset  <  entrySize)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  entryOffset  <  entrySize)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	if(currEntry  ==  null  ||  hasHitEOF  ||  entryOffset  <  entrySize)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
60	[BUG]  [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	Integer  tar  =  getRecord(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
61	[BUG]  [BUGGY]  int  tarSize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  int  tarSize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	int  tarSize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
62	[BUG]  [BUGGY]  int  tarSize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  int  tarSize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	int  tarSize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
63	[BUG]  [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	576	576	1	replace	int  tarRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
