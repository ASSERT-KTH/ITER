bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  numToSkip  =  Math.max(available  /  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available  /  numToSkip,  available);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available  /  numToSkip,  available);	  numToSkip    =    Math.max(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  +  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available  *  numToSkip,  available  +  1);	  numToSkip    =    Math.max(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
3	[BUG]  [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  *  2);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  *  2);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available  *  numToSkip,  available  *  2);	  numToSkip    =    Math.max(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  *  length);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  *  length);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available  *  numToSkip,  available  *  length);	  numToSkip    =    Math.max(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  *  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  *  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available  *  numToSkip,  available  *  1);	  numToSkip    =    Math.max(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
6	[BUG]  [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  *  size);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  *  size);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available  *  numToSkip,  available  *  size);	  numToSkip    =    Math.max(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  +  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  *  numToSkip,  available  +  1);	  numToSkip    =    Math.max(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
8	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  1,  numToSkip);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  *  1,  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  *  1,  numToSkip);	  numToSkip    =    Math.min(available    +    1,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
9	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  2,  numToSkip);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  *  2,  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  *  2,  numToSkip);	  numToSkip    =    Math.min(available    +    1,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
10	[BUG]  [BUGGY]  numToSkip  =  Math.min(numToSkip  +  1,  available);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(numToSkip  +  1,  available);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(numToSkip  +  1,  available);	  numToSkip    =    Math.min(available    +    1,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
11	[BUG]  [BUGGY]  numToSkip  =  Math.min(available,  available  +  1,  numToSkip);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available,  available  +  1,  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available,  available  +  1,  numToSkip);	  numToSkip    =    Math.min(available    +    1,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
12	[BUG]  [BUGGY]  numToSkip  =  Math.min(numToSkip,  available  +  1,  numToSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(numToSkip,  available  +  1,  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(numToSkip,  available  +  1,  numToSkip);	  numToSkip    =    Math.min(available    +    1,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
13	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip  +  1,  available);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip  +  1,  available);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  *  numToSkip  +  1,  available);	  numToSkip    =    Math.min(available    +    1,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
14	[BUG]  [BUGGY]  numToSkip  =  Math.sin(available,  available);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.sin(available,  available);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.sin(available,  available);	  numToSkip    =    Math.sin(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  numToSkip  =  Math.sin(available,  available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.sin(available,  available  *  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.sin(available,  available  *  numToSkip);	  numToSkip    =    Math.sin(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  numToSkip  =  Math.sin(available,  available  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.sin(available,  available  +  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.sin(available,  available  +  1);	  numToSkip    =    Math.sin(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
17	[BUG]  [BUGGY]  int  numToSkip  =  Math.sin(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  int  numToSkip  =  Math.sin(available,  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	int  numToSkip  =  Math.sin(available,  numToSkip);	  numToSkip    =    Math.sin(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  numToSkip  =  Math.sin(available,  this.numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.sin(available,  this.numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.sin(available,  this.numToSkip);	  numToSkip    =    Math.sin(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
19	[BUG]  [BUGGY]  numToSkip  =  Math.sin(available,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.sin(available,  entrySize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.sin(available,  entrySize);	  numToSkip    =    Math.sin(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  numToSkip  =  Math.sin(available,  available  +  1,  numToSkip);  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.sin(available,  available  +  1,  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.sin(available,  available  +  1,  numToSkip);	  numToSkip    =    Math.sin(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
21	[BUG]  [BUGGY]  numToSkip  =  Math.max(available,  available);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available,  available);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available,  available);	  numToSkip    =    Math.max(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
22	[BUG]  [BUGGY]  numToSkip  =  Math.max(available,  available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available,  available  *  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available,  available  *  numToSkip);	  numToSkip    =    Math.max(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
23	[BUG]  [BUGGY]  numToSkip  =  Math.max(available,  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available,  numToSkip  +  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available,  numToSkip  +  1);	  numToSkip    =    Math.max(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
24	[BUG]  [BUGGY]  numToSkip  =  Math.min(available,  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available,  numToSkip  +  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available,  numToSkip  +  1);	  numToSkip    =    Math.max(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
25	[BUG]  [BUGGY]  numToSkip  =  Math.max(available,  available  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available,  available  +  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available,  available  +  1);	  numToSkip    =    Math.max(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
26	[BUG]  [BUGGY]  numToSkip  =  Math.max(available,  this.numToSkip);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available,  this.numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available,  this.numToSkip);	  numToSkip    =    Math.max(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
27	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  /  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  /  numToSkip,  available);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  /  numToSkip,  available);	  numToSkip    =    Math.min(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  2);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  2);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  *  numToSkip,  available  *  2);	  numToSkip    =    Math.min(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  length);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  length);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  *  numToSkip,  available  *  length);	  numToSkip    =    Math.min(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
30	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  *  numToSkip,  available  *  1);	  numToSkip    =    Math.min(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
31	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  size);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  size);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  *  numToSkip,  available  *  size);	  numToSkip    =    Math.min(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
32	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  10);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  10);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  *  numToSkip,  available  *  10);	  numToSkip    =    Math.min(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
33	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  1,  available);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  *  1,  available);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  *  1,  available);	  numToSkip    =    Math.min(available    +    1,    available);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  +  1,  available  *  size);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  +  1,  available  *  size);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  +  1,  available  *  size);	  numToSkip    =    Math.min(available    +    1,    available);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  +  1,  available  *  length);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  +  1,  available  *  length);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  +  1,  available  *  length);	  numToSkip    =    Math.min(available    +    1,    available);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  +  1,  available  *  2);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  +  1,  available  *  2);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  +  1,  available  *  2);	  numToSkip    =    Math.min(available    +    1,    available);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  numToSkip  =  Math.min(available,  available);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available,  available);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available,  available);	  numToSkip    =    Math.min(available    +    1,    available);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  2,  available);  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  *  2,  available);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  *  2,  available);	  numToSkip    =    Math.min(available    +    1,    available);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  +  1,  available  *  1000);  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  +  1,  available  *  1000);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  +  1,  available  *  1000);	  numToSkip    =    Math.min(available    +    1,    available);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
40	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  /  numToSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  /  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  /  numToSkip);	  numToSkip    =    Math.min(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
41	[BUG]  [BUGGY]  numToSkip  =  Math.max(available  /  numToSkip);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available  /  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available  /  numToSkip);	  numToSkip    =    Math.min(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  numToSkip  =  Math.min(numToSkip,  available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(numToSkip,  available  *  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(numToSkip,  available  *  numToSkip);	  numToSkip    =    Math.min(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip  +  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  *  numToSkip  +  1);	  numToSkip    =    Math.min(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  long  numToSkip  =  Math.min(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  long  numToSkip  =  Math.min(available,  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	long  numToSkip  =  Math.min(available,  numToSkip);	  int    numToSkip    =    Math.min(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
45	[BUG]  [BUGGY]  int  numToSkip  =  Math.min(available,  available);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  int  numToSkip  =  Math.min(available,  available);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	int  numToSkip  =  Math.min(available,  available);	  int    numToSkip    =    Math.min(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
46	[BUG]  [BUGGY]  int  numToSkip  =  Math.min(available,  available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  int  numToSkip  =  Math.min(available,  available  *  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	int  numToSkip  =  Math.min(available,  available  *  numToSkip);	  int    numToSkip    =    Math.min(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
47	[BUG]  [BUGGY]  int  numToSkip  =  Math.min(available,  available  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  int  numToSkip  =  Math.min(available,  available  +  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	int  numToSkip  =  Math.min(available,  available  +  1);	  int    numToSkip    =    Math.min(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
48	[BUG]  [BUGGY]  int  numToSkip  =  Math.min(available,  available  +  1,  numToSkip);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  int  numToSkip  =  Math.min(available,  available  +  1,  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	int  numToSkip  =  Math.min(available,  available  +  1,  numToSkip);	  int    numToSkip    =    Math.min(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
49	[BUG]  [BUGGY]  int  numToSkip  =  Math.max(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  int  numToSkip  =  Math.max(available,  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	int  numToSkip  =  Math.max(available,  numToSkip);	  int    numToSkip    =    Math.min(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
50	[BUG]  [BUGGY]  byte  numToSkip  =  Math.min(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  byte  numToSkip  =  Math.min(available,  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	byte  numToSkip  =  Math.min(available,  numToSkip);	  int    numToSkip    =    Math.min(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
51	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  InputStream  is  =  this.currEntry.getInputStream();  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	InputStream  is  =  this.currEntry.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
52	[BUG]  [BUGGY]  InputStream  is  =  getInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  InputStream  is  =  getInputStream();  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	InputStream  is  =  getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
53	[BUG]  [BUGGY]  int  numToSkip  =  available.length;  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  int  numToSkip  =  available.length;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	int  numToSkip  =  available.length;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
54	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getRecordSize();  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  InputStream  is  =  this.currEntry.getRecordSize();  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	InputStream  is  =  this.currEntry.getRecordSize();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
55	[BUG]  [BUGGY]  int  numToSkip  =  available  *(numToSkip);  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  int  numToSkip  =  available  *(numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	int  numToSkip  =  available  *(numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
56	[BUG]  [BUGGY]  int  is  =  getHitEOF();  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  int  is  =  getHitEOF();  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	int  is  =  getHitEOF();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
57	[BUG]  [BUGGY]  byte[]  is  =  currEntry.getValues();  [CE]  illegal  start  of  type  [FE]                                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  byte[]  is  =  currEntry.getValues();  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	byte[]  is  =  currEntry.getValues();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
58	[BUG]  [BUGGY]  numToSkip  =  Math.min(available,  available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available,  available  *  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available,  available  *  numToSkip);	  numToSkip    =    Math.min(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
59	[BUG]  [BUGGY]  numToSkip  =  Math.min(available,  this.numToSkip);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available,  this.numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available,  this.numToSkip);	  numToSkip    =    Math.min(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
60	[BUG]  [BUGGY]  numToSkip  =  Math.sin(available,  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.sin(available,  numToSkip  +  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.sin(available,  numToSkip  +  1);	  numToSkip    =    Math.sin(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
61	[BUG]  [BUGGY]  numToSkip  =  Math.sin(available,  numToSkip  +  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.sin(available,  numToSkip  +  2);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.sin(available,  numToSkip  +  2);	  numToSkip    =    Math.sin(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  numToSkip  =  Math.sin(available,  numToSkip  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.sin(available,  numToSkip  -  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.sin(available,  numToSkip  -  1);	  numToSkip    =    Math.sin(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
63	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  +  1,  this.available);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  +  1,  this.available);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  +  1,  this.available);	  numToSkip    =    Math.min(available    +    1,    available);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
64	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  +  1,  entrySize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  +  1,  entrySize);	  numToSkip    =    Math.min(available    +    1,    available);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
65	[BUG]  [BUGGY]  numToSkip  =  Math.min(available,  numToSkip  +  2);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available,  numToSkip  +  2);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available,  numToSkip  +  2);	  numToSkip    =    Math.min(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
66	[BUG]  [BUGGY]  numToSkip  =  Math.min(available,  numToSkip  -  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available,  numToSkip  -  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available,  numToSkip  -  1);	  numToSkip    =    Math.min(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
67	[BUG]  [BUGGY]  int  numToSkip  =  Math.min(available,  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  int  numToSkip  =  Math.min(available,  numToSkip  +  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	int  numToSkip  =  Math.min(available,  numToSkip  +  1);	  int    numToSkip    =    Math.min(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
68	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  +  1,  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  +  1,  numToSkip  +  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  +  1,  numToSkip  +  1);	  numToSkip    =    Math.min(available    +    1,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
69	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  /  2,  numToSkip);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  /  2,  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  /  2,  numToSkip);	  numToSkip    =    Math.min(available    +    1,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
70	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  +  1,  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  +  1,  numToSkip,  available);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  +  1,  numToSkip,  available);	  numToSkip    =    Math.min(available    +    1,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
71	[BUG]  [BUGGY]  numToSkip  =  Math.max(available,  numToSkip  -  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available,  numToSkip  -  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available,  numToSkip  -  1);	  numToSkip    =    Math.max(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
72	[BUG]  [BUGGY]  numToSkip  =  Math.max(available,  numToSkip  +  2);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available,  numToSkip  +  2);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available,  numToSkip  +  2);	  numToSkip    =    Math.max(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
73	[BUG]  [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  *  numOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  *  numOffset);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available  *  numToSkip,  available  *  numOffset);	  numToSkip    =    Math.max(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
74	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  -  numToSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  -  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  -  numToSkip);	  numToSkip    =    Math.min(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
75	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  numOffset);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  numOffset);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  *  numToSkip,  available  *  numOffset);	  numToSkip    =    Math.min(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
76	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  -  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  -  numToSkip,  available);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  -  numToSkip,  available);	  numToSkip    =    Math.min(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
77	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  InputStream  is  =  currEntry.getInputStream();  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	InputStream  is  =  currEntry.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
78	[BUG]  [BUGGY]  InputStream  is  =  encoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  InputStream  is  =  encoding.getInputStream();  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	InputStream  is  =  encoding.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
79	[BUG]  [BUGGY]  int  is  =  currEntry.getSize();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  int  is  =  currEntry.getSize();  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	int  is  =  currEntry.getSize();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
80	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getRecordSize();  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  InputStream  is  =  currEntry.getRecordSize();  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	InputStream  is  =  currEntry.getRecordSize();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
81	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  -  1,  numToSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  -  1,  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  -  1,  numToSkip);	  numToSkip    =    Math.min(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
82	[BUG]  [BUGGY]  numToSkip  =  Math.min(available,  numToSkip  -  available);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available,  numToSkip  -  available);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available,  numToSkip  -  available);	  numToSkip    =    Math.min(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
83	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  SMALL_BUFFER_SIZE);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  *  numToSkip,  available  *  SMALL_BUFFER_SIZE);	  numToSkip    =    Math.min(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
84	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  *  numToSkip,  available  *  numToSkip);	  numToSkip    =    Math.min(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
85	[BUG]  [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  *  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available  *  numToSkip,  available  *  numToSkip);	  numToSkip    =    Math.max(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
86	[BUG]  [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  *  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  *  SMALL_BUFFER_SIZE);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available  *  numToSkip,  available  *  SMALL_BUFFER_SIZE);	  numToSkip    =    Math.max(available    *    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
87	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
88	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToSkip);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	long  skipped  =  IOUtils.skip(available  +  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
89	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  long  skipped  =  IOUtils.skip(available);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	long  skipped  =  IOUtils.skip(available);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
90	[BUG]  [BUGGY]  int  hasHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  int  hasHitEOF  =  hasHitEOF;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	int  hasHitEOF  =  hasHitEOF;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
91	[BUG]  [BUGGY]  int  numToSkip  =  Math.min(available,  numToSkip  -  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  int  numToSkip  =  Math.min(available,  numToSkip  -  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	int  numToSkip  =  Math.min(available,  numToSkip  -  1);	  int    numToSkip    =    Math.min(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
92	[BUG]  [BUGGY]  numToSkip  =  Math.max(available,  numToSkip  -  available);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.max(available,  numToSkip  -  available);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.max(available,  numToSkip  -  available);	  numToSkip    =    Math.max(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
93	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  10,  available);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  *  10,  available);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  *  10,  available);	  numToSkip    =    Math.min(available    +    1,    available);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
94	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  10,  numToSkip);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;    [BUGGY]  numToSkip  =  Math.min(available  *  10,  numToSkip);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	197	197	1	replace	numToSkip  =  Math.min(available  *  10,  numToSkip);	  numToSkip    =    Math.min(available    +    1,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
