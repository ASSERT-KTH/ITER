bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)-  numRecords;  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)-  numRecords;  [BUGGY]  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.recordSize)-  numRecords;	long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  	non-compiled	[CE]  illegal  start  of  type	31	None	replace
2	[BUG]  [BUGGY]  long  padding  =  (this.entrySize  *  this.recordSize)-  numRecords;  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  [BUGGY]  long  padding  =  (this.entrySize  *  this.recordSize)-  numRecords;  [BUGGY]  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.entrySize  *  this.recordSize)-  numRecords;	long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  	non-compiled	[CE]  illegal  start  of  type	31	None	replace
3	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  numRecords)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  [BUGGY]  long  padding  =  (this.recordSize  *  numRecords)-  this.entrySize;  [BUGGY]  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  numRecords)-  this.entrySize;	long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  	non-compiled	[CE]  illegal  start  of  type	31	None	replace
4	[BUG]  [BUGGY]  long  padding  =  (numRecords  *  this.recordSize)/  this.entrySize;  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  [BUGGY]  long  padding  =  (numRecords  *  this.recordSize)/  this.entrySize;  [BUGGY]  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (numRecords  *  this.recordSize)/  this.entrySize;	long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  	non-compiled	[CE]  illegal  start  of  type	31	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  [BUGGY]    [BUGGY]  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	  	long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  	non-compiled	[CE]  illegal  start  of  type	31	None	replace
6	[BUG]  [BUGGY]  long  padding  =  (numRecords  /  this.recordSize)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  [BUGGY]  long  padding  =  (numRecords  /  this.recordSize)-  this.entrySize;  [BUGGY]  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (numRecords  /  this.recordSize)-  this.entrySize;	long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  	non-compiled	[CE]  illegal  start  of  type	31	None	replace
