bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  numRecords)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  int  padding  =  (this.recordSize  *  numRecords)-  this.entrySize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  numRecords)-  this.entrySize;	  long    padding    =    (this.recordSize    *    numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)/  this.entrySize;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)/  this.entrySize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.recordSize)/  this.entrySize;	  long    padding    =    (this.recordSize    *    numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  long  padding  =  (this.entrySize  *  numRecords)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.entrySize  *  numRecords)-  this.recordSize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.entrySize  *  numRecords)-  this.recordSize;	  long    padding    =    (this.recordSize    *    numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
4	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.blockSize)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.recordSize  *  this.blockSize)-  this.entrySize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.blockSize)-  this.entrySize;	  long    padding    =    (this.recordSize    *    numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
5	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)-  numRecords;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)-  numRecords;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  /  this.recordSize)-  numRecords;	  long    padding    =    (numRecords    /    this.recordSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  long  padding  =  (this.entrySize  /  this.recordSize)-  numRecords;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.entrySize  /  this.recordSize)-  numRecords;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.entrySize  /  this.recordSize)-  numRecords;	  long    padding    =    (numRecords    /    this.recordSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  /  this.numRecords)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.recordSize  /  this.numRecords)-  this.entrySize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  /  this.numRecords)-  this.entrySize;	  long    padding    =    (numRecords    /    this.recordSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  /  this.entrySize)-  numRecords;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.recordSize  /  this.entrySize)-  numRecords;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  /  this.entrySize)-  numRecords;	  long    padding    =    (numRecords    /    this.recordSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)-  blockSize;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)-  blockSize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  /  this.recordSize)-  blockSize;	  long    padding    =    (numRecords    /    this.recordSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  long  padding  =  (numRecords  *  this.recordSize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (numRecords  *  this.recordSize)-  this.recordSize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (numRecords  *  this.recordSize)-  this.recordSize;	  long    padding    =    (this.recordSize    *    this.recordSize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
11	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)/  numRecords;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)/  numRecords;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.recordSize)/  numRecords;	  long    padding    =    (this.recordSize    *    this.recordSize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
12	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  this.recordSize)-  numRecords;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  int  padding  =  (this.recordSize  *  this.recordSize)-  numRecords;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  this.recordSize)-  numRecords;	  long    padding    =    (this.recordSize    *    this.recordSize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
13	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)-  numRecords;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)-  numRecords;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.entrySize)-  numRecords;	  long    padding    =    (this.recordSize    *    this.recordSize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(numRecords,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  IOUtils.skip(numRecords,  this.entryOffset);  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(numRecords,  this.entryOffset);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.entryOffset,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  IOUtils.skip(this.entryOffset,  this.recordSize);  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.entryOffset,  this.recordSize);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  InputStream  is  =  getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  InputStream  is  =  getInputStream();  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  i);  }  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  i);  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(numRecords,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  IOUtils.skip(numRecords,  this.recordSize);  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(numRecords,  this.recordSize);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  long  padding  =  (this.entrySize  *  this.recordSize)/  numRecords;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.entrySize  *  this.recordSize)/  numRecords;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.entrySize  *  this.recordSize)/  numRecords;	  long    padding    =    (this.entrySize    *    this.recordSize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
22	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)/  numRecords;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)/  numRecords;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.entrySize)/  numRecords;	  long    padding    =    (this.entrySize    *    this.recordSize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
23	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  numRecords)/  this.entrySize;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.recordSize  *  numRecords)/  this.entrySize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  numRecords)/  this.entrySize;	  long    padding    =    (numRecords    *    this.recordSize)/    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
24	[BUG]  [BUGGY]  long  padding  =  (this.entrySize  *  numRecords)/  this.recordSize;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.entrySize  *  numRecords)/  this.recordSize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.entrySize  *  numRecords)/  this.recordSize;	  long    padding    =    (numRecords    *    this.recordSize)/    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  this.recordSize)/  this.entrySize;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  int  padding  =  (this.recordSize  *  this.recordSize)/  this.entrySize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  this.recordSize)/  this.entrySize;	  long    padding    =    (numRecords    *    this.recordSize)/    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  int  padding  =  (numRecords  *  this.recordSize)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  int  padding  =  (numRecords  *  this.recordSize)-  this.entrySize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (numRecords  *  this.recordSize)-  this.entrySize;	  long    padding    =    (this.recordSize    *    numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
27	[BUG]  [BUGGY]  int  padding  =  (numRecords  *  this.recordSize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  int  padding  =  (numRecords  *  this.recordSize)-  this.recordSize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (numRecords  *  this.recordSize)-  this.recordSize;	  long    padding    =    (this.recordSize    *    this.recordSize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
28	[BUG]  [BUGGY]  int  padding  =  (numRecords  /  this.recordSize)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  int  padding  =  (numRecords  /  this.recordSize)-  this.entrySize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (numRecords  /  this.recordSize)-  this.entrySize;	  long    padding    =    (numRecords    /    this.recordSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
29	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)/  this.blockSize;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)/  this.blockSize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.recordSize)/  this.blockSize;	  long    padding    =    (numRecords    *    this.recordSize)/    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  long  padding  =  (this.length  *  this.recordSize)/  this.recordSize;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.length  *  this.recordSize)/  this.recordSize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.length  *  this.recordSize)/  this.recordSize;	  long    padding    =    (numRecords    *    this.recordSize)/    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  long  padding  =  (numRecords  *  this.recordSize)/  this.blockSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (numRecords  *  this.recordSize)/  this.blockSize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (numRecords  *  this.recordSize)/  this.blockSize;	  long    padding    =    (numRecords    *    this.recordSize)/    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
33	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
34	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
36	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
37	[BUG]  [BUGGY]  InputStream  is  =  getRecordInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  InputStream  is  =  getRecordInputStream();  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  getRecordInputStream();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
38	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  this.entrySize)-  numRecords;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  int  padding  =  (this.recordSize  *  this.entrySize)-  numRecords;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  this.entrySize)-  numRecords;	  long    padding    =    (this.entrySize    *    this.recordSize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
39	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)-  this.entrySize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  /  this.recordSize)-  this.entrySize;	  long    padding    =    (numRecords    /    this.recordSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
40	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)-  this.blockSize;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)-  this.blockSize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  /  this.recordSize)-  this.blockSize;	  long    padding    =    (numRecords    /    this.recordSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
41	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(numRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  IOUtils.skip(numRecords);  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(numRecords);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.recordSize,  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  IOUtils.skip(this.recordSize,  numRecords);  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.recordSize,  numRecords);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
45	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
46	[BUG]  [BUGGY]  long  padding  =  (this.entrySize  *  this.recordSize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.entrySize  *  this.recordSize)-  this.recordSize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.entrySize  *  this.recordSize)-  this.recordSize;	  long    padding    =    (this.recordSize    *    numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
47	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;    [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)-  this.recordSize;  [BUGGY]    long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.entrySize)-  this.recordSize;	  long    padding    =    (this.recordSize    *    numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
