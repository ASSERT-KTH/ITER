projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords*this.recordSize)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.recordSize)-numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.entrySize*this.recordSize)-numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*numRecords)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords*this.recordSize)/this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords/this.recordSize)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*numRecords)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.recordSize)/this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.entrySize*numRecords)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.blockSize)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize/this.recordSize)-numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.entrySize/this.recordSize)-numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize/this.numRecords)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize/this.entrySize)-numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize/this.recordSize)-blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords*this.recordSize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.recordSize)/numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*this.recordSize)-numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.entrySize)-numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(numRecords,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.entryOffset,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=getInputStream();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(numRecords,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.entrySize*this.recordSize)/numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.entrySize)/numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*numRecords)/this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.entrySize*numRecords)/this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*this.recordSize)/this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(numRecords*this.recordSize)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(numRecords*this.recordSize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(numRecords/this.recordSize)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.recordSize)/this.blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.length*this.recordSize)/this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords*this.recordSize)/this.blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){return;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=getRecordInputStream();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*this.entrySize)-numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize/this.recordSize)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize/this.recordSize)-this.blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.recordSize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.entrySize*this.recordSize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.entrySize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=getInputStream(numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=this.getInputStream();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=getInputStream().readLine();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=getInputStream(),numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=getOutputStream();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.blockSize*this.recordSize)-numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.blockSize*this.recordSize)/this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords*this.blockSize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.blockSize*this.recordSize)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.blockSize*this.recordSize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*this.recordSize)/numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*this.blockSize)/this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*this.recordSize)/this.blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(numRecords*this.recordSize)/this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(numRecords*this.recordSize)/this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.entrySize*this.recordSize)/numRecords+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.entrySize*this.recordSize)/this.blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.blockSize)/this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.entrySize)/this.blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.blockSize*this.recordSize)/numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*numRecords)/this.blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.blockSize*numRecords)/this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.recordSize)/blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.entrySize*numRecords)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.entrySize*this.recordSize)-numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.entrySize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.entrySize,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.entryOffset,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=IOUtils.skip(numRecords,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.recordSize,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*this.entrySize)/numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.entrySize*this.recordSize)/numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(numRecords*this.recordSize)-this.blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303for(inti=0;i<numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.recordSize;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.entrySize;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.length;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.entrySize,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intnumRecords=numRecords>0?skipRecordPadding(i):numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords!=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords==0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.entrySize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.recordSize)-this.blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize/this.recordSize)/this.blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize/this.recordSize)-this.blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.blockSize/this.recordSize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=getRecordInputStream(numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=this.getRecordInputStream();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=getRecordInputStream(),numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=this.currEntry.getRecordInputStream();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=getRecordInputStream().readLine();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=getRecordInputStream(),numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.length)/this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords!=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords==0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.entrySize;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.skipRecordPadding!=
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.skipRecordPadding==
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.skipRecordPa
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.skipRecordPadding!=
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.skipRecordPadding==
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.skipRecordPa
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.skipRecordPadding>=
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords/this.entrySize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize/this.entrySize)-numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.entrySize/this.recordSize)-1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords*this.entrySize)/this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.entrySize)/this.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords*this.entrySize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.entrySize*this.recordSize)/this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=IOUtils.skip(numRecords,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(numRecords,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords*this.recordSize)/this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.recordSize)/numRecords+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.recordSize)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize/this.recordSize)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize/this.recordSize)/this.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.blockSize)/this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.entrySize/this.recordSize)/numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.entrySize)/numRecords+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.recordSize;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.recordSize;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>=0){if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.entrySize;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>=0){if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.recordSize)-blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize/this.recordSize)/numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize/this.recordSize)-blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize/this.recordSize)/blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize/this.recordSize)/2;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.numRecords/this.recordSize)-this.blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.numRecords/this.recordSize)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.numRecords/this.recordSize)-this.entryOffset;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.numRecords/this.recordSize)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.numRecords/this.recordSize)-this.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.numRecords*this.recordSize)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords/this.recordSize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize/this.recordSize)-numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize/this.recordSize)-1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*this.recordSize)-numRecords+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303for(inti=0;i<numRecords;++i){skipRecordPadding(i,i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.recordSize;++i){skipRecordPadding(i,i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.entrySize;++i){skipRecordPadding(i,i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303for(inti=0;i<this.recordSize;++i){skipRecordPadding(i,i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303for(inti=0;i<this.entrySize;++i){skipRecordPadding(i,i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303for(inti=0;i<numRecords;++i){skipRecordPadding(i,this.entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords!=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords==0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.entrySize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303for(inti=0;i<numRecords;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.recordSize;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.entrySize;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.length;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<length;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=IOUtils.skip(this.entryOffset,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.entryOffset,this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.entrySize)/this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*this.entrySize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=IOUtils.skip(numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.length)/this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.length*this.recordSize)/this.blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.length*this.recordSize)/this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*this.length)/this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.length*this.recordSize)/numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.recordSize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecord
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecord
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*this.blockSize)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*numRecords)/this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*this.recordSize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.length)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.blockSize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*numRecords)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.numRecords)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.entrySize/this.recordSize)-numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize/numRecords)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*numRecords)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*this.records)-numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.recordSize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){return;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){return;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){return;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){return;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.entrySize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){return;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<this.recordSize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){return;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.recordSize;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecord
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=IOUtils.skip(this.recordSize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.recordSize,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords!=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords==0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){return
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){return
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.blockSize)/numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.entrySize)/blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.numRecords*this.recordSize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords/this.numRecords)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.numRecords/this.recordSize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.numRecords/this.recordSize)-1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>=0){for(inti=0;i<numRecords;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords.length;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<is.length;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.recordSize)/this.blockSize+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.recordSize;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.skipRecordPa
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.skipRecordPadding}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.recordSize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=getRecordInputStream().getChars(numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(numRecords*this.entrySize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(recordSize,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>=0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.recordSize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*this.recordSize)/blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(numRecords*this.entrySize)/this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize/numRecords)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords/this.recordSize)-this.blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(records);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=IOUtils.skip(this.recordSize,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.records,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.entrySize,this.recordOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords*this.recordSize)/this.blockSize+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize/this.blockSize)-numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>=0){for(inti=0;i<numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<is.length;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<length;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.recordSize,numRecords+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.recordSize,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.recordSize,this.blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=getInputStream(),numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*this.recordRecords)-numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(recordSize,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords*this.recordSize)/this.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(!hasHitEOF){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=nu
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=IOUtils.skip(this.recordSize,this.numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=IOUtils.skip(this.recordSize,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*this.recordSize)-1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.length)/numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=getInputStream(),this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=getInputStream(),this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==nu
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null||
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize/this.blockSize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize/this.recordSize)/this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize*this.length)/this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPa
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.entrySize*this.recordSize)-this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){skipped=IOUtils.skip(is,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords+1;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.entrySize)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.skipRecordPadding!=illegalstart
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.skipRecordPadding==illegalstart
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.skipRecordPadding>=illegalstart
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.skipRecordPadding>>illegalstart
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPa
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords/this.numRecords)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize*this.entrySize)-this.blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize/this.recordSize)/this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords*this.blockSize)/this.recordSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(numRecords*this.recordSize)/this.blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords*this.recordSize)-this.blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(numRecords*this.blockSize)-this.entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){continue;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords<0){for(inti=0;i<numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longnumRecords=IOUtils.skip(this.entrySize,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303InputStreamis=getRecordInputStream(),this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303longpadding=(this.recordSize/this.entrySize)/numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<this.length;++i){skipRecordPadding(i,i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303if(numRecords>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,i+1);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=IOUtils.skip(this.entryOffset,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=IOUtils.skip(this.entrySize,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java303intpadding=(this.recordSize/this.recordSize)-1;
