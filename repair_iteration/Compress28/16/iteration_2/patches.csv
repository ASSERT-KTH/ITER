bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  InputStream  is  =  getInputStream(numRecords);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  InputStream  is  =  getInputStream(numRecords);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  getInputStream(numRecords);	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
2	[BUG]  [BUGGY]  InputStream  is  =  this.getInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  InputStream  is  =  this.getInputStream();  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  this.getInputStream();	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
3	[BUG]  [BUGGY]  InputStream  is  =  getInputStream().readLine();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  InputStream  is  =  getInputStream().readLine();  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  getInputStream().readLine();	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
4	[BUG]  [BUGGY]  InputStream  is  =  getInputStream(),  numRecords);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  InputStream  is  =  getInputStream(),  numRecords);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  getInputStream(),  numRecords);	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
5	[BUG]  [BUGGY]  InputStream  is  =  getOutputStream();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  InputStream  is  =  getOutputStream();  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  getOutputStream();	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
6	[BUG]  [BUGGY]  long  padding  =  (this.blockSize  *  this.recordSize)-  numRecords;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.blockSize  *  this.recordSize)-  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.blockSize  *  this.recordSize)-  numRecords;	  long    padding    =    (this.recordSize    *    this.blockSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  long  padding  =  (this.blockSize  *  this.recordSize)/  this.recordSize;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.blockSize  *  this.recordSize)/  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.blockSize  *  this.recordSize)/  this.recordSize;	  long    padding    =    (this.recordSize    *    this.blockSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
8	[BUG]  [BUGGY]  long  padding  =  (numRecords  *  this.blockSize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (numRecords  *  this.blockSize)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (numRecords  *  this.blockSize)-  this.recordSize;	  long    padding    =    (this.recordSize    *    this.blockSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
9	[BUG]  [BUGGY]  int  padding  =  (this.blockSize  *  this.recordSize)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.blockSize  *  this.recordSize)-  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.blockSize  *  this.recordSize)-  this.entrySize;	  long    padding    =    (this.recordSize    *    this.blockSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  int  padding  =  (this.blockSize  *  this.recordSize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.blockSize  *  this.recordSize)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.blockSize  *  this.recordSize)-  this.recordSize;	  long    padding    =    (this.recordSize    *    this.blockSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  this.recordSize)/  numRecords;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  *  this.recordSize)/  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  this.recordSize)/  numRecords;	  int    padding    =    (this.recordSize    *    this.recordSize)/    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
12	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  this.blockSize)/  this.recordSize;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  *  this.blockSize)/  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  this.blockSize)/  this.recordSize;	  int    padding    =    (this.recordSize    *    this.recordSize)/    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
13	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  this.recordSize)/  this.blockSize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  *  this.recordSize)/  this.blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  this.recordSize)/  this.blockSize;	  int    padding    =    (this.recordSize    *    this.recordSize)/    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
14	[BUG]  [BUGGY]  int  padding  =  (numRecords  *  this.recordSize)/  this.recordSize;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (numRecords  *  this.recordSize)/  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (numRecords  *  this.recordSize)/  this.recordSize;	  int    padding    =    (this.recordSize    *    this.recordSize)/    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
15	[BUG]  [BUGGY]  int  padding  =  (numRecords  *  this.recordSize)/  this.entrySize;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (numRecords  *  this.recordSize)/  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (numRecords  *  this.recordSize)/  this.entrySize;	  int    padding    =    (this.recordSize    *    this.recordSize)/    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
16	[BUG]  [BUGGY]  long  padding  =  (this.entrySize  *  this.recordSize)/  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.entrySize  *  this.recordSize)/  numRecords  +  1;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.entrySize  *  this.recordSize)/  numRecords  +  1;	  long    padding    =    (this.entrySize    *    this.recordSize)/    numRecords;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
17	[BUG]  [BUGGY]  long  padding  =  (this.entrySize  *  this.recordSize)/  this.blockSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.entrySize  *  this.recordSize)/  this.blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.entrySize  *  this.recordSize)/  this.blockSize;	  long    padding    =    (this.entrySize    *    this.recordSize)/    numRecords;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
18	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.blockSize)/  this.recordSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.blockSize)/  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.blockSize)/  this.recordSize;	  long    padding    =    (this.recordSize    *    this.recordSize)/    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
19	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)/  this.blockSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)/  this.blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.entrySize)/  this.blockSize;	  long    padding    =    (this.recordSize    *    this.recordSize)/    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
20	[BUG]  [BUGGY]  long  padding  =  (this.blockSize  *  this.recordSize)/  numRecords;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.blockSize  *  this.recordSize)/  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.blockSize  *  this.recordSize)/  numRecords;	  long    padding    =    (numRecords    *    this.recordSize)/    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
21	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  numRecords)/  this.blockSize;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  numRecords)/  this.blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  numRecords)/  this.blockSize;	  long    padding    =    (numRecords    *    this.recordSize)/    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
22	[BUG]  [BUGGY]  long  padding  =  (this.blockSize  *  numRecords)/  this.recordSize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.blockSize  *  numRecords)/  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.blockSize  *  numRecords)/  this.recordSize;	  long    padding    =    (numRecords    *    this.recordSize)/    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
23	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)/  blockSize;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)/  blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.recordSize)/  blockSize;	  long    padding    =    (numRecords    *    this.recordSize)/    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
24	[BUG]  [BUGGY]  int  padding  =  (this.entrySize  *  numRecords)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.entrySize  *  numRecords)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.entrySize  *  numRecords)-  this.recordSize;	  int    padding    =    (numRecords    *    this.recordSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
25	[BUG]  [BUGGY]  int  padding  =  (this.entrySize  *  this.recordSize)-  numRecords;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.entrySize  *  this.recordSize)-  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.entrySize  *  this.recordSize)-  numRecords;	  int    padding    =    (numRecords    *    this.recordSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
26	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.entrySize,  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(this.entrySize,  numRecords);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.entrySize,  numRecords);	  long    padding    =    IOUtils.skip(numRecords,    this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
27	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.entrySize,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(this.entrySize,  this.entryOffset);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.entrySize,  this.entryOffset);	  long    padding    =    IOUtils.skip(numRecords,    this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
28	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.entryOffset,  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(this.entryOffset,  numRecords);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.entryOffset,  numRecords);	  long    padding    =    IOUtils.skip(numRecords,    this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
29	[BUG]  [BUGGY]  int  padding  =  IOUtils.skip(numRecords,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  IOUtils.skip(numRecords,  this.entryOffset);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  IOUtils.skip(numRecords,  this.entryOffset);	  long    padding    =    IOUtils.skip(numRecords,    this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
30	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.recordSize,  this.entryOffset);	  long    padding    =    IOUtils.skip(numRecords,    this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
31	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  this.entrySize)/  numRecords;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  *  this.entrySize)/  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  this.entrySize)/  numRecords;	  int    padding    =    (this.recordSize    *    this.entrySize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
32	[BUG]  [BUGGY]  int  padding  =  (this.entrySize  *  this.recordSize)/  numRecords;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.entrySize  *  this.recordSize)/  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.entrySize  *  this.recordSize)/  numRecords;	  int    padding    =    (this.recordSize    *    this.entrySize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
33	[BUG]  [BUGGY]  int  padding  =  (numRecords  *  this.recordSize)-  this.blockSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (numRecords  *  this.recordSize)-  this.blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (numRecords  *  this.recordSize)-  this.blockSize;	  int    padding    =    (this.recordSize    *    this.entrySize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
35	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
36	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding(i);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
37	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.length;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.length;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.length;  ++i)  {  skipRecordPadding(i);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
38	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.entrySize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(this.entrySize,  this.recordSize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.entrySize,  this.recordSize);	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
39	[BUG]  [BUGGY]  int  numRecords  =  numRecords  >  0?  skipRecordPadding(i):  numRecords;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  numRecords  =  numRecords  >  0?  skipRecordPadding(i):  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  numRecords  =  numRecords  >  0?  skipRecordPadding(i):  numRecords;	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
40	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
41	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
42	[BUG]  [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
43	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
45	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
46	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)-  this.blockSize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)-  this.blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.recordSize)-  this.blockSize;	  long    padding    =    (this.recordSize    /    this.recordSize)-    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
47	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)/  this.blockSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)/  this.blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  /  this.recordSize)/  this.blockSize;	  long    padding    =    (this.recordSize    /    this.recordSize)-    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
48	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  /  this.recordSize)-  this.blockSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  /  this.recordSize)-  this.blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  /  this.recordSize)-  this.blockSize;	  long    padding    =    (this.recordSize    /    this.recordSize)-    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
49	[BUG]  [BUGGY]  long  padding  =  (this.blockSize  /  this.recordSize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.blockSize  /  this.recordSize)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.blockSize  /  this.recordSize)-  this.recordSize;	  long    padding    =    (this.recordSize    /    this.recordSize)-    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
50	[BUG]  [BUGGY]  InputStream  is  =  getRecordInputStream(numRecords);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  InputStream  is  =  getRecordInputStream(numRecords);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  getRecordInputStream(numRecords);	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
51	[BUG]  [BUGGY]  InputStream  is  =  this.getRecordInputStream();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  InputStream  is  =  this.getRecordInputStream();  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  this.getRecordInputStream();	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
52	[BUG]  [BUGGY]  InputStream  is  =  getRecordInputStream(),  numRecords);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  InputStream  is  =  getRecordInputStream(),  numRecords);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  getRecordInputStream(),  numRecords);	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
53	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getRecordInputStream();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  InputStream  is  =  this.currEntry.getRecordInputStream();  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  this.currEntry.getRecordInputStream();	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
54	[BUG]  [BUGGY]  InputStream  is  =  getRecordInputStream().readLine();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  InputStream  is  =  getRecordInputStream().readLine();  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  getRecordInputStream().readLine();	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
55	[BUG]  [BUGGY]  InputStream  is  =  getRecordInputStream(),  numRecords;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  InputStream  is  =  getRecordInputStream(),  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  getRecordInputStream(),  numRecords;	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
56	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.length)/  this.entrySize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.length)/  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.length)/  this.entrySize;	  long    padding    =    (this.recordSize    *    this.recordSize)/    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
57	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
58	[BUG]  [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
59	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
60	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
61	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
63	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding!=  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding!=  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding!=	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
64	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  ==  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  ==  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  ==	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
65	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPa  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPa  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPa	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
66	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding!=  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding!=  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding!=	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
67	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  ==  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  ==  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  ==	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
68	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPa  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPa  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPa	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
69	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  >=  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  >=  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  >=	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
70	[BUG]  [BUGGY]  long  padding  =  (numRecords  /  this.entrySize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (numRecords  /  this.entrySize)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (numRecords  /  this.entrySize)-  this.recordSize;	  long    padding    =    (this.recordSize    /    this.entrySize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
71	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  /  this.entrySize)-  numRecords;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  /  this.entrySize)-  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  /  this.entrySize)-  numRecords;	  long    padding    =    (this.recordSize    /    this.entrySize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
72	[BUG]  [BUGGY]  long  padding  =  (this.entrySize  /  this.recordSize)-  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.entrySize  /  this.recordSize)-  1;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.entrySize  /  this.recordSize)-  1;	  long    padding    =    (this.recordSize    /    this.entrySize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
73	[BUG]  [BUGGY]  long  padding  =  (numRecords  *  this.entrySize)/  this.recordSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (numRecords  *  this.entrySize)/  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (numRecords  *  this.entrySize)/  this.recordSize;	  long    padding    =    (this.entrySize    *    numRecords)/    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
74	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)/  this.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)/  this.length;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.entrySize)/  this.length;	  long    padding    =    (this.entrySize    *    numRecords)/    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
75	[BUG]  [BUGGY]  long  padding  =  (numRecords  *  this.entrySize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (numRecords  *  this.entrySize)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (numRecords  *  this.entrySize)-  this.recordSize;	  long    padding    =    (this.entrySize    *    numRecords)-    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
76	[BUG]  [BUGGY]  long  padding  =  (this.entrySize  *  this.recordSize)/  this.recordSize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.entrySize  *  this.recordSize)/  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.entrySize  *  this.recordSize)/  this.recordSize;	  long    padding    =    (this.entrySize    *    numRecords)-    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
77	[BUG]  [BUGGY]  int  padding  =  IOUtils.skip(numRecords,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  IOUtils.skip(numRecords,  this.recordSize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  IOUtils.skip(numRecords,  this.recordSize);	  long    padding    =    IOUtils.skip(numRecords,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
78	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(numRecords,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(numRecords,  this.entrySize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(numRecords,  this.entrySize);	  long    padding    =    IOUtils.skip(numRecords,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
79	[BUG]  [BUGGY]  long  padding  =  (numRecords  *  this.recordSize)/  this.recordSize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (numRecords  *  this.recordSize)/  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (numRecords  *  this.recordSize)/  this.recordSize;	  long    padding    =    (this.recordSize    *    this.recordSize)/    numRecords;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
80	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)/  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)/  numRecords  +  1;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.recordSize)/  numRecords  +  1;	  long    padding    =    (this.recordSize    *    this.recordSize)/    numRecords;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
81	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)-  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.recordSize)-  this.entrySize;	  long    padding    =    (this.recordSize    /    this.recordSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
82	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  /  this.recordSize)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  /  this.recordSize)-  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  /  this.recordSize)-  this.entrySize;	  long    padding    =    (this.recordSize    /    this.recordSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
83	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)/  this.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)/  this.length;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  /  this.recordSize)/  this.length;	  long    padding    =    (this.recordSize    /    this.recordSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
84	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.blockSize)/  this.entrySize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.blockSize)/  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.blockSize)/  this.entrySize;	  long    padding    =    (this.recordSize    *    numRecords)/    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
85	[BUG]  [BUGGY]  long  padding  =  (this.entrySize  /  this.recordSize)/  numRecords;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.entrySize  /  this.recordSize)/  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.entrySize  /  this.recordSize)/  numRecords;	  long    padding    =    (this.entrySize    /    this.recordSize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
86	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)/  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)/  numRecords  +  1;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.entrySize)/  numRecords  +  1;	  long    padding    =    (this.recordSize    *    this.entrySize)/    numRecords;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
87	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
88	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
89	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
90	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >=  0)  {  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >=  0)  {  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
91	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
92	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >=  0)  {  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >=  0)  {  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
93	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)-  blockSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)-  blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.recordSize)-  blockSize;	  long    padding    =    (this.recordSize    /    this.recordSize)-    blockSize;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
94	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)/  numRecords;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)/  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  /  this.recordSize)/  numRecords;	  long    padding    =    (this.recordSize    /    this.recordSize)-    blockSize;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
95	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  /  this.recordSize)-  blockSize;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  /  this.recordSize)-  blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  /  this.recordSize)-  blockSize;	  long    padding    =    (this.recordSize    /    this.recordSize)-    blockSize;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
96	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)/  blockSize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)/  blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  /  this.recordSize)/  blockSize;	  long    padding    =    (this.recordSize    /    this.recordSize)-    blockSize;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
97	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)/  2;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)/  2;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  /  this.recordSize)/  2;	  long    padding    =    (this.recordSize    /    this.recordSize)-    blockSize;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
98	[BUG]  [BUGGY]  long  padding  =  (this.numRecords  /  this.recordSize)-  this.blockSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.numRecords  /  this.recordSize)-  this.blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.numRecords  /  this.recordSize)-  this.blockSize;	  long    padding    =    (this.recordSize    /    this.numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
99	[BUG]  [BUGGY]  long  padding  =  (this.numRecords  /  this.recordSize)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.numRecords  /  this.recordSize)-  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.numRecords  /  this.recordSize)-  this.entrySize;	  long    padding    =    (this.recordSize    /    this.numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
100	[BUG]  [BUGGY]  long  padding  =  (this.numRecords  /  this.recordSize)-  this.entryOffset;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.numRecords  /  this.recordSize)-  this.entryOffset;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.numRecords  /  this.recordSize)-  this.entryOffset;	  long    padding    =    (this.recordSize    /    this.numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
101	[BUG]  [BUGGY]  int  padding  =  (this.numRecords  /  this.recordSize)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.numRecords  /  this.recordSize)-  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.numRecords  /  this.recordSize)-  this.entrySize;	  long    padding    =    (this.recordSize    /    this.numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
102	[BUG]  [BUGGY]  long  padding  =  (this.numRecords  /  this.recordSize)-  this.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.numRecords  /  this.recordSize)-  this.length;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.numRecords  /  this.recordSize)-  this.length;	  long    padding    =    (this.recordSize    /    this.numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
103	[BUG]  [BUGGY]  long  padding  =  (this.numRecords  *  this.recordSize)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.numRecords  *  this.recordSize)-  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.numRecords  *  this.recordSize)-  this.entrySize;	  long    padding    =    (this.recordSize    /    this.numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
104	[BUG]  [BUGGY]  long  padding  =  (numRecords  /  this.recordSize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (numRecords  /  this.recordSize)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (numRecords  /  this.recordSize)-  this.recordSize;	  long    padding    =    (this.recordSize    /    this.recordSize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
105	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  /  this.recordSize)-  numRecords;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  /  this.recordSize)-  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  /  this.recordSize)-  numRecords;	  long    padding    =    (this.recordSize    /    this.recordSize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
106	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)-  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)-  1;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  /  this.recordSize)-  1;	  long    padding    =    (this.recordSize    /    this.recordSize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
107	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  this.recordSize)-  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  *  this.recordSize)-  numRecords  +  1;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  this.recordSize)-  numRecords  +  1;	  int    padding    =    (this.recordSize    *    this.recordSize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  i);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  i);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
109	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i,  i);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i,  i);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i,  i);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
110	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding(i,  i);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding(i,  i);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding(i,  i);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i,  i);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i,  i);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i,  i);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding(i,  i);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding(i,  i);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding(i,  i);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  this.entrySize);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  this.entrySize);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  this.entrySize);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
114	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
115	[BUG]  [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
116	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
117	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
119	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
121	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding();  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding();  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
122	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding();  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding();  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
123	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.length;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.length;  ++i)  {  skipRecordPadding();  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.length;  ++i)  {  skipRecordPadding();  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
124	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipRecordPadding();  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipRecordPadding();  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
125	[BUG]  [BUGGY]  int  padding  =  IOUtils.skip(this.entryOffset,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  IOUtils.skip(this.entryOffset,  this.recordSize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  IOUtils.skip(this.entryOffset,  this.recordSize);	  long    padding    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
126	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.entryOffset,  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(this.entryOffset,  this.recordSize  +  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.entryOffset,  this.recordSize  +  1);	  long    padding    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
127	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)/  this.recordSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)/  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.entrySize)/  this.recordSize;	  long    padding    =    (this.entrySize    *    this.recordSize)-    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
128	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  this.entrySize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  *  this.entrySize)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  this.entrySize)-  this.recordSize;	  long    padding    =    (this.entrySize    *    this.recordSize)-    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
129	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(this.entrySize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.entrySize);	  long    padding    =    IOUtils.skip(numRecords);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
130	[BUG]  [BUGGY]  int  padding  =  IOUtils.skip(numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  IOUtils.skip(numRecords);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  IOUtils.skip(numRecords);	  long    padding    =    IOUtils.skip(numRecords);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
131	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(this.entryOffset);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.entryOffset);	  long    padding    =    IOUtils.skip(numRecords);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
132	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.length)/  this.recordSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.length)/  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.length)/  this.recordSize;	  long    padding    =    (this.length    *    this.recordSize)/    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
133	[BUG]  [BUGGY]  long  padding  =  (this.length  *  this.recordSize)/  this.blockSize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.length  *  this.recordSize)/  this.blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.length  *  this.recordSize)/  this.blockSize;	  long    padding    =    (this.length    *    this.recordSize)/    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
134	[BUG]  [BUGGY]  int  padding  =  (this.length  *  this.recordSize)/  this.recordSize;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.length  *  this.recordSize)/  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.length  *  this.recordSize)/  this.recordSize;	  long    padding    =    (this.length    *    this.recordSize)/    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
135	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  this.length)/  this.recordSize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  *  this.length)/  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  this.length)/  this.recordSize;	  long    padding    =    (this.length    *    this.recordSize)/    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
136	[BUG]  [BUGGY]  long  padding  =  (this.length  *  this.recordSize)/  numRecords;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.length  *  this.recordSize)/  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.length  *  this.recordSize)/  numRecords;	  long    padding    =    (this.length    *    this.recordSize)/    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
137	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
138	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
139	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
140	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
141	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
142	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
143	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
144	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  this.blockSize)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  *  this.blockSize)-  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  this.blockSize)-  this.entrySize;	  int    padding    =    (this.recordSize    *    numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
145	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  numRecords)/  this.entrySize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  *  numRecords)/  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  numRecords)/  this.entrySize;	  int    padding    =    (this.recordSize    *    numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
146	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  this.recordSize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  *  this.recordSize)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  this.recordSize)-  this.recordSize;	  long    padding    =    (this.recordSize    *    this.entrySize)-    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
147	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.length)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.length)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.length)-  this.recordSize;	  long    padding    =    (this.recordSize    *    this.entrySize)-    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
148	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.blockSize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.blockSize)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.blockSize)-  this.recordSize;	  long    padding    =    (this.recordSize    *    this.entrySize)-    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
149	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  numRecords)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  numRecords)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  numRecords)-  this.recordSize;	  long    padding    =    (numRecords    *    this.recordSize)-    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
150	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.numRecords)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.numRecords)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.numRecords)-  this.recordSize;	  long    padding    =    (numRecords    *    this.recordSize)-    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
151	[BUG]  [BUGGY]  int  padding  =  (this.entrySize  /  this.recordSize)-  numRecords;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.entrySize  /  this.recordSize)-  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.entrySize  /  this.recordSize)-  numRecords;	  int    padding    =    (numRecords    /    this.recordSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
152	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  /  numRecords)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  /  numRecords)-  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  /  numRecords)-  this.entrySize;	  int    padding    =    (numRecords    /    this.recordSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
153	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  numRecords)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  *  numRecords)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  numRecords)-  this.recordSize;	  int    padding    =    (numRecords    *    this.recordSize)-    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
154	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  this.records)-  numRecords;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  *  this.records)-  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  this.records)-  numRecords;	  int    padding    =    (numRecords    *    this.recordSize)-    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
155	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
157	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
158	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
159	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
160	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return;  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
161	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
162	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
163	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
164	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
165	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
166	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
167	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
168	[BUG]  [BUGGY]  int  padding  =  IOUtils.skip(this.recordSize,  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  IOUtils.skip(this.recordSize,  numRecords);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  IOUtils.skip(this.recordSize,  numRecords);	  long    padding    =    IOUtils.skip(this.recordSize,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
169	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.recordSize,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(this.recordSize,  this.entrySize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.recordSize,  this.entrySize);	  long    padding    =    IOUtils.skip(this.recordSize,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
170	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
171	[BUG]  [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
172	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
173	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
174	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
175	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
176	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
177	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.blockSize)/  numRecords;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.blockSize)/  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.blockSize)/  numRecords;	  long    padding    =    (this.entrySize    *    this.recordSize)/    numRecords;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
178	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)/  blockSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)/  blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.entrySize)/  blockSize;	  long    padding    =    (this.entrySize    *    this.recordSize)/    numRecords;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
179	[BUG]  [BUGGY]  long  padding  =  (this.numRecords  *  this.recordSize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.numRecords  *  this.recordSize)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.numRecords  *  this.recordSize)-  this.recordSize;	  long    padding    =    (this.recordSize    /    this.numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
180	[BUG]  [BUGGY]  long  padding  =(numRecords  /  this.numRecords)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =(numRecords  /  this.numRecords)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =(numRecords  /  this.numRecords)-  this.recordSize;	  long    padding    =    (this.recordSize    /    this.numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
181	[BUG]  [BUGGY]  int  padding  =  (this.numRecords  /  this.recordSize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.numRecords  /  this.recordSize)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.numRecords  /  this.recordSize)-  this.recordSize;	  long    padding    =    (this.recordSize    /    this.numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
182	[BUG]  [BUGGY]  long  padding  =  (this.numRecords  /  this.recordSize)-  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.numRecords  /  this.recordSize)-  1;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.numRecords  /  this.recordSize)-  1;	  long    padding    =    (this.recordSize    /    this.numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
183	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
184	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
185	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords.length;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords.length;  ++i)  {  skipRecordPadding();  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords.length;  ++i)  {  skipRecordPadding();  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
186	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  is.length;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  is.length;  ++i)  {  skipRecordPadding();  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  is.length;  ++i)  {  skipRecordPadding();  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
187	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)/  this.blockSize  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.recordSize)/  this.blockSize  +  1;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.recordSize)/  this.blockSize  +  1;	  long    padding    =    (this.recordSize    *    this.recordSize)/    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
188	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
189	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
190	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPa  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPa  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPa	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
191	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
192	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
193	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
194	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
195	[BUG]  [BUGGY]  InputStream  is  =  getRecordInputStream().getChars(numRecords);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  InputStream  is  =  getRecordInputStream().getChars(numRecords);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  getRecordInputStream().getChars(numRecords);	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
196	[BUG]  [BUGGY]  int  padding  =  (numRecords  *  this.entrySize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (numRecords  *  this.entrySize)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (numRecords  *  this.entrySize)-  this.recordSize;	  long    padding    =    (this.entrySize    *    numRecords)-    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
197	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(recordSize,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(recordSize,  this.entryOffset);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(recordSize,  this.entryOffset);	  long    padding    =    IOUtils.skip(numRecords,    this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
198	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  i);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  i);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
199	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  i);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  i);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  i);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
200	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
201	[BUG]  [BUGGY]  int  padding  =(this.recordSize  *  this.recordSize)/  blockSize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =(this.recordSize  *  this.recordSize)/  blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =(this.recordSize  *  this.recordSize)/  blockSize;	  int    padding    =    (this.recordSize    *    this.recordSize)/    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
202	[BUG]  [BUGGY]  int  padding  =  (numRecords  *  this.entrySize)/  this.recordSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (numRecords  *  this.entrySize)/  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (numRecords  *  this.entrySize)/  this.recordSize;	  long    padding    =    (this.entrySize    *    numRecords)/    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
203	[BUG]  [BUGGY]  int  padding  =(this.recordSize  /  numRecords)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =(this.recordSize  /  numRecords)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =(this.recordSize  /  numRecords)-  this.recordSize;	  int    padding    =    (numRecords    /    this.recordSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
204	[BUG]  [BUGGY]  long  padding  =  (numRecords  /  this.recordSize)-  this.blockSize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (numRecords  /  this.recordSize)-  this.blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (numRecords  /  this.recordSize)-  this.blockSize;	  long    padding    =    (this.recordSize    /    this.recordSize)-    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
205	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(this.recordSize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.recordSize);	  long    padding    =    IOUtils.skip(numRecords);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
206	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(records);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(records);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(records);	  long    padding    =    IOUtils.skip(numRecords);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
207	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(recordSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(recordSize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(recordSize);	  long    padding    =    IOUtils.skip(numRecords);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
208	[BUG]  [BUGGY]  int  padding  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  IOUtils.skip(this.recordSize,  this.entryOffset);	  long    padding    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
209	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.records,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(this.records,  this.entryOffset);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.records,  this.entryOffset);	  long    padding    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
210	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.entrySize,  this.recordOffset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(this.entrySize,  this.recordOffset);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.entrySize,  this.recordOffset);	  long    padding    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
211	[BUG]  [BUGGY]  long  padding  =  (numRecords  *  this.recordSize)/  this.blockSize  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (numRecords  *  this.recordSize)/  this.blockSize  +  1;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (numRecords  *  this.recordSize)/  this.blockSize  +  1;	  long    padding    =    (numRecords    *    this.recordSize)/    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
212	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  /  this.blockSize)-  numRecords;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  /  this.blockSize)-  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  /  this.blockSize)-  numRecords;	  long    padding    =    (this.entrySize    /    this.recordSize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
213	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
214	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  is.length;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  is.length;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  is.length;  ++i)  {  skipRecordPadding(i);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
215	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipRecordPadding(i);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
216	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.recordSize,  numRecords  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(this.recordSize,  numRecords  +  1);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.recordSize,  numRecords  +  1);	  long    padding    =    IOUtils.skip(this.recordSize,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
217	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.recordSize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(this.recordSize,  this.recordSize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.recordSize,  this.recordSize);	  long    padding    =    IOUtils.skip(this.recordSize,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
218	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.recordSize,  this.blockSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(this.recordSize,  this.blockSize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.recordSize,  this.blockSize);	  long    padding    =    IOUtils.skip(this.recordSize,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
219	[BUG]  [BUGGY]  InputStream  is  =  getInputStream(),  numRecords;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  InputStream  is  =  getInputStream(),  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  getInputStream(),  numRecords;	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
220	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
221	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
222	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
223	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
224	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
225	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  this.recordRecords)-  numRecords;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  *  this.recordRecords)-  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  this.recordRecords)-  numRecords;	  int    padding    =    (numRecords    *    this.recordSize)-    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
226	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(recordSize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(recordSize,  this.recordSize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(recordSize,  this.recordSize);	  long    padding    =    IOUtils.skip(numRecords,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
227	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
228	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
229	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
230	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
231	[BUG]  [BUGGY]  long  padding  =  (numRecords  *  this.recordSize)/  this.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (numRecords  *  this.recordSize)/  this.length;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (numRecords  *  this.recordSize)/  this.length;	  long    padding    =    (this.length    *    this.recordSize)/    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
232	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
233	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
234	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  nu  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  nu  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  nu	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
235	[BUG]  [BUGGY]  long  padding  =  IOUtils.skip(this.recordSize,  this.numRecords);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  IOUtils.skip(this.recordSize,  this.numRecords);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  IOUtils.skip(this.recordSize,  this.numRecords);	  long    padding    =    IOUtils.skip(numRecords,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
236	[BUG]  [BUGGY]  int  padding  =  IOUtils.skip(this.recordSize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  IOUtils.skip(this.recordSize,  this.recordSize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  IOUtils.skip(this.recordSize,  this.recordSize);	  long    padding    =    IOUtils.skip(numRecords,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
237	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  this.recordSize)-  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  *  this.recordSize)-  1;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  this.recordSize)-  1;	  int    padding    =    (numRecords    *    this.recordSize)-    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
238	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.length)/  numRecords;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.length)/  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.length)/  numRecords;	  long    padding    =    (this.entrySize    *    this.recordSize)/    numRecords;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
239	[BUG]  [BUGGY]  InputStream  is  =  getInputStream(),  this.entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  InputStream  is  =  getInputStream(),  this.entrySize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  getInputStream(),  this.entrySize);	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
240	[BUG]  [BUGGY]  InputStream  is  =  getInputStream(),  this.recordSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  InputStream  is  =  getInputStream(),  this.recordSize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  getInputStream(),  this.recordSize);	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
241	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
242	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
243	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  nu  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  nu  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  nu	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
244	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null  ||  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null  ||  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null  ||	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
245	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  /  this.blockSize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  /  this.blockSize)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  /  this.blockSize)-  this.recordSize;	  long    padding    =    (this.recordSize    /    this.recordSize)-    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
246	[BUG]  [BUGGY]  int  padding  =(this.recordSize  /  this.recordSize)/  this.entrySize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =(this.recordSize  /  this.recordSize)/  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =(this.recordSize  /  this.recordSize)/  this.entrySize;	  int    padding    =    (this.recordSize    *    this.recordSize)/    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
247	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  *  this.length)/  this.entrySize;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  *  this.length)/  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  *  this.length)/  this.entrySize;	  int    padding    =    (this.recordSize    *    this.recordSize)/    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
248	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPa  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPa  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPa	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
249	[BUG]  [BUGGY]  int  padding  =(this.entrySize  *  this.recordSize)-  this.recordSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =(this.entrySize  *  this.recordSize)-  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =(this.entrySize  *  this.recordSize)-  this.recordSize;	  int    padding    =    (this.recordSize    *    numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
250	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipped  =  IOUtils.skip(is,  padding);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipped  =  IOUtils.skip(is,  padding);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipped  =  IOUtils.skip(is,  padding);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
251	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords  +  1;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords  +  1;  ++i)  {  skipRecordPadding();  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords  +  1;  ++i)  {  skipRecordPadding();  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
252	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)-  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.entrySize)-  this.entrySize;	  long    padding    =    (this.entrySize    *    numRecords)-    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
253	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding!=  illegal  start  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding!=  illegal  start  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding!=  illegal  start	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
254	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  ==  illegal  start  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  ==  illegal  start  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  ==  illegal  start	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
255	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  >=  illegal  start  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  >=  illegal  start  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  >=  illegal  start	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
256	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  >>  illegal  start  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  >>  illegal  start  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.skipRecordPadding  >>  illegal  start	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
257	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPa  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPa  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPa	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
258	[BUG]  [BUGGY]  long  padding  =  (numRecords  /  this.numRecords)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (numRecords  /  this.numRecords)-  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (numRecords  /  this.numRecords)-  this.entrySize;	  long    padding    =    (this.recordSize    /    this.numRecords)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
259	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)-  this.blockSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  *  this.entrySize)-  this.blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  *  this.entrySize)-  this.blockSize;	  long    padding    =    (this.entrySize    *    this.recordSize)-    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
260	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)/  this.entrySize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  /  this.recordSize)/  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  /  this.recordSize)/  this.entrySize;	  long    padding    =    (this.recordSize    *    this.recordSize)/    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
261	[BUG]  [BUGGY]  long  padding  =  (numRecords  *  this.blockSize)/  this.recordSize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (numRecords  *  this.blockSize)/  this.recordSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (numRecords  *  this.blockSize)/  this.recordSize;	  long    padding    =    (numRecords    *    this.recordSize)/    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
262	[BUG]  [BUGGY]  int  padding  =  (numRecords  *  this.recordSize)/  this.blockSize;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (numRecords  *  this.recordSize)/  this.blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (numRecords  *  this.recordSize)/  this.blockSize;	  long    padding    =    (numRecords    *    this.recordSize)/    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
263	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
264	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
265	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
266	[BUG]  [BUGGY]  long  padding  =  (numRecords  *  this.recordSize)-  this.blockSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (numRecords  *  this.recordSize)-  this.blockSize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (numRecords  *  this.recordSize)-  this.blockSize;	  long    padding    =    (this.recordSize    *    this.entrySize)-    numRecords;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
267	[BUG]  [BUGGY]  long  padding  =  (numRecords  *  this.blockSize)-  this.entrySize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (numRecords  *  this.blockSize)-  this.entrySize;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (numRecords  *  this.blockSize)-  this.entrySize;	  long    padding    =    (this.recordSize    *    this.blockSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
268	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  continue;  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  continue;  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
269	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
270	[BUG]  [BUGGY]  long  numRecords  =  IOUtils.skip(this.entrySize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  numRecords  =  IOUtils.skip(this.entrySize,  this.recordSize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  numRecords  =  IOUtils.skip(this.entrySize,  this.recordSize);	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
271	[BUG]  [BUGGY]  InputStream  is  =  getRecordInputStream(),  this.entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  InputStream  is  =  getRecordInputStream(),  this.entrySize);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	InputStream  is  =  getRecordInputStream(),  this.entrySize);	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
272	[BUG]  [BUGGY]  long  padding  =  (this.recordSize  /  this.entrySize)/  numRecords;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  long  padding  =  (this.recordSize  /  this.entrySize)/  numRecords;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	long  padding  =  (this.recordSize  /  this.entrySize)/  numRecords;	  long    padding    =    (this.recordSize    *    this.entrySize)/    numRecords;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
273	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.length;  ++i)  {  skipRecordPadding(i,  i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.length;  ++i)  {  skipRecordPadding(i,  i);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.length;  ++i)  {  skipRecordPadding(i,  i);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
274	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  i  +  1);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  i  +  1);  }  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  i  +  1);  }	  if(numRecords    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
275	[BUG]  [BUGGY]  int  padding  =  IOUtils.skip(this.entryOffset,  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  IOUtils.skip(this.entryOffset,  numRecords);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  IOUtils.skip(this.entryOffset,  numRecords);	  long    padding    =    IOUtils.skip(numRecords,    this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
276	[BUG]  [BUGGY]  int  padding  =  IOUtils.skip(this.entrySize,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  IOUtils.skip(this.entrySize,  this.entryOffset);  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  IOUtils.skip(this.entrySize,  this.entryOffset);	  long    padding    =    IOUtils.skip(numRecords,    this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
277	[BUG]  [BUGGY]  int  padding  =  (this.recordSize  /  this.recordSize)-  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;      [BUGGY]  int  padding  =  (this.recordSize  /  this.recordSize)-  1;  [BUGGY]      long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	303	303	1	replace	int  padding  =  (this.recordSize  /  this.recordSize)-  1;	  int    padding    =    (numRecords    /    this.recordSize)-    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
