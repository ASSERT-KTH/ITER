bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(entrySize  <  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  <  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  <  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
2	[BUG]  [BUGGY]  if(numToRead  <  0)  {  count(entryOffset);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  <  0)  {  count(entryOffset);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  <  0)  {  count(entryOffset);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
3	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(entryOffset  <  0)  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  <  0)  {  if(entryOffset  <  0)  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  <  0)  {  if(entryOffset  <  0)  {  entryOffset  +=  numToRead;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
4	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  <  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  <  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
5	[BUG]  [BUGGY]  if(numToRead  <  0)  {  entryOffset  +=  numToRead;  }  else  {  totalRead  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  <  0)  {  entryOffset  +=  numToRead;  }  else  {  totalRead  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  <  0)  {  entryOffset  +=  numToRead;  }  else  {  totalRead  =  is.read(buf,  offset,  numToRead);  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
6	[BUG]  [BUGGY]  if(numToRead  <  0)  {  entryOffset  =  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  <  0)  {  entryOffset  =  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  <  0)  {  entryOffset  =  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
7	[BUG]  [BUGGY]  if(numToRead  <  0)  {  count(entryOffset);  }  else  {  totalRead  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  <  0)  {  count(entryOffset);  }  else  {  totalRead  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  <  0)  {  count(entryOffset);  }  else  {  totalRead  +=  numToRead;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
8	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  ==  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  ==  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  ==  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  ==  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  ==  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  ==  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  ==  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  ==  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  >=  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  >=  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  if(numToRead  <  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  <  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  <  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset!=  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset!=  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset!=    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  if(numToRead!=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead!=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead!=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset!=    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  >=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  >=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  >=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  >=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  hasHitEOF  =  true;  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	hasHitEOF  =  true;	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  count(entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  >=  0)  {  count(entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  >=  0)  {  count(entryOffset);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
21	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
22	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	ch  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
23	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  InputStream  is  =  currEntry.getInputStream();  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	InputStream  is  =  currEntry.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  ==  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  ==  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  if(entryOffset  ==  numToRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  ==  numToRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  ==  numToRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  ==  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  ==  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  ==  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  ==  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  false;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
29	[BUG]  [BUGGY]  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  hasHitEOF  =  false;  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	hasHitEOF  =  false;	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  ==  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  ==  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  false;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  ==  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  ==  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  count(entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  ==  0)  {  count(entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  ==  0)  {  count(entryOffset);  }  else  {  hasHitEOF  =  false;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
33	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  >=  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  >=  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
34	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(entryOffset  >=  0)  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  <  0)  {  if(entryOffset  >=  0)  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  <  0)  {  if(entryOffset  >=  0)  {  entryOffset  +=  numToRead;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
35	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  >=  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  >=  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
36	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(entryOffset  >=  0)  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  >=  0)  {  if(entryOffset  >=  0)  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  >=  0)  {  if(entryOffset  >=  0)  {  entryOffset  +=  numToRead;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
37	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  entryOffset  =  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  >=  0)  {  entryOffset  =  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  >=  0)  {  entryOffset  =  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
38	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(entryOffset  >=  0)  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  ==  0)  {  if(entryOffset  >=  0)  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  ==  0)  {  if(entryOffset  >=  0)  {  entryOffset  +=  numToRead;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
39	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  entryOffset  +=  numToRead;  }  else  {  totalRead  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  >=  0)  {  entryOffset  +=  numToRead;  }  else  {  totalRead  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  >=  0)  {  entryOffset  +=  numToRead;  }  else  {  totalRead  =  is.read(buf,  offset,  numToRead);  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
40	[BUG]  [BUGGY]  count(numToRead,  entryLength);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(numToRead,  entryLength);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(numToRead,  entryLength);	  count(entryLength);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
41	[BUG]  [BUGGY]  count(numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(numToRead,  entrySize);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(numToRead,  entrySize);	  count(entryLength);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
42	[BUG]  [BUGGY]  count(currEntry.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(currEntry.length);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(currEntry.length);	  count(entryLength);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
43	[BUG]  [BUGGY]  count(numToRead,  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(numToRead,  numRecords);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(numToRead,  numRecords);	  count(entryLength);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
44	[BUG]  [BUGGY]  count(numToRead  +  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(numToRead  +  entryOffset);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(numToRead  +  entryOffset);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
45	[BUG]  [BUGGY]  count(entryOffset  +  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entryOffset  +  numToRead,  totalRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entryOffset  +  numToRead,  totalRead);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
46	[BUG]  [BUGGY]  count(entryOffset  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entryOffset  +  numToRead,  hasHitEOF);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entryOffset  +  numToRead,  hasHitEOF);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
47	[BUG]  [BUGGY]  count(offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(offset  +  numToRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(offset  +  numToRead);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
48	[BUG]  [BUGGY]  count(entryOffset  +  numToRead,  offset);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entryOffset  +  numToRead,  offset);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entryOffset  +  numToRead,  offset);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
49	[BUG]  [BUGGY]  count(entryOffset  +  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entryOffset  +  numToRead,  length);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entryOffset  +  numToRead,  length);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
50	[BUG]  [BUGGY]  count(buf,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(buf,  entryOffset  +  numToRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(buf,  entryOffset  +  numToRead);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
51	[BUG]  [BUGGY]  if(numToRead  ==  entryOffset)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  ==  entryOffset)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  ==  entryOffset)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    numToRead)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
52	[BUG]  [BUGGY]  if(numToRead  ==  entryOffset)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  ==  entryOffset)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  ==  entryOffset)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    numToRead)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
53	[BUG]  [BUGGY]  if(numToRead  ==  totalRead)  {  count(entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  ==  totalRead)  {  count(entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  ==  totalRead)  {  count(entryOffset);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    numToRead)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
54	[BUG]  [BUGGY]  if(numToRead  >=  entryOffset)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  >=  entryOffset)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  >=  entryOffset)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    numToRead)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  if(numToRead!=  entryOffset)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead!=  entryOffset)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead!=  entryOffset)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    numToRead)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  count(numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(numToRead,  entryOffset);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(numToRead,  entryOffset);	  count(entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
57	[BUG]  [BUGGY]  count(entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entryOffset,  numToRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entryOffset,  numToRead);	  count(entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
58	[BUG]  [BUGGY]  count(currEntry,  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(currEntry,  entryOffset,  totalRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(currEntry,  entryOffset,  totalRead);	  count(entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
59	[BUG]  [BUGGY]  count(numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(numToRead,  totalRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(numToRead,  totalRead);	  count(entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
60	[BUG]  [BUGGY]  count(currEntry.length,  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(currEntry.length,  entryOffset,  totalRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(currEntry.length,  entryOffset,  totalRead);	  count(entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
61	[BUG]  [BUGGY]  count(currEntry,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(currEntry,  entryOffset,  numToRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(currEntry,  entryOffset,  numToRead);	  count(entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
62	[BUG]  [BUGGY]  count(entrySize,  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entrySize,  totalRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entrySize,  totalRead);	  count(entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
63	[BUG]  [BUGGY]  count(entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entrySize,  numToRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entrySize,  numToRead);	  count(entrySize);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
64	[BUG]  [BUGGY]  count(entrySize,  numRecords);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entrySize,  numRecords);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entrySize,  numRecords);	  count(entrySize);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
65	[BUG]  [BUGGY]  count(entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entryOffset,  entrySize);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entryOffset,  entrySize);	  count(entrySize);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
66	[BUG]  [BUGGY]  count(currEntry.length,  entryOffset);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(currEntry.length,  entryOffset);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(currEntry.length,  entryOffset);	  count(entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
67	[BUG]  [BUGGY]  int  numToRead  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  int  numToRead  =  is.read(buf,  offset,  numToRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	int  numToRead  =  is.read(buf,  offset,  numToRead);	  count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
68	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(entryOffset  ==  0)  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  <  0)  {  if(entryOffset  ==  0)  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  <  0)  {  if(entryOffset  ==  0)  {  entryOffset  +=  numToRead;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
69	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  ==  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  ==  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
70	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  entryOffset  =  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  ==  0)  {  entryOffset  =  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  ==  0)  {  entryOffset  =  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
71	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  ==  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  ==  0)  {  count(numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
72	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  ==  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  ==  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
73	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(entryOffset  ==  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  <  0)  {  if(entryOffset  ==  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  <  0)  {  if(entryOffset  ==  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
74	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(entryOffset  ==  0)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  <  0)  {  if(entryOffset  ==  0)  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  <  0)  {  if(entryOffset  ==  0)  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
75	[BUG]  [BUGGY]  count(entryOffset  +  totalRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entryOffset  +  totalRead,  hasHitEOF);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entryOffset  +  totalRead,  hasHitEOF);	  count(entryOffset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
76	[BUG]  [BUGGY]  count(entryOffset,  entrySize  +  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entryOffset,  entrySize  +  numToRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entryOffset,  entrySize  +  numToRead);	  count(entryOffset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
77	[BUG]  [BUGGY]  count(entryOffset  +  totalRead,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entryOffset  +  totalRead,  numToRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entryOffset  +  totalRead,  numToRead);	  count(entryOffset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
78	[BUG]  [BUGGY]  count(entryOffset,  entrySize  +  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entryOffset,  entrySize  +  totalRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entryOffset,  entrySize  +  totalRead);	  count(entryOffset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
79	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  <  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  <  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
80	[BUG]  [BUGGY]  if(numToRead  <  0)  {  count(entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  <  0)  {  count(entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  <  0)  {  count(entryOffset);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
81	[BUG]  [BUGGY]  if(numToRead  <  0)  {  count(entrySize);  }  else  {  totalRead  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  <  0)  {  count(entrySize);  }  else  {  totalRead  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  <  0)  {  count(entrySize);  }  else  {  totalRead  +=  numToRead;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
82	[BUG]  [BUGGY]  if(entrySize  <  0)  {  count(numToRead);  }  else  {  totalRead  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  <  0)  {  count(numToRead);  }  else  {  totalRead  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  <  0)  {  count(numToRead);  }  else  {  totalRead  +=  numToRead;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
83	[BUG]  [BUGGY]  if(entrySize  <  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  <  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  <  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
84	[BUG]  [BUGGY]  if(numToRead  <  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  <  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  <  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
85	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  count(currEntry.length);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  ==  0)  {  count(currEntry.length);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  ==  0)  {  count(currEntry.length);  }  else  {  hasHitEOF  =  false;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
86	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  count(currEntry.getValue());  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  ==  0)  {  count(currEntry.getValue());  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  ==  0)  {  count(currEntry.getValue());  }  else  {  hasHitEOF  =  false;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
87	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  count(int);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  ==  0)  {  count(int);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  ==  0)  {  count(int);  }  else  {  hasHitEOF  =  false;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
88	[BUG]  [BUGGY]  if(entryOffset  ==  -1)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  ==  -1)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  ==  -1)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
89	[BUG]  [BUGGY]  numToRead  =  count(entrySize);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  numToRead  =  count(entrySize);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	numToRead  =  count(entrySize);	  count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
90	[BUG]  [BUGGY]  count(numToRead  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(numToRead  +  1);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(numToRead  +  1);	  count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
91	[BUG]  [BUGGY]  count(numToRead,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(numToRead,  0);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(numToRead,  0);	  count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
92	[BUG]  [BUGGY]  count(offset);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(offset);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(offset);	  count(entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
93	[BUG]  [BUGGY]  count(offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(offset,  entryOffset);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(offset,  entryOffset);	  count(entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
94	[BUG]  [BUGGY]  count(entryLength  +  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entryLength  +  numToRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entryLength  +  numToRead);	  count(entryLength);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
95	[BUG]  [BUGGY]  count(offset,  entryLength);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(offset,  entryLength);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(offset,  entryLength);	  count(entryLength);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
96	[BUG]  [BUGGY]  if(entryOffset  >  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  >  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  >  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
97	[BUG]  [BUGGY]  InputStream  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  InputStream  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	InputStream  hasHitEOF  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
98	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  if(hasHitEOF)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  >=  0)  {  if(hasHitEOF)  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  >=  0)  {  if(hasHitEOF)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
99	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  int  totalRead  =  is.read(buf,  offset  +  numToRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	int  totalRead  =  is.read(buf,  offset  +  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
100	[BUG]  [BUGGY]  if(numToRead  <  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  <  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  <  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
101	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  count(numToRead);  }  else  {  totalRead  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  ==  0)  {  count(numToRead);  }  else  {  totalRead  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  ==  0)  {  count(numToRead);  }  else  {  totalRead  +=  numToRead;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
102	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  count(entrySize);  }  else  {  totalRead  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  ==  0)  {  count(entrySize);  }  else  {  totalRead  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  ==  0)  {  count(entrySize);  }  else  {  totalRead  +=  numToRead;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
103	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  ==  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  ==  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
104	[BUG]  [BUGGY]  if(entrySize  <  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  <  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  <  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
105	[BUG]  [BUGGY]  if(entrySize  <  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  <  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  <  0)  {  count(numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
106	[BUG]  [BUGGY]  count(offset,  totalRead);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(offset,  totalRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(offset,  totalRead);	  count(entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
107	[BUG]  [BUGGY]  count(currEntry,  totalRead);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(currEntry,  totalRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(currEntry,  totalRead);	  count(entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
108	[BUG]  [BUGGY]  count(currEntry.length,  totalRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(currEntry.length,  totalRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(currEntry.length,  totalRead);	  count(entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
109	[BUG]  [BUGGY]  count(entrySize  +  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entrySize  +  numToRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entrySize  +  numToRead);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
110	[BUG]  [BUGGY]  count(entryOffset  +  numToRead,  is.read);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entryOffset  +  numToRead,  is.read);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entryOffset  +  numToRead,  is.read);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
111	[BUG]  [BUGGY]  count(entryOffset  +  numToRead,  currEntry.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entryOffset  +  numToRead,  currEntry.length);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entryOffset  +  numToRead,  currEntry.length);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
112	[BUG]  [BUGGY]  count(entrySize,  0);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entrySize,  0);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entrySize,  0);	  count(entrySize);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
113	[BUG]  [BUGGY]  count(entrySize  +  numRecords);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entrySize  +  numRecords);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entrySize  +  numRecords);	  count(entrySize);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
114	[BUG]  [BUGGY]  count(offset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(offset  +  totalRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(offset  +  totalRead);	  count(entryOffset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
115	[BUG]  [BUGGY]  count(numToRead  +  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(numToRead  +  totalRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(numToRead  +  totalRead);	  count(entryOffset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
116	[BUG]  [BUGGY]  count(entrySize  +  totalRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entrySize  +  totalRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entrySize  +  totalRead);	  count(entryOffset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
117	[BUG]  [BUGGY]  if(entrySize!=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize!=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize!=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset!=    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
118	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  count(outputRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset!=  0)  {  count(outputRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset!=  0)  {  count(outputRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset!=    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
119	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  count(entryOffset);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  >=  0)  {  count(entryOffset);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  >=  0)  {  count(entryOffset);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
120	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  >=  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  >=  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
121	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  count(entryOffset);  }  else  {  totalRead  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  >=  0)  {  count(entryOffset);  }  else  {  totalRead  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  >=  0)  {  count(entryOffset);  }  else  {  totalRead  +=  numToRead;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
122	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  >=  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  >=  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
123	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  count(numToRead);  }  else  {  totalRead  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  >=  0)  {  count(numToRead);  }  else  {  totalRead  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  >=  0)  {  count(numToRead);  }  else  {  totalRead  +=  numToRead;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
124	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  >=  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  >=  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
125	[BUG]  [BUGGY]  if(entrySize  ==  numToRead)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  ==  numToRead)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  ==  numToRead)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    numToRead)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
126	[BUG]  [BUGGY]  if(entryOffset  <  numToRead)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  <  numToRead)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  <  numToRead)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    numToRead)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
127	[BUG]  [BUGGY]  if(numToRead  ==  entryOffset)  {  count(entrySize);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  ==  entryOffset)  {  count(entrySize);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  ==  entryOffset)  {  count(entrySize);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    numToRead)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
128	[BUG]  [BUGGY]  if(numToRead  ==  entryOffset)  {  count(int);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  ==  entryOffset)  {  count(int);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  ==  entryOffset)  {  count(int);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    numToRead)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
129	[BUG]  [BUGGY]  count(entryOffset  +  numToRead,  available);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entryOffset  +  numToRead,  available);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entryOffset  +  numToRead,  available);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
130	[BUG]  [BUGGY]  count(entryOffset  +  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entryOffset  +  numToRead,  0);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entryOffset  +  numToRead,  0);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
131	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  count(int,  totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  <  0)  {  count(int,  totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  <  0)  {  count(int,  totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
132	[BUG]  [BUGGY]  count(numToRead  -  1,  totalRead);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(numToRead  -  1,  totalRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(numToRead  -  1,  totalRead);	  count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
133	[BUG]  [BUGGY]  if(entrySize  <  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  <  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  <  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
134	[BUG]  [BUGGY]  if(entrySize  <  0)  {  count(entry);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  <  0)  {  count(entry);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  <  0)  {  count(entry);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
135	[BUG]  [BUGGY]  if(numToRead  <  0)  {  count(entry);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(numToRead  <  0)  {  count(entry);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(numToRead  <  0)  {  count(entry);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    <    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
136	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  <  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  <  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  false;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
137	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset!=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset!=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  false;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
138	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  count(int,  totalRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  ==  0)  {  count(int,  totalRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  ==  0)  {  count(int,  totalRead);  }  else  {  hasHitEOF  =  false;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
139	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  >=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  >=  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  false;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
140	[BUG]  [BUGGY]  if(entrySize  >  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  >  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  >  0)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
141	[BUG]  [BUGGY]  count(entrySize,  -1);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entrySize,  -1);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entrySize,  -1);	  count(entrySize);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
142	[BUG]  [BUGGY]  count(currEntry.getValue());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(currEntry.getValue());  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(currEntry.getValue());	  count(entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
143	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  if(totalRead  ==  -1)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  >=  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  if(totalRead  ==  -1)  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  >=  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  if(totalRead  ==  -1)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
144	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  >=  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  >=  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
145	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  if(totalRead!=  -1)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  >=  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  if(totalRead!=  -1)  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  >=  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  if(totalRead!=  -1)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
146	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  if(!hasHitEOF)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  >=  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  if(!hasHitEOF)  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  >=  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  if(!hasHitEOF)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
147	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  >=  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  >=  0)  {  int  totalRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  }  else  {  entryOffset  +=  numToRead;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
148	[BUG]  [BUGGY]  if(entryOffset  >  numToRead)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset  >  numToRead)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset  >  numToRead)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    numToRead)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
149	[BUG]  [BUGGY]  if(entryOffset!=  numToRead)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entryOffset!=  numToRead)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entryOffset!=  numToRead)  {  count(totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    numToRead)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
150	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  ==  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  ==  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
151	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  ==  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  ==  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
152	[BUG]  [BUGGY]  entrySize  +=  numToRead;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  entrySize  +=  numToRead;  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	entrySize  +=  numToRead;	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
153	[BUG]  [BUGGY]  if(entrySize  >  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  >  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  >  0)  {  count(totalRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
154	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  >=  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  >=  0)  {  count(entrySize);  }  else  {  entryOffset  +=  numToRead;  }	  if(entryOffset    >=    0)    {    count(totalRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
155	[BUG]  [BUGGY]  count(entry.length  +  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  count(entry.length  +  totalRead);  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	count(entry.length  +  totalRead);	  count(entryOffset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
156	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  count(int,  totalRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);    [BUGGY]  if(entrySize  ==  0)  {  count(int,  totalRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	583	583	1	replace	if(entrySize  ==  0)  {  count(int,  totalRead);  }  else  {  hasHitEOF  =  true;  }	  if(entryOffset    ==    0)    {    count(totalRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
