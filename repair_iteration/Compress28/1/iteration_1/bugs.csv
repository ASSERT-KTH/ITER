bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  this;  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]  public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  [BUGGY]  return  this;  [BUGGY]  }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  this;	return  null;  	non-compiled	[CE]  incompatible  types	1	None	replace
2	[BUG]  [BUGGY]  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      AssertionError  [CONTEXT]  public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [BUGGY]  }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	add	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");	return  null;  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	1	1	replace
3	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [FE]  java.lang.Exception:  Unexpected  exception  [FE]      AssertionError  [CONTEXT]  public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [BUGGY]  }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");	return  null;  	compilable	  [FE]  java.lang.Exception:  Unexpected  exception  	1	1	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ");  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ");  [BUGGY]  }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ");	return  null;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
5	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextTarEntry();  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  [BUGGY]  return(TarArchiveEntry)getNextTarEntry();  [BUGGY]  }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextTarEntry();	return  null;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ");  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ");  [BUGGY]  }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ");	return  null;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
7	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]              AssertionError  [CONTEXT]  public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( " ");	return  null;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
8	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds. ");  [CE]  illegal  start  of  expression  [FE]                AssertionError  [CONTEXT]  public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds. ");  [BUGGY]  }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds. ");	return  null;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
9	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                  AssertionError  [CONTEXT]  public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  [BUGGY]    [BUGGY]  }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	  	return  null;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
10	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ");  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ");  [BUGGY]  }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ");	return  null;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
11	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");  [BUGGY]  }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");	return  null;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null. ");  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null. ");  [BUGGY]  }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null. ");	return  null;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
13	[BUG]  [BUGGY]  if(!hasHitEOF)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  [BUGGY]  if(!hasHitEOF)  {  return  null;  }  [BUGGY]  }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF)  {  return  null;  }	return  null;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
14	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null. ");  [BUGGY]  }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null. ");	return  null;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
15	[BUG]  [BUGGY]  return(TarArchiveEntry)null;  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  [BUGGY]  return(TarArchiveEntry)null;  [BUGGY]  }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)null;	return  null;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
16	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ");  [BUGGY]  }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ");	return  null;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
