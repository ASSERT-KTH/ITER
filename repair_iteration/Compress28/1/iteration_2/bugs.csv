bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ",  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ",  hasHitEOF);  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ",  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
2	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ");  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  <identifier>  expected	16	None	replace
3	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0 ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0. ");  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
5	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "TarArchiveEntry  is  null.   ");  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   ");  [CE]  illegal  start  of  expression  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException(   "TarArchiveEntry  is  null.   ");  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   ");	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
7	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "TarArchiveEntry  is  null.   ");  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   ");  [CE]  not  a  statement  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException(   "TarArchiveEntry  is  null.   ");  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   ");	  	non-compiled	[CE]  not  a  statement	2	None	add
8	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "TarArchiveEntry  is  null.   ");  new  IllegalArgumentException( "TarArchiveEntry  is  null.   ");  [CE]  illegal  start  of  expression  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException(   "TarArchiveEntry  is  null.   ");  new  IllegalArgumentException( "TarArchiveEntry  is  null.   ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    new  IllegalArgumentException( "TarArchiveEntry  is  null.   ");	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
9	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "TarArchiveEntry  is  null.   ");  IllegalArgumentException( "TarArchiveEntry  is  null.   ");  [CE]  illegal  start  of  expression  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException(   "TarArchiveEntry  is  null.   ");  IllegalArgumentException( "TarArchiveEntry  is  null.   ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    IllegalArgumentException( "TarArchiveEntry  is  null.   ");	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
10	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ");  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	6	None	replace
11	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ");  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	6	None	replace
13	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ".);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ".);  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ".);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	6	None	replace
14	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null. ");  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
15	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
16	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
17	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
18	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  not  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
19	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ");  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
20	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ",  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ",  hasHitEOF);  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ",  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
21	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(). ");  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(). ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(). ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
22	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): ");  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
23	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextEntry();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)getNextEntry();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextEntry();	  return(TarArchiveEntry)getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
24	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextHitEOF();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)getNextHitEOF();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextHitEOF();	  return(TarArchiveEntry)getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
25	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextRecordEntry();  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)getNextRecordEntry();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextRecordEntry();	  return(TarArchiveEntry)getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
26	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextEntry().getValue();  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)getNextEntry().getValue();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextEntry().getValue();	  return(TarArchiveEntry)getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
27	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextFileEntry();  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)getNextFileEntry();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextFileEntry();	  return(TarArchiveEntry)getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
28	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextEscape();  [CE]  not  a  statement  [FE]                        AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)getNextEscape();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextEscape();	  return(TarArchiveEntry)getNextTarEntry();    	non-compiled	[CE]  not  a  statement	5	None	replace
29	[BUG]  [BUGGY]  return(TarArchiveEntry)this.currEntry;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)this.currEntry;  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.currEntry;	  return    this;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
30	[BUG]  [BUGGY]  return(TarArchiveEntry)this;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)this;  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this;	  return    this;    	non-compiled	[CE]  not  a  statement	1	None	replace
31	[BUG]  [BUGGY]  return  getNextTarEntry();  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return  getNextTarEntry();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  getNextTarEntry();	  return    this;    	non-compiled	[CE]  not  a  statement	1	None	replace
32	[BUG]  [BUGGY]  return(TarArchiveEntry)this.nextEntry();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)this.nextEntry();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.nextEntry();	  return    this;    	non-compiled	[CE]  not  a  statement	1	None	replace
33	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds. ");  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
34	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: ");  [CE]  not  a  statement  [FE]                      AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  not  a  statement	8	None	replace
35	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.n ");  [CE]  not  a  statement  [FE]                        AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.n ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.n ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  not  a  statement	8	None	replace
36	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getName());  [CE]  not  a  statement  [FE]                          AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getName());  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  not  a  statement	8	None	replace
37	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
38	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	11	None	replace
39	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  shouldn't  be  null. ");  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  shouldn't  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  shouldn't  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
40	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  not  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
41	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  should  not  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
42	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
43	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(getName()));  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(getName()));  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( " ".equals(getName()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
44	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
45	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ");  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
46	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.n ");  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.n ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.n ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
47	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  +  getName());  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  +  getName());  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
48	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
49	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry();	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
50	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
51	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
53	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
54	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
55	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)currEntry;  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry;	  return(TarArchiveEntry)null;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
56	[BUG]  [BUGGY]  return(TarArchiveEntry)super.getNextTarEntry();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)super.getNextTarEntry();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)super.getNextTarEntry();	  return(TarArchiveEntry)null;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
57	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null. ");  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
58	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null. ");  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
59	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  null. ");  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
60	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
61	[BUG]  [BUGGY]  if(hasHitEOF)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  if(hasHitEOF)  {  return  null;  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF)  {  return  null;  }	  if(!hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
62	[BUG]  [BUGGY]  ||  hasHitEOF)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  ||  hasHitEOF)  {  return  null;  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  hasHitEOF)  {  return  null;  }	  if(!hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
63	[BUG]  [BUGGY]  if(!hasHitEOF)  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  if(!hasHitEOF)  {  return  this;  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF)  {  return  this;  }	  if(!hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
64	[BUG]  [BUGGY]  Annotation  <  T>  currEntry  =  getNextTarEntry();  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Annotation  <  T>  currEntry  =  getNextTarEntry();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Annotation  <  T>  currEntry  =  getNextTarEntry();	  if(!hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
65	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(!hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
66	[BUG]  [BUGGY]  if(hasHitEOF)  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  if(hasHitEOF)  {  return  this;  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF)  {  return  this;  }	  if(!hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
67	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [CE]  <identifier>  expected  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
68	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [CE]  illegal  start  of  expression  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
69	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [CE]  not  a  statement  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  not  a  statement	3	None	replace
70	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null! ");  [CE]  illegal  start  of  expression  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null! ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null! ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
71	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getName());  [CE]  illegal  start  of  expression  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getName());  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
72	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	11	None	replace
73	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds. ");  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  not  a  statement	8	None	replace
74	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds. ");  [CE]  not  a  statement  [FE]                      AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  not  a  statement	8	None	replace
75	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  getHitEOF());  [CE]  not  a  statement  [FE]                        AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  getHitEOF());  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  not  a  statement	8	None	replace
76	[BUG]  [BUGGY]  if(!hasHitEOF)  {  return  TarArchiveEntry.getNextTarEntry();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  if(!hasHitEOF)  {  return  TarArchiveEntry.getNextTarEntry();  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF)  {  return  TarArchiveEntry.getNextTarEntry();  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
77	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(-1);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(-1);  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(-1);  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
78	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
79	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  null;  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  null;  }	  if(!hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
80	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }	  if(!hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
81	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }	  if(!hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
82	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;  }	  if(!hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
83	[BUG]  [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
84	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(getHitEOF()));  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(getHitEOF()));  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( " ".equals(getHitEOF()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  not  a  statement	7	None	replace
85	[BUG]  [BUGGY]  return(TarArchiveEntry)sourceFile.getNextTarEntry();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)sourceFile.getNextTarEntry();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)sourceFile.getNextTarEntry();	  return(TarArchiveEntry)null;    	non-compiled	[CE]  not  a  statement	15	None	replace
86	[BUG]  [BUGGY]  return(TarArchiveEntry)entry;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)entry;  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)entry;	  return(TarArchiveEntry)null;    	non-compiled	[CE]  not  a  statement	15	None	replace
87	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "TarArchiveEntry  is  null.   ");  java.lang.Exception:  throw  new  IllegalArgumentException(   "TarArchiveEntry  is  null.   ");  [CE]  not  a  statement  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException(   "TarArchiveEntry  is  null.   ");  java.lang.Exception:  throw  new  IllegalArgumentException(   "TarArchiveEntry  is  null.   ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    java.lang.Exception:  throw  new  IllegalArgumentException(   "TarArchiveEntry  is  null.   ");	  	non-compiled	[CE]  not  a  statement	2	None	add
88	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry  cannot  be  null. ");  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarEntry  cannot  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	6	None	replace
89	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  getHitEOF());  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  getHitEOF());  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	6	None	replace
90	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  getName());  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  getName());  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	6	None	replace
91	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null. ");  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  not  a  statement	12	None	replace
92	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null. ");  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  not  a  statement	12	None	replace
93	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null. ");  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	14	None	replace
94	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ");  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  not  a  statement	10	None	replace
95	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ");  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  not  a  statement	10	None	replace
96	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.getNextTarEntry();  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)currEntry.getNextTarEntry();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.getNextTarEntry();	  return(TarArchiveEntry)getNextTarEntry();    	non-compiled	[CE]  not  a  statement	5	None	replace
97	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextOriginalTarEntry();  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)getNextOriginalTarEntry();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextOriginalTarEntry();	  return(TarArchiveEntry)getNextTarEntry();    	non-compiled	[CE]  not  a  statement	5	None	replace
98	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextTarEntry().getValue();  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)getNextTarEntry().getValue();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextTarEntry().getValue();	  return(TarArchiveEntry)getNextTarEntry();    	non-compiled	[CE]  not  a  statement	5	None	replace
99	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ");  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  not  a  statement	16	None	replace
100	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1 ");  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1 ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  not  a  statement	16	None	replace
101	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ");  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  not  a  statement	16	None	replace
102	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  access  this  entry. ");  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  access  this  entry. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  access  this  entry. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.   ");    	non-compiled	[CE]  not  a  statement	4	None	replace
103	[BUG]  [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [CE]  illegal  start  of  expression  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
104	[BUG]  [BUGGY]  if(hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [CE]  illegal  start  of  expression  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  if(hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
105	[BUG]  [BUGGY]  _throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [CE]  not  a  statement  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  _throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	_throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  not  a  statement	3	None	replace
106	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry. ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
107	[BUG]  [BUGGY]  return(TarArchiveEntry)in.getValue();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)in.getValue();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)in.getValue();	  return(TarArchiveEntry)null;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
108	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again. ");  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
109	[BUG]  [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null. ");  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	6	None	replace
110	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ");  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	6	None	replace
111	[BUG]  [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  not  a  statement	9	None	replace
112	[BUG]  [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalStateException( "TarArchiveEntry  is  null. ");  }  [CE]  not  a  statement  [FE]                        AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalStateException( "TarArchiveEntry  is  null. ");  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF)  {  throw  new  IllegalStateException( "TarArchiveEntry  is  null. ");  }	      	non-compiled	[CE]  not  a  statement	9	None	replace
113	[BUG]  [BUGGY]  this.currEntry.setHitEOF(hasHitEOF);  [CE]  not  a  statement  [FE]                          AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  this.currEntry.setHitEOF(hasHitEOF);  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	this.currEntry.setHitEOF(hasHitEOF);	      	non-compiled	[CE]  not  a  statement	9	None	replace
114	[BUG]  [BUGGY]  if(!hasHitEOF)  {  throw  new  RuntimeException( " ");  }  [CE]  not  a  statement  [FE]                            AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  if(!hasHitEOF)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF)  {  throw  new  RuntimeException( " ");  }	      	non-compiled	[CE]  not  a  statement	9	None	replace
115	[BUG]  [BUGGY]  return(TarArchiveEntry)encoding.getNext();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)encoding.getNext();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)encoding.getNext();	  return    this;    	non-compiled	[CE]  not  a  statement	1	None	replace
116	[BUG]  [BUGGY]  return  new  TarArchiveEntry(this,  getHitEOF());  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return  new  TarArchiveEntry(this,  getHitEOF());  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry(this,  getHitEOF());	  return    this;    	non-compiled	[CE]  not  a  statement	1	None	replace
117	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Can  not  get  next  entry. ");  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Can  not  get  next  entry. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Can  not  get  next  entry. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.   ");    	non-compiled	[CE]  not  a  statement	4	None	replace
118	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Cannot  access  the  TarArchiveEntry. ");  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Cannot  access  the  TarArchiveEntry. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Cannot  access  the  TarArchiveEntry. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.   ");    	non-compiled	[CE]  not  a  statement	4	None	replace
119	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Cannot  access  the  TarArchive  entry. ");  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Cannot  access  the  TarArchive  entry. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Cannot  access  the  TarArchive  entry. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.   ");    	non-compiled	[CE]  not  a  statement	4	None	replace
120	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again. ");  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  not  a  statement	8	None	replace
121	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  empty. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  empty. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  empty. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
122	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextEscapedTarEntry();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)getNextEscapedTarEntry();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextEscapedTarEntry();	  return(TarArchiveEntry)getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
123	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextBinaryTarEntry();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return(TarArchiveEntry)getNextBinaryTarEntry();  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextBinaryTarEntry();	  return(TarArchiveEntry)getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
124	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF()));  [CE]  illegal  start  of  expression  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF()));  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF()));	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
125	[BUG]  [BUGGY]  return  new  TarArchiveEntry( "TarArchiveEntry  is  null. ");  [CE]  illegal  start  of  expression  [FE]      java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  return  new  TarArchiveEntry( "TarArchiveEntry  is  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry( "TarArchiveEntry  is  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
126	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getName()));  [CE]  illegal  start  of  expression  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getName()));  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getName()));	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
127	[BUG]  [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  return  null;  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  hasHitEOF)  {  return  null;  }	  if(!hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
128	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }	  if(!hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
129	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  must  not  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
130	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  not  be  null. ");  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
131	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "TarArchiveEntry  is  null.   ");  if(!hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   ");  }  [CE]  illegal  start  of  expression  [FE]    java.lang.Exception:  Unexpected  exception    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {    [BUGGY]  throw  new  IllegalArgumentException(   "TarArchiveEntry  is  null.   ");  if(!hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   ");  }  [BUGGY]    }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    if(!hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
