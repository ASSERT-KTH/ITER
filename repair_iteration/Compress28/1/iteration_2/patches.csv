bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextTarEntry().getKey();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextTarEntry().getKey();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextTarEntry().getKey();	  return(TarArchiveEntry)getNextTarEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
2	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextTarEntry().getValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextTarEntry().getValue()  +  1;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextTarEntry().getValue()  +  1;	  return(TarArchiveEntry)getNextTarEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
3	[BUG]  [BUGGY]  return(TarArchiveEntry)this.getNextTarEntry().getValue();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.getNextTarEntry().getValue();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.getNextTarEntry().getValue();	  return(TarArchiveEntry)getNextTarEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
4	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextTarEntry().getName();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextTarEntry().getName();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextTarEntry().getName();	  return(TarArchiveEntry)getNextTarEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
5	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.getValue();  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.getValue();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.getValue();	  return(TarArchiveEntry)getNextTarEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
6	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextTarEntry().clone();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextTarEntry().clone();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextTarEntry().clone();	  return(TarArchiveEntry)getNextTarEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
7	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ",  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ",  hasHitEOF);	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
8	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0 ");	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
9	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist. ");	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
10	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  >  0 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  >  0 ");	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
11	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0. ");	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
12	[BUG]  [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
13	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
14	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
15	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  return  null;  }	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
16	[BUG]  [BUGGY]  Context.checkState(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Context.checkState(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Context.checkState(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    null;    }    	non-compiled	[CE]  ';'  expected	128	None	replace
17	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  getName());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  getName());	  new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
18	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  this);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  this);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  this);	  new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
19	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarEntry  cannot  be  null. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarEntry  cannot  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarEntry  cannot  be  null. ");	  new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
20	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Please  check  that  this  is  a  file  type. ");  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Please  check  that  this  is  a  file  type. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Please  check  that  this  is  a  file  type. ");	  new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
21	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(). ");  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(). ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(). ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry().   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
22	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(). ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(). ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(). ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry().   ");    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
23	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Cannot  access  the  TarArchive  entry.   ");  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Cannot  access  the  TarArchive  entry.   ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Cannot  access  the  TarArchive  entry.   ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.       "    +   "Cannot    access    the    TarArchive    entry.   ");    	non-compiled	[CE]  <identifier>  expected	119	None	replace
24	[BUG]  [BUGGY]  ||  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
25	[BUG]  [BUGGY]  ||  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
26	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
27	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null)  {  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(getNextTarEntry()  ==  null)  {  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(getNextTarEntry()  ==  null)  {  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
28	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
29	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY)||  hasHitEOF)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY)||  hasHitEOF)  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY)||  hasHitEOF)  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
30	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: ");  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  <identifier>  expected	33	None	replace
31	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getName());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getName());	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  <identifier>  expected	33	None	replace
32	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds, ");  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds, ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds, ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  <identifier>  expected	33	None	replace
33	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  this);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  this);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  this);	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  <identifier>  expected	33	None	replace
34	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds! ");  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds! ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  <identifier>  expected	33	None	replace
35	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getClass());  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getClass());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getClass());	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  <identifier>  expected	33	None	replace
36	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  not  be  null. ");  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  not  be  null. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	72	None	replace
37	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  shouldn't  be  null. ");  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  shouldn't  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  shouldn't  be  null. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	72	None	replace
38	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  should  not  be  null. ");  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  should  not  be  null. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	72	None	replace
39	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist. ");  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	72	None	replace
40	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  be  null. ");  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  be  null. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	72	None	replace
41	[BUG]  [BUGGY]  ||  hasHitEOF)  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  hasHitEOF)  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  hasHitEOF)  {  return  this;  }	  ||    hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
42	[BUG]  [BUGGY]  ||  hasHitEOF)  {  return(TarArchiveEntry)null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  hasHitEOF)  {  return(TarArchiveEntry)null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  hasHitEOF)  {  return(TarArchiveEntry)null;  }	  ||    hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
43	[BUG]  [BUGGY]  ||  hasHitEOF)  {  return  getNextTarEntry();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  hasHitEOF)  {  return  getNextTarEntry();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  hasHitEOF)  {  return  getNextTarEntry();  }	  ||    hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
44	[BUG]  [BUGGY]  ||  isEnabled(TarArchiveEntry.class))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  isEnabled(TarArchiveEntry.class))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  isEnabled(TarArchiveEntry.class))  {  return  null;  }	  ||    hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
45	[BUG]  [BUGGY]  ||  hasHitEOF)  {  return(TarArchiveEntry)this;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  hasHitEOF)  {  return(TarArchiveEntry)this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  hasHitEOF)  {  return(TarArchiveEntry)this;  }	  ||    hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
46	[BUG]  [BUGGY]  ||  hasHitEOF)  {  return  new  TarArchiveEntry(getNextTarEntry());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  hasHitEOF)  {  return  new  TarArchiveEntry(getNextTarEntry());  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  hasHitEOF)  {  return  new  TarArchiveEntry(getNextTarEntry());  }	  ||    hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
47	[BUG]  [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  is  null. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( "TarArchiveEntry  is  null. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
48	[BUG]  [BUGGY]  throw  new  IllegalStateException( "TarArchive  entry  is  null. ");  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalStateException( "TarArchive  entry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( "TarArchive  entry  is  null. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
49	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	44	None	replace
50	[BUG]  [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ");  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
51	[BUG]  [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry  entry. ");  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry  entry. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry  entry. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
52	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  shouldn't  be  null. ");  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  shouldn't  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  shouldn't  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    shouldn't    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	39	None	replace
53	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  shouldn't  be  null. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  shouldn't  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  shouldn't  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    shouldn't    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
54	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  shouldn't  be  null. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  shouldn't  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  shouldn't  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    shouldn't    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
55	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  shouldn't  be  null. ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  shouldn't  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  shouldn't  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    shouldn't    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
56	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  shouldn't  be  null. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  shouldn't  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  shouldn't  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    shouldn't    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
57	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: ");  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  not  a  statement	73	None	replace
58	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.n ");  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.n ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.n ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  not  a  statement	73	None	replace
59	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getName());  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getName());	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  not  a  statement	73	None	replace
60	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  empty. ");  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  empty. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  empty. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  not  a  statement	73	None	replace
61	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null. ");  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null. ");	  throw    new    IllegalStateException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	109	None	replace
62	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null. ");  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null. ");	  throw    new    IllegalStateException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	109	None	replace
63	[BUG]  [BUGGY]  new  IllegalStateException( "TarArchiveEntry  cannot  be  null. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalStateException( "TarArchiveEntry  cannot  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalStateException( "TarArchiveEntry  cannot  be  null. ");	  throw    new    IllegalStateException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
64	[BUG]  [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null. ".);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null. ".);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null. ".);	  throw    new    IllegalStateException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	109	None	replace
65	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  not  be  null. ");  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  not  be  null. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	93	None	replace
66	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null. ");  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	93	None	replace
67	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  must  not  be  null. ");  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  must  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  must  not  be  null. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	93	None	replace
68	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  should  not  be  null. ");  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextName()    should    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
69	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  does  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  does  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  does  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextName()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
70	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextName()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextName()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
71	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist. ");  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    does    not    exist.   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
72	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    does    not    exist.   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
73	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: "  +  getName());  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: "  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    does    not    exist.   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
74	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist! ");  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist! ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    does    not    exist.   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
75	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist   ");  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist   ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist   ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    does    not    exist.   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
76	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: "  +  getClass());  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: "  +  getClass());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: "  +  getClass());	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    does    not    exist.   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
77	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentTarEntry();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentTarEntry();	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
78	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextHitEOF();  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextHitEOF();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextHitEOF();	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
79	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextEntry();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextEntry();	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
80	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getTarEntry();  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getTarEntry();	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
81	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextRecordEntry();  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextRecordEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextRecordEntry();	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
82	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ",  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ",  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.    Try    again!   ");    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
83	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ");  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.    Try    again!   ");    	non-compiled	[CE]  <identifier>  expected	110	None	replace
84	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ");  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.    Try    again!   ");    	non-compiled	[CE]  not  a  statement	110	None	replace
85	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextEntry();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextEntry();	  return(TarArchiveEntry)getNextEntry();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
86	[BUG]  [BUGGY]  this.currEntry  =(TarArchiveEntry)getNextEntry();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  this.currEntry  =(TarArchiveEntry)getNextEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	this.currEntry  =(TarArchiveEntry)getNextEntry();	  return(TarArchiveEntry)getNextEntry();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
87	[BUG]  [BUGGY]  return(TarArchiveEntry)getCurrentEntry();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getCurrentEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getCurrentEntry();	  return(TarArchiveEntry)getNextEntry();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
88	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextEOF();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextEOF();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextEOF();	  return(TarArchiveEntry)getNextOriginalTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
89	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextUpperTarEntry();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextUpperTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextUpperTarEntry();	  return(TarArchiveEntry)getNextOriginalTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
90	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextOriginalTarEntry().getValue();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextOriginalTarEntry().getValue();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextOriginalTarEntry().getValue();	  return(TarArchiveEntry)getNextOriginalTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
91	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextOriginalTarEntry().clone();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextOriginalTarEntry().clone();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextOriginalTarEntry().clone();	  return(TarArchiveEntry)getNextOriginalTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
92	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null. ");  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	16	None	replace
93	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
94	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  cannot  be  null. ");  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  cannot  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
95	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null ". ");  [CE]  unclosed  string  literal  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null ". ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null ". ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    cannot    be    null.   ");    	non-compiled	[CE]  unclosed  string  literal	16	None	replace
96	[BUG]  [BUGGY]  Throwables.warning( "TarArchiveEntry.getNextTarEntry()  cannot  be  null. ");  [CE]  not  a  statement  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.warning( "TarArchiveEntry.getNextTarEntry()  cannot  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.warning( "TarArchiveEntry.getNextTarEntry()  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	16	None	replace
97	[BUG]  [BUGGY]  return(TarArchiveEntry)this.currEntry.getNextTarEntry();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.currEntry.getNextTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.currEntry.getNextTarEntry();	  return(TarArchiveEntry)currEntry.getNextTarEntry();    	non-compiled	[CE]  not  a  statement	96	None	replace
98	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.getNext();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.getNext();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.getNext();	  return(TarArchiveEntry)currEntry.getNextTarEntry();    	non-compiled	[CE]  not  a  statement	96	None	replace
99	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.getKey();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.getKey();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.getKey();	  return(TarArchiveEntry)currEntry.getNextTarEntry();    	non-compiled	[CE]  not  a  statement	96	None	replace
100	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.cloneTar();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.cloneTar();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.cloneTar();	  return(TarArchiveEntry)currEntry.getNextTarEntry();    	non-compiled	[CE]  not  a  statement	96	None	replace
101	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.getNextFile();  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.getNextFile();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.getNextFile();	  return(TarArchiveEntry)currEntry.getNextTarEntry();    	non-compiled	[CE]  not  a  statement	96	None	replace
102	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ".equals(getName()));  [CE]  not  a  statement  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ".equals(getName()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ".equals(getName()));	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null   ".equals(getName()));    	non-compiled	[CE]  not  a  statement	126	None	replace
103	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null "  +  getName());  [CE]  not  a  statement  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null "  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null   ".equals(getName()));    	non-compiled	[CE]  not  a  statement	126	None	replace
104	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. "  +  getName());  [CE]  <identifier>  expected  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. "  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null   ".equals(getName()));    	non-compiled	[CE]  <identifier>  expected	126	None	replace
105	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ",  getName());  [CE]  not  a  statement  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ",  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ",  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null   ".equals(getName()));    	non-compiled	[CE]  not  a  statement	126	None	replace
106	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0 ");  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0 ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
107	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ",  hasHitEOF);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ",  hasHitEOF);	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
108	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  >  0 ");  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  >  0 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  >  0 ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
109	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0. ");  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
110	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ",  hasHitEOF);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ",  hasHitEOF);	  new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  not  a  statement	95	None	replace
111	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ");  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ");	  new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  not  a  statement	95	None	replace
112	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): ");  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): ");	  new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  not  a  statement	95	None	replace
113	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): "  +  getName());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): "  +  getName());	  new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  not  a  statement	95	None	replace
114	[BUG]  [BUGGY]  return  getNextEntry();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  getNextEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  getNextEntry();	  return    getNextTarEntry();    	non-compiled	[CE]  not  a  statement	31	None	replace
115	[BUG]  [BUGGY]  return(TarArchiveEntry)this.currEntry.getValue();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.currEntry.getValue();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.currEntry.getValue();	  return    getNextTarEntry();    	non-compiled	[CE]  not  a  statement	31	None	replace
116	[BUG]  [BUGGY]  return  currEntry.getNextTarEntry();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  currEntry.getNextTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  currEntry.getNextTarEntry();	  return    getNextTarEntry();    	non-compiled	[CE]  not  a  statement	31	None	replace
117	[BUG]  [BUGGY]  return  getNextTarEntry().getValue();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  getNextTarEntry().getValue();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  getNextTarEntry().getValue();	  return    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
118	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextOwnerTarEntry();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextOwnerTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextOwnerTarEntry();	  return(TarArchiveEntry)getNextBinaryTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
119	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextOtherTarEntry();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextOtherTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextOtherTarEntry();	  return(TarArchiveEntry)getNextBinaryTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
120	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextOFileEntry();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextOFileEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextOFileEntry();	  return(TarArchiveEntry)getNextFileEntry();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
121	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextRecordSize();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextRecordSize();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextRecordSize();	  return(TarArchiveEntry)getNextFileEntry();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
122	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  getName());  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.       "    +    getHitEOF());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
123	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.n "  +  getHitEOF());  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.n "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.n "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.       "    +    getHitEOF());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
124	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  getHitEOF());  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.       "    +    getHitEOF());    	non-compiled	[CE]  <identifier>  expected	75	None	replace
125	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getHitEOF());  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.       "    +    getHitEOF());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
126	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextEntry().getKey();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextEntry().getKey();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextEntry().getKey();	  return(TarArchiveEntry)getNextEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
127	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextEntry().getValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextEntry().getValue()  +  1;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextEntry().getValue()  +  1;	  return(TarArchiveEntry)getNextEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
128	[BUG]  [BUGGY]  return(TarArchiveEntry)this.getNextEntry().getValue();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.getNextEntry().getValue();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.getNextEntry().getValue();	  return(TarArchiveEntry)getNextEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
129	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextEntry().getValue()  -  1;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextEntry().getValue()  -  1;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextEntry().getValue()  -  1;	  return(TarArchiveEntry)getNextEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
130	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextEntry().getValue()  /  2;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextEntry().getValue()  /  2;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextEntry().getValue()  /  2;	  return(TarArchiveEntry)getNextEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
131	[BUG]  [BUGGY]  return  TarArchiveEntry.getNextTarEntry();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  TarArchiveEntry.getNextTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  TarArchiveEntry.getNextTarEntry();	  if(!hasHitEOF)    {    return    TarArchiveEntry.getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
132	[BUG]  [BUGGY]  ||  hasHitEOF)  {  return  TarArchiveEntry.getNextTarEntry();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  hasHitEOF)  {  return  TarArchiveEntry.getNextTarEntry();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  hasHitEOF)  {  return  TarArchiveEntry.getNextTarEntry();  }	  if(!hasHitEOF)    {    return    TarArchiveEntry.getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
133	[BUG]  [BUGGY]  pendingTarEntry  =  TarArchiveEntry.getNextTarEntry();  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  pendingTarEntry  =  TarArchiveEntry.getNextTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	pendingTarEntry  =  TarArchiveEntry.getNextTarEntry();	  if(!hasHitEOF)    {    return    TarArchiveEntry.getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
134	[BUG]  [BUGGY]  allowSkip(TarArchiveEntry.getNextTarEntry());  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip(TarArchiveEntry.getNextTarEntry());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip(TarArchiveEntry.getNextTarEntry());	  if(!hasHitEOF)    {    return    TarArchiveEntry.getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
135	[BUG]  [BUGGY]  allowSkip(TarArchiveEntry.class)  {  if(hasHitEOF)  {  return  TarArchiveEntry.getNextTarEntry();  }  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip(TarArchiveEntry.class)  {  if(hasHitEOF)  {  return  TarArchiveEntry.getNextTarEntry();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip(TarArchiveEntry.class)  {  if(hasHitEOF)  {  return  TarArchiveEntry.getNextTarEntry();  }	  if(!hasHitEOF)    {    return    TarArchiveEntry.getNextTarEntry();    }    	non-compiled	[CE]  ';'  expected	76	None	replace
136	[BUG]  [BUGGY]  allowSkip(TarArchiveEntry.class)  {  if(!hasHitEOF)  {  return  TarArchiveEntry.getNextTarEntry();  }  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip(TarArchiveEntry.class)  {  if(!hasHitEOF)  {  return  TarArchiveEntry.getNextTarEntry();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip(TarArchiveEntry.class)  {  if(!hasHitEOF)  {  return  TarArchiveEntry.getNextTarEntry();  }	  if(!hasHitEOF)    {    return    TarArchiveEntry.getNextTarEntry();    }    	non-compiled	[CE]  ';'  expected	76	None	replace
137	[BUG]  [BUGGY]  tries.add(TarArchiveEntry.getNextTarEntry());  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  tries.add(TarArchiveEntry.getNextTarEntry());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	tries.add(TarArchiveEntry.getNextTarEntry());	  if(!hasHitEOF)    {    return    TarArchiveEntry.getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
138	[BUG]  [BUGGY]  return(TarArchiveEntry)this.getNextEntry();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.getNextEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.getNextEntry();	  return(TarArchiveEntry)this.nextEntry();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
139	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.nextEntry();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.nextEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.nextEntry();	  return(TarArchiveEntry)this.nextEntry();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
140	[BUG]  [BUGGY]  return(TarArchiveEntry)this.currEntry.nextEntry();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.currEntry.nextEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.currEntry.nextEntry();	  return(TarArchiveEntry)this.nextEntry();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
141	[BUG]  [BUGGY]  return(TarArchiveEntry)this.entryOffset;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.entryOffset;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.entryOffset;	  return(TarArchiveEntry)this.nextEntry();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
142	[BUG]  [BUGGY]  return(TarArchiveEntry)this.firstEntry();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.firstEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.firstEntry();	  return(TarArchiveEntry)this.nextEntry();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
143	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TARArchiveEntry  cannot  be  null. ");  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TARArchiveEntry  cannot  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TARArchiveEntry  cannot  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
144	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null! ");  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null! ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
145	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".equals(getName()));  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".equals(getName()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".equals(getName()));	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
146	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".   ");  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".   ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".   ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
147	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "ZarArchiveEntry  cannot  be  null. ");  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "ZarArchiveEntry  cannot  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "ZarArchiveEntry  cannot  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
148	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "RetarArchiveEntry  cannot  be  null. ");  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "RetarArchiveEntry  cannot  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "RetarArchiveEntry  cannot  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
149	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ",  hasHitEOF);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ",  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ",    hasHitEOF);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
150	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(). ",  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(). ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(). ",  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ",    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
151	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() "  + ",  hasHitEOF);  [CE]  unclosed  string  literal  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() "  + ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() "  + ",  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ",    hasHitEOF);    	non-compiled	[CE]  unclosed  string  literal	20	None	replace
152	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandler.throwInternal();	  if(hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
153	[BUG]  [BUGGY]  pendingTarEntry()  {  return  null;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  pendingTarEntry()  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	pendingTarEntry()  {  return  null;  }	  if(hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	61	None	replace
154	[BUG]  [BUGGY]  pendingTars  =  getNextTarEntry();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  pendingTars  =  getNextTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	pendingTars  =  getNextTarEntry();	  if(hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
155	[BUG]  [BUGGY]  pendingTars  =  new  TarArchiveEntry[size()  ];  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  pendingTars  =  new  TarArchiveEntry[size()  ];  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	pendingTars  =  new  TarArchiveEntry[size()  ];	  if(hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
156	[BUG]  [BUGGY]  aughtExceptionHandler  <  TarArchiveEntry>return  null;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandler  <  TarArchiveEntry>return  null;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandler  <  TarArchiveEntry>return  null;	  if(hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  not  a  statement	61	None	replace
157	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ",  hasHitEOF);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ",  hasHitEOF);	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  not  a  statement	94	None	replace
158	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ");  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  not  a  statement	94	None	replace
159	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(). ");  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(). ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(). ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  not  a  statement	94	None	replace
160	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): ");  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  not  a  statement	94	None	replace
161	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(), ");  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(), ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(), ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  not  a  statement	94	None	replace
162	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null. ");  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	57	None	replace
163	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null. ");  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	57	None	replace
164	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  null. ");  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	57	None	replace
165	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  not  be  null. ");  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	40	None	replace
166	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
167	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNext()  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNext()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNext()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
168	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  does  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  does  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  does  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
169	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  get  next  entry.   ");  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  get  next  entry.   ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  get  next  entry.   ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.       "    +   "Can    not    get    next    entry.   ");    	non-compiled	[CE]  <identifier>  expected	117	None	replace
170	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.n "  + "Can  not  get  next  entry.n ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.n "  + "Can  not  get  next  entry.n ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.n "  + "Can  not  get  next  entry.n ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.       "    +   "Can    not    get    next    entry.   ");    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
171	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  be  null. ");	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
172	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarEntry  cannot  be  null. ");  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarEntry  cannot  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarEntry  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "TarEntry    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	88	None	replace
173	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarEntry  cannot  be  null. ");  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarEntry  cannot  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarEntry  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "TarEntry    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	88	None	replace
174	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry  cannot  be  null. ".);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry  cannot  be  null. ".);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry  cannot  be  null. ".);	  throw    new    IllegalArgumentException(   "TarEntry    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	88	None	replace
175	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry  cannot  be  null.   "  +  getName());  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry  cannot  be  null.   "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry  cannot  be  null.   "  +  getName());	  throw    new    IllegalArgumentException(   "TarEntry    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
176	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarArchiveEntry.class.getClassLoader());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarArchiveEntry.class.getClassLoader());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Thread.currentThread().setContextClassLoader(TarArchiveEntry.class.getClassLoader());	  if(!hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
177	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getNextTarEntry());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getNextTarEntry());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Thread.currentThread().setContextClassLoader(getNextTarEntry());	  if(!hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
178	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarArchiveEntry.class);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarArchiveEntry.class);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Thread.currentThread().setContextClassLoader(TarArchiveEntry.class);	  if(!hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
179	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarArchiveEntry.class.getSimpleName());  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarArchiveEntry.class.getSimpleName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Thread.currentThread().setContextClassLoader(TarArchiveEntry.class.getSimpleName());	  if(!hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
180	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextOF();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextOF();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextOF();	  return(TarArchiveEntry)getNextHitEOF();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
181	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextSize();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextSize();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextSize();	  return(TarArchiveEntry)getNextHitEOF();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
182	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextTar();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextTar();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextTar();	  return(TarArchiveEntry)getNextHitEOF();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
183	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextFile();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextFile();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextFile();	  return(TarArchiveEntry)getNextHitEOF();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
184	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextRecord();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextRecord();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextRecord();	  return(TarArchiveEntry)getNextHitEOF();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
185	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ",  hasHitEOF);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 ",  hasHitEOF);	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  not  a  statement	99	None	replace
186	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0 ");  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0 ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  not  a  statement	99	None	replace
187	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0. ");  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  not  a  statement	99	None	replace
188	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  >  0 ");  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  >  0 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  >  0 ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  not  a  statement	99	None	replace
189	[BUG]  [BUGGY]  return  new  TarArchiveEntry(this,  getHitEOF(),  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  new  TarArchiveEntry(this,  getHitEOF(),  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry(this,  getHitEOF(),  hasHitEOF);	  return    new    TarArchiveEntry(this,    getHitEOF());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
190	[BUG]  [BUGGY]  return  new  TarArchiveEntry(this,  getNumberOfTars());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  new  TarArchiveEntry(this,  getNumberOfTars());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry(this,  getNumberOfTars());	  return    new    TarArchiveEntry(this,    getHitEOF());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
191	[BUG]  [BUGGY]  return  new  TarArchiveEntry(this,  getNextTarEntry());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  new  TarArchiveEntry(this,  getNextTarEntry());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry(this,  getNextTarEntry());	  return    new    TarArchiveEntry(this,    getHitEOF());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
192	[BUG]  [BUGGY]  return  new  TarArchiveEntry(this,  getRecordSize());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  new  TarArchiveEntry(this,  getRecordSize());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry(this,  getRecordSize());	  return    new    TarArchiveEntry(this,    getHitEOF());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
193	[BUG]  [BUGGY]  return  new  TarArchiveEntry(this,  getName());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  new  TarArchiveEntry(this,  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry(this,  getName());	  return    new    TarArchiveEntry(this,    getHitEOF());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
194	[BUG]  [BUGGY]  return  new  TarArchiveEntry(this,  getHitEOF()  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  new  TarArchiveEntry(this,  getHitEOF()  +  1);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry(this,  getHitEOF()  +  1);	  return    new    TarArchiveEntry(this,    getHitEOF());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
195	[BUG]  [BUGGY]  return  new  TarArchiveEntry(this,  getHitEOF(),  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  new  TarArchiveEntry(this,  getHitEOF(),  null);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry(this,  getHitEOF(),  null);	  return    new    TarArchiveEntry(this,    getHitEOF());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
196	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  skip(-1);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  skip(-1);  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  skip(-1);  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(-1);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
197	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  skip(-1);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  skip(-1);  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  skip(-1);  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(-1);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
198	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry!=  null)  {  skip(-1);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry!=  null)  {  skip(-1);  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry!=  null)  {  skip(-1);  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(-1);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
199	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  skip(-1);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  skip(-1);  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  skip(-1);  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(-1);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
200	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  skip(-1);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  skip(-1);  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  skip(-1);  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(-1);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
201	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(0);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(0);  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(0);  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(-1);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
202	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  not  be  null. ");  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNext()    should    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	130	None	replace
203	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getParent()  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getParent()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getParent()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNext()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
204	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNext()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
205	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNumber()  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNumber()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNumber()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNext()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
206	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  must  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNext()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
207	[BUG]  [BUGGY]  Throwables.log( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getName());  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.log( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.log( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds:   "    +    getName());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
208	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getClass());  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getClass());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getClass());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds:   "    +    getName());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
209	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  this.getName());  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  this.getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  this.getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds:   "    +    getName());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
210	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  string  entry. ");  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  string  entry. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  string  entry. ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
211	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry! ");  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry! ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
212	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry  entry. ");  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry  entry. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry  entry. ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
213	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry, ");  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry, ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry, ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
214	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  not  be  null. ");  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	18	None	replace
215	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
216	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.n ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.n ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.n ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    a    valid    entry    entry.   ");    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
217	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.   ");  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.   ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.   ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    a    valid    entry    entry.   ");    	non-compiled	[CE]  <identifier>  expected	106	None	replace
218	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    a    valid    entry    entry.   ");    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
219	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  this);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  this);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  this);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds:   ");    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
220	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  + "HitEOF: ");  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  + "HitEOF: ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  + "HitEOF: ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds:   ");    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
221	[BUG]  [BUGGY]  Throwables.log( "TarArchiveEntry  does  not  have  EOF  bounds: ");  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.log( "TarArchiveEntry  does  not  have  EOF  bounds: ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.log( "TarArchiveEntry  does  not  have  EOF  bounds: ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds:   ");    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
222	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again! ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again! ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.    Try    again.   ");    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
223	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again. ");  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.    Try    again.   ");    	non-compiled	[CE]  <identifier>  expected	120	None	replace
224	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again. ");  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.    Try    again.   ");    	non-compiled	[CE]  not  a  statement	120	None	replace
225	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again ",  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again ",  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.    Try    again.   ");    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
226	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again: ");  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again: ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again: ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.    Try    again.   ");    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
227	[BUG]  [BUGGY]  return(TarArchiveEntry)this.in.getValue();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.in.getValue();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.in.getValue();	  return(TarArchiveEntry)in.getValue();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
228	[BUG]  [BUGGY]  return(TarArchiveEntry)in.getKey();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)in.getKey();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)in.getKey();	  return(TarArchiveEntry)in.getValue();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
229	[BUG]  [BUGGY]  return(TarArchiveEntry)in.getValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)in.getValue()  +  1;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)in.getValue()  +  1;	  return(TarArchiveEntry)in.getValue();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
230	[BUG]  [BUGGY]  return(TarArchiveEntry)in.getValue()  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)in.getValue()  -  1;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)in.getValue()  -  1;	  return(TarArchiveEntry)in.getValue();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
231	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(isEnabled(TarArchiveEntry.class))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
232	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null)  {  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(getNextTarEntry()  ==  null)  {  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(getNextTarEntry()  ==  null)  {  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
233	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  this;  }	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
234	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
235	[BUG]  [BUGGY]  ||  isEnabled(TarArchiveEntry.class))  {  return  null;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  isEnabled(TarArchiveEntry.class))  {  return  null;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  isEnabled(TarArchiveEntry.class))  {  return  null;	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
236	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  must  not  be  null. ");  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  must  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextName()    must    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	129	None	replace
237	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  cannot  be  null. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  cannot  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextName()    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
238	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  must  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextName()  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextName()    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
239	[BUG]  [BUGGY]  aughtExceptionHandler  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandler  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandler  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	83	None	replace
240	[BUG]  [BUGGY]  allowSkip(true)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip(true)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip(true)  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	83	None	replace
241	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  [Delete]  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	[Delete]	  if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
242	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.clone();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.clone();	  return(TarArchiveEntry)currEntry;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
243	[BUG]  [BUGGY]  Throwables.weirdString( "TarArchiveEntry  is  null. ");  [CE]  illegal  start  of  expression  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.weirdString( "TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.weirdString( "TarArchiveEntry  is  null. ");	  throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
244	[BUG]  [BUGGY]  aughtException( "TarArchiveEntry  is  null. ");  [CE]  illegal  start  of  expression  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtException( "TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtException( "TarArchiveEntry  is  null. ");	  if(hasHitEOF)    {    throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
245	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarArchiveEntry.class)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarArchiveEntry.class)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Thread.currentThread().setContextClassLoader(TarArchiveEntry.class)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }	  if(hasHitEOF)    {    throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    }    	non-compiled	[CE]  	104	None	replace
246	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ".);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ".);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ".);	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	12	None	replace
247	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Please  check  that  the  hasHitEOF. ");  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Please  check  that  the  hasHitEOF. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Please  check  that  the  hasHitEOF. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	12	None	replace
248	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Please  check  that  this  is  a  valid  TarArchiveEntry. ");  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Please  check  that  this  is  a  valid  TarArchiveEntry. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Please  check  that  this  is  a  valid  TarArchiveEntry. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	12	None	replace
249	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  empty. ");  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  empty. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  empty. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.    Please    check    that    the    entry    is    empty.   ");    	non-compiled	[CE]  <identifier>  expected	121	None	replace
250	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds,  Please  check  that  the  entry  is  empty. ");  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds,  Please  check  that  the  entry  is  empty. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds,  Please  check  that  the  entry  is  empty. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.    Please    check    that    the    entry    is    empty.   ");    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
251	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds:  Please  check  that  the  entry  is  empty. ");  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds:  Please  check  that  the  entry  is  empty. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds:  Please  check  that  the  entry  is  empty. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.    Please    check    that    the    entry    is    empty.   ");    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
252	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  empty. ");  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  empty. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  empty. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.    Please    check    that    the    entry    is    empty.   ");    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
253	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  +  getName());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.       "    +    getName());    	non-compiled	[CE]  <identifier>  expected	90	None	replace
254	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  getName(),  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  getName(),  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  getName(),  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.       "    +    getName());    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
255	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.n ");  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.n ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.n ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.   ");    	non-compiled	[CE]  <identifier>  expected	45	None	replace
256	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  +  getName());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  +  getName());	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.   ");    	non-compiled	[CE]  <identifier>  expected	45	None	replace
257	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "TarArchiveEntry  does  not  exist. ");  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "TarArchiveEntry  does  not  exist. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "TarArchiveEntry  does  not  exist. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.   ");    	non-compiled	[CE]  <identifier>  expected	45	None	replace
258	[BUG]  [BUGGY]  return(TarArchiveEntry)encoding.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)encoding.clone();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)encoding.clone();	  return(TarArchiveEntry)encoding.getNext();    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
259	[BUG]  [BUGGY]  return(TarArchiveEntry)this.currEntry.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.currEntry.getNext();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.currEntry.getNext();	  return(TarArchiveEntry)encoding.getNext();    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
260	[BUG]  [BUGGY]  return(TarArchiveEntry)entry.getNext();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)entry.getNext();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)entry.getNext();	  return(TarArchiveEntry)encoding.getNext();    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
261	[BUG]  [BUGGY]  return(TarArchiveEntry)tarEntry.getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)tarEntry.getNext();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)tarEntry.getNext();	  return(TarArchiveEntry)encoding.getNext();    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
262	[BUG]  [BUGGY]  return(TarArchiveEntry)this.encoding.getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.encoding.getNext();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.encoding.getNext();	  return(TarArchiveEntry)encoding.getNext();    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
263	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  null. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  null. ");	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
264	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null! ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null! ");	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
265	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: ");	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
266	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null. ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null. ");	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
267	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  this;  }	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
268	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
269	[BUG]  [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
270	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEntry();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
271	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentTarEntry();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getCurrentTarEntry();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
272	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextHitEOF();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
273	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextRecordEntry();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextRecordEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextRecordEntry();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
274	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextFileEntry();  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextFileEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextFileEntry();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
275	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(null);	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
276	[BUG]  [BUGGY]  if(hasHitEOF)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
277	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
278	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
279	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  return  currEntry;  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
280	[BUG]  [BUGGY]  While(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  While(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	While(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	111	None	replace
281	[BUG]  [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry() "))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry() "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip( "TarArchiveEntry.hasNextTarEntry() "))  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	111	None	replace
282	[BUG]  [BUGGY]  allowSideEffects(true)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSideEffects(true)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSideEffects(true)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	111	None	replace
283	[BUG]  [BUGGY]  return(TarArchiveEntry)this.currEntry.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.currEntry.clone();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.currEntry.clone();	  return(TarArchiveEntry)this.currEntry;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
284	[BUG]  [BUGGY]  return(TarArchiveEntry)this.currEntry.getKey();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.currEntry.getKey();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.currEntry.getKey();	  return(TarArchiveEntry)this.currEntry;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
285	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getParent()  is  null. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getParent()  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getParent()  is  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNext()    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
286	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null ",  hasHitEOF);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null ",  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNext()    is    null.   ");    	non-compiled	[CE]  not  a  statement	60	None	replace
287	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null! ");  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null! ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNext()    is    null.   ");    	non-compiled	[CE]  not  a  statement	60	None	replace
288	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null. ");  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNext()    is    null.   ");    	non-compiled	[CE]  not  a  statement	60	None	replace
289	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null. ");  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNext()    is    null.   ");    	non-compiled	[CE]  not  a  statement	60	None	replace
290	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ",  hasHitEOF);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ",  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.n   ");    	non-compiled	[CE]  not  a  statement	46	None	replace
291	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ".);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ".);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ".);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.n   ");    	non-compiled	[CE]  <identifier>  expected	46	None	replace
292	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  does  not  exist. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  does  not  exist. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  does  not  exist. ");	  throw    new    IllegalArgumentException(   "TarEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
293	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null. ");  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null. ");	  throw    new    IllegalArgumentException(   "TarEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  not  a  statement	92	None	replace
294	[BUG]  [BUGGY]  Throwables.warning( "TarEntry.getNextTarEntry()  is  null. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.warning( "TarEntry.getNextTarEntry()  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.warning( "TarEntry.getNextTarEntry()  is  null. ");	  throw    new    IllegalArgumentException(   "TarEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
295	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): ");  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry():   ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
296	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): "  +  getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): "  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry():   ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
297	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): "  +  this);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): "  +  this);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): "  +  this);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry():   ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
298	[BUG]  [BUGGY]  pending  ||  hasHitEOF)  {  return  this;  }  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  pending  ||  hasHitEOF)  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	pending  ||  hasHitEOF)  {  return  this;  }	  if(hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
299	[BUG]  [BUGGY]  return  new  TarArchiveEntry( "TarArchiveEntry  is  null ".getMessage());  [CE]  illegal  start  of  expression  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  new  TarArchiveEntry( "TarArchiveEntry  is  null ".getMessage());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry( "TarArchiveEntry  is  null ".getMessage());	  return    new    TarArchiveEntry(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
300	[BUG]  [BUGGY]  return  new  TarArchiveEntry(getName()  + "TarArchiveEntry  is  null. ");  [CE]  illegal  start  of  expression  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  new  TarArchiveEntry(getName()  + "TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry(getName()  + "TarArchiveEntry  is  null. ");	  return    new    TarArchiveEntry(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
301	[BUG]  [BUGGY]  return  new  TarArchiveEntry( "TarArchiveEntry  is  null ".equals(getName()));  [CE]  illegal  start  of  expression  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  new  TarArchiveEntry( "TarArchiveEntry  is  null ".equals(getName()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry( "TarArchiveEntry  is  null ".equals(getName()));	  return    new    TarArchiveEntry(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
302	[BUG]  [BUGGY]  return  new  TarArchiveEntry(this, "TarArchiveEntry  is  null. ");  [CE]  illegal  start  of  expression  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  new  TarArchiveEntry(this, "TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry(this, "TarArchiveEntry  is  null. ");	  return    new    TarArchiveEntry(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
303	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  needs  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  needs  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  needs  not  be  null. ");	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
304	[BUG]  [BUGGY]  Annotation  <  T>  currEntry  =  getCurrentTarEntry();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Annotation  <  T>  currEntry  =  getCurrentTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Annotation  <  T>  currEntry  =  getCurrentTarEntry();	  Annotation    <    T>    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
305	[BUG]  [BUGGY]  Annotation  <  T>  currEntry  =  this.getNextTarEntry();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Annotation  <  T>  currEntry  =  this.getNextTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Annotation  <  T>  currEntry  =  this.getNextTarEntry();	  Annotation    <    T>    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
306	[BUG]  [BUGGY]  Annotation  <  T>  currEntry  =  getNextEntry();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Annotation  <  T>  currEntry  =  getNextEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Annotation  <  T>  currEntry  =  getNextEntry();	  Annotation    <    T>    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
307	[BUG]  [BUGGY]  Annotation  <  T>  currEntry  =  getNextArchiveEntry();  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Annotation  <  T>  currEntry  =  getNextArchiveEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Annotation  <  T>  currEntry  =  getNextArchiveEntry();	  Annotation    <    T>    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
308	[BUG]  [BUGGY]  Annotation  <  T>  currEntry  =  getNextRecordEntry();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Annotation  <  T>  currEntry  =  getNextRecordEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Annotation  <  T>  currEntry  =  getNextRecordEntry();	  Annotation    <    T>    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
309	[BUG]  [BUGGY]  Annotation  <  T>  currEntry  =  getNextTarEntry(null);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Annotation  <  T>  currEntry  =  getNextTarEntry(null);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Annotation  <  T>  currEntry  =  getNextTarEntry(null);	  Annotation    <    T>    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
310	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ",  ioe);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ",  ioe);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandler.throwAsIOException( " ",  ioe);	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
311	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ",  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandler.throwAsIOException( " ",  hasHitEOF);	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
312	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( "TarArchiveEntry  is  null. ");  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandler.throwAsIOException( "TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandler.throwAsIOException( "TarArchiveEntry  is  null. ");	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
313	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( ", ");  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandler.throwAsIOException( ", ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandler.throwAsIOException( ", ");	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
314	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( "TarArchiveEntry  not  initialized: ");  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandler.throwAsIOException( "TarArchiveEntry  not  initialized: ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandler.throwAsIOException( "TarArchiveEntry  not  initialized: ");	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
315	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ".equals(getHitEOF()));  [CE]  illegal  start  of  expression  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ".equals(getHitEOF()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ".equals(getHitEOF()));	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null   ".equals(getHitEOF()));    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
316	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. "  +  getHitEOF());  [CE]  illegal  start  of  expression  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null   ".equals(getHitEOF()));    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
317	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null "  +  getHitEOF());  [CE]  illegal  start  of  expression  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null   ".equals(getHitEOF()));    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
318	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ",  getHitEOF());  [CE]  illegal  start  of  expression  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ",  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ",  getHitEOF());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null   ".equals(getHitEOF()));    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
319	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF()));  [CE]  <identifier>  expected  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF()));	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null   ".equals(getHitEOF()));    	non-compiled	[CE]  <identifier>  expected	124	None	replace
320	[BUG]  [BUGGY]  return(TarArchiveEntry)entry.getValue();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)entry.getValue();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)entry.getValue();	  return(TarArchiveEntry)entry;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
321	[BUG]  [BUGGY]  return(TarArchiveEntry)entry.clone();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)entry.clone();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)entry.clone();	  return(TarArchiveEntry)entry;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
322	[BUG]  [BUGGY]  return(TarArchiveEntry)entry.getKey();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)entry.getKey();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)entry.getKey();	  return(TarArchiveEntry)entry;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
323	[BUG]  [BUGGY]  return(TarArchiveEntry)entry.cloneTar();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)entry.cloneTar();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)entry.cloneTar();	  return(TarArchiveEntry)entry;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
324	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
325	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
326	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
327	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEscapedTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEscapedTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEscapedTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
328	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextSkipEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextSkipEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextSkipEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
329	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextRecordEscape();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextRecordEscape();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextRecordEscape();	  return(TarArchiveEntry)getNextEscape();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
330	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0 ",  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0 ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0 ",  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
331	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  EOF ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  EOF ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  EOF ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
332	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  0. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
333	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  be  >  0 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  be  >  0 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
334	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  be  null. ");  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    does    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	15	None	replace
335	[BUG]  [BUGGY]  Throwables.warning( "TarArchiveEntry.getNextTarEntry()  does  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.warning( "TarArchiveEntry.getNextTarEntry()  does  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.warning( "TarArchiveEntry.getNextTarEntry()  does  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    does    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
336	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
337	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  skip(currEntry.getName());  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  skip(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  skip(currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
338	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
339	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  skip(currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
340	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEscapedTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEscapedTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEscapedTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
341	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ",  hasHitEOF);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ",  hasHitEOF);	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  not  a  statement	91	None	replace
342	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  null. ");  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  null. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  not  a  statement	91	None	replace
343	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getName().equals(getName()));  [CE]  unclosed  string  literal  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getName().equals(getName()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getName().equals(getName()));	  throw    new    IllegalArgumentException(   "   ".equals(getName()));    	non-compiled	[CE]  unclosed  string  literal	43	None	replace
344	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  getName());  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( " "  +  getName());	  throw    new    IllegalArgumentException(   "   ".equals(getName()));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
345	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [CE]  illegal  start  of  expression  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(getNextTarEntry()  ==  null)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(getNextTarEntry()  ==  null)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }	  throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    IllegalArgumentException(   "TarArchiveEntry    is    null.       ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
346	[BUG]  [BUGGY]  new  TarArchiveEntry( "TarArchiveEntry  is  null. ");  [CE]  illegal  start  of  expression  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  TarArchiveEntry( "TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  TarArchiveEntry( "TarArchiveEntry  is  null. ");	  throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    IllegalArgumentException(   "TarArchiveEntry    is    null.       ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
347	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextName() ");  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextName() ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextName() ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
348	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextPadding() ");  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextPadding() ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextPadding() ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
349	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextRecordEscapedTarEntry();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextRecordEscapedTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextRecordEscapedTarEntry();	  return(TarArchiveEntry)getNextEscapedTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
350	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextEscapedTarEntry().getValue();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextEscapedTarEntry().getValue();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextEscapedTarEntry().getValue();	  return(TarArchiveEntry)getNextEscapedTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
351	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  this);  [CE]  illegal  start  of  expression  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  this);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  this);	  new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
352	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getName());  [CE]  illegal  start  of  expression  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getName());	  new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
353	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null! ");  [CE]  illegal  start  of  expression  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  null! ");	  new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
354	[BUG]  [BUGGY]  new  IllegalArgumentException( "TARArchiveEntry  is  null. ");  [CE]  illegal  start  of  expression  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TARArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TARArchiveEntry  is  null. ");	  new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
355	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null.  Please  try  again. ");  [CE]  illegal  start  of  expression  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null.  Please  try  again. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  null.  Please  try  again. ");	  new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
356	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextRecordEntry().getValue();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextRecordEntry().getValue();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextRecordEntry().getValue();	  return(TarArchiveEntry)getNextRecordEntry();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
357	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextSkip();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextSkip();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextSkip();	  return(TarArchiveEntry)getNextRecordEntry();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
358	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry.getName();    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
359	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry.getName();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry.getName();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry.getName();  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry.getName();    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
360	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  return  currEntry.getName();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  return  currEntry.getName();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  return  currEntry.getName();  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry.getName();    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
361	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry.getName();    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
362	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  return  currEntry.getName();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  return  currEntry.getName();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  return  currEntry.getName();  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry.getName();    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
363	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEscapedTarEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEscapedTarEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEscapedTarEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry.getName();    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
364	[BUG]  [BUGGY]  java.lang.Exception:  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [CE]  not  a  statement  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  java.lang.Exception:  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	java.lang.Exception:  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");	  throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    java.lang.Exception:    throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    	non-compiled	[CE]  not  a  statement	87	None	replace
365	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [CE]  illegal  start  of  expression  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(getNextTarEntry()!=  null)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(getNextTarEntry()!=  null)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }	  throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    java.lang.Exception:    throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
366	[BUG]  [BUGGY]  if(isEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [CE]  illegal  start  of  expression  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(isEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(isEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }	  throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    java.lang.Exception:    throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
367	[BUG]  [BUGGY]  _throw  new  IllegalArgumentException( "TarArchiveEntry  is  null! ");  [CE]  not  a  statement  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  _throw  new  IllegalArgumentException( "TarArchiveEntry  is  null! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	_throw  new  IllegalArgumentException( "TarArchiveEntry  is  null! ");	  _throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  not  a  statement	105	None	replace
368	[BUG]  [BUGGY]  _throw  new  IllegalArgumentException( "TarArchiveEntry  was  null. ");  [CE]  not  a  statement  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  _throw  new  IllegalArgumentException( "TarArchiveEntry  was  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	_throw  new  IllegalArgumentException( "TarArchiveEntry  was  null. ");	  _throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  not  a  statement	105	None	replace
369	[BUG]  [BUGGY]  _throw  new  IllegalArgumentException( "TARArchiveEntry  is  null. ");  [CE]  not  a  statement  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  _throw  new  IllegalArgumentException( "TARArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	_throw  new  IllegalArgumentException( "TARArchiveEntry  is  null. ");	  _throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  not  a  statement	105	None	replace
370	[BUG]  [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  return  this;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  hasHitEOF)  {  return  this;  }	  if(!hasHitEOF    &&    hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  not  a  statement	127	None	replace
371	[BUG]  [BUGGY]  if(hasHitEOF  ||  hasHitEOF)  {  return  null;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  ||  hasHitEOF)  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  ||  hasHitEOF)  {  return  null;  }	  if(!hasHitEOF    &&    hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  not  a  statement	127	None	replace
372	[BUG]  [BUGGY]  if(hasHitEOF  &&  hasHitEOF)  {  return  null;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  &&  hasHitEOF)  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  &&  hasHitEOF)  {  return  null;  }	  if(!hasHitEOF    &&    hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  not  a  statement	127	None	replace
373	[BUG]  [BUGGY]  While(!hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [CE]  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  While(!hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	While(!hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }	  if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    }    	non-compiled	[CE]  	103	None	replace
374	[BUG]  [BUGGY]  aughtExceptionHandler  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [CE]  not  a  statement  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandler  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandler  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }	  if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    }    	non-compiled	[CE]  not  a  statement	103	None	replace
375	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0.0 ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0.0 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0.0 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
376	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  1.0 ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  1.0 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  1.0 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
377	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0.01 ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0.01 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0.01 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
378	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0.5 ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0.5 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0.5 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
379	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0.04 ");  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0.04 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0.04 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
380	[BUG]  [BUGGY]  return(TarArchiveEntry)this.sourceFile.getNextTarEntry();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.sourceFile.getNextTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.sourceFile.getNextTarEntry();	  return(TarArchiveEntry)sourceFile.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
381	[BUG]  [BUGGY]  return(TarArchiveEntry)getSourceFile().getNextTarEntry();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getSourceFile().getNextTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getSourceFile().getNextTarEntry();	  return(TarArchiveEntry)sourceFile.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
382	[BUG]  [BUGGY]  return(TarArchiveEntry)sourceFile.getNextEntry();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)sourceFile.getNextEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)sourceFile.getNextEntry();	  return(TarArchiveEntry)sourceFile.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
383	[BUG]  [BUGGY]  return(TarArchiveEntry)entry.getNextTarEntry();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)entry.getNextTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)entry.getNextTarEntry();	  return(TarArchiveEntry)sourceFile.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
384	[BUG]  [BUGGY]  return(TarArchiveEntry)this.super.getNextTarEntry();  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.super.getNextTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.super.getNextTarEntry();	  return(TarArchiveEntry)super.getNextTarEntry();    	non-compiled	[CE]  '('  expected	56	None	replace
385	[BUG]  [BUGGY]  return(TarArchiveEntry)this.getNextTarEntry();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.getNextTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.getNextTarEntry();	  return(TarArchiveEntry)super.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
386	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null! ");  [CE]  <identifier>  expected  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null! ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null!   ");    	non-compiled	[CE]  <identifier>  expected	70	None	replace
387	[BUG]  [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  is  null! ");  [CE]  illegal  start  of  expression  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  is  null! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( "TarArchiveEntry  is  null! ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null!   ");    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
388	[BUG]  [BUGGY]  return(TarArchiveEntry)this.headerEntry;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.headerEntry;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.headerEntry;	  return(TarArchiveEntry)this;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
389	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  should  not  be  null. ");  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  should  not  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
390	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  +  getHitEOF());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.       "    +    getHitEOF());    	non-compiled	[CE]  <identifier>  expected	89	None	replace
391	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  was  null. ");  [CE]  <identifier>  expected  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  was  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  was  null. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	67	None	replace
392	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  may  not  be  null. ");  [CE]  <identifier>  expected  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  may  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  may  not  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	67	None	replace
393	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getName()));  [CE]  <identifier>  expected  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getName()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getName()));	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	67	None	replace
394	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  must  be  null. ");  [CE]  <identifier>  expected  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  must  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  must  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	67	None	replace
395	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TARArchiveEntry  is  null. ");  [CE]  <identifier>  expected  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TARArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TARArchiveEntry  is  null. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	67	None	replace
396	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  getHitEOF());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( " "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "   ".equals(getHitEOF()));    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
397	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.hasHitEOF: "  +  getHitEOF());  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.hasHitEOF: "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.hasHitEOF: "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "   ".equals(getHitEOF()));    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
398	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null.. ");  [CE]  illegal  start  of  expression  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null.. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  null.. ");	  throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    new    IllegalArgumentException(   "TarArchiveEntry    is    null.       ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
399	[BUG]  [BUGGY]  While(!hasHitEOF)  {  throw  new  IllegalStateException( "TarArchiveEntry  is  null. ");  }  [CE]  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  While(!hasHitEOF)  {  throw  new  IllegalStateException( "TarArchiveEntry  is  null. ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	While(!hasHitEOF)  {  throw  new  IllegalStateException( "TarArchiveEntry  is  null. ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "TarArchiveEntry    is    null.   ");    }    	non-compiled	[CE]  	112	None	replace
400	[BUG]  [BUGGY]  allowSkip(TarArchiveEntry.class)  {  throw  new  IllegalStateException( "TarArchiveEntry  is  null. ");  }  [CE]  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip(TarArchiveEntry.class)  {  throw  new  IllegalStateException( "TarArchiveEntry  is  null. ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip(TarArchiveEntry.class)  {  throw  new  IllegalStateException( "TarArchiveEntry  is  null. ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "TarArchiveEntry    is    null.   ");    }    	non-compiled	[CE]  	112	None	replace
401	[BUG]  [BUGGY]  allowSkip( "TarArchiveEntry  is  null. ");  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip( "TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip( "TarArchiveEntry  is  null. ");	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "TarArchiveEntry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
402	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1 ",  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1 ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1 ",  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    -1   ");    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
403	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1 ");  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    -1   ");    	non-compiled	[CE]  <identifier>  expected	100	None	replace
404	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    -1   ");    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
405	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  -1 ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  -1 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  >  -1 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    -1   ");    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
406	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1 ",  hasHitEOF);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1 ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1 ",  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    -1   ");    	non-compiled	[CE]  <identifier>  expected	100	None	replace
407	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again. ");  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.    Try    again.   ");    	non-compiled	[CE]  <identifier>  expected	108	None	replace
408	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again. ");  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.    Try    again.   ");    	non-compiled	[CE]  not  a  statement	108	None	replace
409	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again, ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again, ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again, ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.    Try    again.   ");    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
410	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  must  not  be  null. ");  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  must  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  must  not  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
411	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null! ");  [CE]  not  a  statement  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null! ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  not  a  statement	69	None	replace
412	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  this);  [CE]  not  a  statement  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  this);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  this);	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  not  a  statement	69	None	replace
413	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getName());  [CE]  not  a  statement  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getName());	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  not  a  statement	69	None	replace
414	[BUG]  [BUGGY]  this.currEntry.setHitEOF(ioe);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  this.currEntry.setHitEOF(ioe);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	this.currEntry.setHitEOF(ioe);	  this.currEntry.setHitEOF(hasHitEOF);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
415	[BUG]  [BUGGY]  this.currEntry.setHitEOF(hasHitEOF  &&  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  this.currEntry.setHitEOF(hasHitEOF  &&  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	this.currEntry.setHitEOF(hasHitEOF  &&  hasHitEOF);	  this.currEntry.setHitEOF(hasHitEOF);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
416	[BUG]  [BUGGY]  this.currEntry.setHitEOF(null);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  this.currEntry.setHitEOF(null);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	this.currEntry.setHitEOF(null);	  this.currEntry.setHitEOF(hasHitEOF);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
417	[BUG]  [BUGGY]  this.currEntry.setHitEOF(hasHitEOF  +  1);  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  this.currEntry.setHitEOF(hasHitEOF  +  1);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	this.currEntry.setHitEOF(hasHitEOF  +  1);	  this.currEntry.setHitEOF(hasHitEOF);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
418	[BUG]  [BUGGY]  this.currEntry.setHitEOF(hasHitEOF  ||  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  this.currEntry.setHitEOF(hasHitEOF  ||  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	this.currEntry.setHitEOF(hasHitEOF  ||  hasHitEOF);	  this.currEntry.setHitEOF(hasHitEOF);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
419	[BUG]  [BUGGY]  this.currEntry.setHitEOF(getHitEOF());  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  this.currEntry.setHitEOF(getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	this.currEntry.setHitEOF(getHitEOF());	  this.currEntry.setHitEOF(hasHitEOF);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
420	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.n "  +  getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.n "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.n "  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.       "    +    getName());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
421	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ".  +  getName());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ".  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. ".  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.       "    +    getName());    	non-compiled	[CE]  <identifier>  expected	47	None	replace
422	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 "  + ",  hasHitEOF);  [CE]  unclosed  string  literal  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 "  + ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 "  + ",  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ",    hasHitEOF);    	non-compiled	[CE]  unclosed  string  literal	1	None	replace
423	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 "  +  getName());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 "  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ",    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
424	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  access  this  entry.. ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  access  this  entry.. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  access  this  entry.. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.   "    +   "Can    not    access    this    entry.   ");    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
425	[BUG]  [BUGGY]  While(!hasHitEOF)  {  throw  new  RuntimeException( " ");  }  [CE]  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  While(!hasHitEOF)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	While(!hasHitEOF)  {  throw  new  RuntimeException( " ");  }	  if(!hasHitEOF)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  	114	None	replace
426	[BUG]  [BUGGY]  allowSkip(true)  {  throw  new  RuntimeException( " ");  }  [CE]  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip(true)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip(true)  {  throw  new  RuntimeException( " ");  }	  if(!hasHitEOF)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  	114	None	replace
427	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Thread.currentThread().interrupt();	  if(!hasHitEOF)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
428	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry  ==  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry    ==    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
429	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextRecordEntry();  if(currEntry  ==  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry    ==    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
430	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry  ==  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry    ==    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
431	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEscapedTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEscapedTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEscapedTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry    ==    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
432	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextSkipEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextSkipEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextSkipEntry();  if(currEntry  ==  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry    ==    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
433	[BUG]  [BUGGY]  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
434	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
435	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
436	[BUG]  [BUGGY]  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
437	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  this;  }	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
438	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
439	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getName(),  e);  [CE]  illegal  start  of  expression  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getName(),  e);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getName(),  e);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.       "    +    getName());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
440	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  be  null. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
441	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  should  be  null. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  should  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  should  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
442	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: ");	  new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
443	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.n ");  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.n ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.n ");	  new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
444	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getName());  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getName());	  new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
445	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  below. ");  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  below. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  below. ");	  new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
446	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ".);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
447	[BUG]  [BUGGY]  if(hasHitEOF)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
448	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  skip(currEntry.getName());  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  skip(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  skip(currEntry.getName());  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
449	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(String.valueOf(currEntry.getName()));  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(String.valueOf(currEntry.getName()));  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(String.valueOf(currEntry.getName()));  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
450	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Can  not  get  next  entry.n ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Can  not  get  next  entry.n ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Can  not  get  next  entry.n ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.       "    +   "Can    not    get    next    entry.   ");    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
451	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Can  not  get  next  entry.  Please  check  that  the  curr  entry  does  not  exist. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Can  not  get  next  entry.  Please  check  that  the  curr  entry  does  not  exist. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Can  not  get  next  entry.  Please  check  that  the  curr  entry  does  not  exist. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.       "    +   "Can    not    get    next    entry.   ");    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
452	[BUG]  [BUGGY]  allowPadding( "TarArchiveEntry  is  null. ");  [CE]  illegal  start  of  expression  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowPadding( "TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowPadding( "TarArchiveEntry  is  null. ");	  if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
453	[BUG]  [BUGGY]  MutableTarEntry  <  K,  V>  currEntry  =  getNextTarEntry();  [CE]  illegal  start  of  expression  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  MutableTarEntry  <  K,  V>  currEntry  =  getNextTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	MutableTarEntry  <  K,  V>  currEntry  =  getNextTarEntry();	  if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
454	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  be  >  0 ");  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  be  >  0 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  be  >  0 ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  not  a  statement	99	None	replace
455	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0   "  +  hasHitEOF);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0   "  +  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0   "  +  hasHitEOF);	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  not  a  statement	99	None	replace
456	[BUG]  [BUGGY]  allowSkip( "Tar ")  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip( "Tar ")  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip( "Tar ")  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	111	None	replace
457	[BUG]  [BUGGY]  allowSkip(true)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip(true)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip(true)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	111	None	replace
458	[BUG]  [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry "))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip( "TarArchiveEntry.hasNextTarEntry "))  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	111	None	replace
459	[BUG]  [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarName() "))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarName() "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip( "TarArchiveEntry.hasNextTarName() "))  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	111	None	replace
460	[BUG]  [BUGGY]  ParchetState.checkState(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ParchetState.checkState(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	ParchetState.checkState(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	111	None	replace
461	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry  is  null. ");  [CE]  not  a  statement  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry  is  null. ");	  throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.       ");    }    	non-compiled	[CE]  not  a  statement	131	None	replace
462	[BUG]  [BUGGY]  validateTarEntry( "TarArchiveEntry  is  null. ");  [CE]  not  a  statement  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  validateTarEntry( "TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	validateTarEntry( "TarArchiveEntry  is  null. ");	  throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.       ");    }    	non-compiled	[CE]  not  a  statement	131	None	replace
463	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ",  e);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ",  e);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ",  e);	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
464	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".equals(getHitEOF()));  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".equals(getHitEOF()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".equals(getHitEOF()));	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
465	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.. "  +  getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.. "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.. "  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.       "    +    getName());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
466	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  +  getHitEOF());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.       "    +    getName());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
467	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  hasHitEOF. ");  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  hasHitEOF. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  hasHitEOF. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.n   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
468	[BUG]  [BUGGY]  aughtExceptionHandlerTraversal.traverse(this,  TarArchiveEntry.class);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandlerTraversal.traverse(this,  TarArchiveEntry.class);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandlerTraversal.traverse(this,  TarArchiveEntry.class);	  if(hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
469	[BUG]  [BUGGY]  aughtExceptionHandlerTraversal.traverse(getNextTarEntry());  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandlerTraversal.traverse(getNextTarEntry());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandlerTraversal.traverse(getNextTarEntry());	  if(hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
470	[BUG]  [BUGGY]  aughtExceptionHandler.handleUnsupportedOperation(TarArchiveEntry.class);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandler.handleUnsupportedOperation(TarArchiveEntry.class);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandler.handleUnsupportedOperation(TarArchiveEntry.class);	  if(hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
471	[BUG]  [BUGGY]  aughtExceptionHandler(this,  getNextTarEntry());  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandler(this,  getNextTarEntry());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandler(this,  getNextTarEntry());	  if(hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
472	[BUG]  [BUGGY]  aughtExceptionHandlerTraversal(this,  TarArchiveEntry.class);  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandlerTraversal(this,  TarArchiveEntry.class);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandlerTraversal(this,  TarArchiveEntry.class);	  if(hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
473	[BUG]  [BUGGY]  aughtExceptionHandlerTraversal.traverse(compiler,  getNextTarEntry());  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandlerTraversal.traverse(compiler,  getNextTarEntry());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandlerTraversal.traverse(compiler,  getNextTarEntry());	  if(hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
474	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  getHitEOF());  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.       "    +    getHitEOF());    	non-compiled	[CE]  not  a  statement	75	None	replace
475	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  any  EOF  bounds.   "  +  getHitEOF());  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  any  EOF  bounds.   "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  any  EOF  bounds.   "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.       "    +    getHitEOF());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
476	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  this;  }	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
477	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ",  e);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ",  e);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ",  e);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.    Try    again!   ");    	non-compiled	[CE]  ';'  expected	110	None	replace
478	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.getNextFileEntry();  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.getNextFileEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.getNextFileEntry();	  return(TarArchiveEntry)getNextFileEntry();    	non-compiled	[CE]  ';'  expected	27	None	replace
479	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextOriginalFileEntry();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextOriginalFileEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextOriginalFileEntry();	  return(TarArchiveEntry)getNextFileEntry();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
480	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  ';'  expected	53	None	replace
481	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [CE]  ';'  expected  [FE]                                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  skip(currEntry.getName());  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  ';'  expected	53	None	replace
482	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [CE]  ';'  expected  [FE]                                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  skip(currEntry.getName());  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  ';'  expected	53	None	replace
483	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  ';'  expected	65	None	replace
484	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }  else  {  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(Long.MAX_VALUE);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }  else  {  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(Long.MAX_VALUE);  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }  else  {  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(Long.MAX_VALUE);  }	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
485	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( "TarArchiveEntry.getNextTarEntry() ");  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandler.throwAsIOException( "TarArchiveEntry.getNextTarEntry() ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandler.throwAsIOException( "TarArchiveEntry.getNextTarEntry() ");	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  ';'  expected	65	None	replace
486	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }  else  {  TarArchiveEntry  currEntry  =  getNextTarEntry();  return  currEntry;  }  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }  else  {  TarArchiveEntry  currEntry  =  getNextTarEntry();  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }  else  {  TarArchiveEntry  currEntry  =  getNextTarEntry();  return  currEntry;  }	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  ';'  expected	65	None	replace
487	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 "  +  hasHitEOF);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 "  +  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 "  +  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ",    hasHitEOF);    	non-compiled	[CE]  ';'  expected	1	None	replace
488	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 "  +  getHitEOF());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0 "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ",    hasHitEOF);    	non-compiled	[CE]  ';'  expected	1	None	replace
489	[BUG]  [BUGGY]  safeTarEntry()  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [CE]  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  safeTarEntry()  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	safeTarEntry()  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }	  if(hasHitEOF)    {    throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    }    	non-compiled	[CE]  	104	None	replace
490	[BUG]  [BUGGY]  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [CE]  ';'  expected  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	IllegalArgumentException( "TarArchiveEntry  is  null. ");	  throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    IllegalArgumentException(   "TarArchiveEntry    is    null.       ");    	non-compiled	[CE]  ';'  expected	9	None	replace
491	[BUG]  [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  empty. ");  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  empty. ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  is  empty. ");  }	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.    Please    check    that    the    entry    is    empty.   ");    	non-compiled	[CE]  ';'  expected	121	None	replace
492	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.getNextEntry().getValue();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.getNextEntry().getValue();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.getNextEntry().getValue();	  return(TarArchiveEntry)getNextEntry().getValue();    	non-compiled	[CE]  ';'  expected	26	None	replace
493	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null ".   ");  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null ".   ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null ".   ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	72	None	replace
494	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null! ");  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null! ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	72	None	replace
495	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  should  not  be  null. ");  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  should  not  be  null. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	72	None	replace
496	[BUG]  [BUGGY]  throw  new  IllegalStateException( "TarEntry  cannot  be  null. ");  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalStateException( "TarEntry  cannot  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( "TarEntry  cannot  be  null. ");	  throw    new    IllegalStateException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  ';'  expected	109	None	replace
497	[BUG]  [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null.   "  +  getHitEOF());  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null.   "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null.   "  +  getHitEOF());	  throw    new    IllegalStateException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  ';'  expected	109	None	replace
498	[BUG]  [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null.   "  +  getName());  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null.   "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null.   "  +  getName());	  throw    new    IllegalStateException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  ';'  expected	109	None	replace
499	[BUG]  [BUGGY]  parent  ==  null  ||!hasHitEOF)  {  return  this;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  parent  ==  null  ||!hasHitEOF)  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	parent  ==  null  ||!hasHitEOF)  {  return  this;  }	  if(!hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  not  a  statement	63	None	replace
500	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  this;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  return  this;  }	  if(!hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  ';'  expected	63	None	replace
501	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TARNING_ERROR))  {  return  this;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TARNING_ERROR))  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TARNING_ERROR))  {  return  this;  }	  if(!hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  ';'  expected	63	None	replace
502	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.getNextRecordEntry();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.getNextRecordEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.getNextRecordEntry();	  return(TarArchiveEntry)getNextRecordEntry();    	non-compiled	[CE]  ';'  expected	25	None	replace
503	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.getNextBinaryTarEntry();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.getNextBinaryTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.getNextBinaryTarEntry();	  return(TarArchiveEntry)getNextBinaryTarEntry();    	non-compiled	[CE]  ';'  expected	123	None	replace
504	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarEntry  is  null. ");  [CE]  not  a  statement  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarEntry  is  null. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  not  a  statement	69	None	replace
505	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  ';'  expected  [FE]                                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOFTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry    ==    null)    {    return    currEntry;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
506	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.   "  +  getName());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.   "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.   "  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    a    valid    entry    entry.   ");    	non-compiled	[CE]  ';'  expected	106	None	replace
507	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.   "  +  this);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.   "  +  this);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.   "  +  this);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    a    valid    entry    entry.   ");    	non-compiled	[CE]  ';'  expected	106	None	replace
508	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.  Please  check  that  the  curr  entry  is  null. ");  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.  Please  check  that  the  curr  entry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.  Please  check  that  the  curr  entry  is  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    a    valid    entry    entry.   ");    	non-compiled	[CE]  ';'  expected	106	None	replace
509	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.  Please  check  that  the  curr  entry  is  empty. ");  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.  Please  check  that  the  curr  entry  is  empty. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.  Please  check  that  the  curr  entry  is  empty. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    a    valid    entry    entry.   ");    	non-compiled	[CE]  ';'  expected	106	None	replace
510	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }	  if(hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	61	None	replace
511	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  return  null;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  return  null;  }	  if(hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	61	None	replace
512	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  return  null;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  return  null;  }	  if(hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	61	None	replace
513	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TO_STREAM))  {  return  null;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TO_STREAM))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TO_STREAM))  {  return  null;  }	  if(hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	61	None	replace
514	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()  : "  + "n ");  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()  : "  + "n ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()  : "  + "n ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry():   ");    	non-compiled	[CE]  ';'  expected	22	None	replace
515	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()  : "  + "https: ");  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()  : "  + "https: ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()  : "  + "https: ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry():   ");    	non-compiled	[CE]  ';'  expected	22	None	replace
516	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  not  be  >  0 ");  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  not  be  >  0 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  not  be  >  0 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    >    0   ");    	non-compiled	[CE]  ';'  expected	3	None	replace
517	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.getNextEntry();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.getNextEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.getNextEntry();	  return(TarArchiveEntry)getNextEntry();    	non-compiled	[CE]  ';'  expected	23	None	replace
518	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry  cannot  be  null.   "  +  getHitEOF());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry  cannot  be  null.   "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry  cannot  be  null.   "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "TarEntry    cannot    be    null.   ");    	non-compiled	[CE]  ';'  expected	88	None	replace
519	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry  cannot  be  null.  Try  again. ");  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry  cannot  be  null.  Try  again. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry  cannot  be  null.  Try  again. ");	  throw    new    IllegalArgumentException(   "TarEntry    cannot    be    null.   ");    	non-compiled	[CE]  ';'  expected	88	None	replace
520	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry(null);	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  ';'  expected	49	None	replace
521	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextEOFEntry();  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextEOFEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextEOFEntry();	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  ';'  expected	49	None	replace
522	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry(true);  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry(true);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry(true);	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  ';'  expected	49	None	replace
523	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextSkipEntry();  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextSkipEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextSkipEntry();	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  ';'  expected	49	None	replace
524	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ".equals(getNextTarEntry()));  [CE]  ';'  expected  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ".equals(getNextTarEntry()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ".equals(getNextTarEntry()));	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null   ".equals(getHitEOF()));    	non-compiled	[CE]  ';'  expected	124	None	replace
525	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextFile()  should  not  be  null. ");  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextFile()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextFile()  should  not  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
526	[BUG]  [BUGGY]  return  new  TarArchiveEntry( "TarArchiveEntry  is  null ".equals(getHitEOF()));  [CE]  ';'  expected  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  new  TarArchiveEntry( "TarArchiveEntry  is  null ".equals(getHitEOF()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry( "TarArchiveEntry  is  null ".equals(getHitEOF()));	  return    new    TarArchiveEntry(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  ';'  expected	125	None	replace
527	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ".);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ".);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ".);	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	58	None	replace
528	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  getHitEOF());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.   "  +  getHitEOF());	  new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  ';'  expected	11	None	replace
529	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".  + ");  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".  + ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".  + ");	  new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
530	[BUG]  [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry() "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry() "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip( "TarArchiveEntry.hasNextTarEntry() "))  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	83	None	replace
531	[BUG]  [BUGGY]  allowSkip( "TarArchiveEntry.getNextTarEntry() "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip( "TarArchiveEntry.getNextTarEntry() "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip( "TarArchiveEntry.getNextTarEntry() "))  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	83	None	replace
532	[BUG]  [BUGGY]  allowSkip( "TarArchiveEntry.getNextTarEntry()   ")  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip( "TarArchiveEntry.getNextTarEntry()   ")  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip( "TarArchiveEntry.getNextTarEntry()   ")  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	83	None	replace
533	[BUG]  [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip( "TarArchiveEntry.hasNextTarEntry "))  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	83	None	replace
534	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null ".   ");  [CE]  unclosed  string  literal  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null ".   ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null ".   ");	  throw    new    IllegalArgumentException(   "TarEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  unclosed  string  literal	92	None	replace
535	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null! ");  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null! ");	  throw    new    IllegalArgumentException(   "TarEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  ';'  expected	92	None	replace
536	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarEntry  is  null. ");  [CE]  <identifier>  expected  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarEntry  is  null. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	67	None	replace
537	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextRecordEOF();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextRecordEOF();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextRecordEOF();	  return(TarArchiveEntry)getNextHitEOF();    	non-compiled	[CE]  ';'  expected	24	None	replace
538	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  hasHitEOF);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  hasHitEOF);	  new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  not  a  statement	74	None	replace
539	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  hasHitEOF. ");  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  hasHitEOF. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  hasHitEOF. ");	  new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  ';'  expected	74	None	replace
540	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  this);  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  this);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  this);	  new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  not  a  statement	74	None	replace
541	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Tar  entry  is  null. "  +  getHitEOF());  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "Tar  entry  is  null. "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "Tar  entry  is  null. "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "   ".equals(getHitEOF()));    	non-compiled	[CE]  not  a  statement	84	None	replace
542	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Tar  entry  is  null. "  +  getName());  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "Tar  entry  is  null. "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "Tar  entry  is  null. "  +  getName());	  throw    new    IllegalArgumentException(   "   ".equals(getHitEOF()));    	non-compiled	[CE]  not  a  statement	84	None	replace
543	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY,  true))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY,  true))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY,  true))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
544	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY,  false))  {  return  null;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY,  false))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY,  false))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))    {    return    null;    }    	non-compiled	[CE]  not  a  statement	82	None	replace
545	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ".   ");  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ".   ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ".   ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  not  a  statement	91	None	replace
546	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ".equals(getHitEOF()));  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ".equals(getHitEOF()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ".equals(getHitEOF()));	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  not  a  statement	91	None	replace
547	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  hasHitEOF);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  hasHitEOF);	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  <identifier>  expected	33	None	replace
548	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getHitEOF());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getHitEOF());	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  <identifier>  expected	33	None	replace
549	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  any  EOF  bounds. ");  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  any  EOF  bounds. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  any  EOF  bounds. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  <identifier>  expected	33	None	replace
550	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds. ",  e);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds. ",  e);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds. ",  e);	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  <identifier>  expected	33	None	replace
551	[BUG]  [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry() "))  {  throw  new  RuntimeException( " ");  }  [CE]  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry() "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip( "TarArchiveEntry.hasNextTarEntry() "))  {  throw  new  RuntimeException( " ");  }	  if(!hasHitEOF)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  	114	None	replace
552	[BUG]  [BUGGY]  allowSkip( "Tar ")  {  throw  new  RuntimeException( " ");  }  [CE]  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip( "Tar ")  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip( "Tar ")  {  throw  new  RuntimeException( " ");  }	  if(!hasHitEOF)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  	114	None	replace
553	[BUG]  [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry()   ")  {  throw  new  RuntimeException( " ");  }  [CE]  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry()   ")  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip( "TarArchiveEntry.hasNextTarEntry()   ")  {  throw  new  RuntimeException( " ");  }	  if(!hasHitEOF)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  	114	None	replace
554	[BUG]  [BUGGY]  Exception:  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [CE]  ';'  expected  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Exception:  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Exception:  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");	  throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    java.lang.Exception:    throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    	non-compiled	[CE]  ';'  expected	87	None	replace
555	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOFTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
556	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
557	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null!   "  +  getHitEOF());  [CE]  ';'  expected  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null!   "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null!   "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null!   ");    	non-compiled	[CE]  ';'  expected	70	None	replace
558	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ",  e);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ",  e);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry() ",  e);	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
559	[BUG]  [BUGGY]  return  new  TarArchiveEntry(this,  getNumberOfLinks());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  new  TarArchiveEntry(this,  getNumberOfLinks());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry(this,  getNumberOfLinks());	  return    new    TarArchiveEntry(this,    getHitEOF());    	non-compiled	[CE]  ';'  expected	116	None	replace
560	[BUG]  [BUGGY]  return  new  TarArchiveEntry(this,  getQualifiedName());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  new  TarArchiveEntry(this,  getQualifiedName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry(this,  getQualifiedName());	  return    new    TarArchiveEntry(this,    getHitEOF());    	non-compiled	[CE]  ';'  expected	116	None	replace
561	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.. ");  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.   ");    	non-compiled	[CE]  <identifier>  expected	45	None	replace
562	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  +  this);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  +  this);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  +  this);	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.   ");    	non-compiled	[CE]  <identifier>  expected	45	None	replace
563	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.getName();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.getName();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.getName();	  return(TarArchiveEntry)currEntry;    	non-compiled	[CE]  ';'  expected	55	None	replace
564	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.getHitEOF();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.getHitEOF();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.getHitEOF();	  return(TarArchiveEntry)currEntry;    	non-compiled	[CE]  ';'  expected	55	None	replace
565	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  skip(currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
566	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOFTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  ';'  expected	52	None	replace
567	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry  ==  null)  {  skip(currEntry.getName());  }  [CE]  ';'  expected  [FE]                                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry  ==  null)  {  skip(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry  ==  null)  {  skip(currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  ';'  expected	52	None	replace
568	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  [CE]  ';'  expected  [FE]                                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOFEntry();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  ';'  expected	52	None	replace
569	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFTarEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFTarEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOFTarEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry.getName();    }    	non-compiled	[CE]  ';'  expected	78	None	replace
570	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry.getName();  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry.getName();    }    	non-compiled	[CE]  ';'  expected	78	None	replace
571	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry  ==  null)  {  return  currEntry.getName();  }  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry  ==  null)  {  return  currEntry.getName();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry  ==  null)  {  return  currEntry.getName();  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry.getName();    }    	non-compiled	[CE]  ';'  expected	78	None	replace
572	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.getNextTarEntry().getValue();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.getNextTarEntry().getValue();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.getNextTarEntry().getValue();	  return(TarArchiveEntry)getNextTarEntry().getValue();    	non-compiled	[CE]  ';'  expected	98	None	replace
573	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextTarEntry().getHitEOF();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextTarEntry().getHitEOF();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextTarEntry().getHitEOF();	  return(TarArchiveEntry)getNextTarEntry().getValue();    	non-compiled	[CE]  ';'  expected	98	None	replace
574	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.. ");  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.n   ");    	non-compiled	[CE]  ';'  expected	46	None	replace
575	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  appear  null. ");  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  appear  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  appear  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    does    not    be    null.   ");    	non-compiled	[CE]  ';'  expected	15	None	replace
576	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  appear  to  be  null. ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  appear  to  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  appear  to  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    does    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
577	[BUG]  [BUGGY]  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY_ERROR))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY_ERROR))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY_ERROR))  {  return  null;  }	  ||    hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
578	[BUG]  [BUGGY]  ||  hasHitEOF)  {  return(TarArchiveEntry)getNextTarEntry();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  hasHitEOF)  {  return(TarArchiveEntry)getNextTarEntry();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  hasHitEOF)  {  return(TarArchiveEntry)getNextTarEntry();  }	  ||    hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
579	[BUG]  [BUGGY]  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  null;  }	  ||    hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
580	[BUG]  [BUGGY]  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ERROR))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ERROR))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ERROR))  {  return  null;  }	  ||    hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
581	[BUG]  [BUGGY]  return(TarArchiveEntry)curr.getNextTarEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)curr.getNextTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)curr.getNextTarEntry();	  return(TarArchiveEntry)super.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
582	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getURL());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getURL());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  getURL());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds:   "    +    getName());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
583	[BUG]  [BUGGY]  return(TarArchiveEntry)this.entryOffset.nextEntry();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.entryOffset.nextEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.entryOffset.nextEntry();	  return(TarArchiveEntry)this.nextEntry();    	non-compiled	[CE]  ';'  expected	32	None	replace
584	[BUG]  [BUGGY]  if(hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ");  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. ");  }	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ".);    	non-compiled	[CE]  ';'  expected	13	None	replace
585	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  be  >  0 ");  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  be  >  0 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  be  >  0 ");	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  ';'  expected	101	None	replace
586	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0   "  +  hasHitEOF);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0   "  +  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0   "  +  hasHitEOF);	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  ';'  expected	101	None	replace
587	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNext()  is  null. ");  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNext()  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNext()  is  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNext()    is    null.   ");    	non-compiled	[CE]  ';'  expected	60	None	replace
588	[BUG]  [BUGGY]  allowSkip(true)  {  throw  new  IllegalStateException( "TarArchiveEntry  is  null. ");  }  [CE]  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip(true)  {  throw  new  IllegalStateException( "TarArchiveEntry  is  null. ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip(true)  {  throw  new  IllegalStateException( "TarArchiveEntry  is  null. ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "TarArchiveEntry    is    null.   ");    }    	non-compiled	[CE]  	112	None	replace
589	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  +  getHitEOF());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.       "    +    getHitEOF());    	non-compiled	[CE]  not  a  statement	89	None	replace
590	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Cannot  access  the  TarArchiveEntry, ");  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Cannot  access  the  TarArchiveEntry, ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.   "  + "Cannot  access  the  TarArchiveEntry, ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.       "    +   "Cannot    access    the    TarArchiveEntry.   ");    	non-compiled	[CE]  ';'  expected	118	None	replace
591	[BUG]  [BUGGY]  if(!hasHitEOF  ||  hasHitEOF)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  ||  hasHitEOF)  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  ||  hasHitEOF)  {  return  null;  }	  if(!hasHitEOF    &&    hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
592	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry!=  null)  {  return  null;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  currEntry!=  null)  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  currEntry!=  null)  {  return  null;  }	  if(!hasHitEOF    &&    hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	127	None	replace
593	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.getNextOriginalTarEntry();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.getNextOriginalTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.getNextOriginalTarEntry();	  return(TarArchiveEntry)getNextOriginalTarEntry();    	non-compiled	[CE]  ';'  expected	97	None	replace
594	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  hasHitEOF);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds:   ");    	non-compiled	[CE]  ';'  expected	34	None	replace
595	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +HitEOF);  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +HitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  +HitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds:   ");    	non-compiled	[CE]  ';'  expected	34	None	replace
596	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ".equals(getName()));  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ".equals(getName()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ".equals(getName()));	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	57	None	replace
597	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.getNextTarEntry(0);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.getNextTarEntry(0);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.getNextTarEntry(0);	  return(TarArchiveEntry)currEntry.getNextTarEntry();    	non-compiled	[CE]  ';'  expected	96	None	replace
598	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  +  getName());  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.       "    +    getName());    	non-compiled	[CE]  not  a  statement	90	None	replace
599	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  not  be  null. ");  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNext()    should    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	130	None	replace
600	[BUG]  [BUGGY]  return(TarArchiveEntry)this.nextEntry;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.nextEntry;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.nextEntry;	  return(TarArchiveEntry)this.currEntry;    	non-compiled	[CE]  ';'  expected	29	None	replace
601	[BUG]  [BUGGY]  return(TarArchiveEntry)this.entry;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.entry;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.entry;	  return(TarArchiveEntry)this.currEntry;    	non-compiled	[CE]  ';'  expected	29	None	replace
602	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  this;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  return  this;  }	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    return    null;    }    	non-compiled	[CE]  ';'  expected	79	None	replace
603	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  return  null;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    return    null;    }    	non-compiled	[CE]  ';'  expected	79	None	replace
604	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarString.class))  {  return  null;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarString.class))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarString.class))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    return    null;    }    	non-compiled	[CE]  ';'  expected	79	None	replace
605	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): "  +  getName());  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(): "  +  getName());	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  not  a  statement	94	None	replace
606	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextName() ");  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextName() ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextName() ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  not  a  statement	94	None	replace
607	[BUG]  [BUGGY]  return(ZipArchiveEntry)currEntry.getNext();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(ZipArchiveEntry)currEntry.getNext();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(ZipArchiveEntry)currEntry.getNext();	  return(TarArchiveEntry)encoding.getNext();    	non-compiled	[CE]  ';'  expected	115	None	replace
608	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    return    null;    }    	non-compiled	[CE]  ';'  expected	81	None	replace
609	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  this;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  return  this;  }	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    return    null;    }    	non-compiled	[CE]  ';'  expected	81	None	replace
610	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again: "  +  getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again: "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again: "  +  getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.    Try    again.   ");    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
611	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again? ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again? ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again? ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.    Try    again.   ");    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
612	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.    Try    again.   ");    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
613	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarName()  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarName()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarName()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextName()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
614	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextName()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
615	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextName()  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextName()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNextName()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextName()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
616	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextType()  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextType()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextType()  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextName()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
617	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null ".);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null ".);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null ".);	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	38	None	replace
618	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null! ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null! ");	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
619	[BUG]  [BUGGY]  new  IllegalArgumentException(TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");  [CE]  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException(TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException(TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  	38	None	replace
620	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName().equals(getName()));  [CE]  unclosed  string  literal  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName().equals(getName()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName().equals(getName()));	  throw    new    IllegalArgumentException(   "   ".equals(getName()));    	non-compiled	[CE]  unclosed  string  literal	43	None	replace
621	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarName().equals(getName()));  [CE]  unclosed  string  literal  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarName().equals(getName()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarName().equals(getName()));	  throw    new    IllegalArgumentException(   "   ".equals(getName()));    	non-compiled	[CE]  unclosed  string  literal	43	None	replace
622	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  access  this  entry. ");  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  access  this  entry. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  access  this  entry. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.   "    +   "Can    not    access    this    entry.   ");    	non-compiled	[CE]  not  a  statement	102	None	replace
623	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()  + ", ",  hasHitEOF);  [CE]  unclosed  string  literal  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()  + ", ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()  + ", ",  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ",    hasHitEOF);    	non-compiled	[CE]  unclosed  string  literal	20	None	replace
624	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarEntry  is  null. ");  [CE]  illegal  start  of  expression  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarEntry  is  null. ");	  new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
625	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getHitEOF());  [CE]  illegal  start  of  expression  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getHitEOF());	  new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
626	[BUG]  [BUGGY]  return  getNextEOFEntry();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  getNextEOFEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  getNextEOFEntry();	  return    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
627	[BUG]  [BUGGY]  return  getNextEOF();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  getNextEOF();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  getNextEOF();	  return    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
628	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Please  check  that  this  is  normalized. ");  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Please  check  that  this  is  normalized. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Please  check  that  this  is  normalized. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	12	None	replace
629	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOF();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOF();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOF();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
630	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextSkipEntry();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextSkipEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextSkipEntry();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
631	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null ".);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null ".);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null ".);	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	17	None	replace
632	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(getHitEOF()));  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(getHitEOF()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(getHitEOF()));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
633	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(getString()));  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(getString()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(getString()));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
634	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(getName()));  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(getName()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(getName()));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
635	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null ");  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
636	[BUG]  [BUGGY]  _throw  new  IllegalArgumentException( "TarEntry  is  null. ");  [CE]  not  a  statement  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  _throw  new  IllegalArgumentException( "TarEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	_throw  new  IllegalArgumentException( "TarEntry  is  null. ");	  _throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  not  a  statement	105	None	replace
637	[BUG]  [BUGGY]  _throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF()));  [CE]  not  a  statement  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  _throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	_throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF()));	  _throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  not  a  statement	105	None	replace
638	[BUG]  [BUGGY]  _throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getName()));  [CE]  not  a  statement  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  _throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getName()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	_throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getName()));	  _throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  not  a  statement	105	None	replace
639	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  be  >  0 ");  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  be  >  0 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  be  >  0 ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
640	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null ".   ");  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null ".   ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  not  be  null ".   ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	93	None	replace
641	[BUG]  [BUGGY]  return(TarArchiveEntry)currentEntry.getValue();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currentEntry.getValue();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currentEntry.getValue();	  return(TarArchiveEntry)in.getValue();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
642	[BUG]  [BUGGY]  Annotation  <  T>  currEntry  =  getNextTarEntry().getValue();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Annotation  <  T>  currEntry  =  getNextTarEntry().getValue();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Annotation  <  T>  currEntry  =  getNextTarEntry().getValue();	  Annotation    <    T>    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
643	[BUG]  [BUGGY]  Annotation  <  T>  currEntry  =  getNextSkipEntry();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Annotation  <  T>  currEntry  =  getNextSkipEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Annotation  <  T>  currEntry  =  getNextSkipEntry();	  Annotation    <    T>    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
644	[BUG]  [BUGGY]  Annotation  <  T>  currEntry  =  getNextEOFEntry();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Annotation  <  T>  currEntry  =  getNextEOFEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Annotation  <  T>  currEntry  =  getNextEOFEntry();	  Annotation    <    T>    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
645	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextEOF();  if(currEntry!=  null)  {  return  currEntry;  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
646	[BUG]  [BUGGY]  if(!hasHitEOF)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
647	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
648	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1 ");  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    -1   ");    	non-compiled	[CE]  not  a  statement	100	None	replace
649	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  be  >  -1 ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  be  >  -1 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  must  be  >  -1 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    -1   ");    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
650	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry  ==  null)  {  skip(-1);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry  ==  null)  {  skip(-1);  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOFEntry();  if(currEntry  ==  null)  {  skip(-1);  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(-1);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
651	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFTarEntry();  if(currEntry!=  null)  {  skip(-1);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEOFTarEntry();  if(currEntry!=  null)  {  skip(-1);  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextEOFTarEntry();  if(currEntry!=  null)  {  skip(-1);  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(-1);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
652	[BUG]  [BUGGY]  this.currEntry.setHitEOF(-1);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  this.currEntry.setHitEOF(-1);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	this.currEntry.setHitEOF(-1);	  this.currEntry.setHitEOF(hasHitEOF);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
653	[BUG]  [BUGGY]  this.currEntry.setHitEOF(0);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  this.currEntry.setHitEOF(0);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	this.currEntry.setHitEOF(0);	  this.currEntry.setHitEOF(hasHitEOF);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
654	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: "  +  getHitEOF());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    does    not    exist.   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
655	[BUG]  [BUGGY]  if(!hasHitEOF  &&  TarArchiveEntry.getNextTarEntry()!=  null)  {  return  TarArchiveEntry.getNextTarEntry();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  TarArchiveEntry.getNextTarEntry()!=  null)  {  return  TarArchiveEntry.getNextTarEntry();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  TarArchiveEntry.getNextTarEntry()!=  null)  {  return  TarArchiveEntry.getNextTarEntry();  }	  if(!hasHitEOF)    {    return    TarArchiveEntry.getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
656	[BUG]  [BUGGY]  if(hasHitEOF)  {  return  TarArchiveEntry.getNextTarEntry();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF)  {  return  TarArchiveEntry.getNextTarEntry();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF)  {  return  TarArchiveEntry.getNextTarEntry();  }	  if(!hasHitEOF)    {    return    TarArchiveEntry.getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
657	[BUG]  [BUGGY]  if(!hasHitEOF  &&  TarArchiveEntry.getNextTarEntry()  ==  null)  {  return  TarArchiveEntry.getNextTarEntry();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  TarArchiveEntry.getNextTarEntry()  ==  null)  {  return  TarArchiveEntry.getNextTarEntry();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  TarArchiveEntry.getNextTarEntry()  ==  null)  {  return  TarArchiveEntry.getNextTarEntry();  }	  if(!hasHitEOF)    {    return    TarArchiveEntry.getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
658	[BUG]  [BUGGY]  if(!hasHitEOF  &&  TarArchiveEntry.getNextTarEntry()  >=  null)  {  return  TarArchiveEntry.getNextTarEntry();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  TarArchiveEntry.getNextTarEntry()  >=  null)  {  return  TarArchiveEntry.getNextTarEntry();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  TarArchiveEntry.getNextTarEntry()  >=  null)  {  return  TarArchiveEntry.getNextTarEntry();  }	  if(!hasHitEOF)    {    return    TarArchiveEntry.getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
659	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarName()  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarName()  must  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarName()  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextName()    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
660	[BUG]  [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry.getNextTarEntry()  is  null. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry.getNextTarEntry()  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( "TarArchiveEntry.getNextTarEntry()  is  null. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
661	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(getHitEOF()));  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalStateException( " ".equals(getHitEOF()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( " ".equals(getHitEOF()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
662	[BUG]  [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
663	[BUG]  [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null ");  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
664	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  this;  }	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
665	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
666	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  getName());  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.   "  +  getName());	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  not  a  statement	73	None	replace
667	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.getNextEscape();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.getNextEscape();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.getNextEscape();	  return(TarArchiveEntry)getNextEscape();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
668	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()  + ", ");  [CE]  unclosed  string  literal  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()  + ", ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()  + ", ");	  new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  unclosed  string  literal	95	None	replace
669	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  have  a  null  entry. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  have  a  null  entry. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  have  a  null  entry. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    does    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
670	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNext() ");  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNext() ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNext() ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
671	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextFile() ");  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextFile() ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextFile() ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
672	[BUG]  [BUGGY]  read()  {  return  this;  }  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  read()  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	read()  {  return  this;  }	  if(hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
673	[BUG]  [BUGGY]  aughtExceptionHandler(8)  {  return  this;  }  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandler(8)  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandler(8)  {  return  this;  }	  if(hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
674	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandler.handleMoreGuaranteed();	  if(hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
675	[BUG]  [BUGGY]  aughtException.printStackTrace();  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtException.printStackTrace();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtException.printStackTrace();	  if(hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
676	[BUG]  [BUGGY]  aughtExceptionHandler(this,  TarEncoding.UTF8);  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtExceptionHandler(this,  TarEncoding.UTF8);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtExceptionHandler(this,  TarEncoding.UTF8);	  if(hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
677	[BUG]  [BUGGY]  pendingRecord();  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  pendingRecord();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	pendingRecord();	  if(hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
678	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again? ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again? ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again? ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.    Try    again.   ");    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
679	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again, ");  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again, ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again, ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.    Try    again.   ");    	non-compiled	[CE]  ';'  expected	120	None	replace
680	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  skip(currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
681	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  skip(Long.MAX_VALUE);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  skip(Long.MAX_VALUE);  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  skip(Long.MAX_VALUE);  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
682	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  return  this;  }	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
683	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()! ");  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()! ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  not  a  statement	94	None	replace
684	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY,  this))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY,  this))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY,  this))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
685	[BUG]  [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry() ")||!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry() ")||!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip( "TarArchiveEntry.hasNextTarEntry() ")||!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	111	None	replace
686	[BUG]  [BUGGY]  pendingTarEntry()  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  pendingTarEntry()  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	pendingTarEntry()  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	111	None	replace
687	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextBinaryRecordEntry();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextBinaryRecordEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextBinaryRecordEntry();	  return(TarArchiveEntry)getNextRecordEntry();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
688	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  +  getPadding());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  +  getPadding());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  +  getPadding());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.       "    +    getHitEOF());    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
689	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry  cannot  be  null.  Please  check  that  the  hasHitEOF. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry  cannot  be  null.  Please  check  that  the  hasHitEOF. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry  cannot  be  null.  Please  check  that  the  hasHitEOF. ");	  throw    new    IllegalArgumentException(   "TarEntry    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
690	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry  cannot  be  null.  Try  again! ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry  cannot  be  null.  Try  again! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry  cannot  be  null.  Try  again! ");	  throw    new    IllegalArgumentException(   "TarEntry    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
691	[BUG]  [BUGGY]  ||  hasHitEOF)  {  return  new  TarArchiveEntry();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  hasHitEOF)  {  return  new  TarArchiveEntry();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  hasHitEOF)  {  return  new  TarArchiveEntry();  }	  ||    hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
692	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  TarArchiveEntry  is  null. "  +  getHitEOF());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "The  TarArchiveEntry  is  null. "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "The  TarArchiveEntry  is  null. "  +  getHitEOF());	  throw    new    IllegalArgumentException(   "   ".equals(getHitEOF()));    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
693	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  TarArchiveEntry  is  null. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "The  TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "The  TarArchiveEntry  is  null. ");	  throw    new    IllegalArgumentException(   "   ".equals(getHitEOF()));    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
694	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  not  be  null ".);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  not  be  null ".);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  should  not  be  null ".);	  throw    new    IllegalArgumentException(   "TarEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	40	None	replace
695	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().process(new  TarArchiveEntry(this));  [CE]  illegal  start  of  expression  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().process(new  TarArchiveEntry(this));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Thread.currentThread().getContextClassLoader().process(new  TarArchiveEntry(this));	  if(hasHitEOF)    {    throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
696	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [CE]  illegal  start  of  expression  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Thread.currentThread().getContextClassLoader().reset();	  if(hasHitEOF)    {    throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
697	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds!  Please  check  that  the  entry  is  empty. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds!  Please  check  that  the  entry  is  empty. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds!  Please  check  that  the  entry  is  empty. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.    Please    check    that    the    entry    is    empty.   ");    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
698	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }  else  {  throw  new  IllegalStateException( " ");  }	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
699	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
700	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  must  be  >  0 ");  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  must  be  >  0 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  must  be  >  0 ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
701	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextEOF();  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextEOF();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	final  TarArchiveEntry  currEntry  =  getNextEOF();	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  ';'  expected	49	None	replace
702	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1  or  1 ");  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1  or  1 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  -1  or  1 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    -1   ");    	non-compiled	[CE]  ';'  expected	100	None	replace
703	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null ",  hasHitEOF);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null ",  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  ';'  expected	92	None	replace
704	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null ".equals(getHitEOF()));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null ".equals(getHitEOF()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNextTarEntry()  is  null ".equals(getHitEOF()));	  throw    new    IllegalArgumentException(   "TarEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  ';'  expected	92	None	replace
705	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  has  been  added. ");  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  has  been  added. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  entry  has  been  added. ");	  new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  ';'  expected	74	None	replace
706	[BUG]  [BUGGY]  _throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getString()));  [CE]  not  a  statement  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  _throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getString()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	_throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getString()));	  _throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  not  a  statement	105	None	replace
707	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  implemented: ");  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  implemented: ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  implemented: ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
708	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  implemented  here: ");  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  implemented  here: ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  implemented  here: ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
709	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( " ")	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
710	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  implemented  by ");  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  implemented  by ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  implemented  by ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
711	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextTarEntry().getImplicitReturn();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextTarEntry().getImplicitReturn();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextTarEntry().getImplicitReturn();	  return(TarArchiveEntry)getNextTarEntry().getValue();    	non-compiled	[CE]  ';'  expected	98	None	replace
712	[BUG]  [BUGGY]  if(!hasHitEOF)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
713	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(getNextTarEntry()!=  null)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(getNextTarEntry()!=  null)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  skip(currEntry.getName());  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
714	[BUG]  [BUGGY]  allowSkip(TarArchiveEntry.NULL_VALUE);  [CE]  illegal  start  of  expression  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip(TarArchiveEntry.NULL_VALUE);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip(TarArchiveEntry.NULL_VALUE);	  if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
715	[BUG]  [BUGGY]  allowSkip(TarArchiveEntry.DEFAULT_TAR_ENTRY);  [CE]  illegal  start  of  expression  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip(TarArchiveEntry.DEFAULT_TAR_ENTRY);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip(TarArchiveEntry.DEFAULT_TAR_ENTRY);	  if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
716	[BUG]  [BUGGY]  if(hasHitEOF  &&  hasHitEOF)  {  return  this;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  &&  hasHitEOF)  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  &&  hasHitEOF)  {  return  this;  }	  if(!hasHitEOF    &&    hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	127	None	replace
717	[BUG]  [BUGGY]  allowSilent( "TarArchiveEntry  is  null. ");  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSilent( "TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSilent( "TarArchiveEntry  is  null. ");	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "TarArchiveEntry    is    null.   ");    }    	non-compiled	[CE]  ';'  expected	112	None	replace
718	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  be  null. ");  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    be    null.   ");    	non-compiled	[CE]  ';'  expected	59	None	replace
719	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextElement();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextElement();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextElement();	  return(TarArchiveEntry)getNextBinaryTarEntry();    	non-compiled	[CE]  ';'  expected	123	None	replace
720	[BUG]  [BUGGY]  return(TarArchiveEntry)encoding.getValue();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)encoding.getValue();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)encoding.getValue();	  return(TarArchiveEntry)encoding.getNext();    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
721	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again: ");  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again: ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again: ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.    Try    again.   ");    	non-compiled	[CE]  ';'  expected	108	None	replace
722	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(getNextTarEntry()!=  null)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(getNextTarEntry()!=  null)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
723	[BUG]  [BUGGY]  if(currEntry!=  null)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(currEntry!=  null)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(currEntry!=  null)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
724	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(getNextTarEntry()  ==  null)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(getNextTarEntry()  ==  null)  {  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
725	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  + ". ");  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  + ". ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null. "  + ". ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ".);    	non-compiled	[CE]  ';'  expected	13	None	replace
726	[BUG]  [BUGGY]  return(TarArchiveEntry)this.headerOffset;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.headerOffset;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.headerOffset;	  return(TarArchiveEntry)this;    	non-compiled	[CE]  ';'  expected	30	None	replace
727	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()  : "+getMessage());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()  : "+getMessage());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()  : "+getMessage());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry():   ");    	non-compiled	[CE]  ';'  expected	22	None	replace
728	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextName(): ");  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextName(): ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextName(): ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry():   ");    	non-compiled	[CE]  not  a  statement	22	None	replace
729	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null ".equals(getHitEOF()));  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null ".equals(getHitEOF()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  is  null ".equals(getHitEOF()));	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNext()    is    null.   ");    	non-compiled	[CE]  not  a  statement	60	None	replace
730	[BUG]  [BUGGY]  return(TarArchiveEntry)getNext();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNext();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNext();	  return(TarArchiveEntry)getNextHitEOF();    	non-compiled	[CE]  not  a  statement	24	None	replace
731	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ");  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ");	  new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  ';'  expected	11	None	replace
732	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Please  report  EOF: ");  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Please  report  EOF: ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Please  report  EOF: ");	  new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  ';'  expected	11	None	replace
733	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    return    null;    }    	non-compiled	[CE]  not  a  statement	81	None	replace
734	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  return  this;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  return  this;  }	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    return    null;    }    	non-compiled	[CE]  not  a  statement	81	None	replace
735	[BUG]  [BUGGY]  return(TarArchiveEntry)super.getNextRecordEntry();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)super.getNextRecordEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)super.getNextRecordEntry();	  return(TarArchiveEntry)super.getNextTarEntry();    	non-compiled	[CE]  not  a  statement	56	None	replace
736	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  >  0 ");  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  >  0 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  be  >  0 ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ");    	non-compiled	[CE]  not  a  statement	99	None	replace
737	[BUG]  [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  entry  is  null. ");  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  entry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( "TarArchiveEntry  entry  is  null. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  not  a  statement	44	None	replace
738	[BUG]  [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  is  not  implemented  by ");  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  is  not  implemented  by ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( "TarArchiveEntry  is  not  implemented  by ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  not  a  statement	44	None	replace
739	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  return  null;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  return  null;  }	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    null;    }    	non-compiled	[CE]  not  a  statement	128	None	replace
740	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.  Please  check  that  your  curr  entry  is  null. ");  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.  Please  check  that  your  curr  entry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.  Please  check  that  your  curr  entry  is  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    a    valid    entry    entry.   ");    	non-compiled	[CE]  not  a  statement	106	None	replace
741	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.   "  + "Cannot  access  the  TarArchiveEntry. ");  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.   "  + "Cannot  access  the  TarArchiveEntry. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  a  valid  entry  entry.   "  + "Cannot  access  the  TarArchiveEntry. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    a    valid    entry    entry.   ");    	non-compiled	[CE]  not  a  statement	106	None	replace
742	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  not  a  statement  [FE]                                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry  ==  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry    ==    null)    {    return    currEntry;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
743	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextBooleanTarEntry();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextBooleanTarEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextBooleanTarEntry();	  return(TarArchiveEntry)getNextOriginalTarEntry();    	non-compiled	[CE]  not  a  statement	97	None	replace
744	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".);	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
745	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNext()  must  not  be  null. ");  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNext()  must  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNext()  must  not  be  null. ");	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	17	None	replace
746	[BUG]  [BUGGY]  return(TarArchiveEntry)encoding;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)encoding;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)encoding;	  return(TarArchiveEntry)entry;    	non-compiled	[CE]  not  a  statement	86	None	replace
747	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  is  null. ");  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextName()  is  null. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	57	None	replace
748	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  is  null. ");  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  is  null. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	57	None	replace
749	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  must  not  be  null. ");  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  must  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  must  not  be  null. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
750	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.n "  + "Cannot  access  the  TarArchiveEntry.n ");  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.n "  + "Cannot  access  the  TarArchiveEntry.n ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.n "  + "Cannot  access  the  TarArchiveEntry.n ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.       "    +   "Cannot    access    the    TarArchiveEntry.   ");    	non-compiled	[CE]  not  a  statement	118	None	replace
751	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: "  + "TarArchiveEntry.getNextName());  [CE]  unclosed  string  literal  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: "  + "TarArchiveEntry.getNextName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  does  not  exist: "  + "TarArchiveEntry.getNextName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    does    not    exist.   ");    	non-compiled	[CE]  unclosed  string  literal	5	None	replace
752	[BUG]  [BUGGY]  if(getHitEOF()  >  0)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [CE]  not  a  statement  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(getHitEOF()  >  0)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(getHitEOF()  >  0)  {  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  }	  throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    java.lang.Exception:    throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    	non-compiled	[CE]  not  a  statement	87	None	replace
753	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  skip(-1);  }  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  skip(-1);  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  skip(-1);  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    skip(-1);    }    	non-compiled	[CE]  not  a  statement	77	None	replace
754	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0. ",  hasHitEOF);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0. ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  >  0. ",  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    be    >    0   ",    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
755	[BUG]  [BUGGY]  return(TarArchiveEntry)this.tarEntry.nextEntry();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)this.tarEntry.nextEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)this.tarEntry.nextEntry();	  return(TarArchiveEntry)this.nextEntry();    	non-compiled	[CE]  not  a  statement	32	None	replace
756	[BUG]  [BUGGY]  return(TarArchiveEntry)new  TarArchiveEntry( "TarArchiveEntry  is  null. ");  [CE]  illegal  start  of  expression  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)new  TarArchiveEntry( "TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)new  TarArchiveEntry( "TarArchiveEntry  is  null. ");	  return    new    TarArchiveEntry(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
757	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNext()  must  not  be  null. ");  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarEntry.getNext()  must  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarEntry.getNext()  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "TarEntry.getNextTarEntry()    must    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	18	None	replace
758	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  return  null;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  return  null;  }	  if(hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  not  a  statement	61	None	replace
759	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET_ENABLED))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET_ENABLED))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET_ENABLED))  {  return  null;  }	  if(hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
760	[BUG]  [BUGGY]  this.hasHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  this.hasHitEOF  =  hasHitEOF;  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	this.hasHitEOF  =  hasHitEOF;	  if(hasHitEOF)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
761	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  this;  }	  if(!hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
762	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  return  this;  }	  if(!hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
763	[BUG]  [BUGGY]  if(hasHitEOF  ||  hasHitEOF)  {  return  this;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  ||  hasHitEOF)  {  return  this;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  ||  hasHitEOF)  {  return  this;  }	  if(!hasHitEOF)    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
764	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF()));  [CE]  illegal  start  of  expression  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF()));	  new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
765	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getName()));  [CE]  not  a  statement  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getName()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getName()));	  new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  not  a  statement	68	None	replace
766	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getString()));  [CE]  not  a  statement  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getString()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getString()));	  new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  not  a  statement	68	None	replace
767	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF));  [CE]  not  a  statement  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF));	  new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  not  a  statement	68	None	replace
768	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  not  be  null ".);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  not  be  null ".);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNext()  should  not  be  null ".);	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNext()    should    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	130	None	replace
769	[BUG]  [BUGGY]  return(TarArchiveEntry)in.clone();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)in.clone();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)in.clone();	  return(TarArchiveEntry)in.getValue();    	non-compiled	[CE]  not  a  statement	107	None	replace
770	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".  + ". ");  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".  + ". ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".  + ". ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	12	None	replace
771	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".  + ", ");  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".  + ", ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null ".  + ", ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  not  a  statement	12	None	replace
772	[BUG]  [BUGGY]  return  getNextHitEOF();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  getNextHitEOF();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  getNextHitEOF();	  return    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
773	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()! ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry()! ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry().   ");    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
774	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(), ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(), ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextTarEntry(), ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry().   ");    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
775	[BUG]  [BUGGY]  return  new  TarArchiveEntry(this,  getNumberOfHits());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  new  TarArchiveEntry(this,  getNumberOfHits());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry(this,  getNumberOfHits());	  return    new    TarArchiveEntry(this,    getHitEOF());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
776	[BUG]  [BUGGY]  return  new  TarArchiveEntry(this,  getTar());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return  new  TarArchiveEntry(this,  getTar());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return  new  TarArchiveEntry(this,  getTar());	  return    new    TarArchiveEntry(this,    getHitEOF());    	non-compiled	[CE]  not  a  statement	116	None	replace
777	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  >  0 ");  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  >  0 ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  >  0 ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    must    not    be    >    0   ");    	non-compiled	[CE]  not  a  statement	3	None	replace
778	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".);  [CE]  <identifier>  expected  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".);	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	67	None	replace
779	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ",  e);  [CE]  <identifier>  expected  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ",  e);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ",  e);	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	67	None	replace
780	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getString()));  [CE]  <identifier>  expected  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getString()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getString()));	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  <identifier>  expected	67	None	replace
781	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null,  Try  again! ");  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null,  Try  again! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null,  Try  again! ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.    Try    again!   ");    	non-compiled	[CE]  not  a  statement	110	None	replace
782	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ".);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ".);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  cannot  be  null.  Try  again! ".);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    cannot    be    null.    Try    again!   ");    	non-compiled	[CE]  <identifier>  expected	110	None	replace
783	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextURLEntry();  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextURLEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextURLEntry();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  not  a  statement	48	None	replace
784	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds, ");  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds, ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds, ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.n   ");    	non-compiled	[CE]  not  a  statement	35	None	replace
785	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [CE]  not  a  statement  [FE]        java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwable  t  =  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");	  throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.       ");    }    	non-compiled	[CE]  not  a  statement	131	None	replace
786	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchive  entry  is  null. ");  [CE]  not  a  statement  [FE]          java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchive  entry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchive  entry  is  null. ");	  throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.       ");    }    	non-compiled	[CE]  not  a  statement	131	None	replace
787	[BUG]  [BUGGY]  Annotation  <  T>  currEntry  =  getNextHitEOF();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Annotation  <  T>  currEntry  =  getNextHitEOF();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Annotation  <  T>  currEntry  =  getNextHitEOF();	  Annotation    <    T>    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  not  a  statement	64	None	replace
788	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
789	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  should  not  be  null. ");  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  should  not  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextPadding()  should  not  be  null. ");	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  not  a  statement	38	None	replace
790	[BUG]  [BUGGY]  ||  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [CE]  illegal  start  of  expression  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  ||  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	||  new  IllegalArgumentException( "TarArchiveEntry  is  null. ");	  throw    new    IllegalArgumentException(       "TarArchiveEntry    is    null.       ");    new    IllegalArgumentException(   "TarArchiveEntry    is    null.       ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
791	[BUG]  [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null.  Try  again. ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null.  Try  again. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalStateException( "TarArchiveEntry  cannot  be  null.  Try  again. ");	  throw    new    IllegalStateException(   "TarArchiveEntry    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
792	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null ".);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null ".);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  cannot  be  null ".);	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
793	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  null. ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  must  be  null. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
794	[BUG]  [BUGGY]  this.currEntry.setHitEOF(true);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  this.currEntry.setHitEOF(true);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	this.currEntry.setHitEOF(true);	  this.currEntry.setHitEOF(hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
795	[BUG]  [BUGGY]  this.currEntry.setHitEOF(this.hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  this.currEntry.setHitEOF(this.hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	this.currEntry.setHitEOF(this.hasHitEOF);	  this.currEntry.setHitEOF(hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
796	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null! ".equals(getHitEOF()));  [CE]  illegal  start  of  type  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null! ".equals(getHitEOF()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null! ".equals(getHitEOF()));	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null!   ");    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
797	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  return  currEntry.getName();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  return  currEntry.getName();  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  return  currEntry.getName();  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry.getName();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
798	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  + "HitEOF  for  path: ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  + "HitEOF  for  path: ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  + "HitEOF  for  path: ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds:   ");    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
799	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  + "Cannot  access  the  TarArchiveEntry. ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  + "Cannot  access  the  TarArchiveEntry. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  + "Cannot  access  the  TarArchiveEntry. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds:   ");    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
800	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  + "Cannot  access  the  TarArchiveEntry  property. ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  + "Cannot  access  the  TarArchiveEntry  property. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds: "  + "Cannot  access  the  TarArchiveEntry  property. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds:   ");    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
801	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ",  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ",  hasHitEOF);	  new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
802	[BUG]  [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry() "))  throw  new  RuntimeException( " ");  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry() "))  throw  new  RuntimeException( " ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip( "TarArchiveEntry.hasNextTarEntry() "))  throw  new  RuntimeException( " ");	  if(!hasHitEOF)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
803	[BUG]  [BUGGY]  aughtException( "TarArchiveEntry.getNextTarEntry()  is  null. ");  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  aughtException( "TarArchiveEntry.getNextTarEntry()  is  null. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	aughtException( "TarArchiveEntry.getNextTarEntry()  is  null. ");	  if(!hasHitEOF)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
804	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
805	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  return  null;  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  return  null;  }	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
806	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "This  is  a  bug. ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "This  is  a  bug. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "This  is  a  bug. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.   ");    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
807	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Cannot  access  this  entry. ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Cannot  access  this  entry. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throwables.throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Cannot  access  this  entry. ");	  Throwables.throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.   ");    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
808	[BUG]  [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextName() ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextName() ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry.getNextName() ");	  new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.getNextTarEntry()   ");    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
809	[BUG]  [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry() ")||!hasHitEOF)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry() ")||!hasHitEOF)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip( "TarArchiveEntry.hasNextTarEntry() ")||!hasHitEOF)  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
810	[BUG]  [BUGGY]  pendingTar()  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  pendingTar()  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	pendingTar()  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
811	[BUG]  [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry() ")||  hasHitEOF)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  allowSkip( "TarArchiveEntry.hasNextTarEntry() ")||  hasHitEOF)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	allowSkip( "TarArchiveEntry.hasNextTarEntry() ")||  hasHitEOF)  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
812	[BUG]  [BUGGY]  pendingTarEntry()  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  pendingTarEntry()  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	pendingTarEntry()  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
813	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  get  next  entry.. ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  get  next  entry.. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  get  next  entry.. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.       "    +   "Can    not    get    next    entry.   ");    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
814	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  get  next  entry.  Please  check  that  the  hasHitEOF. ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  get  next  entry.  Please  check  that  the  hasHitEOF. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Can  not  get  next  entry.  Please  check  that  the  hasHitEOF. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.       "    +   "Can    not    get    next    entry.   ");    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
815	[BUG]  [BUGGY]  return(TarArchiveEntry)sourceFile.getNextHitEOF();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)sourceFile.getNextHitEOF();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)sourceFile.getNextHitEOF();	  return(TarArchiveEntry)sourceFile.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
816	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null ".);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null ".);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  should  not  be  null ".);	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
817	[BUG]  [BUGGY]  return(TarArchiveEntry)getNextOfFileEntry();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)getNextOfFileEntry();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)getNextOfFileEntry();	  return(TarArchiveEntry)getNextFileEntry();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
818	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ".equals(getHitEOF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ".equals(getHitEOF));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry.getNextTarEntry()  is  null ".equals(getHitEOF));	  Throw    new    IllegalArgumentException(   "TarArchiveEntry.getNextTarEntry()    is    null.   ");    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
819	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Cannot  access  the  TarArchive  entry.  Try  again. ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Cannot  access  the  TarArchive  entry.  Try  again. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  + "Cannot  access  the  TarArchive  entry.  Try  again. ");	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.       "    +   "Cannot    access    the    TarArchive    entry.   ");    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
820	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  +  this.getName());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  +  this.getName());  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  not  a  valid  TarArchiveEntry. "  +  this.getName());	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    not    a    valid    TarArchiveEntry.       "    +    getName());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
821	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getName(),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getName(),  hasHitEOF);  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	throw  new  IllegalArgumentException( "TarArchiveEntry  is  null.   "  +  getName(),  hasHitEOF);	  throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.       "    +    getName());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
822	[BUG]  [BUGGY]  return(TarArchiveEntry)currEntry.encodeBase64();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  return(TarArchiveEntry)currEntry.encodeBase64();  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	return(TarArchiveEntry)currEntry.encodeBase64();	  return(TarArchiveEntry)currEntry;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
823	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  hasHitEOF. ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  hasHitEOF. ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Please  check  that  the  hasHitEOF. ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
824	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again! ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again! ");  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  does  not  have  EOF  bounds.  Try  again! ");	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    does    not    have    EOF    bounds.   ");    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
825	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF()));  [CE]  illegal  start  of  type  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getHitEOF()));	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
826	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getName()));  [CE]  illegal  start  of  type  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getName()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getName()));	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
827	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getString()));  [CE]  illegal  start  of  type  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {      [BUGGY]  Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getString()));  [BUGGY]      }  if  (currEntry  !=  null)  {  skip(Long.MAX_VALUE);  skipRecordPadding();  }  [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  IOException  ioe  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	227	227	1	replace	Throw  new  IllegalArgumentException( "TarArchiveEntry  is  null ".equals(getString()));	  Throw    new    IllegalArgumentException(   "TarArchiveEntry    is    null.   ");    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
