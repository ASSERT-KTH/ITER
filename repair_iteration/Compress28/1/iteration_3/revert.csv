projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnull;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnthis;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrycannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry()");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)null;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustnotbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotexist.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull.");thrownewIllegalArgumentException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull.");ThrownewIllegalArgumentException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull.");newIllegalArgumentException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull.");IllegalArgumentException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrycannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrycannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrycannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrycannotbenull.".);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()cannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNextTarEntry()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry()");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry()",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry().");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry():");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextHitEOF();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextRecordEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextEntry().getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextFileEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextEscape();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.currEntry;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returngetNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.nextEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.n");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldn'tbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNextTarEntry()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextName()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("".equals(getName()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.n");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry==null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)super.getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNext()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||hasHitEOF){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Annotation<T>currEntry=getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandler.throwAsIOException("");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull."+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds."+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF){returnTarArchiveEntry.getNextTarEntry();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){skip(-1);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){returncurrEntry.getName();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(TarArchiveEntry.class)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(Feature.QUOTE_FIELD_NAMES)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF){thrownewIllegalArgumentException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("".equals(getHitEOF()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)sourceFile.getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)entry;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull.");java.lang.Exception:thrownewIllegalArgumentException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntrycannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrycannotbenull."+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrycannotbenull."+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNextTarEntry()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry()");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry()");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextOriginalTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextTarEntry().getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>-1");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+"Cannotaccessthisentry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF){thrownewIllegalArgumentException("TarArchiveEntryisnull.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF){thrownewIllegalArgumentException("TarArchiveEntryisnull.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227_thrownewIllegalArgumentException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveavalidentryentry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)in.getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrycannotbenull.Tryagain.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("TarArchiveEntrycannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrycannotbenull.Tryagain!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF){thrownewIllegalStateException("TarArchiveEntryisnull.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227this.currEntry.setHitEOF(hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF){thrownewRuntimeException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)encoding.getNext();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry(this,getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+"Cannotgetnextentry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+"CannotaccesstheTarArchiveEntry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+"CannotaccesstheTarArchiveentry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.Tryagain.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.Pleasecheckthattheentryisempty.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextEscapedTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextBinaryTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull".equals(getHitEOF()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull".equals(getName()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&hasHitEOF){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF||isEnabled(Feature.QUOTE_FIELD_NAMES)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextName()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNext()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull.");if(!hasHitEOF){thrownewIllegalArgumentException("TarArchiveEntryisnull.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextTarEntry().getKey();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextTarEntry().getValue()+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.getNextTarEntry().getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextTarEntry().getName();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextTarEntry().clone();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustnotbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotexist.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||isEnabled(Feature.QUOTE_FIELD_NAMES)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF&&isEnabled(Feature.QUOTE_FIELD_NAMES)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(isEnabled(Feature.QUOTE_FIELD_NAMES)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(isEnabled(Feature.QUOTE_FIELD_NAMES)||hasHitEOF){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Context.checkState(hasHitEOF||isEnabled(Feature.QUOTE_FIELD_NAMES)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrycannotbenull."+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrycannotbenull."+this);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarEntrycannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrycannotbenull.Pleasecheckthatthisisafiletype.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry().");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry().");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+"CannotaccesstheTarArchiveentry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY)){returnnull;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(getNextTarEntry()==null){if(!hasHitEOF&&isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF&&isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY)||hasHitEOF){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds,");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+this);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+getClass());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarEntry.getNextTarEntry()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldn'tbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextName()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotexist.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||hasHitEOF){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||hasHitEOF){return(TarArchiveEntry)null;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||hasHitEOF){returngetNextTarEntry();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||isEnabled(TarArchiveEntry.class)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||hasHitEOF){return(TarArchiveEntry)this;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||hasHitEOF){returnnewTarArchiveEntry(getNextTarEntry());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("TarArchiveentryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalStateException("");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("TarArchiveEntryisnotavalidTarArchiveEntry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("TarArchiveEntryisnotavalidTarArchiveEntryentry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldn'tbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNextTarEntry()shouldn'tbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNext()shouldn'tbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextName()shouldn'tbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldn'tbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.n");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.Pleasecheckthattheentryisempty.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalStateException("TarArchiveEntrycannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalStateException("TarArchiveEntrycannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalStateException("TarArchiveEntrycannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("TarArchiveEntrycannotbenull.".);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarEntry.getNextTarEntry()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()cannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextName()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextName()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextName()doesnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextName()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotexist.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotexist:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotexist:"+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotexist!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotexist");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotexist:"+getClass());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getCurrentTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextHitEOF();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextRecordEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrycannotbenull.Tryagain!",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrycannotbenull.Tryagain!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrycannotbenull.Tryagain!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=(TarArchiveEntry)getNextEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227this.currEntry=(TarArchiveEntry)getNextEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getCurrentEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextEOF();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextUpperTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextOriginalTarEntry().getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextOriginalTarEntry().clone();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()cannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()cannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNextTarEntry()cannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()cannotbenull".");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.warning("TarArchiveEntry.getNextTarEntry()cannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.currEntry.getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.getNext();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.getKey();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.cloneTar();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.getNextFile();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull.".equals(getName()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull"+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnull."+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull",getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustnotbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldnotbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry()",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry():");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry():"+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returngetNextEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.currEntry.getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returncurrEntry.getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returngetNextTarEntry().getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextOwnerTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextOtherTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextOFileEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextRecordSize();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds."+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.n"+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds."+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextEntry().getKey();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextEntry().getValue()+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.getNextEntry().getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextEntry().getValue()-1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextEntry().getValue()/2;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnTarArchiveEntry.getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||hasHitEOF){returnTarArchiveEntry.getNextTarEntry();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227pendingTarEntry=TarArchiveEntry.getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip(TarArchiveEntry.getNextTarEntry());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip(TarArchiveEntry.class){if(hasHitEOF){returnTarArchiveEntry.getNextTarEntry();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip(TarArchiveEntry.class){if(!hasHitEOF){returnTarArchiveEntry.getNextTarEntry();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227tries.add(TarArchiveEntry.getNextTarEntry());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.getNextEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.nextEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.currEntry.nextEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.entryOffset;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.firstEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TARArchiveEntrycannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrycannotbenull!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrycannotbenull".equals(getName()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrycannotbenull".");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("ZarArchiveEntrycannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("RetarArchiveEntrycannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry()",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry().",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry()"+",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandler.throwInternal();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227pendingTarEntry(){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227pendingTars=getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227pendingTars=newTarArchiveEntry[size()];
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandler<TarArchiveEntry>returnnull;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry()",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry().");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry():");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry(),");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNext()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarEntry.getNextTarEntry()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarEntry.getNextTarEntry()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarEntry.getNextTarEntry()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNext()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNextTarEntry()doesnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+"Cannotgetnextentry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.n"+"Cannotgetnextentry.n");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarEntrycannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarEntrycannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntrycannotbenull.".);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntrycannotbenull."+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Thread.currentThread().setContextClassLoader(TarArchiveEntry.class.getClassLoader());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Thread.currentThread().setContextClassLoader(getNextTarEntry());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Thread.currentThread().setContextClassLoader(TarArchiveEntry.class);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Thread.currentThread().setContextClassLoader(TarArchiveEntry.class.getSimpleName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextOF();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextSize();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextTar();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextFile();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextRecord();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustnotbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldnotbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry(this,getHitEOF(),hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry(this,getNumberOfTars());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry(this,getNextTarEntry());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry(this,getRecordSize());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry(this,getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry(this,getHitEOF()+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry(this,getHitEOF(),null);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry==null){skip(-1);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOFEntry();if(currEntry!=null){skip(-1);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextRecordEntry();if(currEntry!=null){skip(-1);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOF();if(currEntry!=null){skip(-1);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextTarEntry(null);if(currEntry!=null){skip(-1);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){skip(0);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNext()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getParent()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNext()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNumber()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNext()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.log("TarArchiveEntrydoesnothaveEOFbounds:"+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+getClass());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+this.getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotastringentry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntryentry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry,");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarEntry.getNextTarEntry()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarEntry.getNextTarEntry()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveavalidentryentry.n");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveavalidentryentry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveavalidentryentry..");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+this);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+"HitEOF:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.log("TarArchiveEntrydoesnothaveEOFbounds:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.Tryagain!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.Tryagain.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.Tryagain.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.Tryagain",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.Tryagain:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.in.getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)in.getKey();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)in.getValue()+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)in.getValue()-1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(isEnabled(TarArchiveEntry.class)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(getNextTarEntry()==null){if(!hasHitEOF&&isEnabled(TarArchiveEntry.class)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(TarArchiveEntry.class)){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF&&isEnabled(TarArchiveEntry.class)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||isEnabled(TarArchiveEntry.class)){returnnull;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextName()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextName()cannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextName()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandler{thrownewIllegalArgumentException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip(true){thrownewIllegalArgumentException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227[Delete]
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.clone();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.weirdString("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Thread.currentThread().setContextClassLoader(TarArchiveEntry.class){thrownewIllegalArgumentException("TarArchiveEntryisnull.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrycannotbenull.".);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrycannotbenull.PleasecheckthatthehasHitEOF.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrycannotbenull.PleasecheckthatthisisavalidTarArchiveEntry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.Pleasecheckthattheentryisempty.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds,Pleasecheckthattheentryisempty.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:Pleasecheckthattheentryisempty.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.Pleasecheckthattheentryisempty.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrycannotbenull."+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrycannotbenull."+getName(),hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.n");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+"TarArchiveEntrydoesnotexist.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)encoding.clone();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.currEntry.getNext();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)entry.getNext();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)tarEntry.getNext();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.encoding.getNext();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()isnull!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotexist:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarEntry.getNextTarEntry()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(Feature.QUOTE_FIELD_NAMES)){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||isEnabled(Feature.QUOTE_FIELD_NAMES)){returnnull;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getCurrentTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextHitEOF();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextRecordEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextFileEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextTarEntry(null);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF){finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry==null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextRecordEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextHitEOF();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227While(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip("TarArchiveEntry.hasNextTarEntry()")){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSideEffects(true){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.currEntry.clone();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.currEntry.getKey();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getParent()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNext()isnull",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNext()isnull!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNext()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNext()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.".);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNextTarEntry()doesnotexist.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarEntry.getNextTarEntry()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.warning("TarEntry.getNextTarEntry()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry():");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry():"+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry():"+this);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227pending||hasHitEOF){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry("TarArchiveEntryisnull".getMessage());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry(getName()+"TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry("TarArchiveEntryisnull".equals(getName()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry(this,"TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()needsnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Annotation<T>currEntry=getCurrentTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Annotation<T>currEntry=this.getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Annotation<T>currEntry=getNextEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Annotation<T>currEntry=getNextArchiveEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Annotation<T>currEntry=getNextRecordEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Annotation<T>currEntry=getNextTarEntry(null);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandler.throwAsIOException("",ioe);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandler.throwAsIOException("",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandler.throwAsIOException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandler.throwAsIOException(",");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandler.throwAsIOException("TarArchiveEntrynotinitialized:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull.".equals(getHitEOF()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull."+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull"+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull",getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnull".equals(getHitEOF()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)entry.getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)entry.clone();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)entry.getKey();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)entry.cloneTar();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOF();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextRecordEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOFEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEscapedTarEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextSkipEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextRecordEscape();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustnotbe>0",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustnotbe>EOF");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustnotbe>0.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.warning("TarArchiveEntry.getNextTarEntry()doesnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOFEntry();if(currEntry!=null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry==null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextRecordEntry();if(currEntry!=null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextTarEntry(null);if(currEntry!=null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEscapedTarEntry();if(currEntry!=null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()isnull",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getName().equals(getName()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException(""+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(getNextTarEntry()==null){thrownewIllegalArgumentException("TarArchiveEntryisnull.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newTarArchiveEntry("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextName()");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextPadding()");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextRecordEscapedTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextEscapedTarEntry().getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnull."+this);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnull."+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnull!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TARArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnull.Pleasetryagain.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextRecordEntry().getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextSkip();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOFEntry();if(currEntry!=null){returncurrEntry.getName();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry==null){returncurrEntry.getName();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOF();if(currEntry!=null){returncurrEntry.getName();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextRecordEntry();if(currEntry!=null){returncurrEntry.getName();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextTarEntry(null);if(currEntry!=null){returncurrEntry.getName();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEscapedTarEntry();if(currEntry!=null){returncurrEntry.getName();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227java.lang.Exception:thrownewIllegalArgumentException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(getNextTarEntry()!=null){thrownewIllegalArgumentException("TarArchiveEntryisnull.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(isEOF){thrownewIllegalArgumentException("TarArchiveEntryisnull.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227_thrownewIllegalArgumentException("TarArchiveEntryisnull!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227_thrownewIllegalArgumentException("TarArchiveEntrywasnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227_thrownewIllegalArgumentException("TARArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&hasHitEOF){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF||hasHitEOF){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF&&hasHitEOF){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227While(!hasHitEOF){thrownewIllegalArgumentException("TarArchiveEntryisnull.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandler{thrownewIllegalArgumentException("TarArchiveEntryisnull.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0.0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>1.0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0.01");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0.5");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0.04");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.sourceFile.getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getSourceFile().getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)sourceFile.getNextEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)entry.getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.super.getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnull!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("TarArchiveEntryisnull!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.headerEntry;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextPadding()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrycannotbenull."+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrywasnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrymaynotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnull".equals(getName()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrymustbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TARArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException(""+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.hasHitEOF:"+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnull..");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227While(!hasHitEOF){thrownewIllegalStateException("TarArchiveEntryisnull.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip(TarArchiveEntry.class){thrownewIllegalStateException("TarArchiveEntryisnull.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>-1",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>-1");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>-1.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustnotbe>-1");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>-1",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrycannotbenull.Tryagain.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrycannotbenull.Tryagain.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrycannotbenull.Tryagain,");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNext()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntryisnull!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntryisnull."+this);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntryisnull."+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227this.currEntry.setHitEOF(ioe);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227this.currEntry.setHitEOF(hasHitEOF&&hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227this.currEntry.setHitEOF(null);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227this.currEntry.setHitEOF(hasHitEOF+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227this.currEntry.setHitEOF(hasHitEOF||hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227this.currEntry.setHitEOF(getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.n"+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.".+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0"+",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0"+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+"Cannotaccessthisentry..");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227While(!hasHitEOF){thrownewRuntimeException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip(true){thrownewRuntimeException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Thread.currentThread().interrupt();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOF();if(currEntry==null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextRecordEntry();if(currEntry==null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOFEntry();if(currEntry==null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEscapedTarEntry();if(currEntry==null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextSkipEntry();if(currEntry==null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF&&isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)){returnnull;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||hasHitEOF){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull."+getName(),e);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNextTarEntry()shouldbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextName()shouldbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.n");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.Pleasecheckthattheentryisbelow.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrycannotbenull..");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF){finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry==null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){skip(String.valueOf(currEntry.getName()));}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+"Cannotgetnextentry.n");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+"Cannotgetnextentry.Pleasecheckthatthecurrentrydoesnotexist.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowPadding("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227MutableTarEntry<K,V>currEntry=getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarEntry.getNextTarEntry()mustbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0"+hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip("Tar"){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip(true){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip("TarArchiveEntry.hasNextTarEntry")){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip("TarArchiveEntry.hasNextTarName()")){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ParchetState.checkState(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227validateTarEntry("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrycannotbenull.",e);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrycannotbenull".equals(getHitEOF()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.."+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.PleasecheckthatthehasHitEOF.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandlerTraversal.traverse(this,TarArchiveEntry.class);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandlerTraversal.traverse(getNextTarEntry());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandler.handleUnsupportedOperation(TarArchiveEntry.class);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandler(this,getNextTarEntry());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandlerTraversal(this,TarArchiveEntry.class);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandlerTraversal.traverse(compiler,getNextTarEntry());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds."+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveanyEOFbounds."+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF||isEnabled(Feature.QUOTE_FIELD_NAMES)){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrycannotbenull.Tryagain!",e);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.getNextFileEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextOriginalFileEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextEOFEntry();if(currEntry!=null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextTarEntry(null);if(currEntry!=null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextEOF();if(currEntry!=null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(aughtExceptionHandler!=null){aughtExceptionHandler.throwAsIOException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(aughtExceptionHandler!=null){aughtExceptionHandler.throwAsIOException("");}else{TarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){skip(Long.MAX_VALUE);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandler.throwAsIOException("TarArchiveEntry.getNextTarEntry()");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(aughtExceptionHandler!=null){aughtExceptionHandler.throwAsIOException("");}else{TarArchiveEntrycurrEntry=getNextTarEntry();returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0"+hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0"+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227safeTarEntry(){thrownewIllegalArgumentException("TarArchiveEntryisnull.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227IllegalArgumentException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF){thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.Pleasecheckthattheentryisempty.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.getNextEntry().getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldnotbenull".");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldnotbenull!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextPadding()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("TarEntrycannotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("TarArchiveEntrycannotbenull."+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("TarArchiveEntrycannotbenull."+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227parent==null||!hasHitEOF){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY)){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(TarArchiveEntry.DEFAULT_TARNING_ERROR)){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.getNextRecordEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.getNextBinaryTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOFTarEntry();if(currEntry==null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveavalidentryentry."+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveavalidentryentry."+this);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveavalidentryentry.Pleasecheckthatthecurrentryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveavalidentryentry.Pleasecheckthatthecurrentryisempty.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF||isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF||isEnabled(Feature.QUOTE_FIELD_NAME)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF||isEnabled(Feature.QUOTE_NON_NULL_OBJECT)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF||isEnabled(Feature.QUOTE_TO_STREAM)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry():"+"n");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry():"+"https:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNextTarEntry()mustnotbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.getNextEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntrycannotbenull."+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntrycannotbenull.Tryagain.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextTarEntry(null);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextEOFEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextTarEntry(true);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextSkipEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull.".equals(getNextTarEntry()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextFile()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry("TarArchiveEntryisnull".equals(getHitEOF()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()isnull".);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrycannotbenull."+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrycannotbenull".+");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip("TarArchiveEntry.hasNextTarEntry()")){thrownewIllegalArgumentException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip("TarArchiveEntry.getNextTarEntry()")){thrownewIllegalArgumentException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip("TarArchiveEntry.getNextTarEntry()"){thrownewIllegalArgumentException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip("TarArchiveEntry.hasNextTarEntry")){thrownewIllegalArgumentException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNextTarEntry()isnull".");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNextTarEntry()isnull!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextRecordEOF();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds."+hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.PleasecheckthatthehasHitEOF.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds."+this);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("Tarentryisnull."+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("Tarentryisnull."+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY,true)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY,false)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()isnull".");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()isnull".equals(getHitEOF()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveanyEOFbounds.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.",e);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip("TarArchiveEntry.hasNextTarEntry()")){thrownewRuntimeException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip("Tar"){thrownewRuntimeException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip("TarArchiveEntry.hasNextTarEntry()"){thrownewRuntimeException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Exception:thrownewIllegalArgumentException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOFTarEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextTarEntry(null);if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull!"+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry()",e);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry(this,getNumberOfLinks());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry(this,getQualifiedName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry..");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+this);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.getName();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.getHitEOF();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOF();if(currEntry!=null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOFTarEntry();if(currEntry!=null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOFEntry();if(currEntry==null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOFEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOFTarEntry();if(currEntry!=null){returncurrEntry.getName();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){returncurrEntry.getName();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOFEntry();if(currEntry==null){returncurrEntry.getName();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.getNextTarEntry().getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextTarEntry().getHitEOF();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry..");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotappearnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotappeartobenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||hasHitEOF&&isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY_ERROR)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||hasHitEOF){return(TarArchiveEntry)getNextTarEntry();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||hasHitEOF&&isEnabled(TarArchiveEntry.class)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||hasHitEOF&&isEnabled(TarArchiveEntry.DEFAULT_TAR_ERROR)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)curr.getNextTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+getURL());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.entryOffset.nextEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF){thrownewIllegalArgumentException("TarArchiveEntrycannotbenull.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarEntry.getNextTarEntry()mustbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0"+hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNext()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip(true){thrownewIllegalStateException("TarArchiveEntryisnull.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrycannotbenull."+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+"CannotaccesstheTarArchiveEntry,");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF||hasHitEOF){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&currEntry!=null){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.getNextOriginalTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+HitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()isnull".equals(getName()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.getNextTarEntry(0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrycannotbenull."+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNext()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.nextEntry;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.entry;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF&&isEnabled(TarArchiveEntry.class)){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(TarArchiveEntry.class)||hasHitEOF){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(TarArchiveEntry.class)||isEnabled(TarString.class)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry():"+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextName()");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(ZipArchiveEntry)currEntry.getNext();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF&&isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.Tryagain:"+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrycannotbenull.Tryagain?");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrycannotbenull.Tryagain.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarName()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextPadding()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNextName()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextType()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldnotbenull".);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldnotbenull!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException(TarArchiveEntry.getNextTarEntry()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextName().equals(getName()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarName().equals(getName()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+"Cannotaccessthisentry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry()+",",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnull."+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returngetNextEOFEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returngetNextEOF();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrycannotbenull.Pleasecheckthatthisisnormalized.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOF();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextSkipEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustnotbenull".);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("".equals(getHitEOF()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("".equals(getString()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("".equals(getName()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldnotbenull");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227_thrownewIllegalArgumentException("TarEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227_thrownewIllegalArgumentException("TarArchiveEntryisnull".equals(getHitEOF()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227_thrownewIllegalArgumentException("TarArchiveEntryisnull".equals(getName()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarEntry.getNextTarEntry()mustbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustnotbenull".");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currentEntry.getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Annotation<T>currEntry=getNextTarEntry().getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Annotation<T>currEntry=getNextSkipEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Annotation<T>currEntry=getNextEOFEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextEOF();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF){finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextEOFEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>-1");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNextTarEntry()mustbe>-1");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOFEntry();if(currEntry==null){skip(-1);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextEOFTarEntry();if(currEntry!=null){skip(-1);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227this.currEntry.setHitEOF(-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227this.currEntry.setHitEOF(0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotexist:"+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&TarArchiveEntry.getNextTarEntry()!=null){returnTarArchiveEntry.getNextTarEntry();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF){returnTarArchiveEntry.getNextTarEntry();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&TarArchiveEntry.getNextTarEntry()==null){returnTarArchiveEntry.getNextTarEntry();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&TarArchiveEntry.getNextTarEntry()>=null){returnTarArchiveEntry.getNextTarEntry();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarName()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("TarArchiveEntry.getNextTarEntry()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("".equals(getHitEOF()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("TarArchiveEntry.getNextTarEntry()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("TarArchiveEntry.getNextTarEntry()shouldnotbenull");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF&&isEnabled(Feature.QUOTE_FIELD_NAMES)){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF&&isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds."+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.getNextEscape();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry()+",");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnothaveanullentry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNext()");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextFile()");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227read(){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandler(8){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandler.handleMoreGuaranteed();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtException.printStackTrace();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtExceptionHandler(this,TarEncoding.UTF8);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227pendingRecord();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.Tryagain?");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.Tryagain,");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextHitEOF();if(currEntry!=null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry==null){skip(Long.MAX_VALUE);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES)){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry()!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY,this)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip("TarArchiveEntry.hasNextTarEntry()")||!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227pendingTarEntry(){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextBinaryRecordEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrycannotbenull."+getPadding());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntrycannotbenull.PleasecheckthatthehasHitEOF.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntrycannotbenull.Tryagain!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||hasHitEOF){returnnewTarArchiveEntry();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TheTarArchiveEntryisnull."+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TheTarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNextTarEntry()shouldnotbenull".);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Thread.currentThread().getContextClassLoader().process(newTarArchiveEntry(this));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Thread.currentThread().getContextClassLoader().reset();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds!Pleasecheckthattheentryisempty.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(aughtExceptionHandler!=null){aughtExceptionHandler.throwAsIOException("");}else{thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(aughtExceptionHandler!=null){aughtExceptionHandler.throwAsIOException("");}else{thrownewIllegalArgumentException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextName()mustbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227finalTarArchiveEntrycurrEntry=getNextEOF();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>-1or1");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNextTarEntry()isnull",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNextTarEntry()isnull".equals(getHitEOF()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.Pleasecheckthattheentryhasbeenadded.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227_thrownewIllegalArgumentException("TarArchiveEntryisnull".equals(getString()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotimplemented:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotimplementedhere:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("")
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotimplementedby");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextTarEntry().getImplicitReturn();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF){finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(getNextTarEntry()!=null){finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){skip(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip(TarArchiveEntry.NULL_VALUE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip(TarArchiveEntry.DEFAULT_TAR_ENTRY);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF&&hasHitEOF){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSilent("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNext()shouldbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextElement();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)encoding.getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrycannotbenull.Tryagain:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(getNextTarEntry()!=null){finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(currEntry!=null){finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(getNextTarEntry()==null){finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrycannotbenull."+".");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.headerOffset;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry():"+getMessage());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextName():");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNext()isnull".equals(getHitEOF()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNext();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrycannotbenull.Tryagain!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntrycannotbenull.PleasereportEOF:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF&&isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS)){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)super.getNextRecordEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("TarArchiveEntryentryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("TarArchiveEntryisnotimplementedby");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF||isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveavalidentryentry.Pleasecheckthatyourcurrentryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveavalidentryentry."+"CannotaccesstheTarArchiveEntry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextHitEOF();if(currEntry==null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextBooleanTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntrycannotbenull".);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNext()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)encoding;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextName()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextPadding()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntry.getNextPadding()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.n"+"CannotaccesstheTarArchiveEntry.n");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()doesnotexist:"+"TarArchiveEntry.getNextName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(getHitEOF()>0){thrownewIllegalArgumentException("TarArchiveEntryisnull.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextHitEOF();if(currEntry!=null){skip(-1);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbe>0.",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)this.tarEntry.nextEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)newTarArchiveEntry("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarEntry.getNext()mustnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF||isEnabled(Feature.QUOTE_NON_NULL_VALUE)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF||isEnabled(Feature.QUOTE_TARGET_ENABLED)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227this.hasHitEOF=hasHitEOF;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF||isEnabled(Feature.QUOTE_FIELD_NAMES)){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF||isEnabled(Feature.QUOTE_NON_NULL_VALUE)){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF||hasHitEOF){returnthis;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnull".equals(getHitEOF()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnull".equals(getName()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnull".equals(getString()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnull".equals(getHitEOF));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNext()shouldnotbenull".);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)in.clone();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrycannotbenull".+".");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrycannotbenull".+",");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returngetNextHitEOF();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry()!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextTarEntry(),");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry(this,getNumberOfHits());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227returnnewTarArchiveEntry(this,getTar());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()cannotbe>0");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnull".);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnull",e);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnull".equals(getString()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrycannotbenull,Tryagain!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrycannotbenull.Tryagain!".);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextURLEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds,");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwablet=newIllegalArgumentException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveentryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Annotation<T>currEntry=getNextHitEOF();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextHitEOF();if(currEntry!=null){returncurrEntry;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextPadding()shouldnotbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227||newIllegalArgumentException("TarArchiveEntryisnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalStateException("TarArchiveEntrycannotbenull.Tryagain.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()cannotbenull".);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()mustbenull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227this.currEntry.setHitEOF(true);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227this.currEntry.setHitEOF(this.hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull!".equals(getHitEOF()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227TarArchiveEntrycurrEntry=getNextHitEOF();if(currEntry!=null){returncurrEntry.getName();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+"HitEOFforpath:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+"CannotaccesstheTarArchiveEntry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds:"+"CannotaccesstheTarArchiveEntryproperty.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntry.getNextTarEntry()isnull",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip("TarArchiveEntry.hasNextTarEntry()"))thrownewRuntimeException("");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227aughtException("TarArchiveEntry.getNextTarEntry()isnull.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(!hasHitEOF&&isEnabled(TarArchiveEntry.class)||isEnabled(TarArchiveEntry.class)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227if(hasHitEOF||isEnabled(TarArchiveEntry.class)){returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+"Thisisabug.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227Throwables.thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+"Cannotaccessthisentry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227newIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry.getNextName()");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip("TarArchiveEntry.hasNextTarEntry()")||!hasHitEOF){thrownewIllegalArgumentException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227pendingTar(){thrownewIllegalArgumentException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227allowSkip("TarArchiveEntry.hasNextTarEntry()")||hasHitEOF){thrownewIllegalArgumentException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227pendingTarEntry(){thrownewIllegalArgumentException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+"Cannotgetnextentry..");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+"Cannotgetnextentry.PleasecheckthatthehasHitEOF.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)sourceFile.getNextHitEOF();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()shouldnotbenull".);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)getNextOfFileEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntry.getNextTarEntry()isnull".equals(getHitEOF));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+"CannotaccesstheTarArchiveentry.Tryagain.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnotavalidTarArchiveEntry."+this.getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227thrownewIllegalArgumentException("TarArchiveEntryisnull."+getName(),hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227return(TarArchiveEntry)currEntry.encodeBase64();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.PleasecheckthatthehasHitEOF.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntrydoesnothaveEOFbounds.Tryagain!");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntryisnull".equals(getHitEOF()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntryisnull".equals(getName()));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java227ThrownewIllegalArgumentException("TarArchiveEntryisnull".equals(getString()));
