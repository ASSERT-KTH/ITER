bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  op  =  left.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  left.getType()  ==  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  left.getType()  ==  Token.VAR;	  boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	14	None	replace
2	[BUG]  [BUGGY]  boolean  op  =  left.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  left.getType()  ==  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  left.getType()  ==  Token.FUNCTION;	  boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	14	None	replace
3	[BUG]  [BUGGY]  boolean  op  =  left.getType()  ==  Token.NAME?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  left.getType()  ==  Token.NAME?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  left.getType()  ==  Token.NAME?  Boolean.TRUE  :  Boolean.FALSE;	  boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	14	None	replace
4	[BUG]  [BUGGY]  boolean  op  =  left.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  left.getType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  left.getType()!=  Token.VAR;	  boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	14	None	replace
5	[BUG]  [BUGGY]  boolean  op  =  left.getType()!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  left.getType()!=  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  left.getType()!=  Token.FUNCTION;	  boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	14	None	replace
6	[BUG]  [BUGGY]  boolean  op  =  left.getType()  ==  Token.BLOCK;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  left.getType()  ==  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  left.getType()  ==  Token.BLOCK;	  boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	14	None	replace
7	[BUG]  [BUGGY]  Boolean  op  =  left.getType()  ==  Token.BLOCK?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  left.getType()  ==  Token.BLOCK?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  left.getType()  ==  Token.BLOCK?  Boolean.TRUE  :  Boolean.FALSE;	  Boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	43	None	replace
8	[BUG]  [BUGGY]  Boolean  op  =  left.getType()  ==  Token.VAR?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  left.getType()  ==  Token.VAR?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  left.getType()  ==  Token.VAR?  Boolean.TRUE  :  Boolean.FALSE;	  Boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	43	None	replace
9	[BUG]  [BUGGY]  Boolean  op  =  right.getType();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  right.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  right.getType();	  Boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	43	None	replace
10	[BUG]  [BUGGY]  Boolean  op  =  left.getType()!=  Token.NAME?  left.getType()  :  false;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  left.getType()!=  Token.NAME?  left.getType()  :  false;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  left.getType()!=  Token.NAME?  left.getType()  :  false;	  Boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	43	None	replace
11	[BUG]  [BUGGY]  Boolean  op  =  left.getType()!=  Token.FUNCTION?  left.getType()  :  Boolean.TRUE;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  left.getType()!=  Token.FUNCTION?  left.getType()  :  Boolean.TRUE;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  left.getType()!=  Token.FUNCTION?  left.getType()  :  Boolean.TRUE;	  Boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	43	None	replace
12	[BUG]  [BUGGY]  Boolean  op  =  left.getType()!=  Token.FUNCTION?  left.getType()  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  left.getType()!=  Token.FUNCTION?  left.getType()  :  Boolean.FALSE;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  left.getType()!=  Token.FUNCTION?  left.getType()  :  Boolean.FALSE;	  Boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	43	None	replace
13	[BUG]  [BUGGY]  Integer  op  =  left.getChildCount()  +  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getChildCount()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getChildCount()  +  1;	  Integer    op    =    left.getChildCount();    	non-compiled	[CE]  orphaned  case	34	None	replace
14	[BUG]  [BUGGY]  Integer  op  =  left.getChildCount()  -  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getChildCount()  -  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getChildCount()  -  1;	  Integer    op    =    left.getChildCount();    	non-compiled	[CE]  orphaned  case	34	None	replace
15	[BUG]  [BUGGY]  Integer  op  =  left.getChildCount()  *  2;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getChildCount()  *  2;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getChildCount()  *  2;	  Integer    op    =    left.getChildCount();    	non-compiled	[CE]  orphaned  case	34	None	replace
16	[BUG]  [BUGGY]  Integer  op  =  right.getChildCount();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  right.getChildCount();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  right.getChildCount();	  Integer    op    =    left.getChildCount();    	non-compiled	[CE]  orphaned  case	34	None	replace
17	[BUG]  [BUGGY]  Integer  op  =  left.getChildCount()  *  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getChildCount()  *  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getChildCount()  *  1;	  Integer    op    =    left.getChildCount();    	non-compiled	[CE]  orphaned  case	34	None	replace
18	[BUG]  [BUGGY]  n  op  =  n.getType();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  n  op  =  n.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	n  op  =  n.getType();	  long    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	25	None	replace
19	[BUG]  [BUGGY]  short  op  =  n.getType();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  short  op  =  n.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	short  op  =  n.getType();	  long    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	25	None	replace
20	[BUG]  [BUGGY]  Integer  op  =  left.getOperatorType()  +  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getOperatorType()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getOperatorType()  +  1;	  Integer    op    =    left.getOperatorType();    	non-compiled	[CE]  orphaned  case	13	None	replace
21	[BUG]  [BUGGY]  Integer  op  =  right.getOperatorType();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  right.getOperatorType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  right.getOperatorType();	  Integer    op    =    left.getOperatorType();    	non-compiled	[CE]  orphaned  case	13	None	replace
22	[BUG]  [BUGGY]  Integer  op  =  left.getOperatorType().intValue();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getOperatorType().intValue();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getOperatorType().intValue();	  Integer    op    =    left.getOperatorType();    	non-compiled	[CE]  orphaned  case	13	None	replace
23	[BUG]  [BUGGY]  Integer  op  =  left.getOperatorType()  }  ;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getOperatorType()  }  ;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getOperatorType()  }  ;	  Integer    op    =    left.getOperatorType();    	non-compiled	[CE]  orphaned  case	13	None	replace
24	[BUG]  [BUGGY]  Integer  op  =  left.getOperatorType()  -  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getOperatorType()  -  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getOperatorType()  -  1;	  Integer    op    =    left.getOperatorType();    	non-compiled	[CE]  orphaned  case	13	None	replace
25	[BUG]  [BUGGY]  int  op  =  left.getOperatorType()  +  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getOperatorType()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getOperatorType()  +  1;	  int    op    =    n.getOperatorType()    +    1;    	non-compiled	[CE]  orphaned  case	55	None	replace
26	[BUG]  [BUGGY]  float  op  =  n.getOperatorType()  +  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  float  op  =  n.getOperatorType()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	float  op  =  n.getOperatorType()  +  1;	  int    op    =    n.getOperatorType()    +    1;    	non-compiled	[CE]  orphaned  case	55	None	replace
27	[BUG]  [BUGGY]  int  op  =  right.getOperatorType()  +  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  right.getOperatorType()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  right.getOperatorType()  +  1;	  int    op    =    n.getOperatorType()    +    1;    	non-compiled	[CE]  orphaned  case	55	None	replace
28	[BUG]  [BUGGY]  Boolean  op  =  n.getType()  ==  Token.VAR?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  n.getType()  ==  Token.VAR?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  n.getType()  ==  Token.VAR?  Boolean.TRUE  :  Boolean.FALSE;	  Boolean    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	42	None	replace
29	[BUG]  [BUGGY]  Boolean  op  =  n.getType()  ==  Token.BLOCK?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  n.getType()  ==  Token.BLOCK?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  n.getType()  ==  Token.BLOCK?  Boolean.TRUE  :  Boolean.FALSE;	  Boolean    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	42	None	replace
30	[BUG]  [BUGGY]  Boolean  op  =  n.getType()  ==  Token.NAME?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  n.getType()  ==  Token.NAME?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  n.getType()  ==  Token.NAME?  Boolean.TRUE  :  Boolean.FALSE;	  Boolean    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	42	None	replace
31	[BUG]  [BUGGY]  Boolean  op  =  n.getType()  ==  Token.FUNCTION?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  n.getType()  ==  Token.FUNCTION?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  n.getType()  ==  Token.FUNCTION?  Boolean.TRUE  :  Boolean.FALSE;	  Boolean    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	42	None	replace
32	[BUG]  [BUGGY]  Boolean  op  =  n.getType()!=  Token.VAR?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  n.getType()!=  Token.VAR?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  n.getType()!=  Token.VAR?  Boolean.TRUE  :  Boolean.FALSE;	  Boolean    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	42	None	replace
33	[BUG]  [BUGGY]  Boolean  op  =  n.getType()!=  Token.BLOCK?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  n.getType()!=  Token.BLOCK?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  n.getType()!=  Token.BLOCK?  Boolean.TRUE  :  Boolean.FALSE;	  Boolean    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	42	None	replace
34	[BUG]  [BUGGY]  int  op  =  left.getType()  -  0xff;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  -  0xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  -  0xff;	  int    op    =    left.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	39	None	replace
35	[BUG]  [BUGGY]  int  op  =  left.getType()  |  0xff;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  |  0xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  |  0xff;	  int    op    =    left.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	39	None	replace
36	[BUG]  [BUGGY]  int  op  =  left.getType()  &  1xff;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  &  1xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  &  1xff;	  int    op    =    left.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	39	None	replace
37	[BUG]  [BUGGY]  int  op  =  left.getType()  /  0xff;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  /  0xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  /  0xff;	  int    op    =    left.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	39	None	replace
38	[BUG]  [BUGGY]  int  op  =  left.getType()  +  0xff;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  +  0xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  +  0xff;	  int    op    =    left.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	39	None	replace
39	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  n  =  left.getLastChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	n  =  left.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
40	[BUG]  [BUGGY]  n  =  left.getNext();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  n  =  left.getNext();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	n  =  left.getNext();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
41	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	n  =  right.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
42	[BUG]  [BUGGY]  n  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  n  =  n.getFirstChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	n  =  n.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
43	[BUG]  [BUGGY]  n  =  right.getLastChild();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  n  =  right.getLastChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	n  =  right.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
44	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  right  =  left.getLastChild();	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	3	None	replace
45	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	3	None	replace
46	[BUG]  [BUGGY]  Node  right  =  left.getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  right  =  left.getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  right  =  left.getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	3	None	replace
47	[BUG]  [BUGGY]  Node  right  =  left.getNext()  &&  right.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  right  =  left.getNext()  &&  right.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  right  =  left.getNext()  &&  right.getFirstChild().getType()!=  Token.FUNCTION;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	3	None	replace
48	[BUG]  [BUGGY]  Integer  op  =  left.getType()  <  Token.NAME?  left.getType()  :  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  <  Token.NAME?  left.getType()  :  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  <  Token.NAME?  left.getType()  :  1;	  Integer    op    =    left.getType()    -    1;    	non-compiled	[CE]  orphaned  case	35	None	replace
49	[BUG]  [BUGGY]  Integer  op  =  left.getType()  <  Token.FUNCTION?  left.getType()  :  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  <  Token.FUNCTION?  left.getType()  :  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  <  Token.FUNCTION?  left.getType()  :  1;	  Integer    op    =    left.getType()    -    1;    	non-compiled	[CE]  orphaned  case	35	None	replace
50	[BUG]  [BUGGY]  Integer  op  =  left.getType()  <  Token.BLOCK?  left.getType()  :  1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  <  Token.BLOCK?  left.getType()  :  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  <  Token.BLOCK?  left.getType()  :  1;	  Integer    op    =    left.getType()    -    1;    	non-compiled	[CE]  orphaned  case	35	None	replace
51	[BUG]  [BUGGY]  Integer  op  =  left.getType()  <  Token.VAR?  left.getType()  :  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  <  Token.VAR?  left.getType()  :  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  <  Token.VAR?  left.getType()  :  1;	  Integer    op    =    left.getType()    -    1;    	non-compiled	[CE]  orphaned  case	35	None	replace
52	[BUG]  [BUGGY]  int  lhType  =  left.getOperatorType();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  lhType  =  left.getOperatorType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  lhType  =  left.getOperatorType();	  int    lhType    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	11	None	replace
53	[BUG]  [BUGGY]  int  lhType  =  right.getOperatorType();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  lhType  =  right.getOperatorType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  lhType  =  right.getOperatorType();	  int    lhType    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	11	None	replace
54	[BUG]  [BUGGY]  boolean  lhType  =  n.getOperatorType();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  n.getOperatorType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  n.getOperatorType();	  int    lhType    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	11	None	replace
55	[BUG]  [BUGGY]  Integer  lhType  =  left.getOperatorType();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  lhType  =  left.getOperatorType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  lhType  =  left.getOperatorType();	  int    lhType    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	11	None	replace
56	[BUG]  [BUGGY]  float  lhType  =  n.getOperatorType();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  float  lhType  =  n.getOperatorType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	float  lhType  =  n.getOperatorType();	  int    lhType    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	11	None	replace
57	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.GETELEM;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.GETELEM;	  boolean    op    =    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	48	None	replace
58	[BUG]  [BUGGY]  boolean  op  =  left.getType()!=  Token.GETELEM;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  left.getType()!=  Token.GETELEM;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  left.getType()!=  Token.GETELEM;	  boolean    op    =    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	48	None	replace
59	[BUG]  [BUGGY]  boolean  op  =  right.getType()!=  Token.GETELEM;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  right.getType()!=  Token.GETELEM;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  right.getType()!=  Token.GETELEM;	  boolean    op    =    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	48	None	replace
60	[BUG]  [BUGGY]  boolean  op  =  left.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  left.getType()  ==  Token.GETELEM;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  left.getType()  ==  Token.GETELEM;	  boolean    op    =    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	48	None	replace
61	[BUG]  [BUGGY]  int  op  =  left.getType()  -  0x7f;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  -  0x7f;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  -  0x7f;	  int    op    =    left.getType()    &    0x7f;    	non-compiled	[CE]  orphaned  case	40	None	replace
62	[BUG]  [BUGGY]  int  op  =  left.getType()  &  0x7f  &  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  &  0x7f  &  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  &  0x7f  &  1;	  int    op    =    left.getType()    &    0x7f;    	non-compiled	[CE]  orphaned  case	40	None	replace
63	[BUG]  [BUGGY]  int  op  =  left.getType()  &  0x7f  +  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  &  0x7f  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  &  0x7f  +  1;	  int    op    =    left.getType()    &    0x7f;    	non-compiled	[CE]  orphaned  case	40	None	replace
64	[BUG]  [BUGGY]  int  op  =  left.getType()  &  0x7F;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  &  0x7F;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  &  0x7F;	  int    op    =    left.getType()    &    0x7f;    	non-compiled	[CE]  orphaned  case	40	None	replace
65	[BUG]  [BUGGY]  int  op  =  left.getType()  |  0x7f;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  |  0x7f;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  |  0x7f;	  int    op    =    left.getType()    &    0x7f;    	non-compiled	[CE]  orphaned  case	40	None	replace
66	[BUG]  [BUGGY]  int  op  =  left.getType()  &  1x7f;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  &  1x7f;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  &  1x7f;	  int    op    =    left.getType()    &    0x7f;    	non-compiled	[CE]  orphaned  case	40	None	replace
67	[BUG]  [BUGGY]  Integer  op  =  n.getChildCount()  +  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  n.getChildCount()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  n.getChildCount()  +  1;	  Integer    op    =    n.getChildCount();    	non-compiled	[CE]  orphaned  case	65	None	replace
68	[BUG]  [BUGGY]  Node  op  =  n.getChildCount();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  op  =  n.getChildCount();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  op  =  n.getChildCount();	  Integer    op    =    n.getChildCount();    	non-compiled	[CE]  orphaned  case	65	None	replace
69	[BUG]  [BUGGY]  int  op  =  n.getChildCount();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  n.getChildCount();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  n.getChildCount();	  Integer    op    =    n.getChildCount();    	non-compiled	[CE]  orphaned  case	65	None	replace
70	[BUG]  [BUGGY]  int  op  =  left.getChildCount();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getChildCount();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getChildCount();	  Integer    op    =    n.getChildCount();    	non-compiled	[CE]  orphaned  case	65	None	replace
71	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined       "))    ||    (Token.VOID    ==    left.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	62	None	replace
72	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstCh  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstCh  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstCh	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined       "))    ||    (Token.VOID    ==    left.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	62	None	replace
73	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined       "))    ||    (Token.VOID    ==    left.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	62	None	replace
74	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined       "))    ||    (Token.VOID    ==    left.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	62	None	replace
75	[BUG]  [BUGGY]  boolean  lhType  =  right.getType();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  right.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  right.getType();	  boolean    lhType    =    n.getType();    	non-compiled	[CE]  orphaned  case	15	None	replace
76	[BUG]  [BUGGY]  boolean  lhType  =  n.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  n.getType()  ==  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  n.getType()  ==  Token.FUNCTION;	  boolean    lhType    =    n.getType();    	non-compiled	[CE]  orphaned  case	15	None	replace
77	[BUG]  [BUGGY]  boolean  lhType  =  n.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  n.getType()  ==  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  n.getType()  ==  Token.VAR;	  boolean    lhType    =    n.getType();    	non-compiled	[CE]  orphaned  case	15	None	replace
78	[BUG]  [BUGGY]  boolean  lhType  =  n.getType()!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  n.getType()!=  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  n.getType()!=  Token.FUNCTION;	  boolean    lhType    =    n.getType();    	non-compiled	[CE]  orphaned  case	15	None	replace
79	[BUG]  [BUGGY]  Integer  op  =  right.getType()  +  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  right.getType()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  right.getType()  +  1;	  Integer    op    =    right.getType();    	non-compiled	[CE]  orphaned  case	32	None	replace
80	[BUG]  [BUGGY]  Node  op  =  right.getType();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  op  =  right.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  op  =  right.getType();	  Integer    op    =    right.getType();    	non-compiled	[CE]  orphaned  case	32	None	replace
81	[BUG]  [BUGGY]  double  op  =  n.getType()  +  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  double  op  =  n.getType()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	double  op  =  n.getType()  +  1;	  float    op    =    n.getType()    +    1;    	non-compiled	[CE]  orphaned  case	26	None	replace
82	[BUG]  [BUGGY]  int  op  =  n.getType()  +  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  n.getType()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  n.getType()  +  1;	  float    op    =    n.getType()    +    1;    	non-compiled	[CE]  orphaned  case	26	None	replace
83	[BUG]  [BUGGY]  float  op  =  left.getType()  +  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  float  op  =  left.getType()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	float  op  =  left.getType()  +  1;	  float    op    =    n.getType()    +    1;    	non-compiled	[CE]  orphaned  case	26	None	replace
84	[BUG]  [BUGGY]  float  op  =  right.getType()  +  1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  float  op  =  right.getType()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	float  op  =  right.getType()  +  1;	  float    op    =    n.getType()    +    1;    	non-compiled	[CE]  orphaned  case	26	None	replace
85	[BUG]  [BUGGY]  int  op  =  right.getOperatorType()  -  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  right.getOperatorType()  -  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  right.getOperatorType()  -  1;	  int    op    =    right.getOperatorType();    	non-compiled	[CE]  orphaned  case	9	None	replace
86	[BUG]  [BUGGY]  boolean  op  =  right.getOperatorType();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  right.getOperatorType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  right.getOperatorType();	  int    op    =    right.getOperatorType();    	non-compiled	[CE]  orphaned  case	9	None	replace
87	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  right  =  n.getLastChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	2	None	replace
88	[BUG]  [BUGGY]  Node  right  =  node.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  right  =  node.getFirstChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  right  =  node.getFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	2	None	replace
89	[BUG]  [BUGGY]  Integer  op  =  left.getInitialValue();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getInitialValue();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getInitialValue();	  Integer    op    =    n.getInitialValue();    	non-compiled	[CE]  orphaned  case	66	None	replace
90	[BUG]  [BUGGY]  Integer  op  =  right.getInitialValue();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  right.getInitialValue();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  right.getInitialValue();	  Integer    op    =    n.getInitialValue();    	non-compiled	[CE]  orphaned  case	66	None	replace
91	[BUG]  [BUGGY]  Node  op  =  n.getInitialValue();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  op  =  n.getInitialValue();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  op  =  n.getInitialValue();	  Integer    op    =    n.getInitialValue();    	non-compiled	[CE]  orphaned  case	66	None	replace
92	[BUG]  [BUGGY]  int  op  =  n.getInitialValue();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  n.getInitialValue();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  n.getInitialValue();	  Integer    op    =    n.getInitialValue();    	non-compiled	[CE]  orphaned  case	66	None	replace
93	[BUG]  [BUGGY]  String  op  =  n.getInitialValue();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  String  op  =  n.getInitialValue();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	String  op  =  n.getInitialValue();	  Integer    op    =    n.getInitialValue();    	non-compiled	[CE]  orphaned  case	66	None	replace
94	[BUG]  [BUGGY]  Character  op  =  left.getType();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Character  op  =  left.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Character  op  =  left.getType();	  Character    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	44	None	replace
95	[BUG]  [BUGGY]  Character  op  =  right.getType();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Character  op  =  right.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Character  op  =  right.getType();	  Character    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	44	None	replace
96	[BUG]  [BUGGY]  Node  op  =  left.getType();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  op  =  left.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  op  =  left.getType();	  Character    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	44	None	replace
97	[BUG]  [BUGGY]  Node  lhType  =  n.getType();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  lhType  =  n.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  lhType  =  n.getType();	  Character    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	44	None	replace
98	[BUG]  [BUGGY]  Object  op  =  n.getType();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Object  op  =  n.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Object  op  =  n.getType();	  Character    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	44	None	replace
99	[BUG]  [BUGGY]  String  lhType  =  n.getType();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  String  lhType  =  n.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	String  lhType  =  n.getType();	  Character    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	44	None	replace
100	[BUG]  [BUGGY]  int  op  =  left.getOperatorType()  -  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getOperatorType()  -  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getOperatorType()  -  1;	  int    op    =    n.getOperatorType()    -    1;    	non-compiled	[CE]  orphaned  case	56	None	replace
101	[BUG]  [BUGGY]  float  op  =  n.getOperatorType()  -  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  float  op  =  n.getOperatorType()  -  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	float  op  =  n.getOperatorType()  -  1;	  int    op    =    n.getOperatorType()    -    1;    	non-compiled	[CE]  orphaned  case	56	None	replace
102	[BUG]  [BUGGY]  double  op  =  n.getType()  -  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  double  op  =  n.getType()  -  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	double  op  =  n.getType()  -  1;	  float    op    =    n.getType()    -    1;    	non-compiled	[CE]  orphaned  case	53	None	replace
103	[BUG]  [BUGGY]  int  op  =  n.getType()  -  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  n.getType()  -  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  n.getType()  -  1;	  float    op    =    n.getType()    -    1;    	non-compiled	[CE]  orphaned  case	53	None	replace
104	[BUG]  [BUGGY]  float  op  =  left.getType()  -  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  float  op  =  left.getType()  -  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	float  op  =  left.getType()  -  1;	  float    op    =    n.getType()    -    1;    	non-compiled	[CE]  orphaned  case	53	None	replace
105	[BUG]  [BUGGY]  double  op  =  n.getType()  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  double  op  =  n.getType()  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	double  op  =  n.getType()  1;	  float    op    =    n.getType()    -    1;    	non-compiled	[CE]  orphaned  case	53	None	replace
106	[BUG]  [BUGGY]  float  op  =  right.getType()  -  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  float  op  =  right.getType()  -  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	float  op  =  right.getType()  -  1;	  float    op    =    n.getType()    -    1;    	non-compiled	[CE]  orphaned  case	53	None	replace
107	[BUG]  [BUGGY]  int  op  =  n.getType()  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  n.getType()  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  n.getType()  1;	  float    op    =    n.getType()    -    1;    	non-compiled	[CE]  orphaned  case	53	None	replace
108	[BUG]  [BUGGY]  Integer  op  =  left.getType()  -  0xff;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  -  0xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  -  0xff;	  Integer    op    =    left.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	52	None	replace
109	[BUG]  [BUGGY]  Integer  op  =  left.getType()  |  0xff;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  |  0xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  |  0xff;	  Integer    op    =    left.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	52	None	replace
110	[BUG]  [BUGGY]  Integer  op  =  left.getType()  /  0xff;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  /  0xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  /  0xff;	  Integer    op    =    left.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	52	None	replace
111	[BUG]  [BUGGY]  Integer  op  =  left.getType()  &  1xff;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  &  1xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  &  1xff;	  Integer    op    =    left.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	52	None	replace
112	[BUG]  [BUGGY]  Integer  op  =  left.getType()  +  0xff;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  +  0xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  +  0xff;	  Integer    op    =    left.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	52	None	replace
113	[BUG]  [BUGGY]  int  op  =  left.getOperatorType()  &  0xFFFF;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getOperatorType()  &  0xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getOperatorType()  &  0xFFFF;	  int    op    =    left.getOperatorType();    	non-compiled	[CE]  orphaned  case	8	None	replace
114	[BUG]  [BUGGY]  int  op  =  left.getOperatorType()  &  0xff;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getOperatorType()  &  0xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getOperatorType()  &  0xff;	  int    op    =    left.getOperatorType();    	non-compiled	[CE]  orphaned  case	8	None	replace
115	[BUG]  [BUGGY]  int  op  =  left.getOperatorType()  &  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getOperatorType()  &  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getOperatorType()  &  1;	  int    op    =    left.getOperatorType();    	non-compiled	[CE]  orphaned  case	8	None	replace
116	[BUG]  [BUGGY]  boolean  op  =  left.getType()!=  Token.VOID;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  left.getType()!=  Token.VOID;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  left.getType()!=  Token.VOID;	  boolean    op    =    n.getType()!=    Token.VOID;    	non-compiled	[CE]  orphaned  case	72	None	replace
117	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.VOID;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.VOID;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.VOID;	  boolean    op    =    n.getType()!=    Token.VOID;    	non-compiled	[CE]  orphaned  case	72	None	replace
118	[BUG]  [BUGGY]  boolean  op  =  right.getType()!=  Token.VOID;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  right.getType()!=  Token.VOID;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  right.getType()!=  Token.VOID;	  boolean    op    =    n.getType()!=    Token.VOID;    	non-compiled	[CE]  orphaned  case	72	None	replace
119	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.EMPTY;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.EMPTY;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.EMPTY;	  boolean    op    =    n.getType()!=    Token.VOID;    	non-compiled	[CE]  orphaned  case	72	None	replace
120	[BUG]  [BUGGY]  int  op  =  left.getLastChild();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getLastChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getLastChild();	  int    op    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	61	None	replace
121	[BUG]  [BUGGY]  int  op  =  right.getFirstChild();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  right.getFirstChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  right.getFirstChild();	  int    op    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	61	None	replace
122	[BUG]  [BUGGY]  int  op  =  right.getLastChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  right.getLastChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  right.getLastChild();	  int    op    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	61	None	replace
123	[BUG]  [BUGGY]  int  op  =  left.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getFirstChild().getNext();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getFirstChild().getNext();	  int    op    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	61	None	replace
124	[BUG]  [BUGGY]  int  op  =  left.getNext();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getNext();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getNext();	  int    op    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	61	None	replace
125	[BUG]  [BUGGY]  boolean  op  =  left.getOperatorType();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  left.getOperatorType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  left.getOperatorType();	  boolean    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	10	None	replace
126	[BUG]  [BUGGY]  boolean  op  =  n.getOperatorType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getOperatorType()  ==  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getOperatorType()  ==  Token.VAR;	  boolean    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	10	None	replace
127	[BUG]  [BUGGY]  boolean  op  =  n.getOperatorType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getOperatorType()  ==  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getOperatorType()  ==  Token.FUNCTION;	  boolean    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	10	None	replace
128	[BUG]  [BUGGY]  boolean  op  =  n.getOperatorType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getOperatorType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getOperatorType()!=  Token.VAR;	  boolean    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	10	None	replace
129	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  left  =  n.getLastChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
130	[BUG]  [BUGGY]  Node  left  =  left.getLastChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  left  =  left.getLastChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  left  =  left.getLastChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
131	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  left  =  right.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
132	[BUG]  [BUGGY]  Node  left  =  left.getNext();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  left  =  left.getNext();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  left  =  left.getNext();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
133	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  left  =  right.getLastChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  left  =  right.getLastChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
134	[BUG]  [BUGGY]  String  op  =  left.getType();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  String  op  =  left.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	String  op  =  left.getType();	  String    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	41	None	replace
135	[BUG]  [BUGGY]  String  op  =  n.getString();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  String  op  =  n.getString();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	String  op  =  n.getString();	  String    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	41	None	replace
136	[BUG]  [BUGGY]  String  op  =  n.getFirstChild().getType();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  String  op  =  n.getFirstChild().getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	String  op  =  n.getFirstChild().getType();	  String    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	41	None	replace
137	[BUG]  [BUGGY]  String  op  =  n.getFirstChild().getString();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  String  op  =  n.getFirstChild().getString();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	String  op  =  n.getFirstChild().getString();	  String    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	41	None	replace
138	[BUG]  [BUGGY]  String  op  =  n.getType().toLowerCase();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  String  op  =  n.getType().toLowerCase();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	String  op  =  n.getType().toLowerCase();	  String    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	41	None	replace
139	[BUG]  [BUGGY]  String  op  =  n.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  String  op  =  n.getLastChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	String  op  =  n.getLastChild();	  String    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	41	None	replace
140	[BUG]  [BUGGY]  double  op  =  left.getType();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  double  op  =  left.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	double  op  =  left.getType();	  double    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	23	None	replace
141	[BUG]  [BUGGY]  double  op  =  right.getType();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  double  op  =  right.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	double  op  =  right.getType();	  double    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	23	None	replace
142	[BUG]  [BUGGY]  Double  op  =  left.getType();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Double  op  =  left.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Double  op  =  left.getType();	  double    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	23	None	replace
143	[BUG]  [BUGGY]  Integer  lhType  =  right.getType();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  lhType  =  right.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  lhType  =  right.getType();	  Integer    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	28	None	replace
144	[BUG]  [BUGGY]  Integer  lhType  =  left.getType()  +  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  lhType  =  left.getType()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  lhType  =  left.getType()  +  1;	  Integer    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	28	None	replace
145	[BUG]  [BUGGY]  Integer  lhType  =  left.getChildCount();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  lhType  =  left.getChildCount();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  lhType  =  left.getChildCount();	  Integer    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	28	None	replace
146	[BUG]  [BUGGY]  Integer  lhType  =  left.getType()  }  ;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  lhType  =  left.getType()  }  ;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  lhType  =  left.getType()  }  ;	  Integer    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	28	None	replace
147	[BUG]  [BUGGY]  Node  result  =  left.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  result  =  left.getLastChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  result  =  left.getLastChild();	  Node    result    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
148	[BUG]  [BUGGY]  Node  result  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  result  =  n.getFirstChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  result  =  n.getFirstChild();	  Node    result    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
149	[BUG]  [BUGGY]  Node  result  =  left.getNext();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  result  =  left.getNext();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  result  =  left.getNext();	  Node    result    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
150	[BUG]  [BUGGY]  Node  result  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  result  =  right.getFirstChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  result  =  right.getFirstChild();	  Node    result    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
151	[BUG]  [BUGGY]  Node  result  =  right.getLastChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  result  =  right.getLastChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  result  =  right.getLastChild();	  Node    result    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
152	[BUG]  [BUGGY]  Node  result  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  result  =  left.removeFirstChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  result  =  left.removeFirstChild();	  Node    result    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
153	[BUG]  [BUGGY]  double  op  =  n.getOperatorType();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  double  op  =  n.getOperatorType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	double  op  =  n.getOperatorType();	  float    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	12	None	replace
154	[BUG]  [BUGGY]  float  op  =  left.getOperatorType();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  float  op  =  left.getOperatorType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	float  op  =  left.getOperatorType();	  float    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	12	None	replace
155	[BUG]  [BUGGY]  long  op  =  n.getOperatorType();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  long  op  =  n.getOperatorType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	long  op  =  n.getOperatorType();	  float    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	12	None	replace
156	[BUG]  [BUGGY]  Double  op  =  n.getOperatorType();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Double  op  =  n.getOperatorType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Double  op  =  n.getOperatorType();	  float    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	12	None	replace
157	[BUG]  [BUGGY]  Integer  op  =  left.getType()  |  0xFFFF;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  |  0xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  |  0xFFFF;	  Integer    op    =    left.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	51	None	replace
158	[BUG]  [BUGGY]  Integer  op  =  left.getType()  -  0xFFFF;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  -  0xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  -  0xFFFF;	  Integer    op    =    left.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	51	None	replace
159	[BUG]  [BUGGY]  Integer  op  =  left.getType()  +  0xFFFF;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  +  0xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  +  0xFFFF;	  Integer    op    =    left.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	51	None	replace
160	[BUG]  [BUGGY]  Integer  op  =  left.getType()  &  0xFFFFL;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  &  0xFFFFL;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  &  0xFFFFL;	  Integer    op    =    left.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	51	None	replace
161	[BUG]  [BUGGY]  Integer  op  =  left.getType()  <  0xFFFF;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  <  0xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  <  0xFFFF;	  Integer    op    =    left.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	51	None	replace
162	[BUG]  [BUGGY]  char  op  =  left.getType()  -  1;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  char  op  =  left.getType()  -  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	char  op  =  left.getType()  -  1;	  int    op    =    left.getType()    -    1;    	non-compiled	[CE]  orphaned  case	36	None	replace
163	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.GETELEM;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.GETELEM;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.GETELEM;	  boolean    op    =    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	17	None	replace
164	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME;	  boolean    op    =    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	17	None	replace
165	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION;	  boolean    op    =    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	17	None	replace
166	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.GETELEM;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.GETELEM;	  boolean    op    =    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	17	None	replace
167	[BUG]  [BUGGY]  int  op  =  left.getType()  |  0xFFFF;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  |  0xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  |  0xFFFF;	  int    op    =    left.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	38	None	replace
168	[BUG]  [BUGGY]  int  op  =  left.getType()  &  0xFFFFL;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  &  0xFFFFL;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  &  0xFFFFL;	  int    op    =    left.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	38	None	replace
169	[BUG]  [BUGGY]  int  op  =  left.getType()  -  0xFFFF;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  -  0xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  -  0xFFFF;	  int    op    =    left.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	38	None	replace
170	[BUG]  [BUGGY]  int  op  =  left.getType()  &  1xFFFF;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  &  1xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  &  1xFFFF;	  int    op    =    left.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	38	None	replace
171	[BUG]  [BUGGY]  int  lhType  =  left.getType()  +  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  lhType  =  left.getType()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  lhType  =  left.getType()  +  1;	  int    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	7	None	replace
172	[BUG]  [BUGGY]  int  lhType  =  left.getType()  -  1;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  lhType  =  left.getType()  -  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  lhType  =  left.getType()  -  1;	  int    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	7	None	replace
173	[BUG]  [BUGGY]  int  lhType  =  left.getType()  &  0xFFFF;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  lhType  =  left.getType()  &  0xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  lhType  =  left.getType()  &  0xFFFF;	  int    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	7	None	replace
174	[BUG]  [BUGGY]  int  lhType  =  left.getType()  ||  undefinedRight;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  lhType  =  left.getType()  ||  undefinedRight;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  lhType  =  left.getType()  ||  undefinedRight;	  int    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	7	None	replace
175	[BUG]  [BUGGY]  String  op  =  right.getType();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  String  op  =  right.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	String  op  =  right.getType();	  char    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	59	None	replace
176	[BUG]  [BUGGY]  Node  n  =  left.getType();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  n  =  left.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  n  =  left.getType();	  Node    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	46	None	replace
177	[BUG]  [BUGGY]  Node  lhType  =  left.getType();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  lhType  =  left.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  lhType  =  left.getType();	  Node    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	46	None	replace
178	[BUG]  [BUGGY]  Node  rn  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  rn  =  n.getFirstChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  rn  =  n.getFirstChild();	  Node    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	46	None	replace
179	[BUG]  [BUGGY]  Char  op  =  left.getType();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Char  op  =  left.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Char  op  =  left.getType();	  Char    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	45	None	replace
180	[BUG]  [BUGGY]  Char  op  =  n.getChar();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Char  op  =  n.getChar();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Char  op  =  n.getChar();	  Char    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	45	None	replace
181	[BUG]  [BUGGY]  Char  op  =  n.getParent();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Char  op  =  n.getParent();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Char  op  =  n.getParent();	  Char    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	45	None	replace
182	[BUG]  [BUGGY]  Char  op  =  n.getChildCount();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Char  op  =  n.getChildCount();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Char  op  =  n.getChildCount();	  Char    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	45	None	replace
183	[BUG]  [BUGGY]  Char  op  =  right.getType();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Char  op  =  right.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Char  op  =  right.getType();	  Char    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	45	None	replace
184	[BUG]  [BUGGY]  Integer  op  =  n.getLastChild();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  n.getLastChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  n.getLastChild();	  Integer    op    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	64	None	replace
185	[BUG]  [BUGGY]  Integer  op  =  right.getFirstChild();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  right.getFirstChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  right.getFirstChild();	  Integer    op    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	64	None	replace
186	[BUG]  [BUGGY]  Node  op  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  op  =  n.getFirstChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  op  =  n.getFirstChild();	  Integer    op    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	64	None	replace
187	[BUG]  [BUGGY]  Integer  op  =  left.getLastChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getLastChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getLastChild();	  Integer    op    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	64	None	replace
188	[BUG]  [BUGGY]  double  lhType  =  n.getType();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  double  lhType  =  n.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	double  lhType  =  n.getType();	  float    lhType    =    n.getType();    	non-compiled	[CE]  orphaned  case	29	None	replace
189	[BUG]  [BUGGY]  float  lhType  =  left.getType();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  float  lhType  =  left.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	float  lhType  =  left.getType();	  float    lhType    =    n.getType();    	non-compiled	[CE]  orphaned  case	29	None	replace
190	[BUG]  [BUGGY]  Integer  lhType  =  n.getType();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  lhType  =  n.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  lhType  =  n.getType();	  float    lhType    =    n.getType();    	non-compiled	[CE]  orphaned  case	29	None	replace
191	[BUG]  [BUGGY]  long  lhType  =  n.getType();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  long  lhType  =  n.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	long  lhType  =  n.getType();	  float    lhType    =    n.getType();    	non-compiled	[CE]  orphaned  case	29	None	replace
192	[BUG]  [BUGGY]  float  lhType  =  right.getType();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  float  lhType  =  right.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	float  lhType  =  right.getType();	  float    lhType    =    n.getType();    	non-compiled	[CE]  orphaned  case	29	None	replace
193	[BUG]  [BUGGY]  Integer  op  =  left.getNext();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getNext();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getNext();	  Integer    op    =    left.getParent();    	non-compiled	[CE]  orphaned  case	68	None	replace
194	[BUG]  [BUGGY]  Integer  op  =  right.getParent();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  right.getParent();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  right.getParent();	  Integer    op    =    left.getParent();    	non-compiled	[CE]  orphaned  case	68	None	replace
195	[BUG]  [BUGGY]  boolean  op  =  right.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  right.getType()  ==  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  right.getType()  ==  Token.VAR;	  boolean    op    =    right.getType();    	non-compiled	[CE]  orphaned  case	16	None	replace
196	[BUG]  [BUGGY]  boolean  op  =  right.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  right.getType()  ==  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  right.getType()  ==  Token.FUNCTION;	  boolean    op    =    right.getType();    	non-compiled	[CE]  orphaned  case	16	None	replace
197	[BUG]  [BUGGY]  boolean  op  =  right.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  right.getType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  right.getType()!=  Token.VAR;	  boolean    op    =    right.getType();    	non-compiled	[CE]  orphaned  case	16	None	replace
198	[BUG]  [BUGGY]  boolean  op  =  right.getType()!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  right.getType()!=  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  right.getType()!=  Token.FUNCTION;	  boolean    op    =    right.getType();    	non-compiled	[CE]  orphaned  case	16	None	replace
199	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.BLOCK;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.BLOCK;	  boolean    op    =    n.getType()!=    Token.BLOCK;    	non-compiled	[CE]  orphaned  case	71	None	replace
200	[BUG]  [BUGGY]  boolean  op  =  left.getType()!=  Token.BLOCK;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  left.getType()!=  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  left.getType()!=  Token.BLOCK;	  boolean    op    =    n.getType()!=    Token.BLOCK;    	non-compiled	[CE]  orphaned  case	71	None	replace
201	[BUG]  [BUGGY]  boolean  op  =  right.getType()!=  Token.BLOCK;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  right.getType()!=  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  right.getType()!=  Token.BLOCK;	  boolean    op    =    n.getType()!=    Token.BLOCK;    	non-compiled	[CE]  orphaned  case	71	None	replace
202	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.OBJECTLIT;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.OBJECTLIT;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.OBJECTLIT;	  boolean    op    =    n.getType()!=    Token.OBJECTLIT;    	non-compiled	[CE]  orphaned  case	70	None	replace
203	[BUG]  [BUGGY]  boolean  op  =  left.getType()!=  Token.OBJECTLIT;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  left.getType()!=  Token.OBJECTLIT;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  left.getType()!=  Token.OBJECTLIT;	  boolean    op    =    n.getType()!=    Token.OBJECTLIT;    	non-compiled	[CE]  orphaned  case	70	None	replace
204	[BUG]  [BUGGY]  boolean  op  =  right.getType()!=  Token.OBJECTLIT;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  right.getType()!=  Token.OBJECTLIT;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  right.getType()!=  Token.OBJECTLIT;	  boolean    op    =    n.getType()!=    Token.OBJECTLIT;    	non-compiled	[CE]  orphaned  case	70	None	replace
205	[BUG]  [BUGGY]  boolean  op  =  left.getType()  ==  Token.OBJECTLIT;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  left.getType()  ==  Token.OBJECTLIT;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  left.getType()  ==  Token.OBJECTLIT;	  boolean    op    =    n.getType()!=    Token.OBJECTLIT;    	non-compiled	[CE]  orphaned  case	70	None	replace
206	[BUG]  [BUGGY]  boolean  lhType  =  n.getType()!=  Token.OBJECTLIT;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  n.getType()!=  Token.OBJECTLIT;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  n.getType()!=  Token.OBJECTLIT;	  boolean    op    =    n.getType()!=    Token.OBJECTLIT;    	non-compiled	[CE]  orphaned  case	70	None	replace
207	[BUG]  [BUGGY]  Node  right  =  n.getParent();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  right  =  n.getParent();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  right  =  n.getParent();	  Node    right    =    n.getNext();    	non-compiled	[CE]  orphaned  case	6	None	replace
208	[BUG]  [BUGGY]  Node  right  =  left.getParent();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  right  =  left.getParent();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  right  =  left.getParent();	  Node    right    =    n.getNext();    	non-compiled	[CE]  orphaned  case	6	None	replace
209	[BUG]  [BUGGY]  Integer  op  =  left.getFirstChild().intValue();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getFirstChild().intValue();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getFirstChild().intValue();	  Integer    op    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
210	[BUG]  [BUGGY]  Integer  op  =  left.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getFirstChild().getNext();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getFirstChild().getNext();	  Integer    op    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
211	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.GETELEM;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.GETELEM;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.GETELEM;	  boolean    op    =    n.getType()!=    Token.VAR;    	non-compiled	[CE]  orphaned  case	19	None	replace
212	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.FUNCTION;	  boolean    op    =    n.getType()!=    Token.VAR;    	non-compiled	[CE]  orphaned  case	19	None	replace
213	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.NAME;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.NAME;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.NAME;	  boolean    op    =    n.getType()!=    Token.VAR;    	non-compiled	[CE]  orphaned  case	19	None	replace
214	[BUG]  [BUGGY]  boolean  lhType  =  left.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  left.getType()  ==  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  left.getType()  ==  Token.FUNCTION;	  boolean    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	50	None	replace
215	[BUG]  [BUGGY]  boolean  lhType  =  left.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  left.getType()  ==  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  left.getType()  ==  Token.VAR;	  boolean    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	50	None	replace
216	[BUG]  [BUGGY]  boolean  lhType  =  left.getType()!=  Token.NAME?  left.getType()  :  Integer.MAX_VALUE;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  left.getType()!=  Token.NAME?  left.getType()  :  Integer.MAX_VALUE;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  left.getType()!=  Token.NAME?  left.getType()  :  Integer.MAX_VALUE;	  boolean    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	50	None	replace
217	[BUG]  [BUGGY]  boolean  lhType  =  left.getType()  ==  Token.NAME?  left.getType()  :  Integer.MAX_VALUE;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  left.getType()  ==  Token.NAME?  left.getType()  :  Integer.MAX_VALUE;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  left.getType()  ==  Token.NAME?  left.getType()  :  Integer.MAX_VALUE;	  boolean    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	50	None	replace
218	[BUG]  [BUGGY]  boolean  lhType  =  left.getType()!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  left.getType()!=  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  left.getType()!=  Token.FUNCTION;	  boolean    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	50	None	replace
219	[BUG]  [BUGGY]  Integer  op  =  left.getType().intValue()  }  ;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType().intValue()  }  ;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType().intValue()  }  ;	  Integer    op    =    left.getType()    }    ;    	non-compiled	[CE]  orphaned  case	33	None	replace
220	[BUG]  [BUGGY]  Integer  op  =  right.getType()  }  ;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  right.getType()  }  ;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  right.getType()  }  ;	  Integer    op    =    left.getType()    }    ;    	non-compiled	[CE]  orphaned  case	33	None	replace
221	[BUG]  [BUGGY]  Integer  op  =  left.getType()!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()!=  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()!=  Token.FUNCTION;	  Integer    op    =    left.getType()    }    ;    	non-compiled	[CE]  orphaned  case	33	None	replace
222	[BUG]  [BUGGY]  Integer  op  =  left.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  ==  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  ==  Token.FUNCTION;	  Integer    op    =    left.getType()    }    ;    	non-compiled	[CE]  orphaned  case	33	None	replace
223	[BUG]  [BUGGY]  Integer  op  =  left.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  ==  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  ==  Token.VAR;	  Integer    op    =    left.getType()    }    ;    	non-compiled	[CE]  orphaned  case	33	None	replace
224	[BUG]  [BUGGY]  Integer  op  =  left.getIntValue();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getIntValue();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getIntValue();	  Integer    op    =    n.getIntValue();    	non-compiled	[CE]  orphaned  case	67	None	replace
225	[BUG]  [BUGGY]  Integer  op  =  right.getIntValue();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  right.getIntValue();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  right.getIntValue();	  Integer    op    =    n.getIntValue();    	non-compiled	[CE]  orphaned  case	67	None	replace
226	[BUG]  [BUGGY]  Node  op  =  n.getIntValue();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  op  =  n.getIntValue();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  op  =  n.getIntValue();	  Integer    op    =    n.getIntValue();    	non-compiled	[CE]  orphaned  case	67	None	replace
227	[BUG]  [BUGGY]  int  op  =  n.getIntValue();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  n.getIntValue();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  n.getIntValue();	  Integer    op    =    n.getIntValue();    	non-compiled	[CE]  orphaned  case	67	None	replace
228	[BUG]  [BUGGY]  int  op  =  left.getIntValue();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getIntValue();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getIntValue();	  Integer    op    =    n.getIntValue();    	non-compiled	[CE]  orphaned  case	67	None	replace
229	[BUG]  [BUGGY]  String  op  =  n.getIntValue();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  String  op  =  n.getIntValue();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	String  op  =  n.getIntValue();	  Integer    op    =    n.getIntValue();    	non-compiled	[CE]  orphaned  case	67	None	replace
230	[BUG]  [BUGGY]  boolean  op  =  left.getType()!=  Token.EMPTY;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  left.getType()!=  Token.EMPTY;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  left.getType()!=  Token.EMPTY;	  boolean    op    =    n.getType()!=    Token.EMPTY;    	non-compiled	[CE]  orphaned  case	69	None	replace
231	[BUG]  [BUGGY]  boolean  op  =  right.getType()!=  Token.EMPTY;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  right.getType()!=  Token.EMPTY;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  right.getType()!=  Token.EMPTY;	  boolean    op    =    n.getType()!=    Token.EMPTY;    	non-compiled	[CE]  orphaned  case	69	None	replace
232	[BUG]  [BUGGY]  boolean  op  =  left.getType()  ==  Token.EMPTY;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  left.getType()  ==  Token.EMPTY;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  left.getType()  ==  Token.EMPTY;	  boolean    op    =    n.getType()!=    Token.EMPTY;    	non-compiled	[CE]  orphaned  case	69	None	replace
233	[BUG]  [BUGGY]  int  lhType  =  right.getType()  +  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  lhType  =  right.getType()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  lhType  =  right.getType()  +  1;	  int    lhType    =    right.getType();    	non-compiled	[CE]  orphaned  case	27	None	replace
234	[BUG]  [BUGGY]  int  lhType  =  right.getType()  -  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  lhType  =  right.getType()  -  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  lhType  =  right.getType()  -  1;	  int    lhType    =    right.getType();    	non-compiled	[CE]  orphaned  case	27	None	replace
235	[BUG]  [BUGGY]  Node  op  =  n.getOperatorType();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  op  =  n.getOperatorType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  op  =  n.getOperatorType();	  Integer    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	54	None	replace
236	[BUG]  [BUGGY]  String  op  =  n.getOperatorType();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  String  op  =  n.getOperatorType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	String  op  =  n.getOperatorType();	  Integer    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	54	None	replace
237	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	1	None	replace
238	[BUG]  [BUGGY]  int  op  =  right.getType()  |  0xff;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  right.getType()  |  0xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  right.getType()  |  0xff;	  int    op    =    right.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	22	None	replace
239	[BUG]  [BUGGY]  int  op  =  right.getType()  -  0xff;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  right.getType()  -  0xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  right.getType()  -  0xff;	  int    op    =    right.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	22	None	replace
240	[BUG]  [BUGGY]  int  op  =  right.getType()  &  1xff;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  right.getType()  &  1xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  right.getType()  &  1xff;	  int    op    =    right.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	22	None	replace
241	[BUG]  [BUGGY]  float  op  =  right.getType()  &  0xff;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  float  op  =  right.getType()  &  0xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	float  op  =  right.getType()  &  0xff;	  int    op    =    right.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	22	None	replace
242	[BUG]  [BUGGY]  int  op  =  right.getType()  |  0xFFFF;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  right.getType()  |  0xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  right.getType()  |  0xFFFF;	  int    op    =    right.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	21	None	replace
243	[BUG]  [BUGGY]  int  op  =  right.getType()  &  0xFFFFL;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  right.getType()  &  0xFFFFL;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  right.getType()  &  0xFFFFL;	  int    op    =    right.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	21	None	replace
244	[BUG]  [BUGGY]  int  op  =  right.getType()  -  0xFFFF;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  right.getType()  -  0xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  right.getType()  -  0xFFFF;	  int    op    =    right.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	21	None	replace
245	[BUG]  [BUGGY]  float  op  =  right.getType()  &  0xFFFF;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  float  op  =  right.getType()  &  0xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	float  op  =  right.getType()  &  0xFFFF;	  int    op    =    right.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	21	None	replace
246	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME;	  boolean    op    =    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	18	None	replace
247	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETELEM;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETELEM;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETELEM;	  boolean    op    =    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	18	None	replace
248	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT;	  boolean    op    =    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	18	None	replace
249	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR;	  boolean    op    =    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	18	None	replace
250	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValue(left,  false);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValue(left,  false);  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValue(left,  false);	  boolean    op    =    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	18	None	replace
251	[BUG]  [BUGGY]  boolean  op  =  right.getType()  &  0xff;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  right.getType()  &  0xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  right.getType()  &  0xff;	  int    op    =    right.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	22	None	replace
252	[BUG]  [BUGGY]  int  op  =  right.getType()  &  0xff  &  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  right.getType()  &  0xff  &  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  right.getType()  &  0xff  &  1;	  int    op    =    right.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	22	None	replace
253	[BUG]  [BUGGY]  boolean  op  =  node.getType()!=  Token.EMPTY;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  node.getType()!=  Token.EMPTY;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  node.getType()!=  Token.EMPTY;	  boolean    op    =    n.getType()!=    Token.EMPTY;    	non-compiled	[CE]  orphaned  case	69	None	replace
254	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.GETELEM;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.GETELEM;	  boolean    op    =    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	17	None	replace
255	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME;	  boolean    op    =    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	17	None	replace
256	[BUG]  [BUGGY]  boolean  op  =  right.getType()  ==  Token.EMPTY;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  right.getType()  ==  Token.EMPTY;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  right.getType()  ==  Token.EMPTY;	  boolean    op    =    right.getType();    	non-compiled	[CE]  orphaned  case	16	None	replace
257	[BUG]  [BUGGY]  Node  right  =  n.removeFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  right  =  n.removeFirstChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  right  =  n.removeFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	2	None	replace
258	[BUG]  [BUGGY]  int  op  =  left.getOpcode();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getOpcode();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getOpcode();	  int    op    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	61	None	replace
259	[BUG]  [BUGGY]  int  op  =  left.getFirstChild()  +  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getFirstChild()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getFirstChild()  +  1;	  int    op    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	61	None	replace
260	[BUG]  [BUGGY]  Integer  op  =  n.getChildCount()  -  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  n.getChildCount()  -  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  n.getChildCount()  -  1;	  Integer    op    =    n.getChildCount();    	non-compiled	[CE]  orphaned  case	65	None	replace
261	[BUG]  [BUGGY]  Node  right  =  n.getNext()  ||  left.getType()!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  right  =  n.getNext()  ||  left.getType()!=  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  right  =  n.getNext()  ||  left.getType()!=  Token.FUNCTION;	  Node    right    =    n.getNext();    	non-compiled	[CE]  orphaned  case	6	None	replace
262	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined       "))    ||    (Token.VOID    ==    left.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild()    	non-compiled	[CE]  orphaned  case	63	None	replace
263	[BUG]  [BUGGY]  int  lhType  =  left.getType()  &  0xff;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  lhType  =  left.getType()  &  0xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  lhType  =  left.getType()  &  0xff;	  int    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	7	None	replace
264	[BUG]  [BUGGY]  Integer  op  =  n.getIntValue()  +  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  n.getIntValue()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  n.getIntValue()  +  1;	  Integer    op    =    n.getIntValue();    	non-compiled	[CE]  orphaned  case	67	None	replace
265	[BUG]  [BUGGY]  Integer  op  =  left.getOperatorType()  &  0xff;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getOperatorType()  &  0xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getOperatorType()  &  0xff;	  Integer    op    =    left.getOperatorType();    	non-compiled	[CE]  orphaned  case	13	None	replace
266	[BUG]  [BUGGY]  Integer  op  =  left.getOperatorType()  &  0xFFFF;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getOperatorType()  &  0xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getOperatorType()  &  0xFFFF;	  Integer    op    =    left.getOperatorType();    	non-compiled	[CE]  orphaned  case	13	None	replace
267	[BUG]  [BUGGY]  Node  result  =  left.replaceChild(n,  newNode);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  result  =  left.replaceChild(n,  newNode);  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  result  =  left.replaceChild(n,  newNode);	  Node    result    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
268	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  n  =  left.removeFirstChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	n  =  left.removeFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
269	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  newNode);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  n  =  left.replaceChild(n,  newNode);  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	n  =  left.replaceChild(n,  newNode);	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
270	[BUG]  [BUGGY]  Type  op  =  n.getType();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Type  op  =  n.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Type  op  =  n.getType();	  Character    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	44	None	replace
271	[BUG]  [BUGGY]  CharType  op  =  n.getType();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  CharType  op  =  n.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	CharType  op  =  n.getType();	  Character    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	44	None	replace
272	[BUG]  [BUGGY]  Node  left  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  left  =  left.removeFirstChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  left  =  left.removeFirstChild();	  Node    left    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	57	None	replace
273	[BUG]  [BUGGY]  Node  left  =  left.replaceChild(n,  newNode);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  left  =  left.replaceChild(n,  newNode);  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  left  =  left.replaceChild(n,  newNode);	  Node    left    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	57	None	replace
274	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.GETELEM;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.GETELEM;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.GETELEM;	  boolean    op    =    n.getType()!=    Token.BLOCK;    	non-compiled	[CE]  orphaned  case	71	None	replace
275	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.NAME;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.NAME;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.NAME;	  boolean    op    =    n.getType()!=    Token.BLOCK;    	non-compiled	[CE]  orphaned  case	71	None	replace
276	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.VAR;	  boolean    op    =    n.getType()!=    Token.BLOCK;    	non-compiled	[CE]  orphaned  case	71	None	replace
277	[BUG]  [BUGGY]  Node  op  =  node.getType();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  op  =  node.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  op  =  node.getType();	  Node    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	46	None	replace
278	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.GETELEM  ||  n.getType()!=  Token.GETELEM;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.GETELEM  ||  n.getType()!=  Token.GETELEM;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.GETELEM  ||  n.getType()!=  Token.GETELEM;	  boolean    op    =    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	48	None	replace
279	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;	  boolean    op    =    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	48	None	replace
280	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.GETELEM  ||  n.getType()!=  Token.SETELEM;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.GETELEM  ||  n.getType()!=  Token.SETELEM;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.GETELEM  ||  n.getType()!=  Token.SETELEM;	  boolean    op    =    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	48	None	replace
281	[BUG]  [BUGGY]  Integer  op  =  n.getFirstChild().getNext();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  n.getFirstChild().getNext();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  n.getFirstChild().getNext();	  Integer    op    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	64	None	replace
282	[BUG]  [BUGGY]  Node  right  =  left.replaceChild(n,  newNode);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  right  =  left.replaceChild(n,  newNode);  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  right  =  left.replaceChild(n,  newNode);	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	1	None	replace
283	[BUG]  [BUGGY]  float  lhType  =  n.getType()  +  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  float  lhType  =  n.getType()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	float  lhType  =  n.getType()  +  1;	  float    lhType    =    n.getType();    	non-compiled	[CE]  orphaned  case	29	None	replace
284	[BUG]  [BUGGY]  boolean  op  =  right.getType()  &  0xFFFF;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  right.getType()  &  0xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  right.getType()  &  0xFFFF;	  int    op    =    right.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	21	None	replace
285	[BUG]  [BUGGY]  byte  op  =  n.getType();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  byte  op  =  n.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	byte  op  =  n.getType();	  long    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	25	None	replace
286	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.VOID;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.VOID;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.VOID;	  boolean    op    =    n.getType()!=    Token.VAR;    	non-compiled	[CE]  orphaned  case	19	None	replace
287	[BUG]  [BUGGY]  String  op  =  n.getNodeType();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  String  op  =  n.getNodeType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	String  op  =  n.getNodeType();	  String    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	41	None	replace
288	[BUG]  [BUGGY]  String  op  =  n.getType()  +  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  String  op  =  n.getType()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	String  op  =  n.getType()  +  1;	  String    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	41	None	replace
289	[BUG]  [BUGGY]  Boolean  op  =  n.getType()!=  Token.BLOCK;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  n.getType()!=  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  n.getType()!=  Token.BLOCK;	  Boolean    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	42	None	replace
290	[BUG]  [BUGGY]  Boolean  op  =  n.getType()  ==  Token.BLOCK;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  n.getType()  ==  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  n.getType()  ==  Token.BLOCK;	  Boolean    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	42	None	replace
291	[BUG]  [BUGGY]  Boolean  op  =  n.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  n.getType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  n.getType()!=  Token.VAR;	  Boolean    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	42	None	replace
292	[BUG]  [BUGGY]  Boolean  op  =  n.getType()!=  Token.GETELEM;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  n.getType()!=  Token.GETELEM;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  n.getType()!=  Token.GETELEM;	  Boolean    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	42	None	replace
293	[BUG]  [BUGGY]  boolean  op  =  node.getType()!=  Token.OBJECTLIT;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  node.getType()!=  Token.OBJECTLIT;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  node.getType()!=  Token.OBJECTLIT;	  boolean    op    =    n.getType()!=    Token.OBJECTLIT;    	non-compiled	[CE]  orphaned  case	70	None	replace
294	[BUG]  [BUGGY]  Integer  lhType  =  left.getType()  -  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  lhType  =  left.getType()  -  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  lhType  =  left.getType()  -  1;	  Integer    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	28	None	replace
295	[BUG]  [BUGGY]  Integer  lhType  =  left.getType()  ||  n.getType()!=  Token.NAME;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  lhType  =  left.getType()  ||  n.getType()!=  Token.NAME;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  lhType  =  left.getType()  ||  n.getType()!=  Token.NAME;	  Integer    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	28	None	replace
296	[BUG]  [BUGGY]  Integer  lhType  =  left.getType()  ||  n.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  lhType  =  left.getType()  ||  n.getType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  lhType  =  left.getType()  ||  n.getType()!=  Token.VAR;	  Integer    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	28	None	replace
297	[BUG]  [BUGGY]  int  op  =  n.getOperatorType()  }  ;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  n.getOperatorType()  }  ;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  n.getOperatorType()  }  ;	  int    op    =    n.getOperatorType()    -    1;    	non-compiled	[CE]  orphaned  case	56	None	replace
298	[BUG]  [BUGGY]  int  op  =  n.getOperatorType()  *  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  n.getOperatorType()  *  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  n.getOperatorType()  *  1;	  int    op    =    n.getOperatorType()    -    1;    	non-compiled	[CE]  orphaned  case	56	None	replace
299	[BUG]  [BUGGY]  int  op  =  n.getOperatorType()  <  Token.VAR;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  n.getOperatorType()  <  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  n.getOperatorType()  <  Token.VAR;	  int    op    =    n.getOperatorType()    -    1;    	non-compiled	[CE]  orphaned  case	56	None	replace
300	[BUG]  [BUGGY]  float  op  =  right.getOperatorType();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  float  op  =  right.getOperatorType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	float  op  =  right.getOperatorType();	  int    op    =    right.getOperatorType();    	non-compiled	[CE]  orphaned  case	9	None	replace
301	[BUG]  [BUGGY]  Integer  op  =  left.getType()  &  0xff  &  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  &  0xff  &  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  &  0xff  &  1;	  Integer    op    =    left.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	52	None	replace
302	[BUG]  [BUGGY]  Integer  op  =  left.getType()  &  0xff  +  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  &  0xff  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  &  0xff  +  1;	  Integer    op    =    left.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	52	None	replace
303	[BUG]  [BUGGY]  Integer  op  =  left.getType()  <  0xff;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  <  0xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  <  0xff;	  Integer    op    =    left.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	52	None	replace
304	[BUG]  [BUGGY]  boolean  lhType  =  left.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  left.getType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  left.getType()!=  Token.VAR;	  boolean    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	50	None	replace
305	[BUG]  [BUGGY]  boolean  lhType  =  left.getType()!=  Token.BLOCK;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  left.getType()!=  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  left.getType()!=  Token.BLOCK;	  boolean    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	50	None	replace
306	[BUG]  [BUGGY]  boolean  lhType  =  left.getType()!=  Token.STRING;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  left.getType()!=  Token.STRING;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  left.getType()!=  Token.STRING;	  boolean    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	50	None	replace
307	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.GETELEM;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.GETELEM;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.GETELEM;	  boolean    op    =    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	49	None	replace
308	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT;	  boolean    op    =    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	49	None	replace
309	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.NAME;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.NAME;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.NAME;	  boolean    op    =    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	49	None	replace
310	[BUG]  [BUGGY]  Integer  op  =  left.getOpcode();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getOpcode();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getOpcode();	  Integer    op    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
311	[BUG]  [BUGGY]  Integer  op  =  left.getType()  +  1  }  ;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  +  1  }  ;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  +  1  }  ;	  Integer    op    =    left.getType()    }    ;    	non-compiled	[CE]  orphaned  case	33	None	replace
312	[BUG]  [BUGGY]  Integer  op  =  left.getType()!=  Token.BLOCK;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()!=  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()!=  Token.BLOCK;	  Integer    op    =    left.getType()    }    ;    	non-compiled	[CE]  orphaned  case	33	None	replace
313	[BUG]  [BUGGY]  Integer  op  =  left.getType()  ==  Token.BLOCK;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  ==  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  ==  Token.BLOCK;	  Integer    op    =    left.getType()    }    ;    	non-compiled	[CE]  orphaned  case	33	None	replace
314	[BUG]  [BUGGY]  Integer  op  =  left.getType()  [Delete]  0;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()  [Delete]  0;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()  [Delete]  0;	  Integer    op    =    left.getType()    }    ;    	non-compiled	[CE]  orphaned  case	33	None	replace
315	[BUG]  [BUGGY]  int  op  =  left.getOperatorType()  -  2;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getOperatorType()  -  2;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getOperatorType()  -  2;	  int    op    =    left.getOperatorType();    	non-compiled	[CE]  orphaned  case	8	None	replace
316	[BUG]  [BUGGY]  boolean  op  =  left.getType()!=  Token.NAME;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  left.getType()!=  Token.NAME;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  left.getType()!=  Token.NAME;	  boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	14	None	replace
317	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.FUNCTION  ||!NodeUtil.isLiteralValue(left);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.FUNCTION  ||!NodeUtil.isLiteralValue(left);  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.FUNCTION  ||!NodeUtil.isLiteralValue(left);	  boolean    op    =    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	18	None	replace
318	[BUG]  [BUGGY]  boolean  lhType  =  n.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  n.getType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  n.getType()!=  Token.VAR;	  boolean    lhType    =    n.getType();    	non-compiled	[CE]  orphaned  case	15	None	replace
319	[BUG]  [BUGGY]  boolean  lhType  =  n.getType()!=  Token.BLOCK;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  n.getType()!=  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  n.getType()!=  Token.BLOCK;	  boolean    lhType    =    n.getType();    	non-compiled	[CE]  orphaned  case	15	None	replace
320	[BUG]  [BUGGY]  boolean  lhType  =  n.getType()!=  Token.STRING;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  n.getType()!=  Token.STRING;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  n.getType()!=  Token.STRING;	  boolean    lhType    =    n.getType();    	non-compiled	[CE]  orphaned  case	15	None	replace
321	[BUG]  [BUGGY]  Boolean  op  =  left.getType()!=  Token.BLOCK;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  left.getType()!=  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  left.getType()!=  Token.BLOCK;	  Boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	43	None	replace
322	[BUG]  [BUGGY]  Boolean  op  =  left.getType()  }  ;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  left.getType()  }  ;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  left.getType()  }  ;	  Boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	43	None	replace
323	[BUG]  [BUGGY]  Boolean  op  =  left.getType()  >>  Token.BLOCK;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  left.getType()  >>  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  left.getType()  >>  Token.BLOCK;	  Boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	43	None	replace
324	[BUG]  [BUGGY]  Boolean  op  =  left.getType()  ==  Token.BLOCK;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  left.getType()  ==  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  left.getType()  ==  Token.BLOCK;	  Boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	43	None	replace
325	[BUG]  [BUGGY]  Boolean  op  =  left.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  left.getType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  left.getType()!=  Token.VAR;	  Boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	43	None	replace
326	[BUG]  [BUGGY]  int  op  =  left.getType()  &  0xff  &  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  &  0xff  &  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  &  0xff  &  1;	  int    op    =    left.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	39	None	replace
327	[BUG]  [BUGGY]  int  op  =  left.getType()  &  0xff  -  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  &  0xff  -  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  &  0xff  -  1;	  int    op    =    left.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	39	None	replace
328	[BUG]  [BUGGY]  int  op  =  left.getType()  &  0xff  &  0xff;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  &  0xff  &  0xff;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  &  0xff  &  0xff;	  int    op    =    left.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	39	None	replace
329	[BUG]  [BUGGY]  Integer  op  =  n.getOperatorType().restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  n.getOperatorType().restrictByNotNullOrUndefined();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  n.getOperatorType().restrictByNotNullOrUndefined();	  Integer    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	54	None	replace
330	[BUG]  [BUGGY]  Integer  op  =  n.getOperatorType().intValue();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  n.getOperatorType().intValue();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  n.getOperatorType().intValue();	  Integer    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	54	None	replace
331	[BUG]  [BUGGY]  float  op  =  left.getType()  &  lhType;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  float  op  =  left.getType()  &  lhType;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	float  op  =  left.getType()  &  lhType;	  float    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	24	None	replace
332	[BUG]  [BUGGY]  Char  op  =  n.getOpcode();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Char  op  =  n.getOpcode();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Char  op  =  n.getOpcode();	  Char    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	45	None	replace
333	[BUG]  [BUGGY]  Integer  lhType  =  n.getOperatorType();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  lhType  =  n.getOperatorType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  lhType  =  n.getOperatorType();	  int    lhType    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	11	None	replace
334	[BUG]  [BUGGY]  int  op  =  left.getType()  &  0x3f;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  &  0x3f;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  &  0x3f;	  int    op    =    left.getType()    &    0x7f;    	non-compiled	[CE]  orphaned  case	40	None	replace
335	[BUG]  [BUGGY]  int  op  =  left.getType()  &  0x7f  -  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  &  0x7f  -  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  &  0x7f  -  1;	  int    op    =    left.getType()    &    0x7f;    	non-compiled	[CE]  orphaned  case	40	None	replace
336	[BUG]  [BUGGY]  Integer  op  =  n.getInitialValue()  +  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  n.getInitialValue()  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  n.getInitialValue()  +  1;	  Integer    op    =    n.getInitialValue();    	non-compiled	[CE]  orphaned  case	66	None	replace
337	[BUG]  [BUGGY]  Integer  op  =  n.getInitialValue().intValue();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  n.getInitialValue().intValue();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  n.getInitialValue().intValue();	  Integer    op    =    n.getInitialValue();    	non-compiled	[CE]  orphaned  case	66	None	replace
338	[BUG]  [BUGGY]  boolean  op  =  n.getOperatorType()!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getOperatorType()!=  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getOperatorType()!=  Token.FUNCTION;	  boolean    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	10	None	replace
339	[BUG]  [BUGGY]  boolean  op  =  n.getOperatorType()!=  Token.EMPTY;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getOperatorType()!=  Token.EMPTY;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getOperatorType()!=  Token.EMPTY;	  boolean    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	10	None	replace
340	[BUG]  [BUGGY]  boolean  op  =  n.getOperatorType()  ==  Token.EMPTY;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getOperatorType()  ==  Token.EMPTY;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getOperatorType()  ==  Token.EMPTY;	  boolean    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	10	None	replace
341	[BUG]  [BUGGY]  int  op  =  left.getType()  &  0xFFFF  +  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  &  0xFFFF  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  &  0xFFFF  +  1;	  int    op    =    left.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	38	None	replace
342	[BUG]  [BUGGY]  int  op  =  left.getType()  +  0xFFFF;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  +  0xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  +  0xFFFF;	  int    op    =    left.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	38	None	replace
343	[BUG]  [BUGGY]  int  op  =  left.getType()  &  0xFFFF  |  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  &  0xFFFF  |  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  &  0xFFFF  |  1;	  int    op    =    left.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	38	None	replace
344	[BUG]  [BUGGY]  boolean  op  =  left.getType()  ==  Token.VOID;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  left.getType()  ==  Token.VOID;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  left.getType()  ==  Token.VOID;	  boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	14	None	replace
345	[BUG]  [BUGGY]  Node  op  =  n.getNext();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  op  =  n.getNext();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  op  =  n.getNext();	  Node    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	46	None	replace
346	[BUG]  [BUGGY]  Node  op  =  n.getParent();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  op  =  n.getParent();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  op  =  n.getParent();	  Node    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	46	None	replace
347	[BUG]  [BUGGY]  boolean  op  =  n.getOperatorType()!=  Token.OBJECTLIT;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getOperatorType()!=  Token.OBJECTLIT;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getOperatorType()!=  Token.OBJECTLIT;	  boolean    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	10	None	replace
348	[BUG]  [BUGGY]  boolean  op  =  n.getOperatorType()  ==  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getOperatorType()  ==  Token.EXPR_RESULT;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getOperatorType()  ==  Token.EXPR_RESULT;	  boolean    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	10	None	replace
349	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.VOID  ||  n.getType()!=  Token.GT;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.VOID  ||  n.getType()!=  Token.GT;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.VOID  ||  n.getType()!=  Token.GT;	  boolean    op    =    n.getType()!=    Token.VOID;    	non-compiled	[CE]  orphaned  case	72	None	replace
350	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.VOID  ||  n.getType()!=  Token.GETELEM;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.VOID  ||  n.getType()!=  Token.GETELEM;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.VOID  ||  n.getType()!=  Token.GETELEM;	  boolean    op    =    n.getType()!=    Token.VOID;    	non-compiled	[CE]  orphaned  case	72	None	replace
351	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.VOID  ||  n.getType()!=  Token.BLOCK;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.VOID  ||  n.getType()!=  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.VOID  ||  n.getType()!=  Token.BLOCK;	  boolean    op    =    n.getType()!=    Token.VOID;    	non-compiled	[CE]  orphaned  case	72	None	replace
352	[BUG]  [BUGGY]  Boolean  op  =  n.getType()  ==  Token.VOID?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  n.getType()  ==  Token.VOID?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  n.getType()  ==  Token.VOID?  Boolean.TRUE  :  Boolean.FALSE;	  Boolean    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	42	None	replace
353	[BUG]  [BUGGY]  Boolean  op  =  n.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  n.getType()  ==  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  n.getType()  ==  Token.VAR;	  Boolean    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	42	None	replace
354	[BUG]  [BUGGY]  Boolean  op  =  n.getType()!=  Token.NAME?  n.getType()  :  Boolean.TRUE;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  n.getType()!=  Token.NAME?  n.getType()  :  Boolean.TRUE;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  n.getType()!=  Token.NAME?  n.getType()  :  Boolean.TRUE;	  Boolean    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	42	None	replace
355	[BUG]  [BUGGY]  Integer  op  =  n.getChildCount()  *  2;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  n.getChildCount()  *  2;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  n.getChildCount()  *  2;	  Integer    op    =    n.getChildCount();    	non-compiled	[CE]  orphaned  case	65	None	replace
356	[BUG]  [BUGGY]  Integer  op  =  n.getChildCount()  *  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  n.getChildCount()  *  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  n.getChildCount()  *  1;	  Integer    op    =    n.getChildCount();    	non-compiled	[CE]  orphaned  case	65	None	replace
357	[BUG]  [BUGGY]  int  op  =  left.getType()  ||  n.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  ||  n.getType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  ||  n.getType()!=  Token.VAR;	  int    op    =    left.getType()    -    1;    	non-compiled	[CE]  orphaned  case	36	None	replace
358	[BUG]  [BUGGY]  int  op  =  left.getType()  ||  n.getType()!=  Token.NAME;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  ||  n.getType()!=  Token.NAME;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  ||  n.getType()!=  Token.NAME;	  int    op    =    left.getType()    -    1;    	non-compiled	[CE]  orphaned  case	36	None	replace
359	[BUG]  [BUGGY]  String  op  =  n.getFirstChild();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  String  op  =  n.getFirstChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	String  op  =  n.getFirstChild();	  String    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	41	None	replace
360	[BUG]  [BUGGY]  String  op  =  n.getName();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  String  op  =  n.getName();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	String  op  =  n.getName();	  String    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	41	None	replace
361	[BUG]  [BUGGY]  Integer  op  =  right.getNext();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  right.getNext();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  right.getNext();	  Integer    op    =    left.getParent();    	non-compiled	[CE]  orphaned  case	68	None	replace
362	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.VAR;	  boolean    op    =    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	49	None	replace
363	[BUG]  [BUGGY]  double  op  =  n.getDouble();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  double  op  =  n.getDouble();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	double  op  =  n.getDouble();	  double    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	23	None	replace
364	[BUG]  [BUGGY]  int  op  =  left.getFirstChild().getString();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getFirstChild().getString();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getFirstChild().getString();	  int    op    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	61	None	replace
365	[BUG]  [BUGGY]  Node  right  =  left.getNext()  &&  n.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  right  =  left.getNext()  &&  n.getType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  right  =  left.getNext()  &&  n.getType()!=  Token.VAR;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	3	None	replace
366	[BUG]  [BUGGY]  Integer  op  =  n.getOperatorType().toString();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  n.getOperatorType().toString();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  n.getOperatorType().toString();	  Integer    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	54	None	replace
367	[BUG]  [BUGGY]  Integer  op  =  n.getOperatorType()  }  ;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  n.getOperatorType()  }  ;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  n.getOperatorType()  }  ;	  Integer    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	54	None	replace
368	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.BLOCK;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.BLOCK;	  boolean    op    =    n.getType()!=    Token.VAR;    	non-compiled	[CE]  orphaned  case	19	None	replace
369	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.GT;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.GT;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.VAR  ||  n.getType()!=  Token.GT;	  boolean    op    =    n.getType()!=    Token.VAR;    	non-compiled	[CE]  orphaned  case	19	None	replace
370	[BUG]  [BUGGY]  Integer  op  =  left.getOperatorType()  ||  n.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getOperatorType()  ||  n.getType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getOperatorType()  ||  n.getType()!=  Token.VAR;	  Integer    op    =    left.getOperatorType();    	non-compiled	[CE]  orphaned  case	13	None	replace
371	[BUG]  [BUGGY]  Integer  op  =  left.getOperatorType()  ||  lhType  ==  Token.VAR;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getOperatorType()  ||  lhType  ==  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getOperatorType()  ||  lhType  ==  Token.VAR;	  Integer    op    =    left.getOperatorType();    	non-compiled	[CE]  orphaned  case	13	None	replace
372	[BUG]  [BUGGY]  Character  op  =  n.getParent();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Character  op  =  n.getParent();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Character  op  =  n.getParent();	  Character    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	44	None	replace
373	[BUG]  [BUGGY]  Character  op  =  n.getChildCount();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Character  op  =  n.getChildCount();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Character  op  =  n.getChildCount();	  Character    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	44	None	replace
374	[BUG]  [BUGGY]  Character  op  =  n.getOpcode();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Character  op  =  n.getOpcode();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Character  op  =  n.getOpcode();	  Character    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	44	None	replace
375	[BUG]  [BUGGY]  Character  op  =  n.getAssignedCharacter();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Character  op  =  n.getAssignedCharacter();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Character  op  =  n.getAssignedCharacter();	  Character    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	44	None	replace
376	[BUG]  [BUGGY]  Node  right  =  left.cloneTree();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  right  =  left.cloneTree();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  right  =  left.cloneTree();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	1	None	replace
377	[BUG]  [BUGGY]  boolean  lhType  =  n.getType()  ==  Token.BLOCK;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  n.getType()  ==  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  n.getType()  ==  Token.BLOCK;	  boolean    lhType    =    n.getType();    	non-compiled	[CE]  orphaned  case	15	None	replace
378	[BUG]  [BUGGY]  boolean  lhType  =  n.getType()!=  Token.NAME;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  n.getType()!=  Token.NAME;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  n.getType()!=  Token.NAME;	  boolean    lhType    =    n.getType();    	non-compiled	[CE]  orphaned  case	15	None	replace
379	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.EMPTY  ||  n.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.EMPTY  ||  n.getType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.EMPTY  ||  n.getType()!=  Token.VAR;	  boolean    op    =    n.getType()!=    Token.EMPTY;    	non-compiled	[CE]  orphaned  case	69	None	replace
380	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.EMPTY  ||  n.getType()!=  Token.NAME;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.EMPTY  ||  n.getType()!=  Token.NAME;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.EMPTY  ||  n.getType()!=  Token.NAME;	  boolean    op    =    n.getType()!=    Token.EMPTY;    	non-compiled	[CE]  orphaned  case	69	None	replace
381	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.EMPTY  ||  n.getType()!=  Token.VOID;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.EMPTY  ||  n.getType()!=  Token.VOID;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.EMPTY  ||  n.getType()!=  Token.VOID;	  boolean    op    =    n.getType()!=    Token.EMPTY;    	non-compiled	[CE]  orphaned  case	69	None	replace
382	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.EMPTY  ||  n.getType()!=  Token.STRING;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.EMPTY  ||  n.getType()!=  Token.STRING;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.EMPTY  ||  n.getType()!=  Token.STRING;	  boolean    op    =    n.getType()!=    Token.EMPTY;    	non-compiled	[CE]  orphaned  case	69	None	replace
383	[BUG]  [BUGGY]  int  lhType  =  left.getType()  ||  n.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  lhType  =  left.getType()  ||  n.getType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  lhType  =  left.getType()  ||  n.getType()!=  Token.VAR;	  int    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	7	None	replace
384	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.OBJECTLIT  ||  n.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.OBJECTLIT  ||  n.getType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.OBJECTLIT  ||  n.getType()!=  Token.VAR;	  boolean    op    =    n.getType()!=    Token.OBJECTLIT;    	non-compiled	[CE]  orphaned  case	70	None	replace
385	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.OBJECTLIT  ||  n.getType()!=  Token.GT;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.OBJECTLIT  ||  n.getType()!=  Token.GT;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.OBJECTLIT  ||  n.getType()!=  Token.GT;	  boolean    op    =    n.getType()!=    Token.OBJECTLIT;    	non-compiled	[CE]  orphaned  case	70	None	replace
386	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.OBJECTLIT  ||  n.getType()!=  Token.GETELEM;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.OBJECTLIT  ||  n.getType()!=  Token.GETELEM;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.OBJECTLIT  ||  n.getType()!=  Token.GETELEM;	  boolean    op    =    n.getType()!=    Token.OBJECTLIT;    	non-compiled	[CE]  orphaned  case	70	None	replace
387	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.OBJECTLIT  ||  n.getType()!=  Token.NAME;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.OBJECTLIT  ||  n.getType()!=  Token.NAME;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.OBJECTLIT  ||  n.getType()!=  Token.NAME;	  boolean    op    =    n.getType()!=    Token.OBJECTLIT;    	non-compiled	[CE]  orphaned  case	70	None	replace
388	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.GETELEM  ||  n.getType()!=  Token.BLOCK;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.GETELEM  ||  n.getType()!=  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.GETELEM  ||  n.getType()!=  Token.BLOCK;	  boolean    op    =    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	48	None	replace
389	[BUG]  [BUGGY]  Boolean  op  =  left.getType()  ==  Token.VOID?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  left.getType()  ==  Token.VOID?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  left.getType()  ==  Token.VOID?  Boolean.TRUE  :  Boolean.FALSE;	  Boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	43	None	replace
390	[BUG]  [BUGGY]  Boolean  op  =  left.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Boolean  op  =  left.getType()  ==  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Boolean  op  =  left.getType()  ==  Token.VAR;	  Boolean    op    =    left.getType();    	non-compiled	[CE]  orphaned  case	43	None	replace
391	[BUG]  [BUGGY]  Integer  op  =  n.getFirstChild().getIntValue();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  n.getFirstChild().getIntValue();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  n.getFirstChild().getIntValue();	  Integer    op    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	64	None	replace
392	[BUG]  [BUGGY]  Integer  op  =  left.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  left.getType()!=  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  left.getType()!=  Token.VAR;	  Integer    op    =    left.getType()    }    ;    	non-compiled	[CE]  orphaned  case	33	None	replace
393	[BUG]  [BUGGY]  Char  op  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Char  op  =  n.getFirstChild();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Char  op  =  n.getFirstChild();	  Char    op    =    n.getType();    	non-compiled	[CE]  orphaned  case	45	None	replace
394	[BUG]  [BUGGY]  int  op  =  right.getType()  &  1xFFFF;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  right.getType()  &  1xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  right.getType()  &  1xFFFF;	  int    op    =    right.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	21	None	replace
395	[BUG]  [BUGGY]  int  op  =  right.getType()  +  0xFFFF;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  right.getType()  +  0xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  right.getType()  +  0xFFFF;	  int    op    =    right.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	21	None	replace
396	[BUG]  [BUGGY]  AnnotatedInteger  op  =  left.getType();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  AnnotatedInteger  op  =  left.getType();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	AnnotatedInteger  op  =  left.getType();	  Integer    op    =    left.getType()    +    1;    	non-compiled	[CE]  orphaned  case	30	None	replace
397	[BUG]  [BUGGY]  int  op  =  left.getType()  &  0xff  +  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  int  op  =  left.getType()  &  0xff  +  1;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	int  op  =  left.getType()  &  0xff  +  1;	  int    op    =    left.getType()    &    0xff;    	non-compiled	[CE]  orphaned  case	39	None	replace
398	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.GT;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.GT;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.GT;	  boolean    op    =    n.getType()!=    Token.BLOCK;    	non-compiled	[CE]  orphaned  case	71	None	replace
399	[BUG]  [BUGGY]  boolean  op  =  n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.VOID;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.VOID;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.VOID;	  boolean    op    =    n.getType()!=    Token.BLOCK;    	non-compiled	[CE]  orphaned  case	71	None	replace
400	[BUG]  [BUGGY]  Node  right  =  n.getAncestor(2);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Node  right  =  n.getAncestor(2);  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Node  right  =  n.getAncestor(2);	  Node    right    =    n.getNext();    	non-compiled	[CE]  orphaned  case	6	None	replace
401	[BUG]  [BUGGY]  boolean  lhType  =  left.getType()  ==  Token.BLOCK;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  left.getType()  ==  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  left.getType()  ==  Token.BLOCK;	  boolean    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	50	None	replace
402	[BUG]  [BUGGY]  boolean  lhType  =  left.getType()  ==  Token.VOID;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  left.getType()  ==  Token.VOID;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  left.getType()  ==  Token.VOID;	  boolean    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	50	None	replace
403	[BUG]  [BUGGY]  boolean  lhType  =  left.getType()!=  Token.VOID;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  lhType  =  left.getType()!=  Token.VOID;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  lhType  =  left.getType()!=  Token.VOID;	  boolean    lhType    =    left.getType();    	non-compiled	[CE]  orphaned  case	50	None	replace
404	[BUG]  [BUGGY]  boolean  op  =  right.getType()  ==  Token.VOID;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  right.getType()  ==  Token.VOID;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  right.getType()  ==  Token.VOID;	  boolean    op    =    right.getType();    	non-compiled	[CE]  orphaned  case	16	None	replace
405	[BUG]  [BUGGY]  Integer  op  =  n.getImmediateParentNode();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  n.getImmediateParentNode();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  n.getImmediateParentNode();	  Integer    op    =    n.getIntValue();    	non-compiled	[CE]  orphaned  case	67	None	replace
406	[BUG]  [BUGGY]  Integer  op  =  n.getIntValue()  *  2;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  n.getIntValue()  *  2;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  n.getIntValue()  *  2;	  Integer    op    =    n.getIntValue();    	non-compiled	[CE]  orphaned  case	67	None	replace
407	[BUG]  [BUGGY]  Integer  op  =  right.getType()  &  0xFFFF;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  right.getType()  &  0xFFFF;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  right.getType()  &  0xFFFF;	  Integer    op    =    left.getType()    &    0xFFFF;    	non-compiled	[CE]  orphaned  case	51	None	replace
408	[BUG]  [BUGGY]  float  op  =  n.getOperatorType().toString();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  float  op  =  n.getOperatorType().toString();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	float  op  =  n.getOperatorType().toString();	  float    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	12	None	replace
409	[BUG]  [BUGGY]  float  op  =  n.getOperatorType().toUpperCase();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  float  op  =  n.getOperatorType().toUpperCase();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	float  op  =  n.getOperatorType().toUpperCase();	  float    op    =    n.getOperatorType();    	non-compiled	[CE]  orphaned  case	12	None	replace
410	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR;	  boolean    op    =    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	18	None	replace
411	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME;	  boolean    op    =    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	18	None	replace
412	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValue(left,  false));  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValue(left,  false));  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValue(left,  false));	  boolean    op    =    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	18	None	replace
413	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil	  boolean    undefinedRight    =((    Token.NAME    ==    left.getType()    &&    right.getString().equals(   "undefined       "))    ||    (Token.VOID    ==    left.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild()    	non-compiled	[CE]  orphaned  case	63	None	replace
414	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VOID;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VOID;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VOID;	  boolean    op    =    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	17	None	replace
415	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME;	  boolean    op    =    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	17	None	replace
416	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK;	  boolean    op    =    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	17	None	replace
417	[BUG]  [BUGGY]  boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION;  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	boolean  op  =  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION;	  boolean    op    =    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	17	None	replace
418	[BUG]  [BUGGY]  Integer  op  =  n.getInitialValue().toString();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldComparison(Node  n,  Node  left,  Node  right)  {  if  (!NodeUtil.isLiteralValue(left,  false)  ||  !NodeUtil.isLiteralValue(right,  false))  {  if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }      [BUGGY]  Integer  op  =  n.getInitialValue().toString();  [BUGGY]      boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	897	897	3	replace	Integer  op  =  n.getInitialValue().toString();	  Integer    op    =    n.getInitialValue();    	non-compiled	[CE]  orphaned  case	66	None	replace
