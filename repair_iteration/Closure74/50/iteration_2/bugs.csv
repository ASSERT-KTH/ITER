bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (rightLiteral  ==  null)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (rightLiteral  ==  null)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null)  {	  if    (result    ==    null)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
2	[BUG]  [BUGGY]  if  (result  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (result  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (result    ==    null)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
3	[BUG]  [BUGGY]  if  (result  ==  null  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (result  ==  null  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  left.getType()!=  Token.FUNCTION)  {	  if    (result    ==    null)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
4	[BUG]  [BUGGY]  if  (n  ==  null)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (n  ==  null)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (n  ==  null)  {	  if    (result    ==    null)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
5	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedRight)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  undefinedRight)  {	  if    (result    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
6	[BUG]  [BUGGY]  if  (n  ==  null  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (n  ==  null  ||  undefinedRight)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (n  ==  null  ||  undefinedRight)  {	  if    (result    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
7	[BUG]  [BUGGY]  if  (result  ==  null  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (result  ==  null  ||  rightLiteral)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  rightLiteral)  {	  if    (result    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
8	[BUG]  [BUGGY]  if  (op  ==  null  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (op  ==  null  ||  undefinedRight)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op  ==  null  ||  undefinedRight)  {	  if    (result    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
9	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  rightLiteral)  {	  if    (result    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
10	[BUG]  [BUGGY]  if  (left  ==  null  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (left  ==  null  ||  rightLiteral)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  rightLiteral)  {	  if    (result    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
11	[BUG]  [BUGGY]  if(!rightLiteral)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(!rightLiteral)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!rightLiteral)  {	  if(rightLiteral)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
12	[BUG]  [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rightLiteral)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.FUNCTION  ||  rightLiteral)  {	  if(rightLiteral)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
13	[BUG]  [BUGGY]  if(rhType!=  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(rhType!=  Token.UNKNOWN)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.UNKNOWN)  {	  if(rightLiteral)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
14	[BUG]  [BUGGY]  if(rhType!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(rhType!=  Token.FUNCTION)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.FUNCTION)  {	  if(rightLiteral)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
15	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  result  =  compareToUndefined(left,  op);  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(left,  op);	      	non-compiled	[CE]  orphaned  case	7	None	replace
16	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  result  =  compareToUndefined(left,  op);  break;  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(left,  op);  break;	      	non-compiled	[CE]  orphaned  case	7	None	replace
17	[BUG]  [BUGGY]  Node  rhType  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  Node  rhType  =  left.getFirstChild();  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rhType  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
18	[BUG]  [BUGGY]  rhType  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  rhType  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	rhType  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION;	      	non-compiled	[CE]  orphaned  case	7	None	replace
19	[BUG]  [BUGGY]  rhType!=  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  rhType!=  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	rhType!=  Token.FALSE  &&  rhType!=  Token.FUNCTION;	      	non-compiled	[CE]  orphaned  case	7	None	replace
20	[BUG]  [BUGGY]  Node  left  =  right.getNext();  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  Node  left  =  right.getNext();  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  right.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
21	[BUG]  [BUGGY]  rhType!=  Token.FALSE  &&  rhType  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  rhType!=  Token.FALSE  &&  rhType  ==  Token.FUNCTION;  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	rhType!=  Token.FALSE  &&  rhType  ==  Token.FUNCTION;	      	non-compiled	[CE]  orphaned  case	7	None	replace
22	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedLeft)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  undefinedLeft)  {	  if    (result    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
23	[BUG]  [BUGGY]  if  (n  ==  null  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (n  ==  null  ||  undefinedLeft)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (n  ==  null  ||  undefinedLeft)  {	  if    (result    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
24	[BUG]  [BUGGY]  if  (op  ==  null  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (op  ==  null  ||  undefinedLeft)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op  ==  null  ||  undefinedLeft)  {	  if    (result    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
25	[BUG]  [BUGGY]  if  (undefinedLeft  ==  null  ||  result)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (undefinedLeft  ==  null  ||  result)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (undefinedLeft  ==  null  ||  result)  {	  if    (result    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
26	[BUG]  [BUGGY]  if  (rightLiteral!=  Token.FUNCTION  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (rightLiteral!=  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral!=  Token.FUNCTION  ||  undefinedRight)  {	  if    (rhType!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
27	[BUG]  [BUGGY]  if  (lhType!=  Token.FUNCTION  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (lhType!=  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FUNCTION  ||  undefinedRight)  {	  if    (rhType!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
28	[BUG]  [BUGGY]  if  (leftLiteral!=  Token.FUNCTION  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (leftLiteral!=  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral!=  Token.FUNCTION  ||  undefinedRight)  {	  if    (rhType!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
29	[BUG]  [BUGGY]  if  (op!=  Token.FUNCTION  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (op!=  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op!=  Token.FUNCTION  ||  undefinedRight)  {	  if    (rhType!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
30	[BUG]  [BUGGY]  if  (rhType!=  Token.FUNCTION  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (rhType!=  Token.FUNCTION  ||  undefinedLeft)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rhType!=  Token.FUNCTION  ||  undefinedLeft)  {	  if    (rhType!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
31	[BUG]  [BUGGY]  if  (rightLiteral  ==  Token.FUNCTION  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (rightLiteral  ==  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  Token.FUNCTION  ||  undefinedRight)  {	  if    (rhType!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
32	[BUG]  [BUGGY]  if(result  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(result  ==  Token.FUNCTION)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FUNCTION)  {	  if(result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
33	[BUG]  [BUGGY]  if(op  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(op  ==  Token.FALSE)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op  ==  Token.FALSE)  {	  if(result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
34	[BUG]  [BUGGY]  if(result  ==  Token.FUNCTION  ||  result  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(result  ==  Token.FUNCTION  ||  result  ==  Token.FALSE)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FUNCTION  ||  result  ==  Token.FALSE)  {	  if(result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
35	[BUG]  [BUGGY]  if(rightLiteral  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(rightLiteral  ==  Token.FALSE)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral  ==  Token.FALSE)  {	  if(result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
36	[BUG]  [BUGGY]  if(op!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(op!=  Token.FALSE)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op!=  Token.FALSE)  {	  if(result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
37	[BUG]  [BUGGY]  if  (lhType!=  Token.FALSE  &&  rhType!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (lhType!=  Token.FALSE  &&  rhType!=  Token.FUNCTION)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FALSE  &&  rhType!=  Token.FUNCTION)  {	  if    (rhType    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
38	[BUG]  [BUGGY]  if  (lhType!=  Token.FALSE  &&  rhType  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (lhType!=  Token.FALSE  &&  rhType  ==  Token.FUNCTION)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FALSE  &&  rhType  ==  Token.FUNCTION)  {	  if    (rhType    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
39	[BUG]  [BUGGY]  if(rightLiteral!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(rightLiteral!=  Token.FALSE)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral!=  Token.FALSE)  {	  if    (rhType    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
40	[BUG]  [BUGGY]  if(!result)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(!result)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!result)  {	  if    (result)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
41	[BUG]  [BUGGY]  if(result  ==  false)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(result  ==  false)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  false)  {	  if    (result)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
42	[BUG]  [BUGGY]  if  (rightLiteral!=  null)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (rightLiteral!=  null)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral!=  null)  {	  if    (result!=    null)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
43	[BUG]  [BUGGY]  if  (op!=  null)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (op!=  null)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op!=  null)  {	  if    (result!=    null)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
44	[BUG]  [BUGGY]  if  (left!=  null  ||  rightLiteral  ==  null)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (left!=  null  ||  rightLiteral  ==  null)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  rightLiteral  ==  null)  {	  if    (result!=    null)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
45	[BUG]  [BUGGY]  if  (lhType!=  Token.FALSE  &&  rhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (lhType!=  Token.FALSE  &&  rhType!=  Token.FALSE)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FALSE  &&  rhType!=  Token.FALSE)  {	  if    (rhType!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
46	[BUG]  [BUGGY]  if  (lhType!=  Token.FALSE  &&  rhType!=  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (lhType!=  Token.FALSE  &&  rhType!=  Token.UNKNOWN)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FALSE  &&  rhType!=  Token.UNKNOWN)  {	  if    (rhType!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
47	[BUG]  [BUGGY]  if  (result  ==  null  ||  left.equals(undefinedLeft))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (result  ==  null  ||  left.equals(undefinedLeft))  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  left.equals(undefinedLeft))  {	  if    (result    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
48	[BUG]  [BUGGY]  if  (result  ==  null  ||  left.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (result  ==  null  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  left.getType()  ==  Token.STRING)  {	  if    (result    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
49	[BUG]  [BUGGY]  if  (result  ==  null  ||  leftLiteral!=  null)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (result  ==  null  ||  leftLiteral!=  null)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  leftLiteral!=  null)  {	  if    (result    ==    null)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
50	[BUG]  [BUGGY]  if  (result  ==  null  ||  left.equals(right))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (result  ==  null  ||  left.equals(right))  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  left.equals(right))  {	  if    (result    ==    null)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
51	[BUG]  [BUGGY]  if(rightLiteral  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(rightLiteral  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral  ||  left.getType()  ==  Token.FUNCTION)  {	  if(rightLiteral)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
52	[BUG]  [BUGGY]  if(rightLiteral  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(rightLiteral  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral  ||  left.getType()!=  Token.FUNCTION)  {	  if(rightLiteral)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
53	[BUG]  [BUGGY]  if  (left!=  null)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (left!=  null)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null)  {	  if    (result!=    null)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
54	[BUG]  [BUGGY]  if  (left!=  null  ||  rightLiteral!=  null)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (left!=  null  ||  rightLiteral!=  null)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  rightLiteral!=  null)  {	  if    (result!=    null)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
55	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
56	[BUG]  [BUGGY]  Node  left  =  left.getNext();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  Node  left  =  left.getNext();  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
57	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  Node  left  =  left.getFirstChild();  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
58	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  n.getLastChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
59	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  Node  left  =  n.getNext();  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  n.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
60	[BUG]  [BUGGY]  if  (result  ==  null  ||  left.isEmpty())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (result  ==  null  ||  left.isEmpty())  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  left.isEmpty())  {	  if    (result    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
61	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(result  ==  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {	  if(result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
62	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(result  ==  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {	  if(result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
63	[BUG]  [BUGGY]  if  (leftLiteral  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (leftLiteral  ==  Token.FALSE)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral  ==  Token.FALSE)  {	  if    (rhType    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
64	[BUG]  [BUGGY]  if  (rhType!=  Token.FALSE  &&!rightLiteral)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (rhType!=  Token.FALSE  &&!rightLiteral)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rhType!=  Token.FALSE  &&!rightLiteral)  {	  if    (rhType    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
65	[BUG]  [BUGGY]  if  (lhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (lhType!=  Token.FALSE)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FALSE)  {	  if    (rhType    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
66	[BUG]  [BUGGY]  if  (leftLiteral!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (leftLiteral!=  Token.FALSE)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral!=  Token.FALSE)  {	  if    (rhType!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
67	[BUG]  [BUGGY]  if(result!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(result!=  Token.FALSE)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  Token.FALSE)  {	  if    (result)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
68	[BUG]  [BUGGY]  if(result!=  Token.EMPTY)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(result!=  Token.EMPTY)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  Token.EMPTY)  {	  if    (result)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
69	[BUG]  [BUGGY]  if(result!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(result!=  Token.NULL)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  Token.NULL)  {	  if    (result)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
70	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  &&  op!=  null)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(result  ==  Token.FALSE  &&  op!=  null)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FALSE  &&  op!=  null)  {	  if(result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
71	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  &&!rightLiteral)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(result  ==  Token.FALSE  &&!rightLiteral)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FALSE  &&!rightLiteral)  {	  if(result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
72	[BUG]  [BUGGY]  if(compareResult  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(compareResult  ==  Token.FALSE)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult  ==  Token.FALSE)  {	  if(result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
73	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (result  ==  null  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {	  if    (result    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
74	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (result  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {	  if    (result    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
75	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft  <=  1)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (result  ==  null  ||  undefinedLeft  <=  1)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft  <=  1)  {	  if    (result    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
76	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (result  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {	  if    (result    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
77	[BUG]  [BUGGY]  if(result  ==  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(result  ==  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  null  ||  left.getType()  ==  Token.NAME)  {	  if    (result    ==    null)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
78	[BUG]  [BUGGY]  if(result  ==  null  ||  left.getType()  ==  Token.RETURN)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(result  ==  null  ||  left.getType()  ==  Token.RETURN)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  null  ||  left.getType()  ==  Token.RETURN)  {	  if    (result    ==    null)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
79	[BUG]  [BUGGY]  if  (rhType  ==  Token.FUNCTION  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (rhType  ==  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rhType  ==  Token.FUNCTION  ||  undefinedRight)  {	  if    (rhType!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
80	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedRight  >  left.length)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (result  ==  null  ||  undefinedRight  >  left.length)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedRight  >  left.length)  {	  if    (result    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
81	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedRight  >  left)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (result  ==  null  ||  undefinedRight  >  left)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedRight  >  left)  {	  if    (result    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
82	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedRight  <=  1)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if  (result  ==  null  ||  undefinedRight  <=  1)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedRight  <=  1)  {	  if    (result    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
83	[BUG]  [BUGGY]  Node  rhType  =  left.getNext();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  Node  rhType  =  left.getNext();  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rhType  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
84	[BUG]  [BUGGY]  Node  rh  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  Node  rh  =  left.getFirstChild();  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rh  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
85	[BUG]  [BUGGY]  Node  rh  =  left.getNext();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  Node  rh  =  left.getNext();  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rh  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
86	[BUG]  [BUGGY]  Node  rhType  =  left.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  Node  rhType  =  left.getLastChild();  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rhType  =  left.getLastChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
87	[BUG]  [BUGGY]  Node  rhType  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  Node  rhType  =  right.getFirstChild();  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rhType  =  right.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
88	[BUG]  [BUGGY]  Node  rhType  =  left.getString();  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  Node  rhType  =  left.getString();  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rhType  =  left.getString();	      	non-compiled	[CE]  orphaned  case	7	None	replace
89	[BUG]  [BUGGY]  if(result  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(result  ||  rightLiteral)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ||  rightLiteral)  {	  if(rightLiteral)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
90	[BUG]  [BUGGY]  if(compareResult)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(compareResult)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult)  {	  if(rightLiteral)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
91	[BUG]  [BUGGY]  if(op)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(op)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op)  {	  if(rightLiteral)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
92	[BUG]  [BUGGY]  if(result!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(result!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  null  &&  left.getType()  ==  Token.FUNCTION)  {	  if    (result!=    null)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
93	[BUG]  [BUGGY]  if(result!=  null  &&  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:    [BUGGY]  if(result!=  null  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]    result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  null  &&  left.getType()  ==  Token.NAME)  {	  if    (result!=    null)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
