bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (lhType  ==  Token.FALSE  &&  rhType!=  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType  ==  Token.FALSE  &&  rhType!=  Token.UNKNOWN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType  ==  Token.FALSE  &&  rhType!=  Token.UNKNOWN)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
2	[BUG]  [BUGGY]  if  (rhType!=  Token.FALSE  &&  lhType!=  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rhType!=  Token.FALSE  &&  lhType!=  Token.UNKNOWN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rhType!=  Token.FALSE  &&  lhType!=  Token.UNKNOWN)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
3	[BUG]  [BUGGY]  if  (lhType!=  Token.FALSE  ||  rhType!=  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.FALSE  ||  rhType!=  Token.UNKNOWN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FALSE  ||  rhType!=  Token.UNKNOWN)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
4	[BUG]  [BUGGY]  if  (lhType!=  Token.FALSE  &&  rhType  ==  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.FALSE  &&  rhType  ==  Token.UNKNOWN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FALSE  &&  rhType  ==  Token.UNKNOWN)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
5	[BUG]  [BUGGY]  if  (lhType!=  Token.UNKNOWN  &&  rhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.UNKNOWN  &&  rhType!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.UNKNOWN  &&  rhType!=  Token.FALSE)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
6	[BUG]  [BUGGY]  if  (left  ==  null  ||  left.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  left.getType()  ==  Token.STRING)  {	  if    (result    ==    null    ||    left.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
7	[BUG]  [BUGGY]  if  (left!=  null  ||  left.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  left.getType()  ==  Token.STRING)  {	  if    (result    ==    null    ||    left.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
8	[BUG]  [BUGGY]  if  (right  ==  null  ||  left.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (right  ==  null  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (right  ==  null  ||  left.getType()  ==  Token.STRING)  {	  if    (result    ==    null    ||    left.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
9	[BUG]  [BUGGY]  if  (left  ==  null  ||  left.getType()!=  Token.STRING)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  left.getType()!=  Token.STRING)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  left.getType()!=  Token.STRING)  {	  if    (result    ==    null    ||    left.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
10	[BUG]  [BUGGY]  if  (left  ==  null  ||  right.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  right.getType()  ==  Token.STRING)  {	  if    (result    ==    null    ||    left.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
11	[BUG]  [BUGGY]  if  (rightLiteral  ==  Token.FUNCTION  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  Token.FUNCTION  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  Token.FUNCTION  ||  undefinedLeft)  {	  if    (rightLiteral    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
12	[BUG]  [BUGGY]  if  (left!=  null  ||  rightLiteral  ==  Token.FUNCTION  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  rightLiteral  ==  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  rightLiteral  ==  Token.FUNCTION  ||  undefinedRight)  {	  if    (rightLiteral    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
13	[BUG]  [BUGGY]  if  (op  ==  Token.FUNCTION  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (op  ==  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op  ==  Token.FUNCTION  ||  undefinedRight)  {	  if    (rightLiteral    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
14	[BUG]  [BUGGY]  if  (rightLiteral  ==  Token.FUNCTION  ||  rightLiteral!=  undefinedRight)  {  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  Token.FUNCTION  ||  rightLiteral!=  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  Token.FUNCTION  ||  rightLiteral!=  undefinedRight)  {	  if    (rightLiteral    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
15	[BUG]  [BUGGY]  if  (rightLiteral  ==  Token.FUNCTION  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  Token.FUNCTION  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  Token.FUNCTION  ||  rightLiteral)  {	  if    (rightLiteral    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
16	[BUG]  [BUGGY]  if  (rightLiteral  ==  Token.FUNCTION  ||  rightLiteral  ==  undefinedRight)  {  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  Token.FUNCTION  ||  rightLiteral  ==  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  Token.FUNCTION  ||  rightLiteral  ==  undefinedRight)  {	  if    (rightLiteral    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
17	[BUG]  [BUGGY]  if  (left  ==  null  ||  right.equals(left))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  right.equals(left))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  right.equals(left))  {	  if    (result    ==    null    ||    left.equals(right))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
18	[BUG]  [BUGGY]  if  (left  ==  null  ||  left.equals(right))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  left.equals(right))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  left.equals(right))  {	  if    (result    ==    null    ||    left.equals(right))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
19	[BUG]  [BUGGY]  if  (left!=  null  ||  right.equals(left))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  right.equals(left))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  right.equals(left))  {	  if    (result    ==    null    ||    left.equals(right))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
20	[BUG]  [BUGGY]  if  (right  ==  null  ||  left.equals(right))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (right  ==  null  ||  left.equals(right))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (right  ==  null  ||  left.equals(right))  {	  if    (result    ==    null    ||    left.equals(right))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
21	[BUG]  [BUGGY]  if  (left  ==  null  ||  right.equals(result))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  right.equals(result))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  right.equals(result))  {	  if    (result    ==    null    ||    left.equals(right))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
22	[BUG]  [BUGGY]  if  (left!=  null  ||  left.equals(right))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  left.equals(right))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  left.equals(right))  {	  if    (result    ==    null    ||    left.equals(right))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
23	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  ||  rightLiteral!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FALSE  ||  rightLiteral!=  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FALSE  ||  rightLiteral!=  Token.TRUE)  {	  if(result    ==    Token.FALSE    &&    rightLiteral!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
24	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {	  if(result    ==    Token.FALSE    &&    rightLiteral!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
25	[BUG]  [BUGGY]  if(rightLiteral  ==  Token.FALSE  &&  result!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral  ==  Token.FALSE  &&  result!=  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral  ==  Token.FALSE  &&  result!=  Token.TRUE)  {	  if(result    ==    Token.FALSE    &&    rightLiteral!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
26	[BUG]  [BUGGY]  if(rightLiteral  ==  Token.FALSE  &&  result  ==  Token.TRUE)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral  ==  Token.FALSE  &&  result  ==  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral  ==  Token.FALSE  &&  result  ==  Token.TRUE)  {	  if(result    ==    Token.FALSE    &&    rightLiteral!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
27	[BUG]  [BUGGY]  if(op!=  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op!=  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op!=  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {	  if(result    ==    Token.FALSE    &&    rightLiteral!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
28	[BUG]  [BUGGY]  if  (rhType  ==  Token.FALSE  &&  rightLiteral!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rhType  ==  Token.FALSE  &&  rightLiteral!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rhType  ==  Token.FALSE  &&  rightLiteral!=  Token.FALSE)  {	  if    (leftLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
29	[BUG]  [BUGGY]  if  (rhType!=  Token.FALSE  &&  rightLiteral!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rhType!=  Token.FALSE  &&  rightLiteral!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rhType!=  Token.FALSE  &&  rightLiteral!=  Token.FALSE)  {	  if    (leftLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
30	[BUG]  [BUGGY]  if  (rhType!=  Token.FALSE  &&  rightLiteral  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rhType!=  Token.FALSE  &&  rightLiteral  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rhType!=  Token.FALSE  &&  rightLiteral  ==  Token.FALSE)  {	  if    (leftLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
31	[BUG]  [BUGGY]  if  (leftLiteral  ==  Token.FALSE  &&  rightLiteral!=  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftLiteral  ==  Token.FALSE  &&  rightLiteral!=  Token.UNKNOWN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral  ==  Token.FALSE  &&  rightLiteral!=  Token.UNKNOWN)  {	  if    (leftLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
32	[BUG]  [BUGGY]  if  (leftLiteral  ==  Token.FALSE  &&  rightLiteral!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftLiteral  ==  Token.FALSE  &&  rightLiteral!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral  ==  Token.FALSE  &&  rightLiteral!=  Token.FUNCTION)  {	  if    (leftLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
33	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	77	None	replace
34	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left!=  null  ||  left.getType()  ==  Token.NAME)  {	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	77	None	replace
35	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left  ==  null  ||  left.getType()!=  Token.NAME)  {	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	77	None	replace
36	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left  ==  null  ||  right.getType()  ==  Token.NAME)  {	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	77	None	replace
37	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(right  ==  null  ||  left.getType()  ==  Token.NAME)  {	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	77	None	replace
38	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(n  ==  null  ||  left.getType()  ==  Token.NAME)  {	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	77	None	replace
39	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(right!=  null  ||  left.getType()  ==  Token.NAME)  {	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	77	None	replace
40	[BUG]  [BUGGY]  if(rightLiteral!=  Token.FUNCTION  ||  rhType!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral!=  Token.FUNCTION  ||  rhType!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral!=  Token.FUNCTION  ||  rhType!=  Token.FUNCTION)  {	  if(rhType!=    Token.FUNCTION    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
41	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  rightLiteral)  {	  if(rhType!=    Token.FUNCTION    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
42	[BUG]  [BUGGY]  if(rightLiteral!=  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral!=  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral!=  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {	  if(rhType!=    Token.FUNCTION    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
43	[BUG]  [BUGGY]  if(left!=  null  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left!=  null  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left!=  null  ||  rightLiteral)  {	  if(rhType!=    Token.FUNCTION    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
44	[BUG]  [BUGGY]  if(lhType!=  Token.FUNCTION  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(lhType!=  Token.FUNCTION  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(lhType!=  Token.FUNCTION  ||  rightLiteral)  {	  if(rhType!=    Token.FUNCTION    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
45	[BUG]  [BUGGY]  if(op!=  Token.FUNCTION  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op!=  Token.FUNCTION  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op!=  Token.FUNCTION  ||  rightLiteral)  {	  if(rhType!=    Token.FUNCTION    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
46	[BUG]  [BUGGY]  if(rhType  ==  Token.FUNCTION  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType  ==  Token.FUNCTION  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType  ==  Token.FUNCTION  ||  rightLiteral)  {	  if(rhType!=    Token.FUNCTION    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
47	[BUG]  [BUGGY]  if  (op!=  Token.FUNCTION  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (op!=  Token.FUNCTION  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op!=  Token.FUNCTION  ||  undefinedLeft)  {	  if    (op!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
48	[BUG]  [BUGGY]  if  (op  ==  Token.FUNCTION  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (op  ==  Token.FUNCTION  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op  ==  Token.FUNCTION  ||  undefinedLeft)  {	  if    (op!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
49	[BUG]  [BUGGY]  if  (op!=  Token.FUNCTION  ||  undefinedRight  ||  left.hasChildren())  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (op!=  Token.FUNCTION  ||  undefinedRight  ||  left.hasChildren())  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op!=  Token.FUNCTION  ||  undefinedRight  ||  left.hasChildren())  {	  if    (op!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
50	[BUG]  [BUGGY]  if  (left  ==  null  ||  undefinedRight  >  left)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  undefinedRight  >  left)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  undefinedRight  >  left)  {	  if    (result    ==    null    ||    undefinedRight    >    left)    {    	non-compiled	[CE]  orphaned  case	81	None	replace
51	[BUG]  [BUGGY]  if  (left  ==  null  ||  undefinedRight  >  rightLiteral)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  undefinedRight  >  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  undefinedRight  >  rightLiteral)  {	  if    (result    ==    null    ||    undefinedRight    >    left)    {    	non-compiled	[CE]  orphaned  case	81	None	replace
52	[BUG]  [BUGGY]  if  (left  ==  null  ||  undefinedRight  >  leftLiteral)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  undefinedRight  >  leftLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  undefinedRight  >  leftLiteral)  {	  if    (result    ==    null    ||    undefinedRight    >    left)    {    	non-compiled	[CE]  orphaned  case	81	None	replace
53	[BUG]  [BUGGY]  if  (left  ==  null  ||  undefinedRight  >  result)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  undefinedRight  >  result)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  undefinedRight  >  result)  {	  if    (result    ==    null    ||    undefinedRight    >    left)    {    	non-compiled	[CE]  orphaned  case	81	None	replace
54	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedRight  >  left)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedRight  >  left)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  undefinedRight  >  left)  {	  if    (result    ==    null    ||    undefinedRight    >    left)    {    	non-compiled	[CE]  orphaned  case	81	None	replace
55	[BUG]  [BUGGY]  if  (undefinedLeft  ==  null  ||  undefinedRight  >  left)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (undefinedLeft  ==  null  ||  undefinedRight  >  left)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (undefinedLeft  ==  null  ||  undefinedRight  >  left)  {	  if    (result    ==    null    ||    undefinedRight    >    left)    {    	non-compiled	[CE]  orphaned  case	81	None	replace
56	[BUG]  [BUGGY]  if  (left  ==  null  ||  left.equals(undefinedLeft))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  left.equals(undefinedLeft))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  left.equals(undefinedLeft))  {	  if    (result    ==    null    ||    left.equals(undefinedLeft))    {    	non-compiled	[CE]  orphaned  case	47	None	replace
57	[BUG]  [BUGGY]  if  (left!=  null  ||  left.equals(undefinedLeft))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  left.equals(undefinedLeft))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  left.equals(undefinedLeft))  {	  if    (result    ==    null    ||    left.equals(undefinedLeft))    {    	non-compiled	[CE]  orphaned  case	47	None	replace
58	[BUG]  [BUGGY]  if  (left  ==  null  ||  right.equals(undefinedLeft))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  right.equals(undefinedLeft))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  right.equals(undefinedLeft))  {	  if    (result    ==    null    ||    left.equals(undefinedLeft))    {    	non-compiled	[CE]  orphaned  case	47	None	replace
59	[BUG]  [BUGGY]  if  (left  ==  null  ||  undefinedLeft.equals(left))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  undefinedLeft.equals(left))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  undefinedLeft.equals(left))  {	  if    (result    ==    null    ||    left.equals(undefinedLeft))    {    	non-compiled	[CE]  orphaned  case	47	None	replace
60	[BUG]  [BUGGY]  if  (left  ==  null  ||  left.equals(undefinedRight))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  left.equals(undefinedRight))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  left.equals(undefinedRight))  {	  if    (result    ==    null    ||    left.equals(undefinedLeft))    {    	non-compiled	[CE]  orphaned  case	47	None	replace
61	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  &&!rightLiteral)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType  ==  Token.FALSE  &&!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType  ==  Token.FALSE  &&!rightLiteral)  {	  if(result    ==    Token.FALSE    &&!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	71	None	replace
62	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  ||!rightLiteral)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FALSE  ||!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FALSE  ||!rightLiteral)  {	  if(result    ==    Token.FALSE    &&!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	71	None	replace
63	[BUG]  [BUGGY]  if(op  ==  Token.FALSE  &&!rightLiteral)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op  ==  Token.FALSE  &&!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op  ==  Token.FALSE  &&!rightLiteral)  {	  if(result    ==    Token.FALSE    &&!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	71	None	replace
64	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  &&!leftLiteral)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FALSE  &&!leftLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FALSE  &&!leftLiteral)  {	  if(result    ==    Token.FALSE    &&!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	71	None	replace
65	[BUG]  [BUGGY]  if(result!=  Token.FALSE  &&!rightLiteral)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result!=  Token.FALSE  &&!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  Token.FALSE  &&!rightLiteral)  {	  if(result    ==    Token.FALSE    &&!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	71	None	replace
66	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.FALSE  &&  rhType!=  Token.FUNCTION)  {	  if(op!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
67	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.FALSE  &&  rhType!=  Token.FALSE)  {	  if(op!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
68	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.FALSE  ||  rhType!=  Token.FALSE)  {	  if(op!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
69	[BUG]  [BUGGY]  if  (left  ==  null  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  undefinedLeft)  {	  if    (undefinedLeft    ==    null    ||    result)    {    	non-compiled	[CE]  orphaned  case	25	None	replace
70	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  result)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  result)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  result)  {	  if    (undefinedLeft    ==    null    ||    result)    {    	non-compiled	[CE]  orphaned  case	25	None	replace
71	[BUG]  [BUGGY]  if  (left  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (undefinedLeft    ==    null    ||    result)    {    	non-compiled	[CE]  orphaned  case	25	None	replace
72	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  right.getLastChild();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  right.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
73	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  right.getFirstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
74	[BUG]  [BUGGY]  Node  left  =  rightLiteral.getLastChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  rightLiteral.getLastChild();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  rightLiteral.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
75	[BUG]  [BUGGY]  Node  left  =  right,  n.getLastChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  right,  n.getLastChild();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  right,  n.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
76	[BUG]  [BUGGY]  if  (lhType  ==  Token.FUNCTION  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType  ==  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType  ==  Token.FUNCTION  ||  undefinedRight)  {	  if    (rhType    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	79	None	replace
77	[BUG]  [BUGGY]  if  (leftLiteral  ==  Token.FUNCTION  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftLiteral  ==  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral  ==  Token.FUNCTION  ||  undefinedRight)  {	  if    (rhType    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	79	None	replace
78	[BUG]  [BUGGY]  if  (rhType  ==  Token.FUNCTION  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rhType  ==  Token.FUNCTION  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rhType  ==  Token.FUNCTION  ||  undefinedLeft)  {	  if    (rhType    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	79	None	replace
79	[BUG]  [BUGGY]  if  (leftLiteral  ==  Token.FUNCTION  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftLiteral  ==  Token.FUNCTION  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral  ==  Token.FUNCTION  ||  rightLiteral)  {	  if    (rhType    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	79	None	replace
80	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedRight  <  1)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedRight  <  1)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedRight  <  1)  {	  if    (result    ==    null    ||    undefinedRight    <=    1)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
81	[BUG]  [BUGGY]  if  (undefinedLeft  ==  null  ||  undefinedRight  <=  1)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (undefinedLeft  ==  null  ||  undefinedRight  <=  1)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (undefinedLeft  ==  null  ||  undefinedRight  <=  1)  {	  if    (result    ==    null    ||    undefinedRight    <=    1)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
82	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedRight!=  1)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedRight!=  1)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedRight!=  1)  {	  if    (result    ==    null    ||    undefinedRight    <=    1)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
83	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedRight  <=  1)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedRight  <=  1)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  undefinedRight  <=  1)  {	  if    (result    ==    null    ||    undefinedRight    <=    1)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
84	[BUG]  [BUGGY]  if  (n  ==  null  ||  undefinedRight  <=  1)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (n  ==  null  ||  undefinedRight  <=  1)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (n  ==  null  ||  undefinedRight  <=  1)  {	  if    (result    ==    null    ||    undefinedRight    <=    1)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
85	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral  <=  1)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral  <=  1)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  rightLiteral  <=  1)  {	  if    (result    ==    null    ||    undefinedRight    <=    1)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
86	[BUG]  [BUGGY]  Node  left  =  left.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  left.getLastChild();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  left.getLastChild();	  Node    left    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	57	None	replace
87	[BUG]  [BUGGY]  if(result  ==  Token.EMPTY)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.EMPTY)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.EMPTY)  {	  if(result!=    Token.EMPTY)    {    	non-compiled	[CE]  orphaned  case	68	None	replace
88	[BUG]  [BUGGY]  if(rhType!=  Token.EMPTY)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.EMPTY)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.EMPTY)  {	  if(result!=    Token.EMPTY)    {    	non-compiled	[CE]  orphaned  case	68	None	replace
89	[BUG]  [BUGGY]  if(rhType!=  Token.EMPTY  &&  rhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.EMPTY  &&  rhType!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.EMPTY  &&  rhType!=  Token.FALSE)  {	  if(result!=    Token.EMPTY)    {    	non-compiled	[CE]  orphaned  case	68	None	replace
90	[BUG]  [BUGGY]  if(op!=  Token.EMPTY)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op!=  Token.EMPTY)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op!=  Token.EMPTY)  {	  if(result!=    Token.EMPTY)    {    	non-compiled	[CE]  orphaned  case	68	None	replace
91	[BUG]  [BUGGY]  if(rightLiteral!=  Token.EMPTY)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral!=  Token.EMPTY)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral!=  Token.EMPTY)  {	  if(result!=    Token.EMPTY)    {    	non-compiled	[CE]  orphaned  case	68	None	replace
92	[BUG]  [BUGGY]  if  (leftLiteral  ==  Token.FUNCTION  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftLiteral  ==  Token.FUNCTION  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral  ==  Token.FUNCTION  ||  undefinedLeft)  {	  if    (leftLiteral!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	28	None	replace
93	[BUG]  [BUGGY]  if  (leftLiteral!=  Token.FUNCTION  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftLiteral!=  Token.FUNCTION  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral!=  Token.FUNCTION  ||  undefinedLeft)  {	  if    (leftLiteral!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	28	None	replace
94	[BUG]  [BUGGY]  if  (leftLiteral!=  Token.FUNCTION  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftLiteral!=  Token.FUNCTION  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral!=  Token.FUNCTION  ||  rightLiteral)  {	  if    (leftLiteral!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	28	None	replace
95	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  =  compareToUndefined(right,  op);  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(right,  op);	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  orphaned  case	16	None	replace
96	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  =  compareToUndefined(right,  op);  break;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(right,  op);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  orphaned  case	16	None	replace
97	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right);  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  =  compareToUndefined(left,  right);  break;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(left,  right);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  orphaned  case	16	None	replace
98	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  op);  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  =  compareToUndefined(n,  op);  break;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(n,  op);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  orphaned  case	16	None	replace
99	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  =  compareToUndefined(left,  right);  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(left,  right);	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  orphaned  case	16	None	replace
100	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n);  break;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  =  compareToUndefined(left,  n);  break;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(left,  n);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  orphaned  case	16	None	replace
101	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left);  break;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  =  compareToUndefined(n,  left);  break;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(n,  left);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  orphaned  case	16	None	replace
102	[BUG]  [BUGGY]  if  (leftLiteral  ==  null  ||  result  ==  null)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftLiteral  ==  null  ||  result  ==  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral  ==  null  ||  result  ==  null)  {	  if    (result    ==    null    ||    leftLiteral!=    null)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
103	[BUG]  [BUGGY]  if  (leftLiteral  ==  null  ||  leftLiteral!=  null)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftLiteral  ==  null  ||  leftLiteral!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral  ==  null  ||  leftLiteral!=  null)  {	  if    (result    ==    null    ||    leftLiteral!=    null)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
104	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  leftLiteral!=  null)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  leftLiteral!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  leftLiteral!=  null)  {	  if    (result    ==    null    ||    leftLiteral!=    null)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
105	[BUG]  [BUGGY]  if  (left  ==  null  ||  leftLiteral!=  null)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  leftLiteral!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  leftLiteral!=  null)  {	  if    (result    ==    null    ||    leftLiteral!=    null)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
106	[BUG]  [BUGGY]  if  (lhType  ==  Token.FALSE  &&  rhType  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType  ==  Token.FALSE  &&  rhType  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType  ==  Token.FALSE  &&  rhType  ==  Token.FUNCTION)  {	  if    (lhType!=    Token.FALSE    &&    rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	38	None	replace
107	[BUG]  [BUGGY]  if  (rhType!=  Token.FALSE  &&  lhType  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rhType!=  Token.FALSE  &&  lhType  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rhType!=  Token.FALSE  &&  lhType  ==  Token.FUNCTION)  {	  if    (lhType!=    Token.FALSE    &&    rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	38	None	replace
108	[BUG]  [BUGGY]  if  (lhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {	  if    (lhType!=    Token.FALSE    &&    rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	38	None	replace
109	[BUG]  [BUGGY]  if  (lhType!=  Token.FUNCTION  &&  rhType  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.FUNCTION  &&  rhType  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FUNCTION  &&  rhType  ==  Token.FALSE)  {	  if    (lhType!=    Token.FALSE    &&    rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	38	None	replace
110	[BUG]  [BUGGY]  if(op!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op!=  Token.FUNCTION)  {	  if(rhType!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
111	[BUG]  [BUGGY]  if(rightLiteral!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral!=  Token.FUNCTION)  {	  if(rhType!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
112	[BUG]  [BUGGY]  if(lhType!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(lhType!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(lhType!=  Token.FUNCTION)  {	  if(rhType!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
113	[BUG]  [BUGGY]  if(lhType!=  Token.FUNCTION  ||  rhType!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(lhType!=  Token.FUNCTION  ||  rhType!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(lhType!=  Token.FUNCTION  ||  rhType!=  Token.FUNCTION)  {	  if(rhType!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
114	[BUG]  [BUGGY]  if(rhType  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType  ==  Token.FUNCTION)  {	  if(rhType!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
115	[BUG]  [BUGGY]  if(lhType!=  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(lhType!=  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(lhType!=  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {	  if(rhType!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
116	[BUG]  [BUGGY]  if(rhType  ==  Token.FUNCTION  ||  result  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType  ==  Token.FUNCTION  ||  result  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType  ==  Token.FUNCTION  ||  result  ==  Token.FALSE)  {	  if(result    ==    Token.FUNCTION    ||    result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
117	[BUG]  [BUGGY]  if(op  ==  Token.FUNCTION  ||  result  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op  ==  Token.FUNCTION  ||  result  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op  ==  Token.FUNCTION  ||  result  ==  Token.FALSE)  {	  if(result    ==    Token.FUNCTION    ||    result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
118	[BUG]  [BUGGY]  if(result!=  Token.FUNCTION  ||  result  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result!=  Token.FUNCTION  ||  result  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  Token.FUNCTION  ||  result  ==  Token.FALSE)  {	  if(result    ==    Token.FUNCTION    ||    result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
119	[BUG]  [BUGGY]  if(result  ==  Token.FUNCTION  ||  result!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FUNCTION  ||  result!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FUNCTION  ||  result!=  Token.FALSE)  {	  if(result    ==    Token.FUNCTION    ||    result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
120	[BUG]  [BUGGY]  if(n  ==  Token.FUNCTION  ||  result  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(n  ==  Token.FUNCTION  ||  result  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(n  ==  Token.FUNCTION  ||  result  ==  Token.FALSE)  {	  if(result    ==    Token.FUNCTION    ||    result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
121	[BUG]  [BUGGY]  if(result  ==  Token.FUNCTION  ||  result  ==  Token.FIELD)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FUNCTION  ||  result  ==  Token.FIELD)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FUNCTION  ||  result  ==  Token.FIELD)  {	  if(result    ==    Token.FUNCTION    ||    result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
122	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft  <  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedLeft  <  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft  <  MAX_FOLD_NUMBER)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	74	None	replace
123	[BUG]  [BUGGY]  if  (n  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (n  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (n  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	74	None	replace
124	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	74	None	replace
125	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft  >=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedLeft  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft  >=  MAX_FOLD_NUMBER)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	74	None	replace
126	[BUG]  [BUGGY]  if  (undefinedLeft  ==  null  ||  result  >  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (undefinedLeft  ==  null  ||  result  >  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (undefinedLeft  ==  null  ||  result  >  MAX_FOLD_NUMBER)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	74	None	replace
127	[BUG]  [BUGGY]  if  (left  ==  null  ||  rightLiteral  >  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  rightLiteral  >  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  rightLiteral  >  MAX_FOLD_NUMBER)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	74	None	replace
128	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral.isUndefined())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral.isUndefined())  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  rightLiteral.isUndefined())  {	  if    (rightLiteral    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
129	[BUG]  [BUGGY]  if  (left  ==  null  ||  rightLiteral.undefinedRight)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  rightLiteral.undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  rightLiteral.undefinedRight)  {	  if    (rightLiteral    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
130	[BUG]  [BUGGY]  if  (left  ==  null  ||  rightLiteral!=  undefinedRight)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  rightLiteral!=  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  rightLiteral!=  undefinedRight)  {	  if    (rightLiteral    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
131	[BUG]  [BUGGY]  if  (left!=  null  ||  rightLiteral  ==  undefinedRight)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  rightLiteral  ==  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  rightLiteral  ==  undefinedRight)  {	  if    (rightLiteral    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
132	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral.undefinedLeft)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral.undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  rightLiteral.undefinedLeft)  {	  if    (rightLiteral    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
133	[BUG]  [BUGGY]  if  (left  ==  null  ||  rightLiteral.isUndefined())  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  rightLiteral.isUndefined())  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  rightLiteral.isUndefined())  {	  if    (rightLiteral    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
134	[BUG]  [BUGGY]  if  (left  ==  null  ||  left.isEmpty())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  left.isEmpty())  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  left.isEmpty())  {	  if    (result    ==    null    ||    left.isEmpty())    {    	non-compiled	[CE]  orphaned  case	60	None	replace
135	[BUG]  [BUGGY]  if  (left!=  null  ||  left.isEmpty())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  left.isEmpty())  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  left.isEmpty())  {	  if    (result    ==    null    ||    left.isEmpty())    {    	non-compiled	[CE]  orphaned  case	60	None	replace
136	[BUG]  [BUGGY]  if  (right  ==  null  ||  left.isEmpty())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (right  ==  null  ||  left.isEmpty())  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (right  ==  null  ||  left.isEmpty())  {	  if    (result    ==    null    ||    left.isEmpty())    {    	non-compiled	[CE]  orphaned  case	60	None	replace
137	[BUG]  [BUGGY]  if  (left  ==  null  ||  right.isEmpty())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  right.isEmpty())  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  right.isEmpty())  {	  if    (result    ==    null    ||    left.isEmpty())    {    	non-compiled	[CE]  orphaned  case	60	None	replace
138	[BUG]  [BUGGY]  if  (right!=  null)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (right!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (right!=  null)  {	  if    (left!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
139	[BUG]  [BUGGY]  if  (left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (left!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
140	[BUG]  [BUGGY]  if  (right  ==  null)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (right  ==  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (right  ==  null)  {	  if    (left!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
141	[BUG]  [BUGGY]  if  (left!=  null  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  left.getType()  ==  Token.GETELEM)  {	  if    (left!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
142	[BUG]  [BUGGY]  if(!result  ||!rightLiteral)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!result  ||!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!result  ||!rightLiteral)  {	  if(!result)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
143	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  &&  right!=  null)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FALSE  &&  right!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FALSE  &&  right!=  null)  {	  if(result    ==    Token.FALSE    &&    op!=    null)    {    	non-compiled	[CE]  orphaned  case	70	None	replace
144	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  &&  left!=  null)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FALSE  &&  left!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FALSE  &&  left!=  null)  {	  if(result    ==    Token.FALSE    &&    op!=    null)    {    	non-compiled	[CE]  orphaned  case	70	None	replace
145	[BUG]  [BUGGY]  if(rightLiteral  ==  Token.FALSE  &&  op!=  null)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral  ==  Token.FALSE  &&  op!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral  ==  Token.FALSE  &&  op!=  null)  {	  if(result    ==    Token.FALSE    &&    op!=    null)    {    	non-compiled	[CE]  orphaned  case	70	None	replace
146	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  &&  op!=  null)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.FALSE  &&  op!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.FALSE  &&  op!=  null)  {	  if(result    ==    Token.FALSE    &&    op!=    null)    {    	non-compiled	[CE]  orphaned  case	70	None	replace
147	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  ||  op!=  null)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FALSE  ||  op!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FALSE  ||  op!=  null)  {	  if(result    ==    Token.FALSE    &&    op!=    null)    {    	non-compiled	[CE]  orphaned  case	70	None	replace
148	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  &&  rightLiteral!=  null)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FALSE  &&  rightLiteral!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FALSE  &&  rightLiteral!=  null)  {	  if(result    ==    Token.FALSE    &&    op!=    null)    {    	non-compiled	[CE]  orphaned  case	70	None	replace
149	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  &&  op!=  null)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType  ==  Token.FALSE  &&  op!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType  ==  Token.FALSE  &&  op!=  null)  {	  if(result    ==    Token.FALSE    &&    op!=    null)    {    	non-compiled	[CE]  orphaned  case	70	None	replace
150	[BUG]  [BUGGY]  Node  rh  =  left.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rh  =  left.getLastChild();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rh  =  left.getLastChild();	  Node    rh    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	84	None	replace
151	[BUG]  [BUGGY]  Node  rh  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rh  =  right.getFirstChild();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rh  =  right.getFirstChild();	  Node    rh    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	84	None	replace
152	[BUG]  [BUGGY]  Node  rh  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rh  =  left.removeFirstChild();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rh  =  left.removeFirstChild();	  Node    rh    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	84	None	replace
153	[BUG]  [BUGGY]  Node  rh  =  right.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rh  =  right.getLastChild();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rh  =  right.getLastChild();	  Node    rh    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	84	None	replace
154	[BUG]  [BUGGY]  Node  rh  =  left.next();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rh  =  left.next();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rh  =  left.next();	  Node    rh    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	84	None	replace
155	[BUG]  [BUGGY]  if(rhType  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType  ==  Token.NULL)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType  ==  Token.NULL)  {	  if(result    ==    false)    {    	non-compiled	[CE]  orphaned  case	41	None	replace
156	[BUG]  [BUGGY]  if(rightLiteral  ==  false)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral  ==  false)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral  ==  false)  {	  if(result    ==    false)    {    	non-compiled	[CE]  orphaned  case	41	None	replace
157	[BUG]  [BUGGY]  if(rightLiteral!=  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral!=  Token.UNKNOWN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral!=  Token.UNKNOWN)  {	  if(rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
158	[BUG]  [BUGGY]  if(op!=  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op!=  Token.UNKNOWN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op!=  Token.UNKNOWN)  {	  if(rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
159	[BUG]  [BUGGY]  if(lhType!=  Token.UNKNOWN  ||  rhType!=  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(lhType!=  Token.UNKNOWN  ||  rhType!=  Token.UNKNOWN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(lhType!=  Token.UNKNOWN  ||  rhType!=  Token.UNKNOWN)  {	  if(rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
160	[BUG]  [BUGGY]  if(lhType!=  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(lhType!=  Token.UNKNOWN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(lhType!=  Token.UNKNOWN)  {	  if(rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
161	[BUG]  [BUGGY]  if(op!=  null  ||  rhType!=  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op!=  null  ||  rhType!=  Token.UNKNOWN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op!=  null  ||  rhType!=  Token.UNKNOWN)  {	  if(rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
162	[BUG]  [BUGGY]  if(rhType  ==  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType  ==  Token.UNKNOWN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType  ==  Token.UNKNOWN)  {	  if(rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
163	[BUG]  [BUGGY]  Node  rhType  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rhType  =  left.removeFirstChild();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rhType  =  left.removeFirstChild();	  Node    rhType    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	17	None	replace
164	[BUG]  [BUGGY]  Node  rhType  =  right.getLastChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rhType  =  right.getLastChild();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rhType  =  right.getLastChild();	  Node    rhType    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	17	None	replace
165	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft  <  1)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedLeft  <  1)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft  <  1)  {	  if    (result    ==    null    ||    undefinedLeft    <=    1)    {    	non-compiled	[CE]  orphaned  case	75	None	replace
166	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft  ==  1)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedLeft  ==  1)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft  ==  1)  {	  if    (result    ==    null    ||    undefinedLeft    <=    1)    {    	non-compiled	[CE]  orphaned  case	75	None	replace
167	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft!=  1)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedLeft!=  1)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft!=  1)  {	  if    (result    ==    null    ||    undefinedLeft    <=    1)    {    	non-compiled	[CE]  orphaned  case	75	None	replace
168	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedLeft  <=  1)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedLeft  <=  1)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  undefinedLeft  <=  1)  {	  if    (result    ==    null    ||    undefinedLeft    <=    1)    {    	non-compiled	[CE]  orphaned  case	75	None	replace
169	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft  >=  1)  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedLeft  >=  1)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft  >=  1)  {	  if    (result    ==    null    ||    undefinedLeft    <=    1)    {    	non-compiled	[CE]  orphaned  case	75	None	replace
170	[BUG]  [BUGGY]  if  (n  ==  null  ||  undefinedLeft  <=  1)  {  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (n  ==  null  ||  undefinedLeft  <=  1)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (n  ==  null  ||  undefinedLeft  <=  1)  {	  if    (result    ==    null    ||    undefinedLeft    <=    1)    {    	non-compiled	[CE]  orphaned  case	75	None	replace
171	[BUG]  [BUGGY]  if  (left  ==  null  ||  rightLiteral!=  null)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  rightLiteral!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  rightLiteral!=  null)  {	  if    (left!=    null    ||    rightLiteral!=    null)    {    	non-compiled	[CE]  orphaned  case	54	None	replace
172	[BUG]  [BUGGY]  if  (right!=  null  ||  rightLiteral!=  null)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (right!=  null  ||  rightLiteral!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (right!=  null  ||  rightLiteral!=  null)  {	  if    (left!=    null    ||    rightLiteral!=    null)    {    	non-compiled	[CE]  orphaned  case	54	None	replace
173	[BUG]  [BUGGY]  if  (left  ==  null  ||  rightLiteral  ==  null)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  rightLiteral  ==  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  rightLiteral  ==  null)  {	  if    (left!=    null    ||    rightLiteral!=    null)    {    	non-compiled	[CE]  orphaned  case	54	None	replace
174	[BUG]  [BUGGY]  if  (left!=  null  ||  leftLiteral  ==  null)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  leftLiteral  ==  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  leftLiteral  ==  null)  {	  if    (left!=    null    ||    rightLiteral!=    null)    {    	non-compiled	[CE]  orphaned  case	54	None	replace
175	[BUG]  [BUGGY]  Node  rh  =  right.getNext();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rh  =  right.getNext();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rh  =  right.getNext();	  Node    rh    =    left.getNext();    	non-compiled	[CE]  orphaned  case	85	None	replace
176	[BUG]  [BUGGY]  Node  rh  =  left.getNext()  +  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rh  =  left.getNext()  +  1;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rh  =  left.getNext()  +  1;	  Node    rh    =    left.getNext();    	non-compiled	[CE]  orphaned  case	85	None	replace
177	[BUG]  [BUGGY]  Node  rh  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rh  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rh  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;	  Node    rh    =    left.getNext();    	non-compiled	[CE]  orphaned  case	85	None	replace
178	[BUG]  [BUGGY]  Node  rh  =  left.getNext()  ||  right.getType()!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rh  =  left.getNext()  ||  right.getType()!=  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rh  =  left.getNext()  ||  right.getType()!=  Token.FUNCTION;	  Node    rh    =    left.getNext();    	non-compiled	[CE]  orphaned  case	85	None	replace
179	[BUG]  [BUGGY]  Node  left  =  rightLiteral.getNext();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  rightLiteral.getNext();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  rightLiteral.getNext();	  Node    left    =    n.getNext();    	non-compiled	[CE]  orphaned  case	59	None	replace
180	[BUG]  [BUGGY]  Node  left  =  right.getParent();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  right.getParent();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  right.getParent();	  Node    left    =    n.getNext();    	non-compiled	[CE]  orphaned  case	59	None	replace
181	[BUG]  [BUGGY]  if(left  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left  ||  right.getType()  ==  Token.FUNCTION)  {	  if(rightLiteral    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
182	[BUG]  [BUGGY]  if(left  ||  rightLiteral.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left  ||  rightLiteral.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left  ||  rightLiteral.getType()  ==  Token.FUNCTION)  {	  if(rightLiteral    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
183	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left.getType()  ==  Token.FUNCTION)  {	  if(rightLiteral    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
184	[BUG]  [BUGGY]  if(leftLiteral  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(leftLiteral  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(leftLiteral  ||  right.getType()  ==  Token.FUNCTION)  {	  if(rightLiteral    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
185	[BUG]  [BUGGY]  if(left  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left  ||  left.getType()  ==  Token.FUNCTION)  {	  if(rightLiteral    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
186	[BUG]  [BUGGY]  if(leftLiteral  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(leftLiteral  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(leftLiteral  ||  left.getType()  ==  Token.FUNCTION)  {	  if(rightLiteral    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
187	[BUG]  [BUGGY]  Node  rhType  =  right.getString();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rhType  =  right.getString();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rhType  =  right.getString();	  Node    rhType    =    left.getString();    	non-compiled	[CE]  orphaned  case	88	None	replace
188	[BUG]  [BUGGY]  Node  rhType  =  left.getString()  +  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rhType  =  left.getString()  +  1;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rhType  =  left.getString()  +  1;	  Node    rhType    =    left.getString();    	non-compiled	[CE]  orphaned  case	88	None	replace
189	[BUG]  [BUGGY]  Node  rhType  =  left.getQualifiedName();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rhType  =  left.getQualifiedName();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rhType  =  left.getQualifiedName();	  Node    rhType    =    left.getString();    	non-compiled	[CE]  orphaned  case	88	None	replace
190	[BUG]  [BUGGY]  if  (left  ==  null  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (result    ==    null    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
191	[BUG]  [BUGGY]  if  (left  ==  null  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  left.getType()!=  Token.FUNCTION)  {	  if    (result    ==    null    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
192	[BUG]  [BUGGY]  if  (right  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (right  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (right  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (result    ==    null    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
193	[BUG]  [BUGGY]  Node  left  =  right.getNext()  -  1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  right.getNext()  -  1;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  right.getNext()  -  1;	  Node    left    =    right.getNext();    	non-compiled	[CE]  orphaned  case	20	None	replace
194	[BUG]  [BUGGY]  Node  left  =  right.getNext(),  n);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  right.getNext(),  n);  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  right.getNext(),  n);	  Node    left    =    right.getNext();    	non-compiled	[CE]  orphaned  case	20	None	replace
195	[BUG]  [BUGGY]  Node  left  =  right.getNext(),  op);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  right.getNext(),  op);  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  right.getNext(),  op);	  Node    left    =    right.getNext();    	non-compiled	[CE]  orphaned  case	20	None	replace
196	[BUG]  [BUGGY]  if  (n  ==  null  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (n  ==  null  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (n  ==  null  ||  rightLiteral)  {	  if    (n    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
197	[BUG]  [BUGGY]  if  (n  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (n  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (n  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (n    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
198	[BUG]  [BUGGY]  Node  left  =  left.getNext(),  rightLiteral);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  left.getNext(),  rightLiteral);  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  left.getNext(),  rightLiteral);	  Node    left    =    left.getNext();    	non-compiled	[CE]  orphaned  case	56	None	replace
199	[BUG]  [BUGGY]  Node  left  =  left.getNext()  -  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  left.getNext()  -  1;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  left.getNext()  -  1;	  Node    left    =    left.getNext();    	non-compiled	[CE]  orphaned  case	56	None	replace
200	[BUG]  [BUGGY]  Node  left  =  left.getNext()  &  0xFFFF;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  left.getNext()  &  0xFFFF;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  left.getNext()  &  0xFFFF;	  Node    left    =    left.getNext();    	non-compiled	[CE]  orphaned  case	56	None	replace
201	[BUG]  [BUGGY]  Node  left  =  left.getNext(),  rightLiteral;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  left.getNext(),  rightLiteral;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  left.getNext(),  rightLiteral;	  Node    left    =    left.getNext();    	non-compiled	[CE]  orphaned  case	56	None	replace
202	[BUG]  [BUGGY]  if  (right!=  null  ||  rightLiteral  ==  null)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (right!=  null  ||  rightLiteral  ==  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (right!=  null  ||  rightLiteral  ==  null)  {	  if    (left!=    null    ||    rightLiteral    ==    null)    {    	non-compiled	[CE]  orphaned  case	44	None	replace
203	[BUG]  [BUGGY]  if  (left  ==  null  ||  leftLiteral  ==  null)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  leftLiteral  ==  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  leftLiteral  ==  null)  {	  if    (left!=    null    ||    rightLiteral    ==    null)    {    	non-compiled	[CE]  orphaned  case	44	None	replace
204	[BUG]  [BUGGY]  rhType  ==  Token.FALSE  ||  rhType!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  rhType  ==  Token.FALSE  ||  rhType!=  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	rhType  ==  Token.FALSE  ||  rhType!=  Token.FUNCTION;	  rhType    ==    Token.FALSE    &&    rhType!=    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	18	None	replace
205	[BUG]  [BUGGY]  rhType  ==  Token.FALSE  &&  rhType  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  rhType  ==  Token.FALSE  &&  rhType  ==  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	rhType  ==  Token.FALSE  &&  rhType  ==  Token.FUNCTION;	  rhType    ==    Token.FALSE    &&    rhType!=    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	18	None	replace
206	[BUG]  [BUGGY]  result  |=  rhType  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  |=  rhType  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  |=  rhType  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION;	  rhType    ==    Token.FALSE    &&    rhType!=    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	18	None	replace
207	[BUG]  [BUGGY]  if(rhType!=  Token.NULL  &&  rhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.NULL  &&  rhType!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.NULL  &&  rhType!=  Token.FALSE)  {	  if(result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
208	[BUG]  [BUGGY]  if(rhType!=  Token.NULL  &&  rhType!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.NULL  &&  rhType!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.NULL  &&  rhType!=  Token.FUNCTION)  {	  if(result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
209	[BUG]  [BUGGY]  if(rightLiteral!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral!=  Token.NULL)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral!=  Token.NULL)  {	  if(result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
210	[BUG]  [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.FUNCTION  ||  rhType!=  Token.FALSE)  {	  if(result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
211	[BUG]  [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.FUNCTION  ||  rhType!=  Token.FUNCTION)  {	  if(result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
212	[BUG]  [BUGGY]  if  (rhType!=  Token.FALSE  &&  lhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rhType!=  Token.FALSE  &&  lhType!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rhType!=  Token.FALSE  &&  lhType!=  Token.FALSE)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	45	None	replace
213	[BUG]  [BUGGY]  if  (lhType  ==  Token.FALSE  &&  rhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType  ==  Token.FALSE  &&  rhType!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType  ==  Token.FALSE  &&  rhType!=  Token.FALSE)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	45	None	replace
214	[BUG]  [BUGGY]  if  (lhType!=  Token.FALSE  ||  rhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.FALSE  ||  rhType!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FALSE  ||  rhType!=  Token.FALSE)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	45	None	replace
215	[BUG]  [BUGGY]  if  (lhType!=  Token.FALSE  &&  rhType  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.FALSE  &&  rhType  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FALSE  &&  rhType  ==  Token.FALSE)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	45	None	replace
216	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral.equals(left))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral.equals(left))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  rightLiteral.equals(left))  {	  if    (rightLiteral    ==    null    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
217	[BUG]  [BUGGY]  if  (left  ==  null  ||  undefinedRight  >  left.length)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  undefinedRight  >  left.length)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  undefinedRight  >  left.length)  {	  if    (result    ==    null    ||    undefinedRight    >    left.length)    {    	non-compiled	[CE]  orphaned  case	80	None	replace
218	[BUG]  [BUGGY]  if  (left!=  null  ||  undefinedRight  >  left.length)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  undefinedRight  >  left.length)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  undefinedRight  >  left.length)  {	  if    (result    ==    null    ||    undefinedRight    >    left.length)    {    	non-compiled	[CE]  orphaned  case	80	None	replace
219	[BUG]  [BUGGY]  if  (left  ==  null  ||  left.length  >  undefinedRight)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  left.length  >  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  left.length  >  undefinedRight)  {	  if    (result    ==    null    ||    undefinedRight    >    left.length)    {    	non-compiled	[CE]  orphaned  case	80	None	replace
220	[BUG]  [BUGGY]  if  (left  ==  null  ||  undefinedRight  >  right.length)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  undefinedRight  >  right.length)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  undefinedRight  >  right.length)  {	  if    (result    ==    null    ||    undefinedRight    >    left.length)    {    	non-compiled	[CE]  orphaned  case	80	None	replace
221	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedRight  >  left.length)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedRight  >  left.length)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  undefinedRight  >  left.length)  {	  if    (result    ==    null    ||    undefinedRight    >    left.length)    {    	non-compiled	[CE]  orphaned  case	80	None	replace
222	[BUG]  [BUGGY]  if  (left  ==  null  ||  undefinedLeft  >  left.length)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  undefinedLeft  >  left.length)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  undefinedLeft  >  left.length)  {	  if    (result    ==    null    ||    undefinedRight    >    left.length)    {    	non-compiled	[CE]  orphaned  case	80	None	replace
223	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.FALSE)  {	  if(op    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
224	[BUG]  [BUGGY]  if(lhType  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(lhType  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(lhType  ==  Token.FALSE)  {	  if(op    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
225	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {	  if(op    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
226	[BUG]  [BUGGY]  if  (left  ==  null  ||  leftLiteral)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  leftLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  leftLiteral)  {	  if    (left    ==    null    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
227	[BUG]  [BUGGY]  if  (right  ==  null  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (right  ==  null  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (right  ==  null  ||  rightLiteral)  {	  if    (left    ==    null    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
228	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left!=  null  &&  left.getType()  ==  Token.FUNCTION)  {	  if(result!=    null    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	92	None	replace
229	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left!=  null  &&  right.getType()  ==  Token.FUNCTION)  {	  if(result!=    null    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	92	None	replace
230	[BUG]  [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(right!=  null  &&  left.getType()  ==  Token.FUNCTION)  {	  if(result!=    null    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	92	None	replace
231	[BUG]  [BUGGY]  if(left  ==  null  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left  ==  null  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left  ==  null  &&  left.getType()  ==  Token.FUNCTION)  {	  if(result!=    null    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	92	None	replace
232	[BUG]  [BUGGY]  if(n!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(n!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(n!=  null  &&  left.getType()  ==  Token.FUNCTION)  {	  if(result!=    null    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	92	None	replace
233	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {	  if(result!=    null    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	92	None	replace
234	[BUG]  [BUGGY]  if(leftLiteral  ==  Token.FALSE  &&  result!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(leftLiteral  ==  Token.FALSE  &&  result!=  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(leftLiteral  ==  Token.FALSE  &&  result!=  Token.TRUE)  {	  if(result    ==    Token.FALSE    &&    leftLiteral!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
235	[BUG]  [BUGGY]  if(rightLiteral  ==  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral  ==  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral  ==  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {	  if(result    ==    Token.FALSE    &&    leftLiteral!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
236	[BUG]  [BUGGY]  if(leftLiteral  ==  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(leftLiteral  ==  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(leftLiteral  ==  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {	  if(result    ==    Token.FALSE    &&    leftLiteral!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
237	[BUG]  [BUGGY]  if(leftLiteral!=  Token.FALSE  &&  result!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(leftLiteral!=  Token.FALSE  &&  result!=  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(leftLiteral!=  Token.FALSE  &&  result!=  Token.TRUE)  {	  if(result    ==    Token.FALSE    &&    leftLiteral!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
238	[BUG]  [BUGGY]  if(leftLiteral!=  Token.FALSE  &&  result  ==  Token.TRUE)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(leftLiteral!=  Token.FALSE  &&  result  ==  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(leftLiteral!=  Token.FALSE  &&  result  ==  Token.TRUE)  {	  if(result    ==    Token.FALSE    &&    leftLiteral!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
239	[BUG]  [BUGGY]  rhType  ==  Token.FALSE  ||  rhType  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  rhType  ==  Token.FALSE  ||  rhType  ==  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	rhType  ==  Token.FALSE  ||  rhType  ==  Token.FUNCTION;	  rhType!=    Token.FALSE    &&    rhType    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	21	None	replace
240	[BUG]  [BUGGY]  rhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  rhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	rhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION;	  rhType!=    Token.FALSE    &&    rhType    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	21	None	replace
241	[BUG]  [BUGGY]  rhType  ==  Token.FALSE  &&  op  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  rhType  ==  Token.FALSE  &&  op  ==  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	rhType  ==  Token.FALSE  &&  op  ==  Token.FUNCTION;	  rhType!=    Token.FALSE    &&    rhType    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	21	None	replace
242	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  op);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  =  compareToUndefined(n,  op);  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(n,  op);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	15	None	replace
243	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  =  compareToUndefined(left,  n);  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(left,  n);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	15	None	replace
244	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral);  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(left,  rightLiteral);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	15	None	replace
245	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.node);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  =  compareToUndefined(left,  left.node);  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(left,  left.node);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	15	None	replace
246	[BUG]  [BUGGY]  if  (lhType!=  Token.FUNCTION  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.FUNCTION  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FUNCTION  ||  undefinedLeft)  {	  if    (lhType!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
247	[BUG]  [BUGGY]  if  (lhType  ==  Token.FUNCTION  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType  ==  Token.FUNCTION  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType  ==  Token.FUNCTION  ||  undefinedLeft)  {	  if    (lhType!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
248	[BUG]  [BUGGY]  if  (lhType!=  Token.FUNCTION  ||  undefinedRight  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.FUNCTION  ||  undefinedRight  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FUNCTION  ||  undefinedRight  ||  rightLiteral)  {	  if    (lhType!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
249	[BUG]  [BUGGY]  if  (lhType  ==  Token.FUNCTION  ||  undefinedRight  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType  ==  Token.FUNCTION  ||  undefinedRight  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType  ==  Token.FUNCTION  ||  undefinedRight  ||  rightLiteral)  {	  if    (lhType!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
250	[BUG]  [BUGGY]  if  (lhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {	  if    (lhType!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
251	[BUG]  [BUGGY]  if  (right  ==  null  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (right  ==  null  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (right  ==  null  ||  undefinedRight)  {	  if    (op    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
252	[BUG]  [BUGGY]  if  (op  ==  null  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (op  ==  null  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op  ==  null  ||  rightLiteral)  {	  if    (op    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
253	[BUG]  [BUGGY]  if  (left  ==  null  ||  rightLiteral  ==  undefinedLeft)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  rightLiteral  ==  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  rightLiteral  ==  undefinedLeft)  {	  if    (rightLiteral    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	22	None	replace
254	[BUG]  [BUGGY]  if  (left!=  null  ||  rightLiteral  ==  undefinedLeft)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  rightLiteral  ==  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  rightLiteral  ==  undefinedLeft)  {	  if    (rightLiteral    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	22	None	replace
255	[BUG]  [BUGGY]  if  (left  ==  null  ||  rightLiteral!=  undefinedLeft)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  rightLiteral!=  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  rightLiteral!=  undefinedLeft)  {	  if    (rightLiteral    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	22	None	replace
256	[BUG]  [BUGGY]  if  (lhType!=  Token.FALSE  ||  rhType!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.FALSE  ||  rhType!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FALSE  ||  rhType!=  Token.FUNCTION)  {	  if    (lhType!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	65	None	replace
257	[BUG]  [BUGGY]  Node  left  =  rightLiteral.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  rightLiteral.getFirstChild();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  rightLiteral.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	55	None	replace
258	[BUG]  [BUGGY]  if  (rightLiteral!=  Token.FUNCTION  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral!=  Token.FUNCTION  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral!=  Token.FUNCTION  ||  undefinedLeft)  {	  if    (rhType!=    Token.FUNCTION    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
259	[BUG]  [BUGGY]  if  (leftType!=  Token.FUNCTION  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftType!=  Token.FUNCTION  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftType!=  Token.FUNCTION  ||  undefinedLeft)  {	  if    (rhType!=    Token.FUNCTION    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
260	[BUG]  [BUGGY]  if(result  ||  leftLiteral)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ||  leftLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ||  leftLiteral)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	89	None	replace
261	[BUG]  [BUGGY]  if(result  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ||  left.getType()  ==  Token.FUNCTION)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	89	None	replace
262	[BUG]  [BUGGY]  if(result  ||  rightLiteral  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ||  rightLiteral  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ||  rightLiteral  ||  left.getType()  ==  Token.FUNCTION)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	89	None	replace
263	[BUG]  [BUGGY]  if(result  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ||  left.getType()  ==  Token.GETELEM)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	89	None	replace
264	[BUG]  [BUGGY]  if(result  ||  rightLiteral  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ||  rightLiteral  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ||  rightLiteral  ||  undefinedRight)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	89	None	replace
265	[BUG]  [BUGGY]  if(result  ||  left.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ||  left.getType()  ==  Token.STRING)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	89	None	replace
266	[BUG]  [BUGGY]  if  (lhType  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
267	[BUG]  [BUGGY]  if  (rhType!=  Token.FALSE  &&  lhType!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rhType!=  Token.FALSE  &&  lhType!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rhType!=  Token.FALSE  &&  lhType!=  Token.FUNCTION)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
268	[BUG]  [BUGGY]  if  (lhType!=  Token.FUNCTION  &&  rhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.FUNCTION  &&  rhType!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FUNCTION  &&  rhType!=  Token.FALSE)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
269	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  ||  rightLiteral  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType  ==  Token.FALSE  ||  rightLiteral  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType  ==  Token.FALSE  ||  rightLiteral  ==  Token.FALSE)  {	  if(rightLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
270	[BUG]  [BUGGY]  if(left!=  null  ||  rightLiteral  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left!=  null  ||  rightLiteral  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left!=  null  ||  rightLiteral  ==  Token.FALSE)  {	  if(rightLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
271	[BUG]  [BUGGY]  if(rightLiteral  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral  ==  Token.FUNCTION)  {	  if(rightLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
272	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  ||  rightLiteral  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType  ==  Token.FALSE  ||  rightLiteral  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType  ==  Token.FALSE  ||  rightLiteral  ==  Token.FUNCTION)  {	  if(rightLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
273	[BUG]  [BUGGY]  rhType!=  Token.FALSE  ||  rhType!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  rhType!=  Token.FALSE  ||  rhType!=  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	rhType!=  Token.FALSE  ||  rhType!=  Token.FUNCTION;	  rhType!=    Token.FALSE    &&    rhType!=    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	19	None	replace
274	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft  <  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedLeft  <  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft  <  MAX_FOLD_NUMBER_ERROR)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	76	None	replace
275	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	76	None	replace
276	[BUG]  [BUGGY]  if  (n  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (n  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (n  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	76	None	replace
277	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft  >=  MAX_FOLD_NUMBER_ERROR)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	76	None	replace
278	[BUG]  [BUGGY]  if  (left  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	76	None	replace
279	[BUG]  [BUGGY]  if  (left  ==  null  ||  rightLiteral  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  rightLiteral  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  rightLiteral  >  MAX_FOLD_NUMBER_ERROR)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	76	None	replace
280	[BUG]  [BUGGY]  if  (rightLiteral!=  Token.FALSE  &&!rightLiteral)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral!=  Token.FALSE  &&!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral!=  Token.FALSE  &&!rightLiteral)  {	  if    (rhType!=    Token.FALSE    &&!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
281	[BUG]  [BUGGY]  if  (lhType!=  Token.FALSE  &&!rightLiteral)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.FALSE  &&!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FALSE  &&!rightLiteral)  {	  if    (rhType!=    Token.FALSE    &&!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
282	[BUG]  [BUGGY]  if  (left!=  null  ||  left.getType()  ==  Token.FALSE  &&!rightLiteral)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  left.getType()  ==  Token.FALSE  &&!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  left.getType()  ==  Token.FALSE  &&!rightLiteral)  {	  if    (rhType!=    Token.FALSE    &&!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
283	[BUG]  [BUGGY]  if  (left!=  null  &&  left.getType()  ==  Token.FALSE  &&!rightLiteral)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  &&  left.getType()  ==  Token.FALSE  &&!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  &&  left.getType()  ==  Token.FALSE  &&!rightLiteral)  {	  if    (rhType!=    Token.FALSE    &&!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
284	[BUG]  [BUGGY]  if  (left!=  null  ||  rightLiteral!=  Token.FUNCTION  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  rightLiteral!=  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  rightLiteral!=  Token.FUNCTION  ||  undefinedRight)  {	  if    (rightLiteral!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	26	None	replace
285	[BUG]  [BUGGY]  if  (rightLiteral!=  Token.FUNCTION  ||  rightLiteral  ==  undefinedRight)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral!=  Token.FUNCTION  ||  rightLiteral  ==  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral!=  Token.FUNCTION  ||  rightLiteral  ==  undefinedRight)  {	  if    (rightLiteral!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	26	None	replace
286	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left!=  null  &&  left.getType()  ==  Token.NAME)  {	  if(result!=    null    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	93	None	replace
287	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left!=  null  &&  right.getType()  ==  Token.NAME)  {	  if(result!=    null    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	93	None	replace
288	[BUG]  [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(right!=  null  &&  left.getType()  ==  Token.NAME)  {	  if(result!=    null    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	93	None	replace
289	[BUG]  [BUGGY]  if(left  ==  null  &&  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left  ==  null  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left  ==  null  &&  left.getType()  ==  Token.NAME)  {	  if(result!=    null    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	93	None	replace
290	[BUG]  [BUGGY]  if(n!=  null  &&  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(n!=  null  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(n!=  null  &&  left.getType()  ==  Token.NAME)  {	  if(result!=    null    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	93	None	replace
291	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(right!=  null  &&  right.getType()  ==  Token.NAME)  {	  if(result!=    null    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	93	None	replace
292	[BUG]  [BUGGY]  if(op  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op  ==  Token.FUNCTION)  {	  if(result    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
293	[BUG]  [BUGGY]  if(result  ==  Token.FUNCTION  ||  result  ==  rightLiteral)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FUNCTION  ||  result  ==  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FUNCTION  ||  result  ==  rightLiteral)  {	  if(result    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
294	[BUG]  [BUGGY]  if(result  ==  Token.FUNCTION  ||  result  ==  left.getString())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FUNCTION  ||  result  ==  left.getString())  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FUNCTION  ||  result  ==  left.getString())  {	  if(result    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
295	[BUG]  [BUGGY]  if(left  ||  right.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left  ||  right.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left  ||  right.getType()!=  Token.FUNCTION)  {	  if(rightLiteral    ||    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
296	[BUG]  [BUGGY]  if(left  ||  rightLiteral.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left  ||  rightLiteral.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left  ||  rightLiteral.getType()!=  Token.FUNCTION)  {	  if(rightLiteral    ||    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
297	[BUG]  [BUGGY]  if(left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left.getType()!=  Token.FUNCTION)  {	  if(rightLiteral    ||    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
298	[BUG]  [BUGGY]  if(leftLiteral  ||  right.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(leftLiteral  ||  right.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(leftLiteral  ||  right.getType()!=  Token.FUNCTION)  {	  if(rightLiteral    ||    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
299	[BUG]  [BUGGY]  if(left  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left  ||  left.getType()!=  Token.FUNCTION)  {	  if(rightLiteral    ||    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
300	[BUG]  [BUGGY]  if(leftLiteral  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(leftLiteral  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(leftLiteral  ||  left.getType()!=  Token.FUNCTION)  {	  if(rightLiteral    ||    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
301	[BUG]  [BUGGY]  Node  rhType  =  right.getNext();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rhType  =  right.getNext();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rhType  =  right.getNext();	  Node    rhType    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  case	87	None	replace
302	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  result  ==  null)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  result  ==  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  result  ==  null)  {	  if    (result    ==    null    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
303	[BUG]  [BUGGY]  if  (result  ==  null  ||  leftLiteral)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  leftLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  leftLiteral)  {	  if    (result    ==    null    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
304	[BUG]  [BUGGY]  if(!compareResult)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!compareResult)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!compareResult)  {	  if(compareResult)    {    	non-compiled	[CE]  orphaned  case	90	None	replace
305	[BUG]  [BUGGY]  if(compareResult  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(compareResult  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult  ||  rightLiteral)  {	  if(compareResult)    {    	non-compiled	[CE]  orphaned  case	90	None	replace
306	[BUG]  [BUGGY]  if(compareResult  ||  equalToUndefined(left,  op))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(compareResult  ||  equalToUndefined(left,  op))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult  ||  equalToUndefined(left,  op))  {	  if(compareResult)    {    	non-compiled	[CE]  orphaned  case	90	None	replace
307	[BUG]  [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {	  if(compareResult)    {    	non-compiled	[CE]  orphaned  case	90	None	replace
308	[BUG]  [BUGGY]  if  (undefinedLeft  ==  null  ||  result  <=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (undefinedLeft  ==  null  ||  result  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (undefinedLeft  ==  null  ||  result  <=  MAX_FOLD_NUMBER)  {	  if    (result    ==    null    ||    undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	73	None	replace
309	[BUG]  [BUGGY]  if  (n  ==  null  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (n  ==  null  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (n  ==  null  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {	  if    (result    ==    null    ||    undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	73	None	replace
310	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {	  if    (result    ==    null    ||    undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	73	None	replace
311	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft!=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedLeft!=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft!=  MAX_FOLD_NUMBER)  {	  if    (result    ==    null    ||    undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	73	None	replace
312	[BUG]  [BUGGY]  if  (left  ==  null  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  undefinedLeft  <=  MAX_FOLD_NUMBER)  {	  if    (result    ==    null    ||    undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	73	None	replace
313	[BUG]  [BUGGY]  if(!leftLiteral)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!leftLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!leftLiteral)  {	  if(!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
314	[BUG]  [BUGGY]  if(!rightLiteral  &&  op.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!rightLiteral  &&  op.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!rightLiteral  &&  op.getType()  ==  Token.FUNCTION)  {	  if(!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
315	[BUG]  [BUGGY]  if(!rightLiteral  &&!leftLiteral)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!rightLiteral  &&!leftLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!rightLiteral  &&!leftLiteral)  {	  if(!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
316	[BUG]  [BUGGY]  if(!rightLiteral  &&  rhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!rightLiteral  &&  rhType!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!rightLiteral  &&  rhType!=  Token.FALSE)  {	  if(!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
317	[BUG]  [BUGGY]  if(!rightLiteral  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!rightLiteral  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!rightLiteral  &&  right.getType()  ==  Token.FUNCTION)  {	  if(!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
318	[BUG]  [BUGGY]  if(!rightLiteral  &&!rightLiteral)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!rightLiteral  &&!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!rightLiteral  &&!rightLiteral)  {	  if(!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
319	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.RETURN)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.RETURN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left  ==  null  ||  left.getType()  ==  Token.RETURN)  {	  if(result    ==    null    ||    left.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  orphaned  case	78	None	replace
320	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.RETURN)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.RETURN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left!=  null  ||  left.getType()  ==  Token.RETURN)  {	  if(result    ==    null    ||    left.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  orphaned  case	78	None	replace
321	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.RETURN)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.RETURN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left  ==  null  ||  left.getType()!=  Token.RETURN)  {	  if(result    ==    null    ||    left.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  orphaned  case	78	None	replace
322	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.RETURN)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.RETURN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left  ==  null  ||  right.getType()  ==  Token.RETURN)  {	  if(result    ==    null    ||    left.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  orphaned  case	78	None	replace
323	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.RETURN)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.RETURN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(right  ==  null  ||  left.getType()  ==  Token.RETURN)  {	  if(result    ==    null    ||    left.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  orphaned  case	78	None	replace
324	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.RETURN)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.RETURN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(n  ==  null  ||  left.getType()  ==  Token.RETURN)  {	  if(result    ==    null    ||    left.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  orphaned  case	78	None	replace
325	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.RETURN)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.RETURN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(right!=  null  ||  left.getType()  ==  Token.RETURN)  {	  if(result    ==    null    ||    left.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  orphaned  case	78	None	replace
326	[BUG]  [BUGGY]  if(left!=  null  ||  rightLiteral!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left!=  null  ||  rightLiteral!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left!=  null  ||  rightLiteral!=  Token.FALSE)  {	  if(rightLiteral!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	39	None	replace
327	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  ||  rightLiteral!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.FALSE  ||  rightLiteral!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.FALSE  ||  rightLiteral!=  Token.FALSE)  {	  if(rightLiteral!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	39	None	replace
328	[BUG]  [BUGGY]  if  (left!=  null  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  left.getType()!=  Token.FUNCTION)  {	  if    (result    ==    null    ||    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
329	[BUG]  [BUGGY]  if  (left  ==  null  ||  right.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  right.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  right.getType()!=  Token.FUNCTION)  {	  if    (result    ==    null    ||    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
330	[BUG]  [BUGGY]  if  (right  ==  null  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (right  ==  null  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (right  ==  null  ||  left.getType()!=  Token.FUNCTION)  {	  if    (result    ==    null    ||    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
331	[BUG]  [BUGGY]  if  (n  ==  null  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (n  ==  null  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (n  ==  null  ||  left.getType()!=  Token.FUNCTION)  {	  if    (result    ==    null    ||    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
332	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION)  {	  if(compareResult    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
333	[BUG]  [BUGGY]  if(compareResult  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(compareResult  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult  ==  Token.FUNCTION)  {	  if(compareResult    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
334	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  &&  rhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType  ==  Token.FALSE  &&  rhType!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType  ==  Token.FALSE  &&  rhType!=  Token.FALSE)  {	  if(compareResult    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
335	[BUG]  [BUGGY]  if(!compareResult  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!compareResult  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!compareResult  ==  Token.FALSE)  {	  if(compareResult    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
336	[BUG]  [BUGGY]  Node  rhType  =  left.getNext()  +  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rhType  =  left.getNext()  +  1;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rhType  =  left.getNext()  +  1;	  Node    rhType    =    left.getNext();    	non-compiled	[CE]  orphaned  case	83	None	replace
337	[BUG]  [BUGGY]  Node  rhType  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rhType  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rhType  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;	  Node    rhType    =    left.getNext();    	non-compiled	[CE]  orphaned  case	83	None	replace
338	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral!=  null)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  rightLiteral!=  null)  {	  if    (rightLiteral    ==    null)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
339	[BUG]  [BUGGY]  if  (left  ==  null)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null)  {	  if    (n    ==    null)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
340	[BUG]  [BUGGY]  if  (leftLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.FALSE)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	45	None	replace
341	[BUG]  [BUGGY]  if  (rightLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.FALSE)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	45	None	replace
342	[BUG]  [BUGGY]  if  (rhType!=  Token.FALSE  &&  leftLiteral!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rhType!=  Token.FALSE  &&  leftLiteral!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rhType!=  Token.FALSE  &&  leftLiteral!=  Token.FALSE)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	45	None	replace
343	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft  ==  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedLeft  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft  ==  MAX_FOLD_NUMBER)  {	  if    (result    ==    null    ||    undefinedLeft    <=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	73	None	replace
344	[BUG]  [BUGGY]  if(leftLiteral!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(leftLiteral!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(leftLiteral!=  Token.FUNCTION)  {	  if(rhType!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
345	[BUG]  [BUGGY]  if  (rightType  ==  Token.FUNCTION  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightType  ==  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightType  ==  Token.FUNCTION  ||  undefinedRight)  {	  if    (rhType    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	79	None	replace
346	[BUG]  [BUGGY]  if  (rhType  ==  Token.FUNCTION  ||  op!=  undefinedRight)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rhType  ==  Token.FUNCTION  ||  op!=  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rhType  ==  Token.FUNCTION  ||  op!=  undefinedRight)  {	  if    (rhType    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	79	None	replace
347	[BUG]  [BUGGY]  if  (result  ==  null  ||  left.length  <=  1)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  left.length  <=  1)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  left.length  <=  1)  {	  if    (result    ==    null    ||    undefinedLeft    <=    1)    {    	non-compiled	[CE]  orphaned  case	75	None	replace
348	[BUG]  [BUGGY]  if  (leftLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.FUNCTION)  {	  if    (leftLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
349	[BUG]  [BUGGY]  if  (leftLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {	  if    (leftLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
350	[BUG]  [BUGGY]  if  (leftLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.NULL)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.NULL)  {	  if    (leftLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
351	[BUG]  [BUGGY]  if  (rightLiteral  ==  Token.FALSE  &&  rightLiteral!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  Token.FALSE  &&  rightLiteral!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  Token.FALSE  &&  rightLiteral!=  Token.FUNCTION)  {	  if    (leftLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
352	[BUG]  [BUGGY]  Node  left  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  left.removeFirstChild();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  left.removeFirstChild();	  Node    left    =    left.getNext();    	non-compiled	[CE]  orphaned  case	56	None	replace
353	[BUG]  [BUGGY]  Node  left  =  left.cloneTree();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  left.cloneTree();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  left.cloneTree();	  Node    left    =    left.getNext();    	non-compiled	[CE]  orphaned  case	56	None	replace
354	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  =  compareToUndefined(left,  left);  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(left,  left);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	15	None	replace
355	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  newNode);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  =  compareToUndefined(left,  newNode);  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(left,  newNode);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	15	None	replace
356	[BUG]  [BUGGY]  if(result!=  Token.FALSE  &&  left!=  null)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result!=  Token.FALSE  &&  left!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  Token.FALSE  &&  left!=  null)  {	  if(result    ==    Token.FALSE    &&    op!=    null)    {    	non-compiled	[CE]  orphaned  case	70	None	replace
357	[BUG]  [BUGGY]  if(!result  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!result  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!result  ||  rightLiteral)  {	  if(!result)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
358	[BUG]  [BUGGY]  if(!result  &&  rightLiteral!=  null)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!result  &&  rightLiteral!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!result  &&  rightLiteral!=  null)  {	  if(!result)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
359	[BUG]  [BUGGY]  if(!result  &&  leftLiteral!=  null)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!result  &&  leftLiteral!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!result  &&  leftLiteral!=  null)  {	  if(!result)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
360	[BUG]  [BUGGY]  if  (rightLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.FUNCTION)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
361	[BUG]  [BUGGY]  if(rightLiteral!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral!=  null  &&  left.getType()  ==  Token.FUNCTION)  {	  if(result!=    null    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	92	None	replace
362	[BUG]  [BUGGY]  if(result  ==  null  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  null  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  null  &&  left.getType()  ==  Token.FUNCTION)  {	  if(result!=    null    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	92	None	replace
363	[BUG]  [BUGGY]  if(result!=  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result!=  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {	  if(result    ==    Token.FALSE    &&    rightLiteral!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
364	[BUG]  [BUGGY]  if(op  ==  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op  ==  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op  ==  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {	  if(result    ==    Token.FALSE    &&    rightLiteral!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
365	[BUG]  [BUGGY]  if  (right!=  null  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (right!=  null  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (right!=  null  ||  left.getType()!=  Token.FUNCTION)  {	  if    (result    ==    null    ||    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
366	[BUG]  [BUGGY]  if  (right!=  null  ||  left.isEmpty())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (right!=  null  ||  left.isEmpty())  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (right!=  null  ||  left.isEmpty())  {	  if    (result    ==    null    ||    left.isEmpty())    {    	non-compiled	[CE]  orphaned  case	60	None	replace
367	[BUG]  [BUGGY]  if  (left!=  null  ||  leftLiteral!=  null)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  leftLiteral!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  leftLiteral!=  null)  {	  if    (result    ==    null    ||    leftLiteral!=    null)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
368	[BUG]  [BUGGY]  if  (left!=  null  ||  result  ==  null)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  result  ==  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  result  ==  null)  {	  if    (result    ==    null    ||    leftLiteral!=    null)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
369	[BUG]  [BUGGY]  if  (result  ==  null  ||  leftLiteral  ==  null)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  leftLiteral  ==  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  leftLiteral  ==  null)  {	  if    (result    ==    null    ||    leftLiteral!=    null)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
370	[BUG]  [BUGGY]  if  (left  ==  null  ||  result  ==  null)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  result  ==  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  result  ==  null)  {	  if    (result    ==    null    ||    leftLiteral!=    null)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
371	[BUG]  [BUGGY]  if  (left!=  null  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  undefinedLeft)  {	  if    (undefinedLeft    ==    null    ||    result)    {    	non-compiled	[CE]  orphaned  case	25	None	replace
372	[BUG]  [BUGGY]  if  (left  ==  null  ||  result)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  result)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  result)  {	  if    (undefinedLeft    ==    null    ||    result)    {    	non-compiled	[CE]  orphaned  case	25	None	replace
373	[BUG]  [BUGGY]  if  (result  ==  null  ||  left.length  >  undefinedRight)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  left.length  >  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  left.length  >  undefinedRight)  {	  if    (result    ==    null    ||    undefinedRight    >    left.length)    {    	non-compiled	[CE]  orphaned  case	80	None	replace
374	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  =  compareToUndefined(left,  left);  break;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(left,  left);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  orphaned  case	16	None	replace
375	[BUG]  [BUGGY]  result  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION;	  rhType    ==    Token.FALSE    &&    rhType!=    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	18	None	replace
376	[BUG]  [BUGGY]  Node  left  =  right.removeFirstChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  right.removeFirstChild();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  right.removeFirstChild();	  Node    left    =    right.getNext();    	non-compiled	[CE]  orphaned  case	20	None	replace
377	[BUG]  [BUGGY]  if(compareResult  ==  Token.FALSE  &&  leftLiteral!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(compareResult  ==  Token.FALSE  &&  leftLiteral!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult  ==  Token.FALSE  &&  leftLiteral!=  Token.FUNCTION)  {	  if(compareResult    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
378	[BUG]  [BUGGY]  if(compareResult  ==  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(compareResult  ==  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult  ==  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {	  if(compareResult    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
379	[BUG]  [BUGGY]  if  (leftLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.UNKNOWN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.UNKNOWN)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
380	[BUG]  [BUGGY]  if  (rhType!=  Token.FALSE  &&  rhType!=  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rhType!=  Token.FALSE  &&  rhType!=  Token.UNKNOWN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rhType!=  Token.FALSE  &&  rhType!=  Token.UNKNOWN)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
381	[BUG]  [BUGGY]  if  (rightLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.UNKNOWN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral!=  Token.FALSE  &&  rightLiteral!=  Token.UNKNOWN)  {	  if    (lhType!=    Token.FALSE    &&    rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
382	[BUG]  [BUGGY]  if  (leftType!=  Token.FALSE  &&!rightLiteral)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftType!=  Token.FALSE  &&!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftType!=  Token.FALSE  &&!rightLiteral)  {	  if    (rhType!=    Token.FALSE    &&!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
383	[BUG]  [BUGGY]  if  (leftLiteral!=  Token.FALSE  &&!rightLiteral)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftLiteral!=  Token.FALSE  &&!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral!=  Token.FALSE  &&!rightLiteral)  {	  if    (rhType!=    Token.FALSE    &&!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
384	[BUG]  [BUGGY]  if  (left!=  null  &&  left.getType()  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  &&  left.getType()  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  &&  left.getType()  ==  Token.FALSE)  {	  if    (rhType!=    Token.FALSE    &&!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
385	[BUG]  [BUGGY]  if(rhType  ==  Token.FUNCTION  ||  op  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType  ==  Token.FUNCTION  ||  op  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType  ==  Token.FUNCTION  ||  op  ==  Token.FALSE)  {	  if(op    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
386	[BUG]  [BUGGY]  if  (left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  undefinedRight)  {	  if    (op!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
387	[BUG]  [BUGGY]  if  (right!=  Token.FUNCTION  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (right!=  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (right!=  Token.FUNCTION  ||  undefinedRight)  {	  if    (op!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
388	[BUG]  [BUGGY]  if(leftLiteral!=  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(leftLiteral!=  Token.UNKNOWN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(leftLiteral!=  Token.UNKNOWN)  {	  if(rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
389	[BUG]  [BUGGY]  if(result  ==  Token.UNKNOWN)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.UNKNOWN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.UNKNOWN)  {	  if(rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
390	[BUG]  [BUGGY]  Node  rhType  =  left.getParent();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rhType  =  left.getParent();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rhType  =  left.getParent();	  Node    rhType    =    left.getNext();    	non-compiled	[CE]  orphaned  case	83	None	replace
391	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedRight  ==  1)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedRight  ==  1)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedRight  ==  1)  {	  if    (result    ==    null    ||    undefinedRight    <=    1)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
392	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedRight  >=  1)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedRight  >=  1)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedRight  >=  1)  {	  if    (result    ==    null    ||    undefinedRight    <=    1)    {    	non-compiled	[CE]  orphaned  case	82	None	replace
393	[BUG]  [BUGGY]  if(op  ==  null)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op  ==  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op  ==  null)  {	  if(result    ==    false)    {    	non-compiled	[CE]  orphaned  case	41	None	replace
394	[BUG]  [BUGGY]  if(rhType  ==  Token.FUNCTION  ||  result  ==  null)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType  ==  Token.FUNCTION  ||  result  ==  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType  ==  Token.FUNCTION  ||  result  ==  null)  {	  if(result    ==    false)    {    	non-compiled	[CE]  orphaned  case	41	None	replace
395	[BUG]  [BUGGY]  if  (lhType!=  Token.FUNCTION  ||  rhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.FUNCTION  ||  rhType!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FUNCTION  ||  rhType!=  Token.FALSE)  {	  if    (lhType!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
396	[BUG]  [BUGGY]  if  (left  ==  null  ||  left.length()  ==  0)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  left.length()  ==  0)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  left.length()  ==  0)  {	  if    (left    ==    null    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
397	[BUG]  [BUGGY]  if  (left!=  null  ||  leftLiteral!=  Token.FUNCTION  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  leftLiteral!=  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  leftLiteral!=  Token.FUNCTION  ||  undefinedRight)  {	  if    (rightLiteral!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	26	None	replace
398	[BUG]  [BUGGY]  if  (left  ==  null  ||  rightLiteral  ==  Token.FUNCTION  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  rightLiteral  ==  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  rightLiteral  ==  Token.FUNCTION  ||  undefinedRight)  {	  if    (rightLiteral    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
399	[BUG]  [BUGGY]  if  (rightLiteral!=  Token.FUNCTION  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral!=  Token.FUNCTION  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral!=  Token.FUNCTION  ||  rightLiteral)  {	  if    (rightLiteral    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
400	[BUG]  [BUGGY]  if  (rightLiteral  ==  Token.FUNCTION  ||  left.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  Token.FUNCTION  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  Token.FUNCTION  ||  left.getType()  ==  Token.STRING)  {	  if    (rightLiteral    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
401	[BUG]  [BUGGY]  if(result  ==  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {	  if(result    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
402	[BUG]  [BUGGY]  if(result  ==  Token.FUNCTION  ||  result  ==  leftLiteral)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FUNCTION  ||  result  ==  leftLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FUNCTION  ||  result  ==  leftLiteral)  {	  if(result    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
403	[BUG]  [BUGGY]  if(result  ==  Token.FUNCTION  &&  left.getType()  ==  Token.GETELEM)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FUNCTION  &&  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FUNCTION  &&  left.getType()  ==  Token.GETELEM)  {	  if(result    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
404	[BUG]  [BUGGY]  if(rightLiteral  ==  Token.FUNCTION  ||  result  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral  ==  Token.FUNCTION  ||  result  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral  ==  Token.FUNCTION  ||  result  ==  Token.FALSE)  {	  if(result    ==    Token.FUNCTION    ||    result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
405	[BUG]  [BUGGY]  Node  rh  =  left.cloneTree();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rh  =  left.cloneTree();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rh  =  left.cloneTree();	  Node    rh    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	84	None	replace
406	[BUG]  [BUGGY]  if  (result  ==  null  ||  left  >  undefinedRight)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  left  >  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  left  >  undefinedRight)  {	  if    (result    ==    null    ||    undefinedRight    >    left)    {    	non-compiled	[CE]  orphaned  case	81	None	replace
407	[BUG]  [BUGGY]  if  (left  ==  null  ||  left  >  undefinedRight)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  left  >  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  left  >  undefinedRight)  {	  if    (result    ==    null    ||    undefinedRight    >    left)    {    	non-compiled	[CE]  orphaned  case	81	None	replace
408	[BUG]  [BUGGY]  if(compareResult  ||  leftLiteral)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(compareResult  ||  leftLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult  ||  leftLiteral)  {	  if(compareResult)    {    	non-compiled	[CE]  orphaned  case	90	None	replace
409	[BUG]  [BUGGY]  if(compareResult  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(compareResult  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult  ||  left.getType()  ==  Token.FUNCTION)  {	  if(compareResult)    {    	non-compiled	[CE]  orphaned  case	90	None	replace
410	[BUG]  [BUGGY]  if(compareResult  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(compareResult  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult  ||  left.getType()  ==  Token.GETELEM)  {	  if(compareResult)    {    	non-compiled	[CE]  orphaned  case	90	None	replace
411	[BUG]  [BUGGY]  if(result  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ||  left.getType()!=  Token.FUNCTION)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	89	None	replace
412	[BUG]  [BUGGY]  if(rightLiteral!=  null  &&  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral!=  null  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral!=  null  &&  left.getType()  ==  Token.NAME)  {	  if(result!=    null    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	93	None	replace
413	[BUG]  [BUGGY]  if(result  ==  null  &&  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  null  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  null  &&  left.getType()  ==  Token.NAME)  {	  if(result!=    null    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	93	None	replace
414	[BUG]  [BUGGY]  if  (left!=  null  &&  rightLiteral!=  null)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  &&  rightLiteral!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  &&  rightLiteral!=  null)  {	  if    (left!=    null    ||    rightLiteral!=    null)    {    	non-compiled	[CE]  orphaned  case	54	None	replace
415	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedRight  >  MAX_FOLD_NUMBER_ERROR)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	76	None	replace
416	[BUG]  [BUGGY]  if  (result  ==  null  ||  rightLiteral  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  rightLiteral  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  rightLiteral  >  MAX_FOLD_NUMBER_ERROR)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	76	None	replace
417	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft!=  MAX_FOLD_NUMBER_ERROR)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	76	None	replace
418	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedRight  >  MAX_FOLD_NUMBER)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	74	None	replace
419	[BUG]  [BUGGY]  if  (result  ==  null  ||  rightLiteral  >  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  rightLiteral  >  MAX_FOLD_NUMBER)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  rightLiteral  >  MAX_FOLD_NUMBER)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  orphaned  case	74	None	replace
420	[BUG]  [BUGGY]  if(rightLiteral  &&  left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral  &&  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral  &&  left.getType()!=  Token.FUNCTION)  {	  if(rightLiteral    ||    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
421	[BUG]  [BUGGY]  if  (left!=  null  ||  leftLiteral)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  ||  leftLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  ||  leftLiteral)  {	  if    (rightLiteral    ==    null    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
422	[BUG]  [BUGGY]  Node  rhType  =  left.cloneTree();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rhType  =  left.cloneTree();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rhType  =  left.cloneTree();	  Node    rhType    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	17	None	replace
423	[BUG]  [BUGGY]  op!=  Token.FALSE  &&  rhType  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  op!=  Token.FALSE  &&  rhType  ==  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	op!=  Token.FALSE  &&  rhType  ==  Token.FUNCTION;	  rhType!=    Token.FALSE    &&    rhType    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	21	None	replace
424	[BUG]  [BUGGY]  rhType  >>  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  rhType  >>  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	rhType  >>  Token.FALSE  &&  rhType!=  Token.FUNCTION;	  rhType!=    Token.FALSE    &&    rhType!=    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	19	None	replace
425	[BUG]  [BUGGY]  op!=  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  op!=  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	op!=  Token.FALSE  &&  rhType!=  Token.FUNCTION;	  rhType!=    Token.FALSE    &&    rhType!=    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	19	None	replace
426	[BUG]  [BUGGY]  if  (op  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (op  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (op    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	24	None	replace
427	[BUG]  [BUGGY]  if  (op  ==  null  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (op  ==  null  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op  ==  null  ||  left.getType()!=  Token.FUNCTION)  {	  if    (op    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	24	None	replace
428	[BUG]  [BUGGY]  if(leftType!=  Token.FUNCTION  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(leftType!=  Token.FUNCTION  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(leftType!=  Token.FUNCTION  ||  rightLiteral)  {	  if(rhType!=    Token.FUNCTION    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
429	[BUG]  [BUGGY]  if(rightLiteral!=  Token.FUNCTION  ||  rhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral!=  Token.FUNCTION  ||  rhType!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral!=  Token.FUNCTION  ||  rhType!=  Token.FALSE)  {	  if(rhType!=    Token.FUNCTION    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
430	[BUG]  [BUGGY]  if  (leftLiteral!=  Token.FALSE  &&  rightLiteral  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftLiteral!=  Token.FALSE  &&  rightLiteral  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral!=  Token.FALSE  &&  rightLiteral  ==  Token.FUNCTION)  {	  if    (lhType!=    Token.FALSE    &&    rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	38	None	replace
431	[BUG]  [BUGGY]  if  (rightLiteral!=  Token.FALSE  &&  rightLiteral  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral!=  Token.FALSE  &&  rightLiteral  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral!=  Token.FALSE  &&  rightLiteral  ==  Token.FUNCTION)  {	  if    (lhType!=    Token.FALSE    &&    rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	38	None	replace
432	[BUG]  [BUGGY]  if  (left!=  null  &&  rightLiteral  ==  null)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  &&  rightLiteral  ==  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  &&  rightLiteral  ==  null)  {	  if    (left!=    null    ||    rightLiteral    ==    null)    {    	non-compiled	[CE]  orphaned  case	44	None	replace
433	[BUG]  [BUGGY]  Node  left  =  rightNode.getLastChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  rightNode.getLastChild();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  rightNode.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
434	[BUG]  [BUGGY]  Node  rhType  =  left.next();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rhType  =  left.next();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rhType  =  left.next();	  Node    rhType    =    left.getLastChild();    	non-compiled	[CE]  orphaned  case	86	None	replace
435	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (rightLiteral    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
436	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral  ==  null)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral  ==  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  rightLiteral  ==  null)  {	  if    (rightLiteral    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
437	[BUG]  [BUGGY]  if  (left  ==  null  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left  ==  null  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left  ==  null  ||  undefinedRight)  {	  if    (rightLiteral    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
438	[BUG]  [BUGGY]  if(result!=  Token.FALSE  &&!leftLiteral)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result!=  Token.FALSE  &&!leftLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  Token.FALSE  &&!leftLiteral)  {	  if(result    ==    Token.FALSE    &&!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	71	None	replace
439	[BUG]  [BUGGY]  if(!resultLiteral)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!resultLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!resultLiteral)  {	  if(!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
440	[BUG]  [BUGGY]  if(!rightLiteral  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!rightLiteral  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!rightLiteral  &&  left.getType()  ==  Token.FUNCTION)  {	  if(!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
441	[BUG]  [BUGGY]  if(!rightLiteral  &&  left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!rightLiteral  &&  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!rightLiteral  &&  left.getType()!=  Token.FUNCTION)  {	  if(!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
442	[BUG]  [BUGGY]  if(result  ==  null  ||!rightLiteral)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  null  ||!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  null  ||!rightLiteral)  {	  if(!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
443	[BUG]  [BUGGY]  if(!rightLiteral  &&  left.getType()  ==  Token.GETELEM)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!rightLiteral  &&  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!rightLiteral  &&  left.getType()  ==  Token.GETELEM)  {	  if(!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
444	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  ||  leftLiteral!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FALSE  ||  leftLiteral!=  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FALSE  ||  leftLiteral!=  Token.TRUE)  {	  if(result    ==    Token.FALSE    &&    leftLiteral!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
445	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {	  if(result    ==    Token.FALSE    &&    leftLiteral!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
446	[BUG]  [BUGGY]  if(result  ==  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.NULL)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.NULL)  {	  if(result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
447	[BUG]  [BUGGY]  if(rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.NULL)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.NULL)  {	  if(result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
448	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral.equals(undefinedLeft))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral.equals(undefinedLeft))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  rightLiteral.equals(undefinedLeft))  {	  if    (rightLiteral    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	22	None	replace
449	[BUG]  [BUGGY]  if  (right!=  null  ||  left.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (right!=  null  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (right!=  null  ||  left.getType()  ==  Token.STRING)  {	  if    (result    ==    null    ||    left.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
450	[BUG]  [BUGGY]  if(left  ==  null  ||  rightLiteral  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left  ==  null  ||  rightLiteral  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left  ==  null  ||  rightLiteral  ==  Token.FALSE)  {	  if(rightLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
451	[BUG]  [BUGGY]  if(rightLiteral!=  Token.FALSE  &&  left.getType()  ==  Token.GETELEM)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral!=  Token.FALSE  &&  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral!=  Token.FALSE  &&  left.getType()  ==  Token.GETELEM)  {	  if(rightLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
452	[BUG]  [BUGGY]  if(rightLiteral!=  Token.FALSE  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral!=  Token.FALSE  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral!=  Token.FALSE  &&  left.getType()  ==  Token.FUNCTION)  {	  if(rightLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
453	[BUG]  [BUGGY]  if(rightLiteral  ==  Token.FALSE  &&  left.getType()  ==  Token.GETELEM)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral  ==  Token.FALSE  &&  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral  ==  Token.FALSE  &&  left.getType()  ==  Token.GETELEM)  {	  if(rightLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
454	[BUG]  [BUGGY]  if(left!=  null  ||  leftLiteral!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left!=  null  ||  leftLiteral!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left!=  null  ||  leftLiteral!=  Token.FALSE)  {	  if(rightLiteral!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	39	None	replace
455	[BUG]  [BUGGY]  if  (right!=  null  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (right!=  null  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (right!=  null  ||  undefinedRight)  {	  if    (op    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
456	[BUG]  [BUGGY]  if  (op!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (op!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op!=  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (op    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
457	[BUG]  [BUGGY]  if(op!=  null  &&  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op!=  null  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op!=  null  &&  left.getType()  ==  Token.NAME)  {	  if(result!=    null    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	93	None	replace
458	[BUG]  [BUGGY]  if(!rightLiteral  &&  op!=  null)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!rightLiteral  &&  op!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!rightLiteral  &&  op!=  null)  {	  if(!rightLiteral)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
459	[BUG]  [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral.equals(undefinedRight))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral  ==  null  ||  rightLiteral.equals(undefinedRight))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral  ==  null  ||  rightLiteral.equals(undefinedRight))  {	  if    (rightLiteral    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
460	[BUG]  [BUGGY]  if(rightLiteral!=  Token.FUNCTION  ||  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral!=  Token.FUNCTION  ||  rhType!=  Token.NULL)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral!=  Token.FUNCTION  ||  rhType!=  Token.NULL)  {	  if(rhType!=    Token.FUNCTION    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
461	[BUG]  [BUGGY]  if  (left!=  null  &&  rightLiteral.equals(right))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (left!=  null  &&  rightLiteral.equals(right))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (left!=  null  &&  rightLiteral.equals(right))  {	  if    (left!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
462	[BUG]  [BUGGY]  if(op!=  Token.FALSE  &&!rightLiteral)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op!=  Token.FALSE  &&!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op!=  Token.FALSE  &&!rightLiteral)  {	  if(op!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
463	[BUG]  [BUGGY]  if(op!=  Token.FALSE  &&  op!=  null)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op!=  Token.FALSE  &&  op!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op!=  Token.FALSE  &&  op!=  null)  {	  if(op!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
464	[BUG]  [BUGGY]  if(op!=  Token.FALSE  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op!=  Token.FALSE  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op!=  Token.FALSE  &&  left.getType()  ==  Token.FUNCTION)  {	  if(op!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
465	[BUG]  [BUGGY]  if(op!=  Token.FALSE  &&  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op!=  Token.FALSE  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op!=  Token.FALSE  &&  left.getType()  ==  Token.NAME)  {	  if(op!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
466	[BUG]  [BUGGY]  if  (rightLiteral!=  null  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral!=  null  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral!=  null  ||  undefinedLeft)  {	  if    (rightLiteral    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	22	None	replace
467	[BUG]  [BUGGY]  Node  rh  =  left.removeFirst();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rh  =  left.removeFirst();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rh  =  left.removeFirst();	  Node    rh    =    left.getNext();    	non-compiled	[CE]  orphaned  case	85	None	replace
468	[BUG]  [BUGGY]  if(rightLiteral  ==  Token.FALSE  &&  left.getFirstChild()!=  rightLiteral)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral  ==  Token.FALSE  &&  left.getFirstChild()!=  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral  ==  Token.FALSE  &&  left.getFirstChild()!=  rightLiteral)  {	  if(rightLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
469	[BUG]  [BUGGY]  if(rightLiteral  ==  Token.FALSE  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral  ==  Token.FALSE  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral  ==  Token.FALSE  &&  left.getType()  ==  Token.FUNCTION)  {	  if(rightLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
470	[BUG]  [BUGGY]  Node  rhType  =  left.replaceChild(n,  newNode);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rhType  =  left.replaceChild(n,  newNode);  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rhType  =  left.replaceChild(n,  newNode);	  Node    rhType    =    left.getLastChild();    	non-compiled	[CE]  orphaned  case	86	None	replace
471	[BUG]  [BUGGY]  if  (result  ==  null  ||  rightLiteral.equals(left))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  rightLiteral.equals(left))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  rightLiteral.equals(left))  {	  if    (result    ==    null    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
472	[BUG]  [BUGGY]  if  (result  ==  null  ||  rightLiteral!=  null)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  rightLiteral!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  rightLiteral!=  null)  {	  if    (result    ==    null    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
473	[BUG]  [BUGGY]  if(result  ==  Token.EXPR_RESULT)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.EXPR_RESULT)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.EXPR_RESULT)  {	  if(op)    {    	non-compiled	[CE]  orphaned  case	91	None	replace
474	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left.getType()  ==  Token.FUNCTION  ||  undefinedRight)  {	  if    (rightLiteral    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
475	[BUG]  [BUGGY]  if(leftLiteral  ==  Token.FALSE  &&  rightLiteral!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(leftLiteral  ==  Token.FALSE  &&  rightLiteral!=  Token.NULL)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(leftLiteral  ==  Token.FALSE  &&  rightLiteral!=  Token.NULL)  {	  if    (leftLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
476	[BUG]  [BUGGY]  if(leftLiteral  ==  Token.FALSE  &&  rightLiteral!=  Token.NONE)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(leftLiteral  ==  Token.FALSE  &&  rightLiteral!=  Token.NONE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(leftLiteral  ==  Token.FALSE  &&  rightLiteral!=  Token.NONE)  {	  if    (leftLiteral    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
477	[BUG]  [BUGGY]  if(op!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op!=  Token.NULL)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op!=  Token.NULL)  {	  if(result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
478	[BUG]  [BUGGY]  if(result!=  Token.NULL  &&  rhType!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result!=  Token.NULL  &&  rhType!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  Token.NULL  &&  rhType!=  Token.FALSE)  {	  if(result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
479	[BUG]  [BUGGY]  if(result!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  Token.FUNCTION)  {	  if(result!=    Token.NULL)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
480	[BUG]  [BUGGY]  if(op!=  Token.FUNCTION  ||  undefinedRight  ||  left.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op!=  Token.FUNCTION  ||  undefinedRight  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op!=  Token.FUNCTION  ||  undefinedRight  ||  left.getType()  ==  Token.VAR)  {	  if    (op!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
481	[BUG]  [BUGGY]  if(op!=  Token.FUNCTION  ||  undefinedRight  ||  left.equals(left))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op!=  Token.FUNCTION  ||  undefinedRight  ||  left.equals(left))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op!=  Token.FUNCTION  ||  undefinedRight  ||  left.equals(left))  {	  if    (op!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
482	[BUG]  [BUGGY]  if(result!=  Token.EMPTY  &&  op!=  null)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result!=  Token.EMPTY  &&  op!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  Token.EMPTY  &&  op!=  null)  {	  if(result!=    Token.EMPTY)    {    	non-compiled	[CE]  orphaned  case	68	None	replace
483	[BUG]  [BUGGY]  if(result!=  Token.EMPTY  ||  result  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result!=  Token.EMPTY  ||  result  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  Token.EMPTY  ||  result  ==  Token.FALSE)  {	  if(result!=    Token.EMPTY)    {    	non-compiled	[CE]  orphaned  case	68	None	replace
484	[BUG]  [BUGGY]  if(result!=  Token.EMPTY  &&!rightLiteral)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result!=  Token.EMPTY  &&!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  Token.EMPTY  &&!rightLiteral)  {	  if(result!=    Token.EMPTY)    {    	non-compiled	[CE]  orphaned  case	68	None	replace
485	[BUG]  [BUGGY]  lhType!=  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  lhType!=  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	lhType!=  Token.FALSE  &&  rhType!=  Token.FUNCTION;	  rhType!=    Token.FALSE    &&    rhType!=    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	19	None	replace
486	[BUG]  [BUGGY]  Node  left  =  n.removeFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  n.removeFirstChild();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  n.removeFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	55	None	replace
487	[BUG]  [BUGGY]  if(rhType!=  Token.FUNCTION  &&!rightLiteral)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.FUNCTION  &&!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.FUNCTION  &&!rightLiteral)  {	  if(rhType!=    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
488	[BUG]  [BUGGY]  if  (leftLiteral  ==  null  ||  result!=  null)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (leftLiteral  ==  null  ||  result!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (leftLiteral  ==  null  ||  result!=  null)  {	  if    (result    ==    null    ||    leftLiteral!=    null)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
489	[BUG]  [BUGGY]  if(rhType!=  Token.UNKNOWN  &&!rightLiteral)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.UNKNOWN  &&!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.UNKNOWN  &&!rightLiteral)  {	  if(rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
490	[BUG]  [BUGGY]  if(rhType!=  Token.UNKNOWN  &&  op!=  null)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rhType!=  Token.UNKNOWN  &&  op!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rhType!=  Token.UNKNOWN  &&  op!=  null)  {	  if(rhType!=    Token.UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
491	[BUG]  [BUGGY]  if(rightLiteral!=  Token.FALSE  &&  op!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(rightLiteral!=  Token.FALSE  &&  op!=  Token.NULL)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(rightLiteral!=  Token.FALSE  &&  op!=  Token.NULL)  {	  if(rightLiteral!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	39	None	replace
492	[BUG]  [BUGGY]  if  (lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {	  if    (lhType!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	65	None	replace
493	[BUG]  [BUGGY]  if(op!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op!=  null  &&  left.getType()  ==  Token.FUNCTION)  {	  if    (op!=    null)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
494	[BUG]  [BUGGY]  if  (op!=  null  &&  op.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (op!=  null  &&  op.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op!=  null  &&  op.getType()  ==  Token.FUNCTION)  {	  if    (op!=    null)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
495	[BUG]  [BUGGY]  if  (op!=  null  &&  op.hasChildren())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (op!=  null  &&  op.hasChildren())  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op!=  null  &&  op.hasChildren())  {	  if    (op!=    null)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
496	[BUG]  [BUGGY]  if(op!=  null  &&  left.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op!=  null  &&  left.getType()  ==  Token.VAR)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op!=  null  &&  left.getType()  ==  Token.VAR)  {	  if    (op!=    null)    {    	non-compiled	[CE]  orphaned  case	43	None	replace
497	[BUG]  [BUGGY]  if  (op!=  null  ||  undefinedLeft)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (op!=  null  ||  undefinedLeft)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op!=  null  ||  undefinedLeft)  {	  if    (op    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	24	None	replace
498	[BUG]  [BUGGY]  if  (op  ==  null  ||  undefinedLeft  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (op  ==  null  ||  undefinedLeft  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op  ==  null  ||  undefinedLeft  ||  left.getType()!=  Token.FUNCTION)  {	  if    (op    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	24	None	replace
499	[BUG]  [BUGGY]  if  (op  ==  null  ||  undefinedLeft  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (op  ==  null  ||  undefinedLeft  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op  ==  null  ||  undefinedLeft  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (op    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	24	None	replace
500	[BUG]  [BUGGY]  if  (op  ==  null  ||  undefinedLeft  ||  left.equals(rightLiteral))  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (op  ==  null  ||  undefinedLeft  ||  left.equals(rightLiteral))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op  ==  null  ||  undefinedLeft  ||  left.equals(rightLiteral))  {	  if    (op    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	24	None	replace
501	[BUG]  [BUGGY]  if  (op  ==  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (op  ==  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op  ==  null  ||  left.getType()  ==  Token.NAME)  {	  if    (op    ==    null    ||    undefinedLeft)    {    	non-compiled	[CE]  orphaned  case	24	None	replace
502	[BUG]  [BUGGY]  if  (lhType!=  Token.FUNCTION  ||  undefinedRight  ||  left.hasChildren())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.FUNCTION  ||  undefinedRight  ||  left.hasChildren())  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FUNCTION  ||  undefinedRight  ||  left.hasChildren())  {	  if    (lhType!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
503	[BUG]  [BUGGY]  if  (lhType!=  Token.FUNCTION  &&  undefinedRight)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.FUNCTION  &&  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FUNCTION  &&  undefinedRight)  {	  if    (lhType!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
504	[BUG]  [BUGGY]  if  (lhType!=  Token.FUNCTION  ||  undefinedRight  ||  left.equals(right))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (lhType!=  Token.FUNCTION  ||  undefinedRight  ||  left.equals(right))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (lhType!=  Token.FUNCTION  ||  undefinedRight  ||  left.equals(right))  {	  if    (lhType!=    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
505	[BUG]  [BUGGY]  rhType  ==  Token.FALSE  &&  op!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  rhType  ==  Token.FALSE  &&  op!=  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	rhType  ==  Token.FALSE  &&  op!=  Token.FUNCTION;	  rhType    ==    Token.FALSE    &&    rhType!=    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	18	None	replace
506	[BUG]  [BUGGY]  lhType  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  lhType  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	lhType  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION;	  rhType    ==    Token.FALSE    &&    rhType!=    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	18	None	replace
507	[BUG]  [BUGGY]  op  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  op  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	op  ==  Token.FALSE  &&  rhType!=  Token.FUNCTION;	  rhType    ==    Token.FALSE    &&    rhType!=    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	18	None	replace
508	[BUG]  [BUGGY]  Node  rh  =  left.replaceChild(n,  newNode);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  rh  =  left.replaceChild(n,  newNode);  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  rh  =  left.replaceChild(n,  newNode);	  Node    rh    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	84	None	replace
509	[BUG]  [BUGGY]  if(result  ==  null  ||!result)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  null  ||!result)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  null  ||!result)  {	  if(!result)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
510	[BUG]  [BUGGY]  if(!result.booleanValue())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(!result.booleanValue())  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(!result.booleanValue())  {	  if(!result)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
511	[BUG]  [BUGGY]  if(compareResult!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(compareResult!=  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult!=  Token.FALSE)  {	  if(compareResult    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
512	[BUG]  [BUGGY]  if(compareResult  ==  Token.FALSE  &&  op!=  null)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(compareResult  ==  Token.FALSE  &&  op!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult  ==  Token.FALSE  &&  op!=  null)  {	  if(compareResult    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
513	[BUG]  [BUGGY]  if(compareResult  ==  Token.FALSE  &&  left.getFirstChild()!=  rightLiteral)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(compareResult  ==  Token.FALSE  &&  left.getFirstChild()!=  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult  ==  Token.FALSE  &&  left.getFirstChild()!=  rightLiteral)  {	  if(compareResult    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
514	[BUG]  [BUGGY]  if(compareResult  ==  Token.FALSE  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(compareResult  ==  Token.FALSE  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult  ==  Token.FALSE  &&  left.getType()  ==  Token.FUNCTION)  {	  if(compareResult    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
515	[BUG]  [BUGGY]  if(compareResult  ==  Token.FALSE  &&!rightLiteral)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(compareResult  ==  Token.FALSE  &&!rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult  ==  Token.FALSE  &&!rightLiteral)  {	  if(compareResult    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	72	None	replace
516	[BUG]  [BUGGY]  if  (rightLiteral!=  null  ||  left!=  null)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (rightLiteral!=  null  ||  left!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (rightLiteral!=  null  ||  left!=  null)  {	  if    (left!=    null    ||    rightLiteral!=    null)    {    	non-compiled	[CE]  orphaned  case	54	None	replace
517	[BUG]  [BUGGY]  if(op  ==  Token.FALSE  &&  result!=  null)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op  ==  Token.FALSE  &&  result!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op  ==  Token.FALSE  &&  result!=  null)  {	  if(result    ==    Token.FALSE    &&    op!=    null)    {    	non-compiled	[CE]  orphaned  case	70	None	replace
518	[BUG]  [BUGGY]  if(result!=  Token.FALSE  &&  op!=  null)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result!=  Token.FALSE  &&  op!=  null)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  Token.FALSE  &&  op!=  null)  {	  if(result    ==    Token.FALSE    &&    op!=    null)    {    	non-compiled	[CE]  orphaned  case	70	None	replace
519	[BUG]  [BUGGY]  if(result!=  Token.FALSE  &&  op!=  Token.NULL)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result!=  Token.FALSE  &&  op!=  Token.NULL)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  Token.FALSE  &&  op!=  Token.NULL)  {	  if(result!=    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	67	None	replace
520	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  ||  result  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FALSE  ||  result  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FALSE  ||  result  ==  Token.FUNCTION)  {	  if(result    ==    Token.FUNCTION    ||    result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
521	[BUG]  [BUGGY]  if(result  ==  Token.NULL  ||  result  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.NULL  ||  result  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.NULL  ||  result  ==  Token.FALSE)  {	  if(result    ==    Token.FUNCTION    ||    result    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
522	[BUG]  [BUGGY]  if  (op!=  null  ||  undefinedRight)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (op!=  null  ||  undefinedRight)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op!=  null  ||  undefinedRight)  {	  if    (op    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
523	[BUG]  [BUGGY]  if  (op  ==  null  ||  left.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (op  ==  null  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (op  ==  null  ||  left.getType()  ==  Token.VAR)  {	  if    (op    ==    null    ||    undefinedRight)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
524	[BUG]  [BUGGY]  if(op  ==  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op  ==  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op  ==  Token.FALSE  &&  leftLiteral!=  Token.TRUE)  {	  if(result    ==    Token.FALSE    &&    leftLiteral!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
525	[BUG]  [BUGGY]  rhType  ==  Token.FALSE;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  rhType  ==  Token.FALSE;  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	rhType  ==  Token.FALSE;	  rhType!=    Token.FALSE    &&    rhType    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	21	None	replace
526	[BUG]  [BUGGY]  if(result!=  null  &&  rightLiteral)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result!=  null  &&  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  null  &&  rightLiteral)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	89	None	replace
527	[BUG]  [BUGGY]  if(result!=  null  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result!=  null  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  null  ||  rightLiteral)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	89	None	replace
528	[BUG]  [BUGGY]  if(result  >>  null  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  >>  null  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  >>  null  ||  rightLiteral)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	89	None	replace
529	[BUG]  [BUGGY]  if(result  ==  result  ||  rightLiteral)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  result  ||  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  result  ||  rightLiteral)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  orphaned  case	89	None	replace
530	[BUG]  [BUGGY]  if(result!=  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result!=  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result!=  Token.FALSE  &&  rightLiteral!=  Token.TRUE)  {	  if(result    ==    Token.FALSE    &&    rightLiteral!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
531	[BUG]  [BUGGY]  if(result  ==  Token.FALSE  &&  op!=  Token.TRUE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FALSE  &&  op!=  Token.TRUE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FALSE  &&  op!=  Token.TRUE)  {	  if(result    ==    Token.FALSE    &&    rightLiteral!=    Token.TRUE)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
532	[BUG]  [BUGGY]  if(result  ==  Token.FUNCTION  ||  result  ==  left.getFirstChild())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  Token.FUNCTION  ||  result  ==  left.getFirstChild())  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  Token.FUNCTION  ||  result  ==  left.getFirstChild())  {	  if(result    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
533	[BUG]  [BUGGY]  if(compareResult  ||(op!=  null  &&  op.equals(left)))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(compareResult  ||(op!=  null  &&  op.equals(left)))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult  ||(op!=  null  &&  op.equals(left)))  {	  if(compareResult)    {    	non-compiled	[CE]  orphaned  case	90	None	replace
534	[BUG]  [BUGGY]  if(compareResult  ||(op!=  null  &&  op.getType()  ==  Token.FUNCTION))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(compareResult  ||(op!=  null  &&  op.getType()  ==  Token.FUNCTION))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult  ||(op!=  null  &&  op.getType()  ==  Token.FUNCTION))  {	  if(compareResult)    {    	non-compiled	[CE]  orphaned  case	90	None	replace
535	[BUG]  [BUGGY]  if(compareResult  ||(op!=  null  &&  op.hasChildren()))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(compareResult  ||(op!=  null  &&  op.hasChildren()))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult  ||(op!=  null  &&  op.hasChildren()))  {	  if(compareResult)    {    	non-compiled	[CE]  orphaned  case	90	None	replace
536	[BUG]  [BUGGY]  if(compareResult  ||(op!=  null  &&  op.getType()  ==  Token.FALSE))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(compareResult  ||(op!=  null  &&  op.getType()  ==  Token.FALSE))  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(compareResult  ||(op!=  null  &&  op.getType()  ==  Token.FALSE))  {	  if(compareResult)    {    	non-compiled	[CE]  orphaned  case	90	None	replace
537	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedRight);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedRight);  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(left,  op,  undefinedRight);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	15	None	replace
538	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedLeft);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedLeft);  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	result  =  compareToUndefined(left,  op,  undefinedLeft);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	15	None	replace
539	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft  >  MAX_FOLD_NUMBER_ERROR  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (result    ==    null    ||    undefinedLeft    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  orphaned  case	76	None	replace
540	[BUG]  [BUGGY]  if(result  ==  null  ||  left.getType()!=  Token.RETURN)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  null  ||  left.getType()!=  Token.RETURN)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  null  ||  left.getType()!=  Token.RETURN)  {	  if(result    ==    null    ||    left.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  orphaned  case	78	None	replace
541	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft  >  left)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedLeft  >  left)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft  >  left)  {	  if    (result    ==    null    ||    undefinedRight    >    left)    {    	non-compiled	[CE]  orphaned  case	81	None	replace
542	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedRight!=  left)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedRight!=  left)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedRight!=  left)  {	  if    (result    ==    null    ||    undefinedRight    >    left)    {    	non-compiled	[CE]  orphaned  case	81	None	replace
543	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedRight  <  left)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedRight  <  left)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedRight  <  left)  {	  if    (result    ==    null    ||    undefinedRight    >    left)    {    	non-compiled	[CE]  orphaned  case	81	None	replace
544	[BUG]  [BUGGY]  Node  left  =  left.removeFirst();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  Node  left  =  left.removeFirst();  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	Node  left  =  left.removeFirst();	  Node    left    =    left.getNext();    	non-compiled	[CE]  orphaned  case	56	None	replace
545	[BUG]  [BUGGY]  if(left  ==  null  ||  undefinedRight  >  result.length)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(left  ==  null  ||  undefinedRight  >  result.length)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(left  ==  null  ||  undefinedRight  >  result.length)  {	  if    (result    ==    null    ||    undefinedRight    >    left.length)    {    	non-compiled	[CE]  orphaned  case	80	None	replace
546	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedRight  <  left.length)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedRight  <  left.length)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedRight  <  left.length)  {	  if    (result    ==    null    ||    undefinedRight    >    left.length)    {    	non-compiled	[CE]  orphaned  case	80	None	replace
547	[BUG]  [BUGGY]  if  (result  ==  null  ||  undefinedLeft  >  left.length)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if  (result  ==  null  ||  undefinedLeft  >  left.length)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if  (result  ==  null  ||  undefinedLeft  >  left.length)  {	  if    (result    ==    null    ||    undefinedRight    >    left.length)    {    	non-compiled	[CE]  orphaned  case	80	None	replace
548	[BUG]  [BUGGY]  if(result  ==  null  ||  left.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(result  ==  null  ||  left.getType()!=  Token.NAME)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(result  ==  null  ||  left.getType()!=  Token.NAME)  {	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	77	None	replace
549	[BUG]  [BUGGY]  if(op  ==  Token.CATCH  ||  op  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op  ==  Token.CATCH  ||  op  ==  Token.FALSE)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op  ==  Token.CATCH  ||  op  ==  Token.FALSE)  {	  if(op    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
550	[BUG]  [BUGGY]  if(op  ==  Token.FALSE  &&  left.getFirstChild()!=  rightLiteral)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op  ==  Token.FALSE  &&  left.getFirstChild()!=  rightLiteral)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op  ==  Token.FALSE  &&  left.getFirstChild()!=  rightLiteral)  {	  if(op    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
551	[BUG]  [BUGGY]  if(op  ==  Token.FALSE  ||  op  ==  left.getFirstChild())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op  ==  Token.FALSE  ||  op  ==  left.getFirstChild())  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op  ==  Token.FALSE  ||  op  ==  left.getFirstChild())  {	  if(op    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
552	[BUG]  [BUGGY]  if(op  ==  Token.FALSE  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:      [BUGGY]  if(op  ==  Token.FALSE  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      result  =  compareToUndefined(left,  op);  break;  }  if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {  return  n;  }  switch  (op)  {  case  Token.SHEQ:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4364357804719848	923	923	3	replace	if(op  ==  Token.FALSE  &&  left.getType()  ==  Token.FUNCTION)  {	  if(op    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
