bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	1	None	replace
2	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	1	None	replace
3	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	1	None	replace
4	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	1	None	replace
5	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	1	None	replace
6	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	1	None	replace
7	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  BITWISE_OPERAND);	  tryReduceBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	4	None	replace
8	[BUG]  [BUGGY]  tryReduceBitNoT(subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBitNoT(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNoT(subtree);	  tryReduceBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	4	None	replace
9	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBitNOT(subtree,  false);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  false);	  tryReduceBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	4	None	replace
10	[BUG]  [BUGGY]  tryReduceBitNot(subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBitNot(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNot(subtree);	  tryReduceBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	4	None	replace
11	[BUG]  [BUGGY]  return  tryReduceBitNOT(subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceBitNOT(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitNOT(subtree);	  tryReduceBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	4	None	replace
12	[BUG]  [BUGGY]  return  tryFoldBitNOT(subtree);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBitNOT(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNOT(subtree);	  return    tryFoldBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
13	[BUG]  [BUGGY]  return  tryFoldBITNoT(subtree);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBITNoT(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNoT(subtree);	  return    tryFoldBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
14	[BUG]  [BUGGY]  return  tryFoldBITOperator(subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBITOperator(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITOperator(subtree);	  return    tryFoldBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
15	[BUG]  [BUGGY]  return  tryFoldBitNoT(subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBitNoT(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNoT(subtree);	  return    tryFoldBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
16	[BUG]  [BUGGY]  return  tryFoldBitOperator(subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBitOperator(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitOperator(subtree);	  return    tryFoldBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
17	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBITNOT(subtree,  false);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  false);	  return    tryFoldBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
18	[BUG]  [BUGGY]  return  tryFoldBidirectionalOperator(subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBidirectionalOperator(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBidirectionalOperator(subtree);	      	non-compiled	[CE]  orphaned  case	7	None	replace
19	[BUG]  [BUGGY]  return  tryFoldNotOp(subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldNotOp(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldNotOp(subtree);	      	non-compiled	[CE]  orphaned  case	7	None	replace
20	[BUG]  [BUGGY]  return  tryFoldBitNoTree(subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBitNoTree(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNoTree(subtree);	      	non-compiled	[CE]  orphaned  case	7	None	replace
21	[BUG]  [BUGGY]  return  tryFoldBitNode(subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBitNode(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNode(subtree);	      	non-compiled	[CE]  orphaned  case	7	None	replace
22	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  BITWISE_OPERAND);	  tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	10	None	replace
23	[BUG]  [BUGGY]  tryReduceBITNoT(subtree);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBITNoT(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNoT(subtree);	  tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	10	None	replace
24	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  false);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBITNOT(subtree,  false);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  false);	  tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	10	None	replace
25	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  null);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBITNOT(subtree,  null);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  null);	  tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	10	None	replace
26	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  true);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBITNOT(subtree,  true);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  true);	  tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	10	None	replace
27	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	6	None	replace
28	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND);	  tryReduceBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	6	None	replace
29	[BUG]  [BUGGY]  return  tryReduceBitOperandsForOp(subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceBitOperandsForOp(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitOperandsForOp(subtree);	  tryReduceBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	6	None	replace
30	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBitOperandsForOp(subtree,  true);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  true);	  tryReduceBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	6	None	replace
31	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBitOperandsForOp(subtree,  false);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  false);	  tryReduceBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	6	None	replace
32	[BUG]  [BUGGY]  return  tryFoldBitOperandsForOp(subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBitOperandsForOp(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitOperandsForOp(subtree);	  tryReduceBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	6	None	replace
33	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBinaryOperator(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBinaryOperator(subtree);	  return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	9	None	replace
34	[BUG]  [BUGGY]  return  tryFoldOperandsForOp(subtree);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldOperandsForOp(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldOperandsForOp(subtree);	  return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	9	None	replace
35	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND);	  return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	9	None	replace
36	[BUG]  [BUGGY]  return  tryFoldBITNOTOp(subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBITNOTOp(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOp(subtree);	  return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	9	None	replace
37	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsToOp(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
38	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITWISE_OPERAND);	  tryReduceOperandsToOp(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
39	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsToOp(subtree,  false);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  false);	  tryReduceOperandsToOp(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
40	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsToOp(subtree,  true);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  true);	  tryReduceOperandsToOp(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
41	[BUG]  [BUGGY]  tryReduceBitOperandsToOp(subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBitOperandsToOp(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsToOp(subtree);	  tryReduceOperandsToOp(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
42	[BUG]  [BUGGY]  return  tryReduceOperandsToOp(subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceOperandsToOp(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsToOp(subtree);	  tryReduceOperandsToOp(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
43	[BUG]  [BUGGY]  return  tryReduceBITOperator(subtree);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceBITOperator(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITOperator(subtree);	  return    tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	11	None	replace
44	[BUG]  [BUGGY]  return  tryReduceBITNoT(subtree);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceBITNoT(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNoT(subtree);	  return    tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	11	None	replace
45	[BUG]  [BUGGY]  return  tryReduceBIT(subtree);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceBIT(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBIT(subtree);	  return    tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	11	None	replace
46	[BUG]  [BUGGY]  return  tryReduceBITOp(subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceBITOp(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITOp(subtree);	  return    tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	11	None	replace
47	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	2	None	replace
48	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	2	None	replace
49	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	2	None	replace
50	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	2	None	replace
51	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  false);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  false);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	2	None	replace
52	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	2	None	replace
53	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	8	None	replace
54	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITWISE_OPERANDsForOp(subtree);	  tryReduceBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	8	None	replace
55	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  false);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  false);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  false);	  tryReduceBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	8	None	replace
56	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  true);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  true);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  true);	  tryReduceBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	8	None	replace
57	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND);	  tryReduceBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	8	None	replace
58	[BUG]  [BUGGY]  return  tryFoldBITWISE_OPERANDsForOp(subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBITWISE_OPERANDsForOp(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITWISE_OPERANDsForOp(subtree);	  tryReduceBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	8	None	replace
59	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	1	None	replace
60	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	1	None	replace
61	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	1	None	replace
62	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	2	None	replace
63	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	2	None	replace
64	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  INDEX_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	2	None	replace
65	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  BITWISE_OPERAND);	  return    tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	11	None	replace
66	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	11	None	replace
67	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND);	  return    tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	11	None	replace
68	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceBITNOT(subtree,  false);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  false);	  return    tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	11	None	replace
69	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceBITNOT(subtree,  true);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  true);	  return    tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	11	None	replace
70	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	10	None	replace
71	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	10	None	replace
72	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	9	None	replace
73	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  false);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceOperandsForOp(subtree,  false);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  false);	  return    tryReduceOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	9	None	replace
74	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	8	None	replace
75	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	4	None	replace
76	[BUG]  [BUGGY]  tryReduceBitOperand(subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBitOperand(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperand(subtree);	  tryReduceBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	4	None	replace
77	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsToOp(subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBITWISE_OPERANDsToOp(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsToOp(subtree);	  tryReduceOperandsToOp(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
78	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
79	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  BITWISE_OPERAND);	  return    tryFoldBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
80	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  null);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBITNOT(subtree,  null);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  null);	  return    tryFoldBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
81	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBITNOT(subtree,  true);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  true);	  return    tryFoldBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
82	[BUG]  [BUGGY]  return  tryFoldBITNOT(parent);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBITNOT(parent);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(parent);	  return    tryFoldBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
83	[BUG]  [BUGGY]  return  tryFoldBITNOTOperator(subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBITNOTOperator(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOperator(subtree);	      	non-compiled	[CE]  orphaned  case	7	None	replace
84	[BUG]  [BUGGY]  return  tryFoldBitOperand(subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBitOperand(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitOperand(subtree);	      	non-compiled	[CE]  orphaned  case	7	None	replace
85	[BUG]  [BUGGY]  return  tryFoldBITNOTOperand(subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBITNOTOperand(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOperand(subtree);	      	non-compiled	[CE]  orphaned  case	7	None	replace
86	[BUG]  [BUGGY]  tryReduceBITOperandsForOp(subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBITOperandsForOp(subtree);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITOperandsForOp(subtree);	  tryReduceBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	6	None	replace
87	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  null);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceBITNOT(subtree,  null);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  null);	  return    tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	11	None	replace
88	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree.getLastChild());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryReduceBITNOT(subtree.getLastChild());  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree.getLastChild());	  return    tryReduceBITNOT(subtree);    	non-compiled	[CE]  orphaned  case	11	None	replace
89	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree.getLastChild());  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBITNOT(subtree.getLastChild());  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree.getLastChild());	      	non-compiled	[CE]  orphaned  case	7	None	replace
90	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
91	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
92	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree.getNext());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  return  tryFoldBITNOT(subtree.getNext());  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree.getNext());	  return    tryFoldBITNOT(subtree);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
93	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
94	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
95	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  ROOT_LOCALE);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  ROOT_LOCALE);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  ROOT_LOCALE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
96	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  1);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  1);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
97	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBitNOT(subtree,  null);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  null);	  tryReduceBitNOT(subtree);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
98	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:    [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT);  [BUGGY]    return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  case  Token.BITNOT);	  tryReduceBitNOT(subtree);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
