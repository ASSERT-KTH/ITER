bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryReduceBitNoT(subtree);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBitNoT(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitNoT(subtree);	  return    tryReduceBITNoT(subtree);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
2	[BUG]  [BUGGY]  return  tryReduceBITNode(subtree);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNode(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNode(subtree);	  return    tryReduceBITNoT(subtree);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
3	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
4	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
5	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
6	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
7	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITS_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITS_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  BITS_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
8	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
9	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  STRING_BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  STRING_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  STRING_BITWISE_OPERAND);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
11	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  DEFAULT_BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  DEFAULT_BITWISE_OPERAND);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
12	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  BITS_BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  BITS_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  BITS_BITWISE_OPERAND);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
13	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  FACTIONAL_BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  FACTIONAL_BITWISE_OPERAND);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
14	[BUG]  [BUGGY]  return  tryFoldBitNOT(subtree,  true);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNOT(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNOT(subtree,  true);	  return    tryFoldBITNOT(subtree,    false);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
15	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  false,  true);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  false,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  false,  true);	  return    tryFoldBITNOT(subtree,    false);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
16	[BUG]  [BUGGY]  return  tryFoldBITNoT(subtree,  true);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNoT(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNoT(subtree,  true);	  return    tryFoldBITNOT(subtree,    false);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
17	[BUG]  [BUGGY]  return  tryFoldBitNOT(subtree,  false);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNOT(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNOT(subtree,  false);	  return    tryFoldBITNOT(subtree,    false);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
18	[BUG]  [BUGGY]  tryReduceBITOperator(subtree);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITOperator(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITOperator(subtree);	  tryReduceBITNoT(subtree);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
19	[BUG]  [BUGGY]  tryReduceBITNoT(subtree,  BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNoT(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNoT(subtree,  BITWISE_OPERAND);	  tryReduceBITNoT(subtree);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
20	[BUG]  [BUGGY]  tryReduceBIT(subtree);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBIT(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBIT(subtree);	  tryReduceBITNoT(subtree);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
21	[BUG]  [BUGGY]  tryReduceBITNoT(subtree,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNoT(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNoT(subtree,  false);	  tryReduceBITNoT(subtree);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
22	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT,  FRACTIONAL_BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    BITNOT);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
23	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FIELD_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FIELD_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    BITNOT);    	non-compiled	[CE]  orphaned  case	93	None	replace
24	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FIREAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FIREAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FIREAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    BITNOT);    	non-compiled	[CE]  orphaned  case	93	None	replace
25	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  DEFAULT_BITNOT);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  DEFAULT_BITNOT);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  DEFAULT_BITNOT);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    BITNOT);    	non-compiled	[CE]  orphaned  case	93	None	replace
26	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  BITNOT);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  BITNOT);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  BITNOT);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    BITNOT);    	non-compiled	[CE]  orphaned  case	93	None	replace
27	[BUG]  [BUGGY]  return  tryFoldBITOperandsForOp(subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITOperandsForOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITOperandsForOp(subtree);	  tryReduceBITOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	86	None	replace
28	[BUG]  [BUGGY]  return  tryReduceBITOperandsForOp(subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITOperandsForOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITOperandsForOp(subtree);	  tryReduceBITOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	86	None	replace
29	[BUG]  [BUGGY]  tryReduceBITOperandsForOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITOperandsForOp(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITOperandsForOp(subtree,  BITWISE_OPERAND);	  tryReduceBITOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	86	None	replace
30	[BUG]  [BUGGY]  tryReduceBITOperands(subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITOperands(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITOperands(subtree);	  tryReduceBITOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	86	None	replace
31	[BUG]  [BUGGY]  tryReduceBITOperandsForOp(subtree,  true);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITOperandsForOp(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITOperandsForOp(subtree,  true);	  tryReduceBITOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	86	None	replace
32	[BUG]  [BUGGY]  tryReduceBITOperandsForOp(subtree,  false);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITOperandsForOp(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITOperandsForOp(subtree,  false);	  tryReduceBITOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	86	None	replace
33	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  this);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  this);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  this);	  tryReduceBitNOT(subtree,    null);    	non-compiled	[CE]  orphaned  case	97	None	replace
34	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  null,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  null,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  null,  BITWISE_OPERAND);	  tryReduceBitNOT(subtree,    null);    	non-compiled	[CE]  orphaned  case	97	None	replace
35	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  null,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  null,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  null,  false);	  tryReduceBitNOT(subtree,    null);    	non-compiled	[CE]  orphaned  case	97	None	replace
36	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	28	None	replace
37	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	28	None	replace
38	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITS_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITS_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  BITS_BITWISE_OPERAND);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	28	None	replace
39	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  STRING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  STRING_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  STRING_BITWISE_OPERAND);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	28	None	replace
40	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  Boolean.TRUE);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  Boolean.TRUE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  Boolean.TRUE);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	28	None	replace
41	[BUG]  [BUGGY]  return  tryFoldBITNoT(subtree,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNoT(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNoT(subtree,  false);	  return    tryFoldBITNoT(subtree);    	non-compiled	[CE]  orphaned  case	13	None	replace
42	[BUG]  [BUGGY]  return  tryFoldNotNoT(subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldNotNoT(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldNotNoT(subtree);	  return    tryFoldBITNoT(subtree);    	non-compiled	[CE]  orphaned  case	13	None	replace
43	[BUG]  [BUGGY]  return  tryFoldBITNotNoT(subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNotNoT(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNotNoT(subtree);	  return    tryFoldBITNoT(subtree);    	non-compiled	[CE]  orphaned  case	13	None	replace
44	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree.getFirstChild());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree.getFirstChild());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree.getFirstChild());	  return    tryFoldBITNOT(subtree.getNext());    	non-compiled	[CE]  orphaned  case	92	None	replace
45	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree.getNext(),  subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree.getNext(),  subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree.getNext(),  subtree);	  return    tryFoldBITNOT(subtree.getNext());    	non-compiled	[CE]  orphaned  case	92	None	replace
46	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree.getNext(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree.getNext(),  MAX_FOLD_NUMBER);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree.getNext(),  MAX_FOLD_NUMBER);	  return    tryFoldBITNOT(subtree.getNext());    	non-compiled	[CE]  orphaned  case	92	None	replace
47	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree.getParent());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree.getParent());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree.getParent());	  return    tryFoldBITNOT(subtree.getNext());    	non-compiled	[CE]  orphaned  case	92	None	replace
48	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree.getNext(),  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree.getNext(),  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree.getNext(),  1);	  return    tryFoldBITNOT(subtree.getNext());    	non-compiled	[CE]  orphaned  case	92	None	replace
49	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  tryReduceOperandsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	2	None	replace
50	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  INDEX_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	2	None	replace
51	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  INDEX_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	2	None	replace
52	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  this);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  this);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  this);	  return    tryFoldBITNOT(subtree,    null);    	non-compiled	[CE]  orphaned  case	80	None	replace
53	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  default);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  default);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  default);	  return    tryFoldBITNOT(subtree,    null);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
54	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    FIELD_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	5	None	replace
55	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE,  MISSING_A_NON_NUMBER_ERROR);	  tryReduceOperandsForOp(subtree,    FIELD_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	5	None	replace
56	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BIELD_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    FIELD_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	5	None	replace
57	[BUG]  [BUGGY]  return  tryFoldBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	32	None	replace
58	[BUG]  [BUGGY]  return  tryBitOperandsForOp(subtree);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryBitOperandsForOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryBitOperandsForOp(subtree);	  return    tryFoldBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	32	None	replace
59	[BUG]  [BUGGY]  return  tryFoldBitOperandsForOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitOperandsForOp(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitOperandsForOp(subtree,  BITWISE_OPERAND);	  return    tryFoldBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	32	None	replace
60	[BUG]  [BUGGY]  return  tryFoldBitOperandsToOp(subtree);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitOperandsToOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitOperandsToOp(subtree);	  return    tryFoldBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	32	None	replace
61	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	22	None	replace
62	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  DEFAULT_BITWISE_OPERAND);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	22	None	replace
63	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  STRING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  STRING_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  STRING_BITWISE_OPERAND);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	22	None	replace
64	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  BITWISE_OPERAND,  DEFAULT_BITWISE_OPERAND);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	22	None	replace
65	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  BITS_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  BITS_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  BITS_BITWISE_OPERAND);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	22	None	replace
66	[BUG]  [BUGGY]  return  tryReduceBITOperator(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITOperator(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITOperator(subtree,  BITWISE_OPERAND);	  return    tryReduceBITOperator(subtree);    	non-compiled	[CE]  orphaned  case	43	None	replace
67	[BUG]  [BUGGY]  return  tryReduceBitOperator(subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBitOperator(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitOperator(subtree);	  return    tryReduceBITOperator(subtree);    	non-compiled	[CE]  orphaned  case	43	None	replace
68	[BUG]  [BUGGY]  return  tryFoldOperator(subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldOperator(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldOperator(subtree);	  return    tryReduceBITOperator(subtree);    	non-compiled	[CE]  orphaned  case	43	None	replace
69	[BUG]  [BUGGY]  return  tryFoldBITNOTOperandsForOp(subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOperandsForOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOperandsForOp(subtree);	  return    tryFoldBITNOTOperand(subtree);    	non-compiled	[CE]  orphaned  case	85	None	replace
70	[BUG]  [BUGGY]  return  tryFoldBITOperand(subtree);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITOperand(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITOperand(subtree);	  return    tryFoldBITNOTOperand(subtree);    	non-compiled	[CE]  orphaned  case	85	None	replace
71	[BUG]  [BUGGY]  return  tryFoldBITWISE_OPERandsForOp(subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITWISE_OPERandsForOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITWISE_OPERandsForOp(subtree);	  return    tryFoldBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	58	None	replace
72	[BUG]  [BUGGY]  return  tryFoldBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	58	None	replace
73	[BUG]  [BUGGY]  return  tryFoldBITWISE_OPERANDsForOp(subtree,  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITWISE_OPERANDsForOp(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITWISE_OPERANDsForOp(subtree,  false);	  return    tryFoldBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	58	None	replace
74	[BUG]  [BUGGY]  return  tryFoldBITWISE_OPERANDs(subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITWISE_OPERANDs(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITWISE_OPERANDs(subtree);	  return    tryFoldBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	58	None	replace
75	[BUG]  [BUGGY]  return  tryFoldBITWISE_OPERANDsForOp(subtree,  true);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITWISE_OPERANDsForOp(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITWISE_OPERANDsForOp(subtree,  true);	  return    tryFoldBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	58	None	replace
76	[BUG]  [BUGGY]  return  tryFoldBITWISE_OPERANDsForOp(subtree,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITWISE_OPERANDsForOp(subtree,  FIELD_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITWISE_OPERANDsForOp(subtree,  FIELD_BITWISE_OPERAND);	  return    tryFoldBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	58	None	replace
77	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	57	None	replace
78	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  DEFAULT_BITWISE_OPERAND);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	57	None	replace
79	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  FACTIONAL_BITWISE_OPERAND);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	57	None	replace
80	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  STRING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  STRING_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  STRING_BITWISE_OPERAND);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	57	None	replace
81	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND,  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND,  false);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	57	None	replace
82	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	65	None	replace
83	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  DEFAULT_BITWISE_OPERAND);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	65	None	replace
84	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  STRING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  STRING_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  STRING_BITWISE_OPERAND);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	65	None	replace
85	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  Boolean.TRUE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  Boolean.TRUE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  Boolean.TRUE);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	65	None	replace
86	[BUG]  [BUGGY]  return  tryFoldBITNOTree(subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTree(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTree(subtree);	  return    tryFoldBitNoTree(subtree);    	non-compiled	[CE]  orphaned  case	20	None	replace
87	[BUG]  [BUGGY]  return  tryFoldBITNoTree(subtree);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNoTree(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNoTree(subtree);	  return    tryFoldBitNoTree(subtree);    	non-compiled	[CE]  orphaned  case	20	None	replace
88	[BUG]  [BUGGY]  return  tryFoldNotNoTree(subtree);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldNotNoTree(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldNotNoTree(subtree);	  return    tryFoldBitNoTree(subtree);    	non-compiled	[CE]  orphaned  case	20	None	replace
89	[BUG]  [BUGGY]  return  tryFoldBitOp(subtree);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitOp(subtree);	  return    tryFoldBitNoTree(subtree);    	non-compiled	[CE]  orphaned  case	20	None	replace
90	[BUG]  [BUGGY]  return  tryBitNoTree(subtree);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryBitNoTree(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryBitNoTree(subtree);	  return    tryFoldBitNoTree(subtree);    	non-compiled	[CE]  orphaned  case	20	None	replace
91	[BUG]  [BUGGY]  return  tryReduceBitOperands(subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBitOperands(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitOperands(subtree);	  return    tryReduceBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	29	None	replace
92	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND,  BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	4	None	replace
93	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	4	None	replace
94	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND,  MISSING_A_NON_NUMBER_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	4	None	replace
95	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND,  BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	4	None	replace
96	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  true);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    false);    	non-compiled	[CE]  orphaned  case	51	None	replace
97	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  false);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    false);    	non-compiled	[CE]  orphaned  case	51	None	replace
98	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND,  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND,  false);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    false);    	non-compiled	[CE]  orphaned  case	51	None	replace
99	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND,  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND,  false);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    false);    	non-compiled	[CE]  orphaned  case	51	None	replace
100	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  false);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  false);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    false);    	non-compiled	[CE]  orphaned  case	51	None	replace
101	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  false,  true);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  false,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  false,  true);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    false);    	non-compiled	[CE]  orphaned  case	51	None	replace
102	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  MISSING_BITWISE_OPERAND,  false);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  MISSING_BITWISE_OPERAND,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  MISSING_BITWISE_OPERAND,  false);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    false);    	non-compiled	[CE]  orphaned  case	51	None	replace
103	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	54	None	replace
104	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERandsForOp(subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITWISE_OPERandsForOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITWISE_OPERandsForOp(subtree);	  return    tryReduceBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	54	None	replace
105	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND);	  return    tryReduceBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	54	None	replace
106	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITWISE_OPERANDsForOp(subtree,  true);	  return    tryReduceBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	54	None	replace
107	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITWISE_OPERANDsForOp(subtree,  false);	  return    tryReduceBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	54	None	replace
108	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  INVALID_GETELEM_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  INVALID_GETELEM_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  INVALID_GETELEM_BITWISE_OPERAND);	  return    tryReduceBITNOT(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	67	None	replace
109	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  INDEX_OUT_OF_RANGE);	  return    tryReduceBITNOT(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	67	None	replace
110	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  true);	  tryReduceBITNOT(subtree,    true);    	non-compiled	[CE]  orphaned  case	26	None	replace
111	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    FACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	48	None	replace
112	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND,  FIELD_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND,  FIELD_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    FACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	48	None	replace
113	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    FACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	48	None	replace
114	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  false,  true);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  false,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  false,  true);	  tryReduceBITNOT(subtree,    false);    	non-compiled	[CE]  orphaned  case	24	None	replace
115	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  false,  null);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  false,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  false,  null);	  tryReduceBITNOT(subtree,    false);    	non-compiled	[CE]  orphaned  case	24	None	replace
116	[BUG]  [BUGGY]  tryReduceBITNoT(subtree,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNoT(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNoT(subtree,  true);	  tryReduceBITNOT(subtree,    false);    	non-compiled	[CE]  orphaned  case	24	None	replace
117	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  true);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  true);	  return    tryReduceOperandsForOp(subtree,    false);    	non-compiled	[CE]  orphaned  case	73	None	replace
118	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  false,  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  false,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  false,  true);	  return    tryReduceOperandsForOp(subtree,    false);    	non-compiled	[CE]  orphaned  case	73	None	replace
119	[BUG]  [BUGGY]  Return  tryReduceOperandsForOp(subtree,  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  Return  tryReduceOperandsForOp(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	Return  tryReduceOperandsForOp(subtree,  true);	  return    tryReduceOperandsForOp(subtree,    false);    	non-compiled	[CE]  	73	None	replace
120	[BUG]  [BUGGY]  return  tryFoldBITNode(subtree);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNode(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNode(subtree);	  return    tryFoldBitNode(subtree);    	non-compiled	[CE]  orphaned  case	21	None	replace
121	[BUG]  [BUGGY]  return  tryFoldNotNode(subtree);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldNotNode(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldNotNode(subtree);	  return    tryFoldBitNode(subtree);    	non-compiled	[CE]  orphaned  case	21	None	replace
122	[BUG]  [BUGGY]  return  tryBitNode(subtree);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryBitNode(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryBitNode(subtree);	  return    tryFoldBitNode(subtree);    	non-compiled	[CE]  orphaned  case	21	None	replace
123	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BBITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	52	None	replace
124	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  FIELD_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  FIELD_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BBITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	52	None	replace
125	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  DEFAULT_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BBITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	52	None	replace
126	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree.getLastChild(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree.getLastChild(),  MAX_FOLD_NUMBER);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree.getLastChild(),  MAX_FOLD_NUMBER);	  return    tryFoldBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	89	None	replace
127	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree.getLastChild(),  1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree.getLastChild(),  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree.getLastChild(),  1);	  return    tryFoldBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	89	None	replace
128	[BUG]  [BUGGY]  return  tryFoldBITNoT(subtree.getFirstChild());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNoT(subtree.getFirstChild());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNoT(subtree.getFirstChild());	  return    tryFoldBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	89	None	replace
129	[BUG]  [BUGGY]  return  tryFoldBitNOT(subtree.getFirstChild());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNOT(subtree.getFirstChild());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNOT(subtree.getFirstChild());	  return    tryFoldBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	89	None	replace
130	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree.getLastChild(),  subtree);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree.getLastChild(),  subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree.getLastChild(),  subtree);	  return    tryFoldBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	89	None	replace
131	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	47	None	replace
132	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	47	None	replace
133	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_GETELEM_INDEX_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_GETELEM_INDEX_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	47	None	replace
134	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  MISSING_A_NON_NUMBER_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	47	None	replace
135	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NON_NUMBER_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NON_NUMBER_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	47	None	replace
136	[BUG]  [BUGGY]  return  tryFoldBITNot(subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNot(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNot(subtree);	  return    tryFoldBITNOTOperator(subtree);    	non-compiled	[CE]  orphaned  case	83	None	replace
137	[BUG]  [BUGGY]  return  tryFoldBITNOTOperator(subtree,  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOperator(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOperator(subtree,  false);	  return    tryFoldBITNOTOperator(subtree);    	non-compiled	[CE]  orphaned  case	83	None	replace
138	[BUG]  [BUGGY]  return  tryFoldBITNOTOperator(subtree,  true);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOperator(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOperator(subtree,  true);	  return    tryFoldBITNOTOperator(subtree);    	non-compiled	[CE]  orphaned  case	83	None	replace
139	[BUG]  [BUGGY]  return  tryReduceBitOp(subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBitOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitOp(subtree);	  return    tryReduceBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	11	None	replace
140	[BUG]  [BUGGY]  return  tryReduceBitNot(subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBitNot(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitNot(subtree);	  return    tryReduceBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	11	None	replace
141	[BUG]  [BUGGY]  return  tryReduceBit(subtree);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBit(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBit(subtree);	  return    tryReduceBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	11	None	replace
142	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	35	None	replace
143	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	35	None	replace
144	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	35	None	replace
145	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	35	None	replace
146	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	35	None	replace
147	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  Boolean.TRUE);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  Boolean.TRUE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  Boolean.TRUE);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	35	None	replace
148	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBITWISE_OPERANDsToOp(subtree);    	non-compiled	[CE]  orphaned  case	77	None	replace
149	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsToOp(subtree,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsToOp(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsToOp(subtree,  false);	  tryReduceBITWISE_OPERANDsToOp(subtree);    	non-compiled	[CE]  orphaned  case	77	None	replace
150	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsToOp(subtree,  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsToOp(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsToOp(subtree,  true);	  tryReduceBITWISE_OPERANDsToOp(subtree);    	non-compiled	[CE]  orphaned  case	77	None	replace
151	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsToOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsToOp(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsToOp(subtree,  BITWISE_OPERAND);	  tryReduceBITWISE_OPERANDsToOp(subtree);    	non-compiled	[CE]  orphaned  case	77	None	replace
152	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERANDsToOp(subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITWISE_OPERANDsToOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITWISE_OPERANDsToOp(subtree);	  tryReduceBITWISE_OPERANDsToOp(subtree);    	non-compiled	[CE]  orphaned  case	77	None	replace
153	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsToOp(subtree,  1);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsToOp(subtree,  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsToOp(subtree,  1);	  tryReduceBITWISE_OPERANDsToOp(subtree);    	non-compiled	[CE]  orphaned  case	77	None	replace
154	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  case  Token.BITNOT,  false);	  tryReduceBitNOT(subtree,    case    Token.BITNOT);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
155	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT,  true);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  case  Token.BITNOT,  true);	  tryReduceBitNOT(subtree,    case    Token.BITNOT);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
156	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT,  0);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT,  0);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  case  Token.BITNOT,  0);	  tryReduceBitNOT(subtree,    case    Token.BITNOT);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
157	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT,  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  case  Token.BITNOT,  null);	  tryReduceBitNOT(subtree,    case    Token.BITNOT);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
158	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT,  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT,  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  case  Token.BITNOT,  1);	  tryReduceBitNOT(subtree,    case    Token.BITNOT);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
159	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT,  type);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT,  type);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  case  Token.BITNOT,  type);	  tryReduceBitNOT(subtree,    case    Token.BITNOT);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
160	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  INVALID_GETELEM_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  INVALID_GETELEM_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  INVALID_GETELEM_BITWISE_OPERAND);	  tryReduceBITNOT(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	71	None	replace
161	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  INDEX_OUT_OF_RANGE);	  tryReduceBITNOT(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	71	None	replace
162	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  INDEX_GETELEM_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  INDEX_GETELEM_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  INDEX_GETELEM_BITWISE_OPERAND);	  tryReduceBITNOT(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	71	None	replace
163	[BUG]  [BUGGY]  tryReduceBitOperator(subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperator(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperator(subtree);	  tryReduceBitOperand(subtree);    	non-compiled	[CE]  orphaned  case	76	None	replace
164	[BUG]  [BUGGY]  tryReduceBITNOTOperand(subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOTOperand(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOTOperand(subtree);	  tryReduceBitOperand(subtree);    	non-compiled	[CE]  orphaned  case	76	None	replace
165	[BUG]  [BUGGY]  tryReduceBitOperand(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperand(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperand(subtree,  BITWISE_OPERAND);	  tryReduceBitOperand(subtree);    	non-compiled	[CE]  orphaned  case	76	None	replace
166	[BUG]  [BUGGY]  return  tryReduceBitOperand(subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBitOperand(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitOperand(subtree);	  tryReduceBitOperand(subtree);    	non-compiled	[CE]  orphaned  case	76	None	replace
167	[BUG]  [BUGGY]  tryReduceBITOperand(subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITOperand(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITOperand(subtree);	  tryReduceBitOperand(subtree);    	non-compiled	[CE]  orphaned  case	76	None	replace
168	[BUG]  [BUGGY]  return  tryFoldBITOp(subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITOp(subtree);	  return    tryReduceBITOp(subtree);    	non-compiled	[CE]  orphaned  case	46	None	replace
169	[BUG]  [BUGGY]  return  tryReduceBITOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITOp(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITOp(subtree,  BITWISE_OPERAND);	  return    tryReduceBITOp(subtree);    	non-compiled	[CE]  orphaned  case	46	None	replace
170	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  this);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  this);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  this);	  return    tryReduceBITNOT(subtree,    null);    	non-compiled	[CE]  orphaned  case	87	None	replace
171	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  default);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  default);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  default);	  return    tryReduceBITNOT(subtree,    null);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
172	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  MISSING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  MISSING_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  MISSING_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    STRING_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	49	None	replace
173	[BUG]  [BUGGY]  return  tryFoldBooleanOperator(subtree);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBooleanOperator(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBooleanOperator(subtree);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	33	None	replace
174	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldLocalOperator(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldLocalOperator(subtree);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	33	None	replace
175	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	72	None	replace
176	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	72	None	replace
177	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	72	None	replace
178	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	72	None	replace
179	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	72	None	replace
180	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	72	None	replace
181	[BUG]  [BUGGY]  tryReduceBitNoT(subtree,  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNoT(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNoT(subtree,  true);	  tryReduceBitNOT(subtree,    false);    	non-compiled	[CE]  orphaned  case	9	None	replace
182	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  false,  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  false,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  false,  true);	  tryReduceBitNOT(subtree,    false);    	non-compiled	[CE]  orphaned  case	9	None	replace
183	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  false,  null);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  false,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  false,  null);	  tryReduceBitNOT(subtree,    false);    	non-compiled	[CE]  orphaned  case	9	None	replace
184	[BUG]  [BUGGY]  return  tryFoldBITOperator(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITOperator(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITOperator(subtree,  BITWISE_OPERAND);	  return    tryFoldBITOperator(subtree);    	non-compiled	[CE]  orphaned  case	14	None	replace
185	[BUG]  [BUGGY]  return  tryFoldBITOperator(subtree,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITOperator(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITOperator(subtree,  false);	  return    tryFoldBITOperator(subtree);    	non-compiled	[CE]  orphaned  case	14	None	replace
186	[BUG]  [BUGGY]  return  tryFoldBITOperator(subtree.getLastChild());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITOperator(subtree.getLastChild());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITOperator(subtree.getLastChild());	  return    tryFoldBITOperator(subtree);    	non-compiled	[CE]  orphaned  case	14	None	replace
187	[BUG]  [BUGGY]  return  tryFoldBITOperator(subtree,  true);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITOperator(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITOperator(subtree,  true);	  return    tryFoldBITOperator(subtree);    	non-compiled	[CE]  orphaned  case	14	None	replace
188	[BUG]  [BUGGY]  return  tryFoldbitNOT(subtree,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldbitNOT(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldbitNOT(subtree,  false);	  return    tryFoldBITNOT(subtree,    true);    	non-compiled	[CE]  orphaned  case	81	None	replace
189	[BUG]  [BUGGY]  return  tryFoldBitNoT(subtree,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNoT(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNoT(subtree,  false);	  return    tryFoldBITNOT(subtree,    true);    	non-compiled	[CE]  orphaned  case	81	None	replace
190	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree.getFirstChild());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree.getFirstChild());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree.getFirstChild());	  return    tryReduceBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	88	None	replace
191	[BUG]  [BUGGY]  return  tryReduceBITNoT(subtree.getFirstChild());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNoT(subtree.getFirstChild());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNoT(subtree.getFirstChild());	  return    tryReduceBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	88	None	replace
192	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree.getLastChild(),  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree.getLastChild(),  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree.getLastChild(),  1);	  return    tryReduceBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	88	None	replace
193	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree.getLastChild(),  subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree.getLastChild(),  subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree.getLastChild(),  subtree);	  return    tryReduceBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	88	None	replace
194	[BUG]  [BUGGY]  return  tryReduceBitNOT(subtree.getFirstChild());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBitNOT(subtree.getFirstChild());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitNOT(subtree.getFirstChild());	  return    tryReduceBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	88	None	replace
195	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  Boolean.TRUE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  Boolean.TRUE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  Boolean.TRUE);	  tryReduceOperandsForOp(subtree,    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	95	None	replace
196	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  true);	  tryReduceOperandsForOp(subtree,    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	95	None	replace
197	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  false);	  tryReduceOperandsForOp(subtree,    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	95	None	replace
198	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	37	None	replace
199	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	37	None	replace
200	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	37	None	replace
201	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	37	None	replace
202	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	37	None	replace
203	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITS_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BITS_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITS_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	37	None	replace
204	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	66	None	replace
205	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	66	None	replace
206	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	66	None	replace
207	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	66	None	replace
208	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	66	None	replace
209	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	66	None	replace
210	[BUG]  [BUGGY]  return  tryBitOperator(subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryBitOperator(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryBitOperator(subtree);	  return    tryFoldBitOperator(subtree);    	non-compiled	[CE]  orphaned  case	16	None	replace
211	[BUG]  [BUGGY]  return  tryFoldNotOperator(subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldNotOperator(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldNotOperator(subtree);	  return    tryFoldBitOperator(subtree);    	non-compiled	[CE]  orphaned  case	16	None	replace
212	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	75	None	replace
213	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	75	None	replace
214	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	75	None	replace
215	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	75	None	replace
216	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	75	None	replace
217	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  BITS_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  BITS_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  BITS_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	75	None	replace
218	[BUG]  [BUGGY]  return  tryFoldBitNotNull(subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNotNull(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNotNull(subtree);	  return    tryFoldBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	12	None	replace
219	[BUG]  [BUGGY]  return  tryFoldBitNot(subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNot(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNot(subtree);	  return    tryFoldBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	12	None	replace
220	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  ROOT_LOCALE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  ROOT_LOCALE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  ROOT_LOCALE,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	91	None	replace
221	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  ROOT_LOCALE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  ROOT_LOCALE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	91	None	replace
222	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	91	None	replace
223	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FIREAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FIREAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FIREAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	91	None	replace
224	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BOOLEAN_LOCALE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BOOLEAN_LOCALE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BOOLEAN_LOCALE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	91	None	replace
225	[BUG]  [BUGGY]  return  tryFoldBIT(subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBIT(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBIT(subtree);	  return    tryReduceBIT(subtree);    	non-compiled	[CE]  orphaned  case	45	None	replace
226	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITNOT_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITNOT_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITNOT_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITNOT_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	90	None	replace
227	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITNOT_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	90	None	replace
228	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITNOT_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITNOT_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITNOT_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITNOT_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	90	None	replace
229	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  BITNOT_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  BITNOT_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  BITNOT_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITNOT_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	90	None	replace
230	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITNOT_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITNOT_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITNOT_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITNOT_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	90	None	replace
231	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	38	None	replace
232	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  FACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	38	None	replace
233	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  DEFAULT_BITWISE_OPERAND);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	38	None	replace
234	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  STRING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  STRING_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  STRING_BITWISE_OPERAND);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	38	None	replace
235	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITS_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BITS_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITS_BITWISE_OPERAND);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	38	None	replace
236	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND,  false);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITWISE_OPERAND,  false);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	38	None	replace
237	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  true,  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  true,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  true,  false);	  tryReduceBitOperandsForOp(subtree,    true);    	non-compiled	[CE]  orphaned  case	30	None	replace
238	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  null);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  null);	  tryReduceBitOperandsForOp(subtree,    true);    	non-compiled	[CE]  orphaned  case	30	None	replace
239	[BUG]  [BUGGY]  return  tryReduceBitOperandsForOp(subtree,  false);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBitOperandsForOp(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitOperandsForOp(subtree,  false);	  tryReduceBitOperandsForOp(subtree,    true);    	non-compiled	[CE]  orphaned  case	30	None	replace
240	[BUG]  [BUGGY]  tryReduceBitOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitOperandsToOp(subtree);    	non-compiled	[CE]  orphaned  case	41	None	replace
241	[BUG]  [BUGGY]  tryReduceBitOperandsToOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsToOp(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsToOp(subtree,  BITWISE_OPERAND);	  tryReduceBitOperandsToOp(subtree);    	non-compiled	[CE]  orphaned  case	41	None	replace
242	[BUG]  [BUGGY]  tryReduceBitOperandsToOp(subtree,  false);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsToOp(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsToOp(subtree,  false);	  tryReduceBitOperandsToOp(subtree);    	non-compiled	[CE]  orphaned  case	41	None	replace
243	[BUG]  [BUGGY]  tryReduceBitOperandsToOp(subtree,  true);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsToOp(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsToOp(subtree,  true);	  tryReduceBitOperandsToOp(subtree);    	non-compiled	[CE]  orphaned  case	41	None	replace
244	[BUG]  [BUGGY]  return  tryReduceBitOperandsToOp(subtree);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBitOperandsToOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitOperandsToOp(subtree);	  tryReduceBitOperandsToOp(subtree);    	non-compiled	[CE]  orphaned  case	41	None	replace
245	[BUG]  [BUGGY]  tryReduceBITOperandsToOp(subtree);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITOperandsToOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITOperandsToOp(subtree);	  tryReduceBitOperandsToOp(subtree);    	non-compiled	[CE]  orphaned  case	41	None	replace
246	[BUG]  [BUGGY]  return  tryFoldBITNOTOt(subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOt(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOt(subtree);	  return    tryFoldBITNOTOp(subtree);    	non-compiled	[CE]  orphaned  case	36	None	replace
247	[BUG]  [BUGGY]  return  tryFoldBITNOTOT(subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOT(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOT(subtree);	  return    tryFoldBITNOTOp(subtree);    	non-compiled	[CE]  orphaned  case	36	None	replace
248	[BUG]  [BUGGY]  return  tryFoldBITNOTO(subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTO(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTO(subtree);	  return    tryFoldBITNOTOp(subtree);    	non-compiled	[CE]  orphaned  case	36	None	replace
249	[BUG]  [BUGGY]  return  tryReduceBITNoT(subtree,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNoT(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNoT(subtree,  false);	  return    tryReduceBITNOT(subtree,    true);    	non-compiled	[CE]  orphaned  case	69	None	replace
250	[BUG]  [BUGGY]  return  tryReduceBitNOT(subtree,  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBitNOT(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitNOT(subtree,  true);	  return    tryReduceBITNOT(subtree,    true);    	non-compiled	[CE]  orphaned  case	69	None	replace
251	[BUG]  [BUGGY]  return  tryReduceBitNOT(subtree,  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBitNOT(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitNOT(subtree,  false);	  return    tryReduceBITNOT(subtree,    true);    	non-compiled	[CE]  orphaned  case	69	None	replace
252	[BUG]  [BUGGY]  return  tryFoldBitNotOp(subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNotOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNotOp(subtree);	  return    tryFoldNotOp(subtree);    	non-compiled	[CE]  orphaned  case	19	None	replace
253	[BUG]  [BUGGY]  return  tryFoldNotOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldNotOp(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldNotOp(subtree,  BITWISE_OPERAND);	  return    tryFoldNotOp(subtree);    	non-compiled	[CE]  orphaned  case	19	None	replace
254	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	3	None	replace
255	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  MISSING_A_NON_NUMBER_ERROR);	  tryReduceOperandsForOp(subtree,    FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	3	None	replace
256	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  tryReduceOperandsForOp(subtree,    FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	3	None	replace
257	[BUG]  [BUGGY]  return  tryReduceBITNoT(subtree,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNoT(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNoT(subtree,  true);	  return    tryReduceBITNOT(subtree,    false);    	non-compiled	[CE]  orphaned  case	68	None	replace
258	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  false,  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  false,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  false,  true);	  return    tryReduceBITNOT(subtree,    false);    	non-compiled	[CE]  orphaned  case	68	None	replace
259	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	1	None	replace
260	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	1	None	replace
261	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INDEX_TOPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INDEX_TOPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INDEX_TOPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	1	None	replace
262	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  MISSING_A_NON_NUMBER_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	1	None	replace
263	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  INDEX_OUT_OF_RANGE);	  tryReduceBITWISE_OPERANDsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	74	None	replace
264	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  INVALID_GETELEM_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  INVALID_GETELEM_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  INVALID_GETELEM_BITWISE_OPERAND);	  tryReduceBITWISE_OPERANDsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	74	None	replace
265	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  INVALID_GETELEM_INDEX_ERROR);	  tryReduceBITWISE_OPERANDsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	74	None	replace
266	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  ROOT_LOCALE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  ROOT_LOCALE);	  tryReduceBITWISE_OPERANDsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	74	None	replace
267	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	79	None	replace
268	[BUG]  [BUGGY]  return  tryFoldBitNOT(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNOT(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNOT(subtree,  BITWISE_OPERAND);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	79	None	replace
269	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	79	None	replace
270	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  MAX_FOLD_NUMBER);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  MAX_FOLD_NUMBER);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	79	None	replace
271	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  STRING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  STRING_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  STRING_BITWISE_OPERAND);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	79	None	replace
272	[BUG]  [BUGGY]  return  tryFoldOperandsToOp(subtree);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldOperandsToOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldOperandsToOp(subtree);	  return    tryReduceOperandsToOp(subtree);    	non-compiled	[CE]  orphaned  case	42	None	replace
273	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  this);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  this);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  this);	  tryReduceBITNOT(subtree,    null);    	non-compiled	[CE]  orphaned  case	25	None	replace
274	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  null,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  null,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  null,  false);	  tryReduceBITNOT(subtree,    null);    	non-compiled	[CE]  orphaned  case	25	None	replace
275	[BUG]  [BUGGY]  return  tryBitOperand(subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryBitOperand(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryBitOperand(subtree);	  return    tryFoldBitOperand(subtree);    	non-compiled	[CE]  orphaned  case	84	None	replace
276	[BUG]  [BUGGY]  return  tryFoldOperand(subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldOperand(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldOperand(subtree);	  return    tryFoldBitOperand(subtree);    	non-compiled	[CE]  orphaned  case	84	None	replace
277	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  false,  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  false,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  false,  true);	  tryReduceOperandsToOp(subtree,    false);    	non-compiled	[CE]  orphaned  case	39	None	replace
278	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  false,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  false,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  false,  BITWISE_OPERAND);	  tryReduceOperandsToOp(subtree,    false);    	non-compiled	[CE]  orphaned  case	39	None	replace
279	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  false,  null);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  false,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  false,  null);	  tryReduceOperandsToOp(subtree,    false);    	non-compiled	[CE]  orphaned  case	39	None	replace
280	[BUG]  [BUGGY]  return  tryReduceOperandsToOp(subtree,  false);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsToOp(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsToOp(subtree,  false);	  tryReduceOperandsToOp(subtree,    false);    	non-compiled	[CE]  orphaned  case	39	None	replace
281	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	60	None	replace
282	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  INDEX_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	60	None	replace
283	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	60	None	replace
284	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	60	None	replace
285	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	78	None	replace
286	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	78	None	replace
287	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	78	None	replace
288	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	78	None	replace
289	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	78	None	replace
290	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	78	None	replace
291	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	53	None	replace
292	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	53	None	replace
293	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	53	None	replace
294	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	53	None	replace
295	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	53	None	replace
296	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	53	None	replace
297	[BUG]  [BUGGY]  tryReduceBITWISE_OPERandsForOp(subtree,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERandsForOp(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERandsForOp(subtree,  false);	  tryReduceBITWISE_OPERANDsForOp(subtree,    true);    	non-compiled	[CE]  orphaned  case	56	None	replace
298	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  true,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  true,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  true,  false);	  tryReduceBITWISE_OPERANDsForOp(subtree,    true);    	non-compiled	[CE]  orphaned  case	56	None	replace
299	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  null);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  null);	  tryReduceBITWISE_OPERANDsForOp(subtree,    true);    	non-compiled	[CE]  orphaned  case	56	None	replace
300	[BUG]  [BUGGY]  TryReduceBITWISE_OPERANDsForOp(subtree,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  TryReduceBITWISE_OPERANDsForOp(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	TryReduceBITWISE_OPERANDsForOp(subtree,  false);	  tryReduceBITWISE_OPERANDsForOp(subtree,    true);    	non-compiled	[CE]  orphaned  case	56	None	replace
301	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  null);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  null);	  tryReduceOperandsToOp(subtree,    true);    	non-compiled	[CE]  orphaned  case	40	None	replace
302	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  true,  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  true,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  true,  false);	  tryReduceOperandsToOp(subtree,    true);    	non-compiled	[CE]  orphaned  case	40	None	replace
303	[BUG]  [BUGGY]  return  tryFoldOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	34	None	replace
304	[BUG]  [BUGGY]  return  tryFoldOperandsForOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldOperandsForOp(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldOperandsForOp(subtree,  BITWISE_OPERAND);	  return    tryFoldOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	34	None	replace
305	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  INDEX_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    INDEX_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	64	None	replace
306	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  DEFAULT_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    DEFAULT_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	94	None	replace
307	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  FIELD_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  FIELD_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    DEFAULT_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	94	None	replace
308	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  MAX_FOLD_NUMBER);	  tryReduceOperandsForOp(subtree,    DEFAULT_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	94	None	replace
309	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    DEFAULT_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	94	None	replace
310	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  INVALID_GETELEM_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  INVALID_GETELEM_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  INVALID_GETELEM_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	62	None	replace
311	[BUG]  [BUGGY]  tryReduceBitNotOp(subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNotOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNotOp(subtree);	  tryReduceBitNot(subtree);    	non-compiled	[CE]  orphaned  case	10	None	replace
312	[BUG]  [BUGGY]  tryReduceBitnot(subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitnot(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitnot(subtree);	  tryReduceBitNot(subtree);    	non-compiled	[CE]  orphaned  case	10	None	replace
313	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITS_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	50	None	replace
314	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  MITS_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  MITS_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  MITS_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITS_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	50	None	replace
315	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  FIELD_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  FIELD_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITS_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	50	None	replace
316	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  BITS_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  BITS_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  BITS_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITS_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	50	None	replace
317	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    STRING_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	6	None	replace
318	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    STRING_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	6	None	replace
319	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    STRING_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	6	None	replace
320	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BOOLEAN_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	63	None	replace
321	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BOOLEAN_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	63	None	replace
322	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  Boolean.valueOf(BITWISE_OPERAND));  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  Boolean.valueOf(BITWISE_OPERAND));  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  Boolean.valueOf(BITWISE_OPERAND));	  tryReduceOperandsForOp(subtree,    BOOLEAN_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	63	None	replace
323	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
324	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FIREAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FIREAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FIREAL_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
325	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
326	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
327	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  2);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  2);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  2);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
328	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
329	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_OUT_OF_BOUNDS_ERROR,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_OUT_OF_BOUNDS_ERROR,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  INDEX_OUT_OF_BOUNDS_ERROR,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  case	61	None	replace
330	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  case	61	None	replace
331	[BUG]  [BUGGY]  return  tryBitNoT(subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryBitNoT(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryBitNoT(subtree);	  return    tryFoldBitNoT(subtree);    	non-compiled	[CE]  orphaned  case	15	None	replace
332	[BUG]  [BUGGY]  tryReduceBitNoT(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNoT(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNoT(subtree,  BITWISE_OPERAND);	  tryReduceBitNoT(subtree);    	non-compiled	[CE]  orphaned  case	8	None	replace
333	[BUG]  [BUGGY]  tryReduceBitNoT(subtree,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNoT(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNoT(subtree,  false);	  tryReduceBitNoT(subtree);    	non-compiled	[CE]  orphaned  case	8	None	replace
334	[BUG]  [BUGGY]  tryReduceBitNotNoT(subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNotNoT(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNotNoT(subtree);	  tryReduceBitNoT(subtree);    	non-compiled	[CE]  orphaned  case	8	None	replace
335	[BUG]  [BUGGY]  tryReduceBitNoT(subtree,  null);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNoT(subtree,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNoT(subtree,  null);	  tryReduceBitNoT(subtree);    	non-compiled	[CE]  orphaned  case	8	None	replace
336	[BUG]  [BUGGY]  return  tryBidirectionalOperator(subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryBidirectionalOperator(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryBidirectionalOperator(subtree);	  return    tryFoldBidirectionalOperator(subtree);    	non-compiled	[CE]  orphaned  case	18	None	replace
337	[BUG]  [BUGGY]  return  tryFoldLiteralOperator(subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldLiteralOperator(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldLiteralOperator(subtree);	  return    tryFoldBidirectionalOperator(subtree);    	non-compiled	[CE]  orphaned  case	18	None	replace
338	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  false,  true);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  false,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  false,  true);	  tryReduceBITWISE_OPERANDsForOp(subtree,    false);    	non-compiled	[CE]  orphaned  case	55	None	replace
339	[BUG]  [BUGGY]  tryReduceBITWISE_OPERandsForOp(subtree,  true);  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERandsForOp(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERandsForOp(subtree,  true);	  tryReduceBITWISE_OPERANDsForOp(subtree,    false);    	non-compiled	[CE]  orphaned  default	55	None	replace
340	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  false,  null);  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  false,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  false,  null);	  tryReduceBITWISE_OPERANDsForOp(subtree,    false);    	non-compiled	[CE]  orphaned  default	55	None	replace
341	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  default  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  default	70	None	replace
342	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  default  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  default	70	None	replace
343	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  default  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  default	70	None	replace
344	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  DEFAULT_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  default	70	None	replace
345	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  default	70	None	replace
346	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  default  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  STRING_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  default	70	None	replace
347	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  2);  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  2);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  2);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND    +    1);    	non-compiled	[CE]  orphaned  default	96	None	replace
348	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  3);  [CE]  orphaned  default  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  3);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  3);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND    +    1);    	non-compiled	[CE]  orphaned  default	96	None	replace
349	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  1,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  1,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  1,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND    +    1);    	non-compiled	[CE]  orphaned  default	96	None	replace
350	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  4);  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  4);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  4);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND    +    1);    	non-compiled	[CE]  orphaned  default	96	None	replace
351	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND)+  1;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND)+  1;  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND)+  1;	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND    +    1);    	non-compiled	[CE]  not  a  statement	96	None	replace
352	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  false,  true);  [CE]  orphaned  default  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  false,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  false,  true);	  tryReduceBitOperandsForOp(subtree,    false);    	non-compiled	[CE]  orphaned  default	31	None	replace
353	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  false,  BITWISE_OPERAND);  [CE]  orphaned  default  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  false,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  false,  BITWISE_OPERAND);	  tryReduceBitOperandsForOp(subtree,    false);    	non-compiled	[CE]  orphaned  default	31	None	replace
354	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  false,  null);  [CE]  orphaned  default  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  false,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  false,  null);	  tryReduceBitOperandsForOp(subtree,    false);    	non-compiled	[CE]  orphaned  default	31	None	replace
355	[BUG]  [BUGGY]  return  tryFoldBitNode(subtree,  BITWISE_OPERAND);  [CE]  orphaned  default  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNode(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNode(subtree,  BITWISE_OPERAND);	  return    tryFoldBitNode(subtree);    	non-compiled	[CE]  orphaned  default	21	None	replace
356	[BUG]  [BUGGY]  return  tryFoldBITNotNode(subtree);  [CE]  orphaned  default  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNotNode(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNotNode(subtree);	  return    tryFoldBitNode(subtree);    	non-compiled	[CE]  orphaned  default	21	None	replace
357	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  default  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  default	33	None	replace
358	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND);  [CE]  orphaned  default  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBinaryOperator(subtree,  BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  default	33	None	replace
359	[BUG]  [BUGGY]  return  tryFoldBITNOTBinaryOperator(subtree);  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTBinaryOperator(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTBinaryOperator(subtree);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  default	33	None	replace
360	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree());  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBinaryOperator(subtree.cloneTree());	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  default	33	None	replace
361	[BUG]  [BUGGY]  return  tryFoldBITOPERandsForOp(subtree);  [CE]  orphaned  default  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITOPERandsForOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITOPERandsForOp(subtree);	  return    tryFoldBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  default	32	None	replace
362	[BUG]  [BUGGY]  return  tryFoldBitOperandsForOp(subtree,  false);  [CE]  orphaned  default  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitOperandsForOp(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitOperandsForOp(subtree,  false);	  return    tryFoldBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  default	32	None	replace
363	[BUG]  [BUGGY]  return  tryFoldBitOperandsForOp(subtree,  true);  [CE]  orphaned  default  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitOperandsForOp(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitOperandsForOp(subtree,  true);	  return    tryFoldBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  default	32	None	replace
364	[BUG]  [BUGGY]  return  tryFoldBITNOT(parent,  subtree);  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(parent,  subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(parent,  subtree);	  return    tryFoldBITNOT(parent);    	non-compiled	[CE]  orphaned  default	82	None	replace
365	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  parent);  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  parent);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  parent);	  return    tryFoldBITNOT(parent);    	non-compiled	[CE]  orphaned  default	82	None	replace
366	[BUG]  [BUGGY]  return  tryFoldBITNOT(null);  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(null);	  return    tryFoldBITNOT(parent);    	non-compiled	[CE]  orphaned  default	82	None	replace
367	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  default  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  INVALID_GETELEM_INDEX_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  default	61	None	replace
368	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  default	61	None	replace
369	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  default	61	None	replace
370	[BUG]  [BUGGY]  return  tryFoldBITNOT(false,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  default  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(false,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(false,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  default	78	None	replace
371	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  default	78	None	replace
372	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  default	78	None	replace
373	[BUG]  [BUGGY]  return  tryFoldBITNOTOperator(subtree,  BITWISE_OPERAND);  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOperator(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOperator(subtree,  BITWISE_OPERAND);	  return    tryFoldBITNOTOperator(subtree);    	non-compiled	[CE]  orphaned  default	83	None	replace
374	[BUG]  [BUGGY]  return  tryFoldBITNOTOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBITNOTOperator(subtree);    	non-compiled	[CE]  orphaned  default	83	None	replace
375	[BUG]  [BUGGY]  return  tryFoldBITNOTOperator(subtree,  null);  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOperator(subtree,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOperator(subtree,  null);	  return    tryFoldBITNOTOperator(subtree);    	non-compiled	[CE]  orphaned  default	83	None	replace
376	[BUG]  [BUGGY]  return  tryFoldBITNOTOperator(subtree  +  1);  [CE]  orphaned  default  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOperator(subtree  +  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOperator(subtree  +  1);	  return    tryFoldBITNOTOperator(subtree);    	non-compiled	[CE]  orphaned  default	83	None	replace
377	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  default  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  default	27	None	replace
378	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  default	27	None	replace
379	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  default	27	None	replace
380	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  null,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  null,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  null,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBITNOT(subtree,    null);    	non-compiled	[CE]  orphaned  default	80	None	replace
381	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  default  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  INVALID_GETELEM_INDEX_ERROR);	  tryReduceOperandsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  default	62	None	replace
382	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BYTE_BITWISE_OPERAND);  [CE]  orphaned  default  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BYTE_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BYTE_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  default	62	None	replace
383	[BUG]  [BUGGY]  return  tryFoldBitNoTree(subtree,  BITWISE_OPERAND);  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNoTree(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNoTree(subtree,  BITWISE_OPERAND);	  return    tryFoldBitNoTree(subtree);    	non-compiled	[CE]  orphaned  default	20	None	replace
384	[BUG]  [BUGGY]  return  tryFoldBitNotNoTree(subtree);  [CE]  orphaned  default  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNotNoTree(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNotNoTree(subtree);	  return    tryFoldBitNoTree(subtree);    	non-compiled	[CE]  orphaned  default	20	None	replace
385	[BUG]  [BUGGY]  return  tryFoldBITNOTOperand(subtree,  BITWISE_OPERAND);  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOperand(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOperand(subtree,  BITWISE_OPERAND);	  return    tryFoldBITNOTOperand(subtree);    	non-compiled	[CE]  orphaned  default	85	None	replace
386	[BUG]  [BUGGY]  return  tryFoldBITNOTOperand(subtree,  false);  [CE]  orphaned  default  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOperand(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOperand(subtree,  false);	  return    tryFoldBITNOTOperand(subtree);    	non-compiled	[CE]  orphaned  default	85	None	replace
387	[BUG]  [BUGGY]  return  tryFoldBITNOTOperand(node);  [CE]  orphaned  default  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOperand(node);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOperand(node);	  return    tryFoldBITNOTOperand(subtree);    	non-compiled	[CE]  orphaned  default	85	None	replace
388	[BUG]  [BUGGY]  return  tryFoldBITNOTOperand(subtree,  true);  [CE]  orphaned  default  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOperand(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOperand(subtree,  true);	  return    tryFoldBITNOTOperand(subtree);    	non-compiled	[CE]  orphaned  default	85	None	replace
389	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  default  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  default	70	None	replace
390	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  default  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  default	70	None	replace
391	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BOUNDS_ERROR);  [CE]  orphaned  default  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BOUNDS_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  default	60	None	replace
392	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtrae,  false);  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtrae,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtrae,  false);	  tryReduceOperandsToOp(subtree,    true);    	non-compiled	[CE]  orphaned  default	40	None	replace
393	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree.removeFirstChild());  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree.removeFirstChild());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree.removeFirstChild());	  return    tryFoldBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  default	89	None	replace
394	[BUG]  [BUGGY]  return  tryReduceBITOperand(subtree);  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITOperand(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITOperand(subtree);	  return    tryReduceBITOp(subtree);    	non-compiled	[CE]  orphaned  default	46	None	replace
395	[BUG]  [BUGGY]  return  tryReduceBITOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  default  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBITOp(subtree);    	non-compiled	[CE]  orphaned  default	46	None	replace
396	[BUG]  [BUGGY]  return  tryReduceBITOp(subtree,  false);  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITOp(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITOp(subtree,  false);	  return    tryReduceBITOp(subtree);    	non-compiled	[CE]  orphaned  default	46	None	replace
397	[BUG]  [BUGGY]  tryReduceBitNoT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNoT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNoT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitNoT(subtree);    	non-compiled	[CE]  orphaned  default	8	None	replace
398	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT,  BITWISE_OPERAND);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  case  Token.BITNOT,  BITWISE_OPERAND);	  tryReduceBitNOT(subtree,    case    Token.BITNOT);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
399	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  case  Token.BITNOT);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  case  Token.BITNOT);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  case  Token.BITNOT);	  tryReduceBitNOT(subtree,    case    Token.BITNOT);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
400	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT  +  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  case  Token.BITNOT  +  1);	  tryReduceBitNOT(subtree,    case    Token.BITNOT);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
401	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT  -  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  case  Token.BITNOT  -  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  case  Token.BITNOT  -  1);	  tryReduceBitNOT(subtree,    case    Token.BITNOT);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
402	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree.removeFirstChild());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree.removeFirstChild());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree.removeFirstChild());	  return    tryReduceBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	88	None	replace
403	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree.getLastChild(),  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree.getLastChild(),  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree.getLastChild(),  true);	  return    tryReduceBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	88	None	replace
404	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree.getLastChild(),  this);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree.getLastChild(),  this);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree.getLastChild(),  this);	  return    tryReduceBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	88	None	replace
405	[BUG]  [BUGGY]  return  tryFoldBITNoT(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNoT(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNoT(subtree,  BITWISE_OPERAND);	  return    tryFoldBITNoT(subtree);    	non-compiled	[CE]  orphaned  case	13	None	replace
406	[BUG]  [BUGGY]  return  tryFoldBITNoT(parent);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNoT(parent);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNoT(parent);	  return    tryFoldBITNoT(subtree);    	non-compiled	[CE]  orphaned  case	13	None	replace
407	[BUG]  [BUGGY]  return  tryFoldBITNoT(subtree,  null);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNoT(subtree,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNoT(subtree,  null);	  return    tryFoldBITNoT(subtree);    	non-compiled	[CE]  orphaned  case	13	None	replace
408	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  true,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  true,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  true,  false);	  tryReduceBITNOT(subtree,    true);    	non-compiled	[CE]  orphaned  case	26	None	replace
409	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE  +  1);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE  +  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE  +  1);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITNOT_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	90	None	replace
410	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITBOUNDS_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITBOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITBOUNDS_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITNOT_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	90	None	replace
411	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	28	None	replace
412	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	28	None	replace
413	[BUG]  [BUGGY]  return  tryReduceBITsForOp(subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITsForOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITsForOp(subtree);	  return    tryReduceBIT(subtree);    	non-compiled	[CE]  orphaned  case	45	None	replace
414	[BUG]  [BUGGY]  return  tryReduceBIT(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBIT(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBIT(subtree,  BITWISE_OPERAND);	  return    tryReduceBIT(subtree);    	non-compiled	[CE]  orphaned  case	45	None	replace
415	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    STRING_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	49	None	replace
416	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  FACTIONAL_BITWISE_OPERAND);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	22	None	replace
417	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  INDEX_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  INDEX_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  INDEX_BITWISE_OPERAND);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	22	None	replace
418	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  FIELD_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  FIELD_BITWISE_OPERAND);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	22	None	replace
419	[BUG]  [BUGGY]  return  tryReduceBITNOT(parent,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(parent,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(parent,  false);	  return    tryReduceBITNOT(subtree,    false);    	non-compiled	[CE]  orphaned  case	68	None	replace
420	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  false,  null);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  false,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  false,  null);	  return    tryReduceBITNOT(subtree,    false);    	non-compiled	[CE]  orphaned  case	68	None	replace
421	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  INVALID_GETELEM_INDEX_ERROR);	  return    tryReduceBITNOT(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	67	None	replace
422	[BUG]  [BUGGY]  return  tryReduceBITNOT(false,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(false,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(false,  FRACTIONAL_BITWISE_OPERAND);	  return    tryReduceBITNOT(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	67	None	replace
423	[BUG]  [BUGGY]  return  tryFoldBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	12	None	replace
424	[BUG]  [BUGGY]  return  tryFoldBitNoT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNoT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNoT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	12	None	replace
425	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITS_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	50	None	replace
426	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE  +  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE  +  1);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND    +    1);    	non-compiled	[CE]  orphaned  case	96	None	replace
427	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  1,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  1,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  1,  BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND    +    1);    	non-compiled	[CE]  orphaned  case	96	None	replace
428	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND,  false);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    false);    	non-compiled	[CE]  orphaned  case	51	None	replace
429	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_BITWISE_OPERAND,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_BITWISE_OPERAND,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  INDEX_BITWISE_OPERAND,  false);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    false);    	non-compiled	[CE]  orphaned  case	51	None	replace
430	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  true,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  true,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  true,  false);	  return    tryReduceBITNOT(subtree,    true);    	non-compiled	[CE]  orphaned  case	69	None	replace
431	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  INVALID_GETELEM_INDEX_ERROR);	  tryReduceBITNOT(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	71	None	replace
432	[BUG]  [BUGGY]  return  tryReduceBITNoT(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNoT(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNoT(subtree,  BITWISE_OPERAND);	  return    tryReduceBITNoT(subtree);    	non-compiled	[CE]  orphaned  case	44	None	replace
433	[BUG]  [BUGGY]  return  tryReduceBITNoT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNoT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNoT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBITNoT(subtree);    	non-compiled	[CE]  orphaned  case	44	None	replace
434	[BUG]  [BUGGY]  return  tryReduceBITNoT(parent);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNoT(parent);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNoT(parent);	  return    tryReduceBITNoT(subtree);    	non-compiled	[CE]  orphaned  case	44	None	replace
435	[BUG]  [BUGGY]  return  tryReduceBITNoT(subtree,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNoT(subtree,  FIELD_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNoT(subtree,  FIELD_BITWISE_OPERAND);	  return    tryReduceBITNoT(subtree);    	non-compiled	[CE]  orphaned  case	44	None	replace
436	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	35	None	replace
437	[BUG]  [BUGGY]  return  tryReduceBITOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBITOperator(subtree);    	non-compiled	[CE]  orphaned  case	43	None	replace
438	[BUG]  [BUGGY]  return  tryReduceBITOperator(subtree,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITOperator(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITOperator(subtree,  false);	  return    tryReduceBITOperator(subtree);    	non-compiled	[CE]  orphaned  case	43	None	replace
439	[BUG]  [BUGGY]  return  tryReduceBITOperator(subtree,  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITOperator(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITOperator(subtree,  true);	  return    tryReduceBITOperator(subtree);    	non-compiled	[CE]  orphaned  case	43	None	replace
440	[BUG]  [BUGGY]  return  tryReduceBITOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITOperator(subtree,  FRACTIONAL_BITWISE_OPERAND);	  return    tryReduceBITOperator(subtree);    	non-compiled	[CE]  orphaned  case	43	None	replace
441	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT,  INVALID_GETELEM_INDEX_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    BITNOT);    	non-compiled	[CE]  orphaned  case	93	None	replace
442	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    BITNOT);    	non-compiled	[CE]  orphaned  case	93	None	replace
443	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT  +  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT  +  1);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    BITNOT);    	non-compiled	[CE]  orphaned  case	93	None	replace
444	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  subtree.getNext());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  subtree.getNext());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  subtree.getNext());	  return    tryFoldBITNOT(subtree.getNext());    	non-compiled	[CE]  orphaned  case	92	None	replace
445	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	2	None	replace
446	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  INDEX_OUT_OF_BOUNDS_ERROR);	  tryReduceOperandsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	2	None	replace
447	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
448	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
449	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
450	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_IN_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_IN_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_IN_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
451	[BUG]  [BUGGY]  return  tryReduceBitOperandsForOp(subtree,  true);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBitOperandsForOp(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitOperandsForOp(subtree,  true);	  tryReduceBitOperandsForOp(subtree,    false);    	non-compiled	[CE]  orphaned  case	31	None	replace
452	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  false,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  false,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  false,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitOperandsForOp(subtree,    false);    	non-compiled	[CE]  orphaned  case	31	None	replace
453	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  false,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  false,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  false,  BITWISE_OPERAND);	  tryReduceBitNOT(subtree,    false);    	non-compiled	[CE]  orphaned  case	9	None	replace
454	[BUG]  [BUGGY]  return  tryFoldBitNoT(bits);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNoT(bits);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNoT(bits);	  return    tryFoldBitNoT(subtree);    	non-compiled	[CE]  orphaned  case	15	None	replace
455	[BUG]  [BUGGY]  return  tryFoldBitNotNoT(subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNotNoT(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNotNoT(subtree);	  return    tryFoldBitNoT(subtree);    	non-compiled	[CE]  orphaned  case	15	None	replace
456	[BUG]  [BUGGY]  tryReduceBitNot(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNot(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNot(subtree,  BITWISE_OPERAND);	  tryReduceBitNot(subtree);    	non-compiled	[CE]  orphaned  case	10	None	replace
457	[BUG]  [BUGGY]  tryReduceBitNot(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNot(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNot(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitNot(subtree);    	non-compiled	[CE]  orphaned  case	10	None	replace
458	[BUG]  [BUGGY]  tryReduceBitNot(subtree,  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNot(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNot(subtree,  false);	  tryReduceBitNot(subtree);    	non-compiled	[CE]  orphaned  case	10	None	replace
459	[BUG]  [BUGGY]  tryReduceBITNot(subtree);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNot(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNot(subtree);	  tryReduceBitNot(subtree);    	non-compiled	[CE]  orphaned  case	10	None	replace
460	[BUG]  [BUGGY]  return  tryReduceBITNOT(false,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(false,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(false,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	66	None	replace
461	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	66	None	replace
462	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	66	None	replace
463	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_GETELEM_INDEX_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_GETELEM_INDEX_ERROR);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	66	None	replace
464	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	38	None	replace
465	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BOOLEAN_BITWISE_OPERAND);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	38	None	replace
466	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BYTE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BYTE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BYTE_OPERAND);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	38	None	replace
467	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	53	None	replace
468	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	53	None	replace
469	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_IN_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_IN_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_IN_OF_RANGE);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	53	None	replace
470	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	53	None	replace
471	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  this.BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  this.BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  this.BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	95	None	replace
472	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT);	  tryReduceOperandsForOp(subtree,    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	95	None	replace
473	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  false,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  false,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  false,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceBITNOT(subtree,    false);    	non-compiled	[CE]  orphaned  case	24	None	replace
474	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  false,  getFoldOperandsForOp(subtree));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  false,  getFoldOperandsForOp(subtree));  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  false,  getFoldOperandsForOp(subtree));	  tryReduceBITNOT(subtree,    false);    	non-compiled	[CE]  orphaned  case	24	None	replace
475	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  BOOLEAN_BITWISE_OPERAND);	  tryReduceBITWISE_OPERANDsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	74	None	replace
476	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_INVALID_GETELEM_INDEX_ERROR);	  tryReduceBITWISE_OPERANDsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	74	None	replace
477	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);	  tryReduceBITWISE_OPERANDsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	74	None	replace
478	[BUG]  [BUGGY]  return  tryFoldBITOPERand(subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITOPERand(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITOPERand(subtree);	  return    tryFoldBitOperand(subtree);    	non-compiled	[CE]  orphaned  case	84	None	replace
479	[BUG]  [BUGGY]  return  tryFoldBitOperand(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitOperand(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitOperand(subtree,  BITWISE_OPERAND);	  return    tryFoldBitOperand(subtree);    	non-compiled	[CE]  orphaned  case	84	None	replace
480	[BUG]  [BUGGY]  return  tryReduceBITNOT(false,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(false,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(false,  BITWISE_OPERAND);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	65	None	replace
481	[BUG]  [BUGGY]  return  tryReduceBITNOT(parent,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(parent,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(parent,  BITWISE_OPERAND);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	65	None	replace
482	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  INDEX_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  INDEX_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  INDEX_BITWISE_OPERAND);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	65	None	replace
483	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  FIELD_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  FIELD_BITWISE_OPERAND);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	65	None	replace
484	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtrae,  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtrae,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtrae,  false);	  tryReduceBitOperandsForOp(subtree,    true);    	non-compiled	[CE]  orphaned  case	30	None	replace
485	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	75	None	replace
486	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	75	None	replace
487	[BUG]  [BUGGY]  tryReduceBitNOT(false,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(false,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(false,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	75	None	replace
488	[BUG]  [BUGGY]  return  tryFoldBITNOTOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOp(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOp(subtree,  BITWISE_OPERAND);	  return    tryFoldBITNOTOp(subtree);    	non-compiled	[CE]  orphaned  case	36	None	replace
489	[BUG]  [BUGGY]  return  tryFoldBITNOTOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBITNOTOp(subtree);    	non-compiled	[CE]  orphaned  case	36	None	replace
490	[BUG]  [BUGGY]  return  tryFoldBITNOTOp(subtree  +  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOp(subtree  +  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOp(subtree  +  1);	  return    tryFoldBITNOTOp(subtree);    	non-compiled	[CE]  orphaned  case	36	None	replace
491	[BUG]  [BUGGY]  return  tryFoldBITNOTOp(subtree,  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOp(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOp(subtree,  false);	  return    tryFoldBITNOTOp(subtree);    	non-compiled	[CE]  orphaned  case	36	None	replace
492	[BUG]  [BUGGY]  return  tryFoldBITNOTOp(null);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTOp(null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTOp(null);	  return    tryFoldBITNOTOp(subtree);    	non-compiled	[CE]  orphaned  case	36	None	replace
493	[BUG]  [BUGGY]  tryReduceBITNoT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNoT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNoT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBITNoT(subtree);    	non-compiled	[CE]  orphaned  case	23	None	replace
494	[BUG]  [BUGGY]  tryReduceBITNoT(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNoT(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNoT(subtree,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceBITNoT(subtree);    	non-compiled	[CE]  orphaned  case	23	None	replace
495	[BUG]  [BUGGY]  tryReduceBITNoT(subtree,  null);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNoT(subtree,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNoT(subtree,  null);	  tryReduceBITNoT(subtree);    	non-compiled	[CE]  orphaned  case	23	None	replace
496	[BUG]  [BUGGY]  return  tryFoldBITOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBITOperator(subtree);    	non-compiled	[CE]  orphaned  case	14	None	replace
497	[BUG]  [BUGGY]  return  tryFoldBITOperator(subtree,  null);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITOperator(subtree,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITOperator(subtree,  null);	  return    tryFoldBITOperator(subtree);    	non-compiled	[CE]  orphaned  case	14	None	replace
498	[BUG]  [BUGGY]  return  tryFoldBITOperator(subtree,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITOperator(subtree,  FIELD_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITOperator(subtree,  FIELD_BITWISE_OPERAND);	  return    tryFoldBITOperator(subtree);    	non-compiled	[CE]  orphaned  case	14	None	replace
499	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	1	None	replace
500	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  INDEX_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  INDEX_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	1	None	replace
501	[BUG]  [BUGGY]  return  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	29	None	replace
502	[BUG]  [BUGGY]  return  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND);	  return    tryReduceBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	29	None	replace
503	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  null,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  null,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  null,  BITWISE_OPERAND);	  return    tryReduceBITNOT(subtree,    null);    	non-compiled	[CE]  orphaned  case	87	None	replace
504	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsToOp(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsToOp(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsToOp(subtree,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceBITWISE_OPERANDsToOp(subtree);    	non-compiled	[CE]  orphaned  case	77	None	replace
505	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsToOp(subtree,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsToOp(subtree,  FIELD_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsToOp(subtree,  FIELD_BITWISE_OPERAND);	  tryReduceBITWISE_OPERANDsToOp(subtree);    	non-compiled	[CE]  orphaned  case	77	None	replace
506	[BUG]  [BUGGY]  tryReduceBITWISE_OPERAND(subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERAND(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERAND(subtree);	  tryReduceBitOperand(subtree);    	non-compiled	[CE]  orphaned  case	76	None	replace
507	[BUG]  [BUGGY]  tryReduceBitOperand(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperand(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperand(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitOperand(subtree);    	non-compiled	[CE]  orphaned  case	76	None	replace
508	[BUG]  [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBidirectionalOperator(subtree,  BITWISE_OPERAND);	  return    tryFoldBidirectionalOperator(subtree);    	non-compiled	[CE]  orphaned  case	18	None	replace
509	[BUG]  [BUGGY]  return  tryFoldBITNOTBidirectionalOperator(subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOTBidirectionalOperator(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOTBidirectionalOperator(subtree);	  return    tryFoldBidirectionalOperator(subtree);    	non-compiled	[CE]  orphaned  case	18	None	replace
510	[BUG]  [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBidirectionalOperator(subtree,  false);	  return    tryFoldBidirectionalOperator(subtree);    	non-compiled	[CE]  orphaned  case	18	None	replace
511	[BUG]  [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  true);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBidirectionalOperator(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBidirectionalOperator(subtree,  true);	  return    tryFoldBidirectionalOperator(subtree);    	non-compiled	[CE]  orphaned  case	18	None	replace
512	[BUG]  [BUGGY]  return  tryFoldBITWISE_OPERANDsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITWISE_OPERANDsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITWISE_OPERANDsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	58	None	replace
513	[BUG]  [BUGGY]  return  tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	11	None	replace
514	[BUG]  [BUGGY]  return  tryReduceBitNOT(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBitNOT(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitNOT(subtree,  BITWISE_OPERAND);	  return    tryReduceBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	11	None	replace
515	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BYTE_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BYTE_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BYTE_BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    FIELD_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	5	None	replace
516	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    FIELD_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	5	None	replace
517	[BUG]  [BUGGY]  return  tryFoldNotOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldNotOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldNotOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldNotOp(subtree);    	non-compiled	[CE]  orphaned  case	19	None	replace
518	[BUG]  [BUGGY]  return  tryFoldBITNotOp(subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNotOp(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNotOp(subtree);	  return    tryFoldNotOp(subtree);    	non-compiled	[CE]  orphaned  case	19	None	replace
519	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  null,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  null,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  null,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceBITNOT(subtree,    null);    	non-compiled	[CE]  orphaned  case	25	None	replace
520	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree.getNext(),  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree.getNext(),  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree.getNext(),  true);	  return    tryFoldBITNOT(subtree,    true);    	non-compiled	[CE]  orphaned  case	81	None	replace
521	[BUG]  [BUGGY]  return  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceOperandsToOp(subtree);    	non-compiled	[CE]  orphaned  case	42	None	replace
522	[BUG]  [BUGGY]  return  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND);	  return    tryReduceOperandsToOp(subtree);    	non-compiled	[CE]  orphaned  case	42	None	replace
523	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  false,  null);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  false,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  false,  null);	  return    tryFoldBITNOT(subtree,    false);    	non-compiled	[CE]  orphaned  case	17	None	replace
524	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  false,  0);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  false,  0);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  false,  0);	  return    tryFoldBITNOT(subtree,    false);    	non-compiled	[CE]  orphaned  case	17	None	replace
525	[BUG]  [BUGGY]  return  tryReduceOperandsToOp(subtree,  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsToOp(subtree,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsToOp(subtree,  true);	  tryReduceOperandsToOp(subtree,    false);    	non-compiled	[CE]  orphaned  case	39	None	replace
526	[BUG]  [BUGGY]  return  tryFoldBITNOT(false,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(false,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(false,  BITWISE_OPERAND);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	79	None	replace
527	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  FIELD_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  FIELD_BITWISE_OPERAND);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	79	None	replace
528	[BUG]  [BUGGY]  return  tryFoldBITNOT(parent,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(parent,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(parent,  BITWISE_OPERAND);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	79	None	replace
529	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	7	None	replace
530	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  INDEX_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  INDEX_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  INDEX_BITWISE_OPERAND);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	7	None	replace
531	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	72	None	replace
532	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	72	None	replace
533	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE  +  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE  +  1);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	72	None	replace
534	[BUG]  [BUGGY]  tryReduceBITOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBITOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	86	None	replace
535	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  false,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  false,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  false,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceOperandsForOp(subtree,    false);    	non-compiled	[CE]  orphaned  case	73	None	replace
536	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  false,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  false,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  false,  BITWISE_OPERAND);	  return    tryReduceOperandsForOp(subtree,    false);    	non-compiled	[CE]  orphaned  case	73	None	replace
537	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  null);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  null);	  return    tryReduceOperandsForOp(subtree,    false);    	non-compiled	[CE]  orphaned  case	73	None	replace
538	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_GETELEM_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_GETELEM_GETELEM_INDEX_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_GETELEM_GETELEM_INDEX_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	47	None	replace
539	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	47	None	replace
540	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  false,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  false,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  false,  FRACTIONAL_BITWISE_OPERAND);	  tryReduceBITWISE_OPERANDsForOp(subtree,    false);    	non-compiled	[CE]  orphaned  case	55	None	replace
541	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITWISE_OPERANDsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND);	  return    tryReduceBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	54	None	replace
542	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree,  FIELD_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITWISE_OPERANDsForOp(subtree,  FIELD_BITWISE_OPERAND);	  return    tryReduceBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	54	None	replace
543	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	4	None	replace
544	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	37	None	replace
545	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_RANGE);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	37	None	replace
546	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	37	None	replace
547	[BUG]  [BUGGY]  return  tryFoldBitOperator(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitOperator(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitOperator(subtree,  BITWISE_OPERAND);	  return    tryFoldBitOperator(subtree);    	non-compiled	[CE]  orphaned  case	16	None	replace
548	[BUG]  [BUGGY]  return  tryFoldBitOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitOperator(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBitOperator(subtree);    	non-compiled	[CE]  orphaned  case	16	None	replace
549	[BUG]  [BUGGY]  return  tryFoldBitOperator(subtree,  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitOperator(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitOperator(subtree,  false);	  return    tryFoldBitOperator(subtree);    	non-compiled	[CE]  orphaned  case	16	None	replace
550	[BUG]  [BUGGY]  tryReduceBITWISE_OPERAND(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERAND(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERAND(subtree,  BITWISE_OPERAND);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	7	None	replace
551	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  BOOLEAN_BITWISE_OPERAND);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	7	None	replace
552	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	7	None	replace
553	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	62	None	replace
554	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  new  Node(Token.BITNOT));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  new  Node(Token.BITNOT));  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  new  Node(Token.BITNOT));	  tryReduceBITNOT(subtree,    null);    	non-compiled	[CE]  orphaned  case	25	None	replace
555	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);	  tryReduceBITNOT(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	71	None	replace
556	[BUG]  [BUGGY]  return  tryReduceBitOperandsForOp(subtree,  Boolean.TRUE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBitOperandsForOp(subtree,  Boolean.TRUE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBitOperandsForOp(subtree,  Boolean.TRUE);	  return    tryReduceBitOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	29	None	replace
557	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  	59	None	replace
558	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
559	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE));  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE));	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  	59	None	replace
560	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE  +  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE  +  1);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	59	None	replace
561	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);	  return    tryReduceBITNOT(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	67	None	replace
562	[BUG]  [BUGGY]  tryReduceBitNot(subtree,  null);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNot(subtree,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNot(subtree,  null);	  tryReduceBitNot(subtree);    	non-compiled	[CE]  orphaned  case	10	None	replace
563	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FIELD_BITWISE_OPERAND_OUT_OF_RANGE,  BOOLEAN_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    FIELD_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	5	None	replace
564	[BUG]  [BUGGY]  return  tryFoldBitNoT(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNoT(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNoT(subtree,  BITWISE_OPERAND);	  return    tryFoldBitNoT(subtree);    	non-compiled	[CE]  orphaned  case	15	None	replace
565	[BUG]  [BUGGY]  return  tryFoldBidirectionalOperand(subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBidirectionalOperand(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBidirectionalOperand(subtree);	  return    tryFoldOperandsForOp(subtree);    	non-compiled	[CE]  orphaned  case	34	None	replace
566	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  BITWISE_OPERAND_OUT_OF_  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  BITWISE_OPERAND_OUT_OF_  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  BITWISE_OPERAND_OUT_OF_	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  	61	None	replace
567	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  BITWISE_OPERAND_OUT_OF  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  BITWISE_OPERAND_OUT_OF  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  BITWISE_OPERAND_OUT_OF	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  	61	None	replace
568	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  MISSING_A_NON_NUMBER_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  case	61	None	replace
569	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FACTIONAL_BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  case	61	None	replace
570	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  case	61	None	replace
571	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	78	None	replace
572	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	78	None	replace
573	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    FACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	3	None	replace
574	[BUG]  [BUGGY]  return  tryFoldBITNotNoTree(subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNotNoTree(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNotNoTree(subtree);	  return    tryFoldBitNoTree(subtree);    	non-compiled	[CE]  orphaned  case	20	None	replace
575	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  inDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  inDEX_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  inDEX_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	47	None	replace
576	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	47	None	replace
577	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  FRACTIONAL_BITWISE_OPERAND,  DEFAULT_GETELEM_INDEX_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	47	None	replace
578	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	75	None	replace
579	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);	  tryReduceBitNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	75	None	replace
580	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	53	None	replace
581	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	53	None	replace
582	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	37	None	replace
583	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	37	None	replace
584	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	28	None	replace
585	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	28	None	replace
586	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND,  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND,  ROOT_LOCALE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND,  ROOT_LOCALE);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	28	None	replace
587	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  ROOT_LOCALE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  ROOT_LOCALE);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	28	None	replace
588	[BUG]  [BUGGY]  return  tryFoldBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND);	  return    tryFoldBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	58	None	replace
589	[BUG]  [BUGGY]  return  tryFoldBITWISE_OPERANDsForOp(subtree  +  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITWISE_OPERANDsForOp(subtree  +  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITWISE_OPERANDsForOp(subtree  +  1);	  return    tryFoldBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	58	None	replace
590	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  subtree.getLastChild());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  subtree.getLastChild());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  subtree.getLastChild());	  return    tryFoldBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	89	None	replace
591	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  subtree.getFirstChild());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  subtree.getFirstChild());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  subtree.getFirstChild());	  return    tryFoldBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	89	None	replace
592	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree.cloneTree());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree.cloneTree());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree.cloneTree());	  return    tryFoldBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	89	None	replace
593	[BUG]  [BUGGY]  return  tryFoldBitNOT(subtree.getLastChild());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNOT(subtree.getLastChild());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNOT(subtree.getLastChild());	  return    tryFoldBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	12	None	replace
594	[BUG]  [BUGGY]  return  tryFoldBitNOT(subtree,  null);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNOT(subtree,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNOT(subtree,  null);	  return    tryFoldBitNOT(subtree);    	non-compiled	[CE]  orphaned  case	12	None	replace
595	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND,  false);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    false);    	non-compiled	[CE]  orphaned  case	51	None	replace
596	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  true);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    false);    	non-compiled	[CE]  orphaned  case	51	None	replace
597	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	27	None	replace
598	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	27	None	replace
599	[BUG]  [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND);	  tryReduceBitOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	27	None	replace
600	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  new  Node(Token.BITNOT));  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  new  Node(Token.BITNOT));  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  new  Node(Token.BITNOT));	  return    tryReduceBITNOT(subtree,    null);    	non-compiled	[CE]  orphaned  case	87	None	replace
601	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  BITWISE_OPERAND,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  BITWISE_OPERAND,  BITWISE_OPERAND);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	79	None	replace
602	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	79	None	replace
603	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  BOOLEAN_BITWISE_OPERAND);	  return    tryFoldBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	79	None	replace
604	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  BITWISE_OPERAND,  BITWISE_OPERAND);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	65	None	replace
605	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND  +  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND  +  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  BITWISE_OPERAND  +  1);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	65	None	replace
606	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BYTE_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BYTE_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BYTE_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	60	None	replace
607	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  NUMBER_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  NUMBER_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  NUMBER_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    INDEX_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	60	None	replace
608	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	35	None	replace
609	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  +  1);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	35	None	replace
610	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  ||  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  ||  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND  ||  BITWISE_OPERAND);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	35	None	replace
611	[BUG]  [BUGGY]  tryReduceBitNOT(subtree,  new  Node(Token.BITNOT));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBitNOT(subtree,  new  Node(Token.BITNOT));  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBitNOT(subtree,  new  Node(Token.BITNOT));	  tryReduceBitNOT(subtree,    null);    	non-compiled	[CE]  orphaned  case	97	None	replace
612	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  BITWISE_OPERAND,  BITWISE_OPERAND);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	22	None	replace
613	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	22	None	replace
614	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  subtree.getLastChild());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  subtree.getLastChild());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  subtree.getLastChild());	  return    tryReduceBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	88	None	replace
615	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree.cloneTree());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree.cloneTree());	  return    tryReduceBITNOT(subtree.getLastChild());    	non-compiled	[CE]  orphaned  case	88	None	replace
616	[BUG]  [BUGGY]  return  tryReduceBITOperator(subtree,  null);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITOperator(subtree,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITOperator(subtree,  null);	  return    tryReduceBITOperator(subtree);    	non-compiled	[CE]  orphaned  case	43	None	replace
617	[BUG]  [BUGGY]  return  tryReduceBITOperator(subtree.getLastChild());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITOperator(subtree.getLastChild());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITOperator(subtree.getLastChild());	  return    tryReduceBITOperator(subtree);    	non-compiled	[CE]  orphaned  case	43	None	replace
618	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT,  MAX_FOLD_NUMBER);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT,  MAX_FOLD_NUMBER);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    BITNOT);    	non-compiled	[CE]  orphaned  case	93	None	replace
619	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND,  BITNOT,  DEFAULT_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND,    BITNOT);    	non-compiled	[CE]  orphaned  case	93	None	replace
620	[BUG]  [BUGGY]  return  tryFoldBITNOT(subtree,  null,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNOT(subtree,  null,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNOT(subtree,  null,  false);	  return    tryFoldBITNOT(subtree,    null);    	non-compiled	[CE]  orphaned  case	80	None	replace
621	[BUG]  [BUGGY]  return  tryReduceBITOp(subtree.getLastChild());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITOp(subtree.getLastChild());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITOp(subtree.getLastChild());	  return    tryReduceBITOp(subtree);    	non-compiled	[CE]  orphaned  case	46	None	replace
622	[BUG]  [BUGGY]  return  tryReduceBITOp(subtree  +  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITOp(subtree  +  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITOp(subtree  +  1);	  return    tryReduceBITOp(subtree);    	non-compiled	[CE]  orphaned  case	46	None	replace
623	[BUG]  [BUGGY]  return  tryReduceBITOp(subtree.getNext());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITOp(subtree.getNext());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITOp(subtree.getNext());	  return    tryReduceBITOp(subtree);    	non-compiled	[CE]  orphaned  case	46	None	replace
624	[BUG]  [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITWISE_OPERANDsForOp(subtree  +  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITWISE_OPERANDsForOp(subtree  +  1);	  return    tryReduceBITWISE_OPERANDsForOp(subtree);    	non-compiled	[CE]  orphaned  case	54	None	replace
625	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    DEFAULT_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	94	None	replace
626	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  BITWISE_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  BITWISE_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  DEFAULT_BITWISE_OPERAND,  BITWISE_OUT_OF_RANGE);	  tryReduceOperandsForOp(subtree,    DEFAULT_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	94	None	replace
627	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  READAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  READAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  READAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	91	None	replace
628	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  false,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  false,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  false,  FRACTIONAL_BITWISE_OPERAND);	  return    tryReduceBITNOT(subtree,    false);    	non-compiled	[CE]  orphaned  case	68	None	replace
629	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  inDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  inDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  inDEX_OUT_OF_BOUNDS_ERROR);	  tryReduceOperandsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	2	None	replace
630	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);	  tryReduceOperandsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	2	None	replace
631	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BOOLEAN_LOCALE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BOOLEAN_LOCALE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BOOLEAN_LOCALE);	  tryReduceOperandsForOp(subtree,    ROOT_LOCALE);    	non-compiled	[CE]  orphaned  case	95	None	replace
632	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND,  BITNOT);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND,  BITNOT);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND,  BITNOT);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	57	None	replace
633	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	57	None	replace
634	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND  +  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND  +  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  BITWISE_OPERAND  +  1);	  tryReduceBITWISE_OPERANDsForOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	57	None	replace
635	[BUG]  [BUGGY]  return  tryReduceBITNoT(subtree,  null);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNoT(subtree,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNoT(subtree,  null);	  return    tryReduceBITNoT(subtree);    	non-compiled	[CE]  orphaned  case	44	None	replace
636	[BUG]  [BUGGY]  return  tryReduceBITNoT(subtree.getLastChild());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNoT(subtree.getLastChild());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNoT(subtree.getLastChild());	  return    tryReduceBITNoT(subtree);    	non-compiled	[CE]  orphaned  case	44	None	replace
637	[BUG]  [BUGGY]  return  tryFoldNotOp(subtree,  null);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldNotOp(subtree,  null);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldNotOp(subtree,  null);	  return    tryFoldNotOp(subtree);    	non-compiled	[CE]  orphaned  case	19	None	replace
638	[BUG]  [BUGGY]  return  tryFoldNotOp(subtree,  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldNotOp(subtree,  false);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldNotOp(subtree,  false);	  return    tryFoldNotOp(subtree);    	non-compiled	[CE]  orphaned  case	19	None	replace
639	[BUG]  [BUGGY]  return  tryFoldBITNoT(subtree.getLastChild());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNoT(subtree.getLastChild());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNoT(subtree.getLastChild());	  return    tryFoldBITNoT(subtree);    	non-compiled	[CE]  orphaned  case	13	None	replace
640	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	66	None	replace
641	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);	  return    tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	66	None	replace
642	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITWISE_OPERAND_OUT_OF_RANGE);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	70	None	replace
643	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER);	  tryReduceBITNOT(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	70	None	replace
644	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND,  BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BOOLEAN_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	63	None	replace
645	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND  |  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND  |  BOOLEAN_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BOOLEAN_BITWISE_OPERAND  |  BOOLEAN_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BOOLEAN_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	63	None	replace
646	[BUG]  [BUGGY]  return  tryFoldBITOperator(subtree  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITOperator(subtree  +  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITOperator(subtree  +  1);	  return    tryFoldBITOperator(subtree);    	non-compiled	[CE]  orphaned  case	14	None	replace
647	[BUG]  [BUGGY]  return  tryFoldBitOperand(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitOperand(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitOperand(subtree,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBitOperand(subtree);    	non-compiled	[CE]  orphaned  case	84	None	replace
648	[BUG]  [BUGGY]  return  tryFoldBITNotOperand(subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNotOperand(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNotOperand(subtree);	  return    tryFoldBitOperand(subtree);    	non-compiled	[CE]  orphaned  case	84	None	replace
649	[BUG]  [BUGGY]  return  tryFoldBITNotOperator(subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBITNotOperator(subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBITNotOperator(subtree);	  return    tryFoldBitOperator(subtree);    	non-compiled	[CE]  orphaned  case	16	None	replace
650	[BUG]  [BUGGY]  return  tryFoldBitNode(subtree.cloneTree());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryFoldBitNode(subtree.cloneTree());  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryFoldBitNode(subtree.cloneTree());	  return    tryFoldBitNode(subtree);    	non-compiled	[CE]  orphaned  case	21	None	replace
651	[BUG]  [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITWISE_OPERANDsForOp(subtree,  FIELD_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITWISE_OPERANDsForOp(subtree,  FIELD_BITWISE_OPERAND);	  tryReduceBITWISE_OPERANDsForOp(subtree,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	74	None	replace
652	[BUG]  [BUGGY]  tryReduceBITNOT(subtree,  false,  subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceBITNOT(subtree,  false,  subtree);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceBITNOT(subtree,  false,  subtree);	  tryReduceBITNOT(subtree,    false);    	non-compiled	[CE]  orphaned  case	24	None	replace
653	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  BITNOT);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  BITNOT);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  BITNOT);	  tryReduceOperandsForOp(subtree,    BITS_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	50	None	replace
654	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITS_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	50	None	replace
655	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITS_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	50	None	replace
656	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  ROOT_LOCALE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITS_BITWISE_OPERAND,  ROOT_LOCALE);	  tryReduceOperandsForOp(subtree,    BITS_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	50	None	replace
657	[BUG]  [BUGGY]  return  tryReduceBITNOT(subtree.getNext(),  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceBITNOT(subtree.getNext(),  true);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceBITNOT(subtree.getNext(),  true);	  return    tryReduceBITNOT(subtree,    true);    	non-compiled	[CE]  orphaned  case	69	None	replace
658	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  BITNOT);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  BITNOT);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  BITNOT);	  tryReduceOperandsForOp(subtree,    BBITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	52	None	replace
659	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  BBITNOT);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  BBITNOT);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  BBITNOT);	  tryReduceOperandsForOp(subtree,    BBITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	52	None	replace
660	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  BRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  BRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BBITWISE_OPERAND,  BRACTIONAL_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BBITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	52	None	replace
661	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND,  BITNOT);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND,  BITNOT);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITWISE_OPERAND,  BITNOT);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	38	None	replace
662	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND,  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND,  ROOT_LOCALE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITWISE_OPERAND,  ROOT_LOCALE);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	38	None	replace
663	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITWISE_OPERAND,  BOOLEAN_BITWISE_OPERAND);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	38	None	replace
664	[BUG]  [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND  +  1);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsToOp(subtree,  BITWISE_OPERAND  +  1);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsToOp(subtree,  BITWISE_OPERAND  +  1);	  tryReduceOperandsToOp(subtree,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	38	None	replace
665	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  inDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  inDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  inDEX_OUT_OF_BOUNDS_ERROR);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	1	None	replace
666	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BOOLEAN_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BOOLEAN_BITWISE_OPERAND);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BOOLEAN_BITWISE_OPERAND);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	1	None	replace
667	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS);	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	1	None	replace
668	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	72	None	replace
669	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  ROOT_LOCALE);	  return    tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE);    	non-compiled	[CE]  orphaned  case	72	None	replace
670	[BUG]  [BUGGY]  return  tryReduceOperandsForOp(subtree,  false,  case  Token.BITNOT);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  return  tryReduceOperandsForOp(subtree,  false,  case  Token.BITNOT);  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	return  tryReduceOperandsForOp(subtree,  false,  case  Token.BITNOT);	  return    tryReduceOperandsForOp(subtree,    false);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
671	[BUG]  [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NEW:  return  tryFoldCtorCall(subtree);  case  Token.TYPEOF:  return  tryFoldTypeof(subtree);  case  Token.NOT:  case  Token.POS:  case  Token.NEG:  case  Token.BITNOT:      [BUGGY]  tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE));  [BUGGY]      return  tryFoldUnaryOperator(subtree);  case  Token.VOID:  return  tryReduceVoid(subtree);  default:  tryReduceOperandsForOp(subtree);  return  tryFoldBinaryOperator(subtree);  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  subtree  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	84	84	3	replace	tryReduceOperandsForOp(subtree,  BITWISE_OPERAND_OUT_OF_RANGE,  BITNOT_OUT_OF_RANGE));	  tryReduceOperandsForOp(subtree,    BITWISE_OPERAND_OUT_OF_RANGE,    BITNOT_OUT_OF_RANGE);    	non-compiled	[CE]  	90	None	replace
