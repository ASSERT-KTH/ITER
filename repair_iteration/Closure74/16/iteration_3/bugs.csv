bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedRight);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(n,  left,  undefinedRight);	  result    =    compareToUndefined(left,    left,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
2	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedRight);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(right,  left,  undefinedRight);	  result    =    compareToUndefined(left,    left,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
3	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedLeft);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedLeft);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(right,  left,  undefinedLeft);	  result    =    compareToUndefined(left,    left,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
4	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedLeft);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedLeft);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(left,  left,  undefinedLeft);	  result    =    compareToUndefined(left,    left,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
5	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left,  right);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(left,  left,  right);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(left,  left,  right);	  result    =    compareToUndefined(left,    left,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
6	[BUG]  [BUGGY]  result  =  compareToNumbers(right,  undefinedRight);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(right,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(right,  undefinedRight);	  result    =    compareToNumbers(right,    op);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
7	[BUG]  [BUGGY]  result  =  compareToNumbers(right,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(right,  right);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(right,  right);	  result    =    compareToNumbers(right,    op);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
8	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedLeft);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedLeft);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(left,  right,  undefinedLeft);	  result    =    compareToUndefined(left,    right,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
9	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n,  undefinedRight);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(left,  n,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(left,  n,  undefinedRight);	  result    =    compareToUndefined(left,    right,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
10	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right,  undefinedRight);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(n,  right,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(n,  right,  undefinedRight);	  result    =    compareToUndefined(left,    right,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
11	[BUG]  [BUGGY]  result  =  compareToNumbers(op,  left,  undefinedLeft);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(op,  left,  undefinedLeft);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(op,  left,  undefinedLeft);	  result    =    compareToNumbers(left,    right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	22	None	replace
12	[BUG]  [BUGGY]  result  =  compareToNumbers(n,  left,  undefinedLeft);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(n,  left,  undefinedLeft);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(n,  left,  undefinedLeft);	  result    =    compareToNumbers(left,    right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	22	None	replace
13	[BUG]  [BUGGY]  result  =  compareToNumbers(right,  left,  undefinedLeft);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(right,  left,  undefinedLeft);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(right,  left,  undefinedLeft);	  result    =    compareToNumbers(left,    right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	22	None	replace
14	[BUG]  [BUGGY]  result  =  compareToNumbers(op,  right,  undefinedLeft);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(op,  right,  undefinedLeft);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(op,  right,  undefinedLeft);	  result    =    compareToNumbers(left,    right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	22	None	replace
15	[BUG]  [BUGGY]  result  =  compareToNumbers(right,  left,  undefinedRight);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(right,  left,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(right,  left,  undefinedRight);	  result    =    compareToNumbers(left,    right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	22	None	replace
16	[BUG]  [BUGGY]  result  =  compareToNumbers(n,  right,  undefinedLeft);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(n,  right,  undefinedLeft);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(n,  right,  undefinedLeft);	  result    =    compareToNumbers(left,    right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	22	None	replace
17	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  op);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(lh,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(lh,  op);	  result    =    compareToUndefined(op,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	9	None	replace
18	[BUG]  [BUGGY]  Boolean  rightLiteral  =  (right.getString().equals( "undefined "));  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =  (right.getString().equals( "undefined "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =  (right.getString().equals( "undefined "));	  Boolean    rightLiteral    =    (left.getString().equals(   "undefined   "));    	non-compiled	[CE]  case,  default,  or  	44	None	replace
19	[BUG]  [BUGGY]  Boolean  rightLiteral  =  (left.getString().equals( "undefinedRight "));  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =  (left.getString().equals( "undefinedRight "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =  (left.getString().equals( "undefinedRight "));	  Boolean    rightLiteral    =    (left.getString().equals(   "undefined   "));    	non-compiled	[CE]  case,  default,  or  	44	None	replace
20	[BUG]  [BUGGY]  Boolean  rightLiteral  =  left.getString().equals( "undefined "));  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =  left.getString().equals( "undefined "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =  left.getString().equals( "undefined "));	  Boolean    rightLiteral    =    (left.getString().equals(   "undefined   "));    	non-compiled	[CE]  case,  default,  or  	44	None	replace
21	[BUG]  [BUGGY]  Boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   "))    {    result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
22	[BUG]  [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);  }  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);  }  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);  }	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   "))    {    result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
23	[BUG]  [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")&&  left.getString().equals( "original ")||  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")&&  left.getString().equals( "original ")||  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  left.getString().equals( "right ")&&  left.getString().equals( "original ")||  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   "))    {    result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
24	[BUG]  [BUGGY]  Boolean  undefinedRight  =(right.getString().equals( "undefined "));  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  undefinedRight  =(right.getString().equals( "undefined "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  undefinedRight  =(right.getString().equals( "undefined "));	  Boolean    undefinedRight    =(left.getString().equals(   "undefined       "));    	non-compiled	[CE]  case,  default,  or  	43	None	replace
25	[BUG]  [BUGGY]  Boolean  undefinedRight  =(n.getString().equals( "undefined "));  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  undefinedRight  =(n.getString().equals( "undefined "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  undefinedRight  =(n.getString().equals( "undefined "));	  Boolean    undefinedRight    =(left.getString().equals(   "undefined       "));    	non-compiled	[CE]  case,  default,  or  	43	None	replace
26	[BUG]  [BUGGY]  Boolean  undefinedRight  =(left.getString().equals( "undefined ")));  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  undefinedRight  =(left.getString().equals( "undefined ")));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  undefinedRight  =(left.getString().equals( "undefined ")));	  Boolean    undefinedRight    =(left.getString().equals(   "undefined       "));    	non-compiled	[CE]  case,  default,  or  	43	None	replace
27	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  left,  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(op,  left,  right);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(op,  left,  right);	  result    =    compareToUndefined(op,    left,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	24	None	replace
28	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedRight);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(right,  op,  undefinedRight);	  result    =    compareToUndefined(op,    left,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	24	None	replace
29	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  op,  undefinedRight);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(n,  op,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(n,  op,  undefinedRight);	  result    =    compareToUndefined(op,    left,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	24	None	replace
30	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  op,  undefinedLeft);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(n,  op,  undefinedLeft);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(n,  op,  undefinedLeft);	  result    =    compareToUndefined(op,    left,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	24	None	replace
31	[BUG]  [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original ")  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original ")  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original ")	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   ")||    right.getString().equals(   "original   "));    	non-compiled	[CE]  case,  default,  or  	31	None	replace
32	[BUG]  [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   ")||    right.getString().equals(   "original   "));    	non-compiled	[CE]  case,  default,  or  	31	None	replace
33	[BUG]  [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right_ ")||  left.getString().equals( "original_ ")||  right.getString().equals( "original_ ")||  right.getString().equals( "original  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right_ ")||  left.getString().equals( "original_ ")||  right.getString().equals( "original_ ")||  right.getString().equals( "original  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  left.getString().equals( "right_ ")||  left.getString().equals( "original_ ")||  right.getString().equals( "original_ ")||  right.getString().equals( "original	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   ")||    right.getString().equals(   "original   "));    	non-compiled	[CE]  case,  default,  or  	31	None	replace
34	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedLeft);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedLeft);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(right,  op,  undefinedLeft);	  result    =    compareToUndefined(op,    left,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	25	None	replace
35	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedLeft);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedLeft);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(n,  left,  undefinedLeft);	  result    =    compareToUndefined(op,    left,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	25	None	replace
36	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(left,  rightLiteral);	  result    =    compareToUndefined(right,    rightLiteral);    	non-compiled	[CE]  case,  default,  or  	28	None	replace
37	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  rightLiteral);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(op,  rightLiteral);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(op,  rightLiteral);	  result    =    compareToUndefined(right,    rightLiteral);    	non-compiled	[CE]  case,  default,  or  	28	None	replace
38	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  rightLiteral);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(n,  rightLiteral);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(n,  rightLiteral);	  result    =    compareToUndefined(right,    rightLiteral);    	non-compiled	[CE]  case,  default,  or  	28	None	replace
39	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  op);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(left,  right,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(left,  right,  op);	  result    =    compareToUndefined(left,    undefinedRight,    op);    	non-compiled	[CE]  case,  default,  or  	45	None	replace
40	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedRight,  op);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedRight,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(right,  undefinedRight,  op);	  result    =    compareToUndefined(left,    undefinedRight,    op);    	non-compiled	[CE]  case,  default,  or  	45	None	replace
41	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  op);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(right,  undefinedLeft,  op);	  result    =    compareToUndefined(left,    undefinedRight,    op);    	non-compiled	[CE]  case,  default,  or  	45	None	replace
42	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  op);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  op);	  result    =    compareToUndefined(left,    undefinedRight,    op);    	non-compiled	[CE]  case,  default,  or  	45	None	replace
43	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  undefinedRight,  op);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(n,  undefinedRight,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(n,  undefinedRight,  op);	  result    =    compareToUndefined(left,    undefinedRight,    op);    	non-compiled	[CE]  case,  default,  or  	45	None	replace
44	[BUG]  [BUGGY]  result  =  compareToNumbers(op,  left,  undefinedRight);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(op,  left,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(op,  left,  undefinedRight);	  result    =    compareToNumbers(op,    left);    	non-compiled	[CE]  case,  default,  or  	17	None	replace
45	[BUG]  [BUGGY]  result  =  compareToNumbers(op,  left,  right);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(op,  left,  right);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(op,  left,  right);	  result    =    compareToNumbers(op,    left);    	non-compiled	[CE]  case,  default,  or  	17	None	replace
46	[BUG]  [BUGGY]  result  =  compareToNumbers(n,  op);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(n,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(n,  op);	  result    =    compareToNumbers(op,    left);    	non-compiled	[CE]  case,  default,  or  	17	None	replace
47	[BUG]  [BUGGY]  result  =  compareToUndefined(ln,  right);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(ln,  right);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(ln,  right);	  result    =    compareToUndefined(n,    right);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
48	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  rn);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(op,  rn);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(op,  rn);	  result    =    compareToUndefined(rn,    op);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
49	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedRight,  op);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(undefinedRight,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(undefinedRight,  op);	  result    =    compareToUndefined(rn,    op);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
50	[BUG]  [BUGGY]  result  =  compareToNumbers(n,  undefinedRight);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(n,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(n,  undefinedRight);	  result    =    compareToNumbers(left,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	38	None	replace
51	[BUG]  [BUGGY]  result  =  compareToNumbers(op,  undefinedRight);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(op,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(op,  undefinedRight);	  result    =    compareToNumbers(left,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	38	None	replace
52	[BUG]  [BUGGY]  result  =  compareToNumbers(left,  undefinedLeft);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(left,  undefinedLeft);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(left,  undefinedLeft);	  result    =    compareToNumbers(left,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	38	None	replace
53	[BUG]  [BUGGY]  result  =  compareToNumbers(n,  left,  undefinedRight);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(n,  left,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(n,  left,  undefinedRight);	  result    =    compareToNumbers(left,    right,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	20	None	replace
54	[BUG]  [BUGGY]  result  =  compareToNumbers(op,  right,  undefinedRight);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(op,  right,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(op,  right,  undefinedRight);	  result    =    compareToNumbers(left,    right,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	20	None	replace
55	[BUG]  [BUGGY]  result  =  compareToNumbers(n,  right,  undefinedRight);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(n,  right,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(n,  right,  undefinedRight);	  result    =    compareToNumbers(left,    right,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	20	None	replace
56	[BUG]  [BUGGY]  Boolean  rightLiteral  =  (left.getString().equals( "right ")?  true  :  false;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =  (left.getString().equals( "right ")?  true  :  false;  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =  (left.getString().equals( "right ")?  true  :  false;	  Boolean    rightLiteral    =    left.getString().equals(   "right   ")?    true    :    false;    	non-compiled	[CE]  case,  default,  or  	11	None	replace
57	[BUG]  [BUGGY]  Boolean  rightLiteral  =  left.getString().equals( "right ")?  false  :  true;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =  left.getString().equals( "right ")?  false  :  true;  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =  left.getString().equals( "right ")?  false  :  true;	  Boolean    rightLiteral    =    left.getString().equals(   "right   ")?    true    :    false;    	non-compiled	[CE]  case,  default,  or  	11	None	replace
58	[BUG]  [BUGGY]  Boolean  rightLiteral  =(left.getString().equals( "right "))?  true  :  false;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =(left.getString().equals( "right "))?  true  :  false;  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =(left.getString().equals( "right "))?  true  :  false;	  Boolean    rightLiteral    =    left.getString().equals(   "right   ")?    true    :    false;    	non-compiled	[CE]  case,  default,  or  	11	None	replace
59	[BUG]  [BUGGY]  result  =  compareAsNumbers(op,  left,  undefinedRight);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareAsNumbers(op,  left,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareAsNumbers(op,  left,  undefinedRight);	  result    =    compareAsNumbers(op,    left);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
60	[BUG]  [BUGGY]  result  =  compareAsNumbers(op,  left,  right);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareAsNumbers(op,  left,  right);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareAsNumbers(op,  left,  right);	  result    =    compareAsNumbers(op,    left);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
61	[BUG]  [BUGGY]  result  =  compareToNumbers(left,  n);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(left,  n);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(left,  n);	  result    =    compareToNumbers(op,    n);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
62	[BUG]  [BUGGY]  result  =  compareToNumbers(op,  n,  left);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(op,  n,  left);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(op,  n,  left);	  result    =    compareToNumbers(op,    n);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
63	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n,  undefinedRight);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(right,  n,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(right,  n,  undefinedRight);	  result    =    compareToUndefined(right,    n);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
64	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  n);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(op,  n);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(op,  n);	  result    =    compareToUndefined(right,    n);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
65	[BUG]  [BUGGY]  Boolean  undefinedRight  =(left.getString().equals( "undefined ")||  right.getString().equals( "undefined "));  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  undefinedRight  =(left.getString().equals( "undefined ")||  right.getString().equals( "undefined "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  undefinedRight  =(left.getString().equals( "undefined ")||  right.getString().equals( "undefined "));	  Boolean    undefinedRight    =(left.getString().equals(   "undefined   ")||    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  case,  default,  or  	42	None	replace
66	[BUG]  [BUGGY]  Boolean  undefinedRight  =(left.getString().equals( "undefined ")&&  left.getString().equals( "undefined "));  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  undefinedRight  =(left.getString().equals( "undefined ")&&  left.getString().equals( "undefined "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  undefinedRight  =(left.getString().equals( "undefined ")&&  left.getString().equals( "undefined "));	  Boolean    undefinedRight    =(left.getString().equals(   "undefined   ")||    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  case,  default,  or  	42	None	replace
67	[BUG]  [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")&&  left.getString().equals( "original ")||  right.getString().equals( "original "));  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")&&  left.getString().equals( "original ")||  right.getString().equals( "original "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  left.getString().equals( "right ")&&  left.getString().equals( "original ")||  right.getString().equals( "original "));	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   "));    	non-compiled	[CE]  case,  default,  or  	30	None	replace
68	[BUG]  [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ");  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ");  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ");	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   "));    	non-compiled	[CE]  case,  default,  or  	30	None	replace
69	[BUG]  [BUGGY]  Boolean  rightLiteral  =  (right.getString().equals( "right "));  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =  (right.getString().equals( "right "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =  (right.getString().equals( "right "));	  Boolean    rightLiteral    =    (left.getString().equals(   "right   "));    	non-compiled	[CE]  case,  default,  or  	40	None	replace
70	[BUG]  [BUGGY]  Boolean  rightLiteral  =  left.getString().equals( "right "));  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =  left.getString().equals( "right "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =  left.getString().equals( "right "));	  Boolean    rightLiteral    =    (left.getString().equals(   "right   "));    	non-compiled	[CE]  case,  default,  or  	40	None	replace
71	[BUG]  [BUGGY]  result  =  compareToNumbers(op,  left.getString());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(op,  left.getString());  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(op,  left.getString());	  result    =    compareToNumbers(op,    right);    	non-compiled	[CE]  case,  default,  or  	23	None	replace
72	[BUG]  [BUGGY]  result  =  compareToNumbers(right,  n);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(right,  n);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(right,  n);	  result    =    compareToNumbers(n,    right);    	non-compiled	[CE]  case,  default,  or  	19	None	replace
73	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  undefinedLeft);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(op,  undefinedLeft);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(op,  undefinedLeft);	  result    =    compareToUndefined(n,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	27	None	replace
74	[BUG]  [BUGGY]  result  =  compareToUndefined(ln,  undefinedLeft);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(ln,  undefinedLeft);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(ln,  undefinedLeft);	  result    =    compareToUndefined(n,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	27	None	replace
75	[BUG]  [BUGGY]  Boolean  rightLiteral  =(left.getString().equals( "right ")||  left.getString().equals( "undefinedRight "));  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =(left.getString().equals( "right ")||  left.getString().equals( "undefinedRight "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =(left.getString().equals( "right ")||  left.getString().equals( "undefinedRight "));	  Boolean    rightLiteral    =(left.getString().equals(   "right   ")||    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  case,  default,  or  	41	None	replace
76	[BUG]  [BUGGY]  Boolean  rightLiteral  =(left.getString().equals( "right ")||  right.getString().equals( "undefinedRight "));  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =(left.getString().equals( "right ")||  right.getString().equals( "undefinedRight "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =(left.getString().equals( "right ")||  right.getString().equals( "undefinedRight "));	  Boolean    rightLiteral    =(left.getString().equals(   "right   ")||    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  case,  default,  or  	41	None	replace
77	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  right  =  n.getNext();  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  right  =  n.getNext();	  Node    right    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
78	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  right  =  left.getLastChild();	  Node    right    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
79	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  right  =  left.getFirstChild();	  Node    right    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
80	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
81	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  undefinedRight;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  right  =  left.getNext(),  undefinedRight;  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  right  =  left.getNext(),  undefinedRight;	  Node    right    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
82	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  undefinedRight);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  right  =  left.getNext(),  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  right  =  left.getNext(),  undefinedRight);	  Node    right    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
83	[BUG]  [BUGGY]  result  =  compareToNumbers(n,  left,  right);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(n,  left,  right);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(n,  left,  right);	  result    =    compareToNumbers(n,    left);    	non-compiled	[CE]  case,  default,  or  	21	None	replace
84	[BUG]  [BUGGY]  result  =  compareToNumbers(ln,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(ln,  right);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(ln,  right);	  result    =    compareToNumbers(n,    left);    	non-compiled	[CE]  case,  default,  or  	21	None	replace
85	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  ln);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(op,  ln);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(op,  ln);	  result    =    compareToUndefined(ln,    op);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
86	[BUG]  [BUGGY]  result  =  compareToUndefined(ln,  left);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(ln,  left);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(ln,  left);	  result    =    compareToUndefined(ln,    op);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
87	[BUG]  [BUGGY]  Node  rightLiteral  =  n.getString();  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  rightLiteral  =  n.getString();  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  rightLiteral  =  n.getString();	  Node    rightLiteral    =    left.getString();    	non-compiled	[CE]  case,  default,  or  	14	None	replace
88	[BUG]  [BUGGY]  Node  rightLiteral  =  left.getFirstChild();  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  rightLiteral  =  left.getFirstChild();  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  rightLiteral  =  left.getFirstChild();	  Node    rightLiteral    =    left.getString();    	non-compiled	[CE]  case,  default,  or  	14	None	replace
89	[BUG]  [BUGGY]  Node  rightLiteral  =  left.getLastChild();  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  rightLiteral  =  left.getLastChild();  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  rightLiteral  =  left.getLastChild();	  Node    rightLiteral    =    left.getString();    	non-compiled	[CE]  case,  default,  or  	14	None	replace
90	[BUG]  [BUGGY]  Node  rightLiteral  =  left.getNext();  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  rightLiteral  =  left.getNext();  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  rightLiteral  =  left.getNext();	  Node    rightLiteral    =    left.getString();    	non-compiled	[CE]  case,  default,  or  	14	None	replace
91	[BUG]  [BUGGY]  Node  rightLiteral  =  left.getString()  +  1;  [CE]  case,  default,  or  [FE]                                          AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  rightLiteral  =  left.getString()  +  1;  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  rightLiteral  =  left.getString()  +  1;	  Node    rightLiteral    =    left.getString();    	non-compiled	[CE]  case,  default,  or  	14	None	replace
92	[BUG]  [BUGGY]  Node  rightLiteral  =  left.getValue();  [CE]  case,  default,  or  [FE]                                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  rightLiteral  =  left.getValue();  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  rightLiteral  =  left.getValue();	  Node    rightLiteral    =    left.getString();    	non-compiled	[CE]  case,  default,  or  	14	None	replace
93	[BUG]  [BUGGY]  Boolean  rightLiteral  =  (left.getString().equals( "right ")?  false  :  false;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =  (left.getString().equals( "right ")?  false  :  false;  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =  (left.getString().equals( "right ")?  false  :  false;	  Boolean    rightLiteral    =    left.getString().equals(   "right   ")?    false    :    false;    	non-compiled	[CE]  case,  default,  or  	13	None	replace
94	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  right  =  n.getLastChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	12	None	replace
95	[BUG]  [BUGGY]  Node  right  =  op.getFirstChild();  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  right  =  op.getFirstChild();  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  right  =  op.getFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	12	None	replace
96	[BUG]  [BUGGY]  Node  right  =  node.getFirstChild();  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  right  =  node.getFirstChild();  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  right  =  node.getFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	12	None	replace
97	[BUG]  [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "))  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "))  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  leftLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "))	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   ")||    right.getString().equals(   "original   "))    	non-compiled	[CE]  case,  default,  or  	33	None	replace
98	[BUG]  [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "original ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "))  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "original ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "))  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  left.getString().equals( "original ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "))	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   ")||    right.getString().equals(   "original   "))    	non-compiled	[CE]  case,  default,  or  	33	None	replace
99	[BUG]  [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original))  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original))  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original))	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   ")||    right.getString().equals(   "original   "))    	non-compiled	[CE]  case,  default,  or  	33	None	replace
100	[BUG]  [BUGGY]  result  =  compareToNumbers(op,  rn);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(op,  rn);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(op,  rn);	  result    =    compareToUndefined(rn,    op);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
101	[BUG]  [BUGGY]  result  =  compareToNumbers(right,  op,  undefinedRight);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(right,  op,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(right,  op,  undefinedRight);	  result    =    compareToNumbers(right,    op);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
102	[BUG]  [BUGGY]  Boolean  rightLiteral  =(left.getString().equals( "right ")&&  left.getString().equals( "undefined "));  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =(left.getString().equals( "right ")&&  left.getString().equals( "undefined "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =(left.getString().equals( "right ")&&  left.getString().equals( "undefined "));	  Boolean    rightLiteral    =(left.getString().equals(   "right   ")||    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  case,  default,  or  	41	None	replace
103	[BUG]  [BUGGY]  Boolean  rightLiteral  =(left.getString().equals( "right ")||  right.getString().equals( "undefined "));  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =(left.getString().equals( "right ")||  right.getString().equals( "undefined "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =(left.getString().equals( "right ")||  right.getString().equals( "undefined "));	  Boolean    rightLiteral    =(left.getString().equals(   "right   ")||    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  case,  default,  or  	41	None	replace
104	[BUG]  [BUGGY]  result  =  compareToNumbers(left,  left,  undefinedRight);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(left,  left,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(left,  left,  undefinedRight);	  result    =    compareToNumbers(left,    right,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	20	None	replace
105	[BUG]  [BUGGY]  result  =  compareToNumbers(left,  right,  undefinedRight  -  1);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(left,  right,  undefinedRight  -  1);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(left,  right,  undefinedRight  -  1);	  result    =    compareToNumbers(left,    right,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	20	None	replace
106	[BUG]  [BUGGY]  result  =  compareToNumbers(left,  n,  undefinedRight);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(left,  n,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(left,  n,  undefinedRight);	  result    =    compareToNumbers(left,    right,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	20	None	replace
107	[BUG]  [BUGGY]  result  =  compareToNumbers(op,  left,  rn);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(op,  left,  rn);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(op,  left,  rn);	  result    =    compareToNumbers(op,    left);    	non-compiled	[CE]  case,  default,  or  	17	None	replace
108	[BUG]  [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")&&  left.getString().equals( "original ")&&  right.getString().equals( "original "));  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")&&  left.getString().equals( "original ")&&  right.getString().equals( "original "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  left.getString().equals( "right ")&&  left.getString().equals( "original ")&&  right.getString().equals( "original "));	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   "));    	non-compiled	[CE]  case,  default,  or  	30	None	replace
109	[BUG]  [BUGGY]  boolean  rightLiteral  =  (left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "));  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  (left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  (left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "));	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   "));    	non-compiled	[CE]  case,  default,  or  	30	None	replace
110	[BUG]  [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "));  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  leftLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "));	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   "));    	non-compiled	[CE]  case,  default,  or  	30	None	replace
111	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
112	[BUG]  [BUGGY]  Node  right  =  left.cloneTree();  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  right  =  left.cloneTree();  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  right  =  left.cloneTree();	  Node    right    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
113	[BUG]  [BUGGY]  result  =  compareAsNumbers(right,  op);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareAsNumbers(right,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareAsNumbers(right,  op);	  result    =    compareAsNumbers(op,    left);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
114	[BUG]  [BUGGY]  result  =  compareAsNumbers(left,  op);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareAsNumbers(left,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareAsNumbers(left,  op);	  result    =    compareAsNumbers(op,    left);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
115	[BUG]  [BUGGY]  result  =  compareToNumbers(ln,  left);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(ln,  left);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(ln,  left);	  result    =    compareToNumbers(n,    left);    	non-compiled	[CE]  case,  default,  or  	21	None	replace
116	[BUG]  [BUGGY]  Node  rightLiteral  =  left.getNode();  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  rightLiteral  =  left.getNode();  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  rightLiteral  =  left.getNode();	  Node    rightLiteral    =    left.getString();    	non-compiled	[CE]  case,  default,  or  	14	None	replace
117	[BUG]  [BUGGY]  result  =  compareToNumbers(lh,  op);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(lh,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(lh,  op);	  result    =    compareToNumbers(left,    op);    	non-compiled	[CE]  case,  default,  or  	37	None	replace
118	[BUG]  [BUGGY]  result  =  compareToNumbers(left,  left);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(left,  left);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(left,  left);	  result    =    compareToNumbers(left,    op);    	non-compiled	[CE]  case,  default,  or  	37	None	replace
119	[BUG]  [BUGGY]  Boolean  rightLiteral  =  (left.getBoolean().equals( "right "));  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =  (left.getBoolean().equals( "right "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =  (left.getBoolean().equals( "right "));	  Boolean    rightLiteral    =    (left.getString().equals(   "right   "));    	non-compiled	[CE]  case,  default,  or  	40	None	replace
120	[BUG]  [BUGGY]  Boolean  rightLiteral  =(left.getString().equals( "right "))?  false  :  false;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =(left.getString().equals( "right "))?  false  :  false;  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =(left.getString().equals( "right "))?  false  :  false;	  Boolean    rightLiteral    =    left.getString().equals(   "right   ")?    false    :    false;    	non-compiled	[CE]  case,  default,  or  	13	None	replace
121	[BUG]  [BUGGY]  Boolean  rightLiteral  =  n.getString().equals( "right ")?  false  :  false;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =  n.getString().equals( "right ")?  false  :  false;  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =  n.getString().equals( "right ")?  false  :  false;	  Boolean    rightLiteral    =    left.getString().equals(   "right   ")?    false    :    false;    	non-compiled	[CE]  case,  default,  or  	13	None	replace
122	[BUG]  [BUGGY]  Boolean  rightLiteral  =  (left.getBoolean().equals( "undefined "));  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =  (left.getBoolean().equals( "undefined "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =  (left.getBoolean().equals( "undefined "));	  Boolean    rightLiteral    =    (left.getString().equals(   "undefined   "));    	non-compiled	[CE]  case,  default,  or  	44	None	replace
123	[BUG]  [BUGGY]  Boolean  rightLiteral  =  (left.getString().equals( "undefined "))  &&  compareToUndefined(right,  op);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =  (left.getString().equals( "undefined "))  &&  compareToUndefined(right,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =  (left.getString().equals( "undefined "))  &&  compareToUndefined(right,  op);	  Boolean    rightLiteral    =    (left.getString().equals(   "undefined   "));    	non-compiled	[CE]  case,  default,  or  	44	None	replace
124	[BUG]  [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "original ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "));  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "original ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  left.getString().equals( "original ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "));	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   ")||    right.getString().equals(   "original   "));    	non-compiled	[CE]  case,  default,  or  	31	None	replace
125	[BUG]  [BUGGY]  boolean  rightLiteral  =  (left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "));  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  (left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  (left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "));	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   ")||    right.getString().equals(   "original   "));    	non-compiled	[CE]  case,  default,  or  	31	None	replace
126	[BUG]  [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "));  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  leftLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "));	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   ")||    right.getString().equals(   "original   "));    	non-compiled	[CE]  case,  default,  or  	31	None	replace
127	[BUG]  [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original));  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original));	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   ")||    right.getString().equals(   "original   "));    	non-compiled	[CE]  case,  default,  or  	31	None	replace
128	[BUG]  [BUGGY]  Node  right  =  n.removeFirstChild();  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  right  =  n.removeFirstChild();  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  right  =  n.removeFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	12	None	replace
129	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedRight);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(left,  op,  undefinedRight);	  result    =    compareToUndefined(left,    right,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
130	[BUG]  [BUGGY]  result  =  compareToNumbers(left,  undefinedRight,  undefinedLeft);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(left,  undefinedRight,  undefinedLeft);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(left,  undefinedRight,  undefinedLeft);	  result    =    compareToNumbers(left,    right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	22	None	replace
131	[BUG]  [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")&&  left.getString().equals( "original ")&&  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")&&  left.getString().equals( "original ")&&  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  left.getString().equals( "right ")&&  left.getString().equals( "original ")&&  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   "))    {    result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
132	[BUG]  [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  leftLiteral  =  left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   "))    {    result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
133	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  undefinedRight,  left);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(op,  undefinedRight,  left);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(op,  undefinedRight,  left);	  result    =    compareToUndefined(left,    undefinedRight,    op);    	non-compiled	[CE]  case,  default,  or  	45	None	replace
134	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left,  op);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(left,  left,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(left,  left,  op);	  result    =    compareToUndefined(left,    undefinedRight,    op);    	non-compiled	[CE]  case,  default,  or  	45	None	replace
135	[BUG]  [BUGGY]  Boolean  undefinedRight  =(left.getString().equals( "undefined "))  &&  (right.getString().equals( "undefined "));  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  undefinedRight  =(left.getString().equals( "undefined "))  &&  (right.getString().equals( "undefined "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  undefinedRight  =(left.getString().equals( "undefined "))  &&  (right.getString().equals( "undefined "));	  Boolean    undefinedRight    =(left.getString().equals(   "undefined       "));    	non-compiled	[CE]  case,  default,  or  	43	None	replace
136	[BUG]  [BUGGY]  boolean  rightLiteral  =  (left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "))  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  (left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "))  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  (left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original ")||  right.getString().equals( "original "))	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   ")||    right.getString().equals(   "original   "))    	non-compiled	[CE]  case,  default,  or  	33	None	replace
137	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  left);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  left);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(left,  undefinedRight,  left);	  result    =    compareToUndefined(left,    left,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
138	[BUG]  [BUGGY]  boolean  rightLiteral  =  (left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  (left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  (left.getString().equals( "right ")||  left.getString().equals( "original ")||  right.getString().equals( "original "))  {  result  =  compareToUndefined(left,  op);	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   "))    {    result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
139	[BUG]  [BUGGY]  result  =  compareToNumbers(left,  right,  undefinedRight,  op);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(left,  right,  undefinedRight,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(left,  right,  undefinedRight,  op);	  result    =    compareToNumbers(left,    right,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	20	None	replace
140	[BUG]  [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "original ")||  left.getString().equals( "original ")||  right.getString().equals( "original "));  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "original ")||  left.getString().equals( "original ")||  right.getString().equals( "original "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  left.getString().equals( "original ")||  left.getString().equals( "original ")||  right.getString().equals( "original "));	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   "));    	non-compiled	[CE]  case,  default,  or  	30	None	replace
141	[BUG]  [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")&&  left.getString().equals( "original ")||  right.getString().equals( "original ")&&  right.getString().equals( "original "));  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  boolean  rightLiteral  =  left.getString().equals( "right ")&&  left.getString().equals( "original ")||  right.getString().equals( "original ")&&  right.getString().equals( "original "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	boolean  rightLiteral  =  left.getString().equals( "right ")&&  left.getString().equals( "original ")||  right.getString().equals( "original ")&&  right.getString().equals( "original "));	  boolean    rightLiteral    =    left.getString().equals(   "right   ")||    left.getString().equals(   "original   ")||    right.getString().equals(   "original   ")||    right.getString().equals(   "original   "));    	non-compiled	[CE]  case,  default,  or  	31	None	replace
142	[BUG]  [BUGGY]  result  =  compareToUndefined(ln,  undefinedRight);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(ln,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(ln,  undefinedRight);	  result    =    compareToUndefined(n,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
143	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  undefinedLeft);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(lh,  undefinedLeft);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(lh,  undefinedLeft);	  result    =    compareToUndefined(right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	39	None	replace
144	[BUG]  [BUGGY]  result  =  compareToNumbers(lh,  right);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(lh,  right);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(lh,  right);	  result    =    compareToNumbers(left,    op);    	non-compiled	[CE]  case,  default,  or  	37	None	replace
145	[BUG]  [BUGGY]  result  =  compareToNumbers(left,  undefinedRight,  op);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(left,  undefinedRight,  op);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(left,  undefinedRight,  op);	  result    =    compareToNumbers(left,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	38	None	replace
146	[BUG]  [BUGGY]  Boolean  rightLiteral  =  (left.getString().equals( "right ")||  left.getString().equals( "right "));  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =  (left.getString().equals( "right ")||  left.getString().equals( "right "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =  (left.getString().equals( "right ")||  left.getString().equals( "right "));	  Boolean    rightLiteral    =    (left.getString().equals(   "right   "));    	non-compiled	[CE]  case,  default,  or  	40	None	replace
147	[BUG]  [BUGGY]  result  =  compareToUndefined(ln,  op,  undefinedRight);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(ln,  op,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(ln,  op,  undefinedRight);	  result    =    compareToUndefined(ln,    op);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
148	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);	  result    =    compareToUndefined(left,    right,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
149	[BUG]  [BUGGY]  result  =  compareToNumbers(right,  right,  undefinedRight);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToNumbers(right,  right,  undefinedRight);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(right,  right,  undefinedRight);	  result    =    compareToNumbers(left,    right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	22	None	replace
150	[BUG]  [BUGGY]  result  =  compareAsNumbers(right,  left);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareAsNumbers(right,  left);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareAsNumbers(right,  left);	  result    =    compareAsNumbers(op,    left);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
151	[BUG]  [BUGGY]  Node  rightLiteral  =  left.getQualifiedName();  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  rightLiteral  =  left.getQualifiedName();  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  rightLiteral  =  left.getQualifiedName();	  Node    rightLiteral    =    left.getString();    	non-compiled	[CE]  case,  default,  or  	14	None	replace
152	[BUG]  [BUGGY]  Boolean  rightLiteral  =  (left.getString().equals( "undefined ")||  left.getString().equals( "undefinedRight "));  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =  (left.getString().equals( "undefined ")||  left.getString().equals( "undefinedRight "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =  (left.getString().equals( "undefined ")||  left.getString().equals( "undefinedRight "));	  Boolean    rightLiteral    =    (left.getString().equals(   "undefined   "));    	non-compiled	[CE]  case,  default,  or  	44	None	replace
153	[BUG]  [BUGGY]  Boolean  rightLiteral  =  (left.getString().equals( "undefined ")||  left.getString().equals( "undefined "));  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Boolean  rightLiteral  =  (left.getString().equals( "undefined ")||  left.getString().equals( "undefined "));  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Boolean  rightLiteral  =  (left.getString().equals( "undefined ")||  left.getString().equals( "undefined "));	  Boolean    rightLiteral    =    (left.getString().equals(   "undefined   "));    	non-compiled	[CE]  case,  default,  or  	44	None	replace
154	[BUG]  [BUGGY]  result  =  compareToUndefined(rn,  right);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  result  =  compareToUndefined(rn,  right);  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(rn,  right);	  result    =    compareToUndefined(rn,    op);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
155	[BUG]  [BUGGY]  Node  right  =  left.removeFirst();  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {      [BUGGY]  Node  right  =  left.removeFirst();  [BUGGY]      break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	Node  right  =  left.removeFirst();	  Node    right    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
