bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op);  [CE]  case,  default,  or  [FE]    AssertionFailedError  [CONTEXT]  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  [BUGGY]  result  =  compareToUndefined(right,  op);  [BUGGY]  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals( "undefined "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(right,  op);	result  =  compareToUndefined(left,  op);  	non-compiled	[CE]  case,  default,  or  	31	None	replace
2	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right);  [CE]  case,  default,  or  [FE]      AssertionFailedError  [CONTEXT]  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  [BUGGY]  result  =  compareToUndefined(left,  right);  [BUGGY]  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals( "undefined "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(left,  right);	result  =  compareToUndefined(left,  op);  	non-compiled	[CE]  case,  default,  or  	31	None	replace
3	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  op);  [CE]  case,  default,  or  [FE]        AssertionFailedError  [CONTEXT]  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  [BUGGY]  result  =  compareToUndefined(n,  op);  [BUGGY]  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals( "undefined "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(n,  op);	result  =  compareToUndefined(left,  op);  	non-compiled	[CE]  case,  default,  or  	31	None	replace
4	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right);  [CE]  case,  default,  or  [FE]          AssertionFailedError  [CONTEXT]  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  [BUGGY]  result  =  compareToUndefined(right,  right);  [BUGGY]  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals( "undefined "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(right,  right);	result  =  compareToUndefined(left,  op);  	non-compiled	[CE]  case,  default,  or  	31	None	replace
5	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);  [CE]  case,  default,  or  [FE]            AssertionFailedError  [CONTEXT]  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);  [BUGGY]  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals( "undefined "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(right,  undefinedRight);	result  =  compareToUndefined(left,  op);  	non-compiled	[CE]  case,  default,  or  	31	None	replace
6	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [CE]  case,  default,  or  [FE]              AssertionFailedError  [CONTEXT]  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [BUGGY]  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals( "undefined "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(left,  undefinedRight);	result  =  compareToUndefined(left,  op);  	non-compiled	[CE]  case,  default,  or  	31	None	replace
7	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  left);  [CE]  case,  default,  or  [FE]                AssertionFailedError  [CONTEXT]  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  [BUGGY]  result  =  compareToUndefined(op,  left);  [BUGGY]  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals( "undefined "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(op,  left);	result  =  compareToUndefined(left,  op);  	non-compiled	[CE]  case,  default,  or  	31	None	replace
8	[BUG]  [BUGGY]    [CE]  [FE]                  AssertionFailedError  [CONTEXT]  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  [BUGGY]    [BUGGY]  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals( "undefined "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	  	result  =  compareToUndefined(left,  op);  	non-compiled	[CE]  	31	None	replace
9	[BUG]  [BUGGY]  result  =  compareToNumbers(left,  right);  [CE]  case,  default,  or  [FE]    AssertionFailedError  [CONTEXT]  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  [BUGGY]  result  =  compareToNumbers(left,  right);  [BUGGY]  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals( "undefined "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToNumbers(left,  right);	result  =  compareToUndefined(left,  op);  	non-compiled	[CE]  case,  default,  or  	31	None	replace
10	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left);  [CE]  case,  default,  or  [FE]      AssertionFailedError  [CONTEXT]  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  [BUGGY]  result  =  compareToUndefined(left,  left);  [BUGGY]  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals( "undefined "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1026	1026	3	replace	result  =  compareToUndefined(left,  left);	result  =  compareToUndefined(left,  op);  	non-compiled	[CE]  case,  default,  or  	31	None	replace
