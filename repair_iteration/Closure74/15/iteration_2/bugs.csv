bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(right!=  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(right!=  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	10	None	replace
2	[BUG]  [BUGGY]  if(right!=  null)  {  return  left;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(right!=  null)  {  return  left;  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  left;  }	  if(right!=    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	10	None	replace
3	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	10	None	replace
4	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	10	None	replace
5	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	10	None	replace
6	[BUG]  [BUGGY]  if(right!=  null)  {  return  left;  }  else  if(left.getType()  ==  Token.STRING)  {  result  =!right.getString().equals(right.getString());  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(right!=  null)  {  return  left;  }  else  if(left.getType()  ==  Token.STRING)  {  result  =!right.getString().equals(right.getString());  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  left;  }  else  if(left.getType()  ==  Token.STRING)  {  result  =!right.getString().equals(right.getString());  }	  if(right!=    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	10	None	replace
7	[BUG]  [BUGGY]  result  =!RIGHT.getString().equals(right.getString());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =!RIGHT.getString().equals(right.getString());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!RIGHT.getString().equals(right.getString());	  result    =!right.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  case	9	None	replace
8	[BUG]  [BUGGY]  result  =!right.getString().equals(left.getString());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =!right.getString().equals(left.getString());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(left.getString());	  result    =!right.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  case	9	None	replace
9	[BUG]  [BUGGY]  result  =  n.getString().equals(right.getString());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  n.getString().equals(right.getString());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n.getString().equals(right.getString());	  result    =!right.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  case	9	None	replace
10	[BUG]  [BUGGY]  result  =  left.getString();  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  left.getString();  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  left.getString();	  result    =    n.getString();    	non-compiled	[CE]  orphaned  case	5	None	replace
11	[BUG]  [BUGGY]  result  =  right.getString();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  right.getString();  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  right.getString();	  result    =    n.getString();    	non-compiled	[CE]  orphaned  case	5	None	replace
12	[BUG]  [BUGGY]  result  =  n.getString().toLowerCase();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  n.getString().toLowerCase();  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n.getString().toLowerCase();	  result    =    n.getString();    	non-compiled	[CE]  orphaned  case	5	None	replace
13	[BUG]  [BUGGY]  result  =  rn.getString();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  rn.getString();  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  rn.getString();	  result    =    n.getString();    	non-compiled	[CE]  orphaned  case	5	None	replace
14	[BUG]  [BUGGY]  result  =!right.getType().equals(right.getType());  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =!right.getType().equals(right.getType());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getType().equals(right.getType());	  return    result;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	6	None	replace
15	[BUG]  [BUGGY]  result  =  undefinedRight;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  undefinedRight;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  undefinedRight;//  Only  eval  if  they  are  the  same  type  }	  return    result;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	6	None	replace
16	[BUG]  [BUGGY]  result  =!result.getType().equals(right.getType());  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =!result.getType().equals(right.getType());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!result.getType().equals(right.getType());	  return    result;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	6	None	replace
17	[BUG]  [BUGGY]  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  left.getType();//  Only  eval  if  they  are  the  same  type  }	  return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	1	None	replace
18	[BUG]  [BUGGY]  return  left.getString();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  return  left.getString();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  left.getString();//  Only  eval  if  they  are  the  same  type  }	  return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	1	None	replace
19	[BUG]  [BUGGY]  return  right;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  return  right;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  right;//  Only  eval  if  they  are  the  same  type  }	  return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	1	None	replace
20	[BUG]  [BUGGY]  result  =  rn.getString().equals(right.getString());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  rn.getString().equals(right.getString());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  rn.getString().equals(right.getString());	  result    =    left.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  case	2	None	replace
21	[BUG]  [BUGGY]  result  =  ln.getString().equals(right.getString());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  ln.getString().equals(right.getString());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  ln.getString().equals(right.getString());	  result    =    left.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  case	2	None	replace
22	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  Node  left  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	13	None	replace
23	[BUG]  [BUGGY]  n  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  n  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	n  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	13	None	replace
24	[BUG]  [BUGGY]  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	13	None	replace
25	[BUG]  [BUGGY]  result  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	13	None	replace
26	[BUG]  [BUGGY]  result  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	13	None	replace
27	[BUG]  [BUGGY]  n  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  n  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	n  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	13	None	replace
28	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  Node  right  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  right  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	13	None	replace
29	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op.getType());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  op.getType());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  op.getType());	  result    =    compareToUndefined(left,    right.getType());    	non-compiled	[CE]  orphaned  case	11	None	replace
30	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getType());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(right,  left.getType());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(right,  left.getType());	  result    =    compareToUndefined(left,    right.getType());    	non-compiled	[CE]  orphaned  case	11	None	replace
31	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getType(),  undefinedRight);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  right.getType(),  undefinedRight);  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  right.getType(),  undefinedRight);	  result    =    compareToUndefined(left,    right.getType());    	non-compiled	[CE]  orphaned  case	11	None	replace
32	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getString());  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  right.getString());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  right.getString());	  result    =    compareToUndefined(left,    right.getType());    	non-compiled	[CE]  orphaned  case	11	None	replace
33	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getType());  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  left.getType());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  left.getType());	  result    =    compareToUndefined(left,    right.getType());    	non-compiled	[CE]  orphaned  case	11	None	replace
34	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getValue());  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  right.getValue());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  right.getValue());	  result    =    compareToUndefined(left,    right.getType());    	non-compiled	[CE]  orphaned  case	11	None	replace
35	[BUG]  [BUGGY]  result  =!left.getString().equals(right.getString());  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =!left.getString().equals(right.getString());  break;  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!left.getString().equals(right.getString());  break;	      	non-compiled	[CE]  orphaned  case	8	None	replace
36	[BUG]  [BUGGY]  result  =!undefinedRight.getString().equals(right.getString());  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =!undefinedRight.getString().equals(right.getString());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!undefinedRight.getString().equals(right.getString());	      	non-compiled	[CE]  orphaned  case	8	None	replace
37	[BUG]  [BUGGY]  result  =!right.getString().equals(right.getString());  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =!right.getString().equals(right.getString());  break;  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(right.getString());  break;	      	non-compiled	[CE]  orphaned  case	8	None	replace
38	[BUG]  [BUGGY]  result  =!result.getString().equals(right.getString());  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =!result.getString().equals(right.getString());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!result.getString().equals(right.getString());	      	non-compiled	[CE]  orphaned  case	8	None	replace
39	[BUG]  [BUGGY]  result  =  right.getString();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  right.getString();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  right.getString();//  Only  eval  if  they  are  the  same  type  }	  result    =    n.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	4	None	replace
40	[BUG]  [BUGGY]  result  =  n.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  n.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n.getType();//  Only  eval  if  they  are  the  same  type  }	  result    =    n.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	4	None	replace
41	[BUG]  [BUGGY]  result  =  ln.getString();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  ln.getString();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  ln.getString();//  Only  eval  if  they  are  the  same  type  }	  result    =    n.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	4	None	replace
42	[BUG]  [BUGGY]  result  =  left.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  left.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  left.getType();//  Only  eval  if  they  are  the  same  type  }	  result    =    left.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	7	None	replace
43	[BUG]  [BUGGY]  result  =  rn.getString();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  rn.getString();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  rn.getString();//  Only  eval  if  they  are  the  same  type  }	  result    =    left.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	7	None	replace
44	[BUG]  [BUGGY]  return  right.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  return  right.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  right.getType();//  Only  eval  if  they  are  the  same  type  }	  return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	12	None	replace
45	[BUG]  [BUGGY]  result  =  right.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  right.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  right.getType();//  Only  eval  if  they  are  the  same  type  }	  return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	12	None	replace
46	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  n.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  n.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()  ==  Token.STRING)  {  return  n.getType();//  Only  eval  if  they  are  the  same  type  }	  return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	12	None	replace
47	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()  ==  Token.STRING)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }	  return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	12	None	replace
48	[BUG]  [BUGGY]  if(right!=  null)  {  return  n.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(right!=  null)  {  return  n.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  n.getType();//  Only  eval  if  they  are  the  same  type  }	  return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	12	None	replace
49	[BUG]  [BUGGY]  if(right!=  null)  {  return  n.getType();  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(right!=  null)  {  return  n.getType();  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  n.getType();  }	  return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	12	None	replace
50	[BUG]  [BUGGY]  return  right.getType();  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  return  right.getType();  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  right.getType();	  return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	12	None	replace
51	[BUG]  [BUGGY]  result  =  STRING.getString();  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  STRING.getString();  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  STRING.getString();	  result    =    n.getString();    	non-compiled	[CE]  orphaned  case	5	None	replace
52	[BUG]  [BUGGY]  result  =  n.getString()  +  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  n.getString()  +  1;  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n.getString()  +  1;	  result    =    n.getString();    	non-compiled	[CE]  orphaned  case	5	None	replace
53	[BUG]  [BUGGY]  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	13	None	replace
54	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  right.getFirstChild();	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	13	None	replace
55	[BUG]  [BUGGY]  result  =!result.getString().equals(right.getString());  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =!result.getString().equals(right.getString());  break;  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!result.getString().equals(right.getString());  break;	      	non-compiled	[CE]  orphaned  case	8	None	replace
56	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n.getType());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  n.getType());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  n.getType());	  result    =    compareToUndefined(left,    right.getType());    	non-compiled	[CE]  orphaned  case	11	None	replace
57	[BUG]  [BUGGY]  result  =!right.getString().equals(RIGHT.getString());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =!right.getString().equals(RIGHT.getString());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(RIGHT.getString());	  result    =!right.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  case	9	None	replace
58	[BUG]  [BUGGY]  result  =!right.getString().equals(right.getString()  +  1);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =!right.getString().equals(right.getString()  +  1);  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(right.getString()  +  1);	  result    =!right.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  case	9	None	replace
59	[BUG]  [BUGGY]  result  =!left.getString().equals(right.getString()  +  1);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =!left.getString().equals(right.getString()  +  1);  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!left.getString().equals(right.getString()  +  1);	  result    =!left.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  case	3	None	replace
60	[BUG]  [BUGGY]  result  =!left.getString().equals(RIGHT.getString());  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =!left.getString().equals(RIGHT.getString());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!left.getString().equals(RIGHT.getString());	  result    =!left.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  case	3	None	replace
61	[BUG]  [BUGGY]  if(right  ==  null)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(right  ==  null)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right  ==  null)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	10	None	replace
62	[BUG]  [BUGGY]  if(left!=  null)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(left!=  null)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	10	None	replace
63	[BUG]  [BUGGY]  if(right!=  null)  {  return  n;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(right!=  null)  {  return  n;  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  n;  }	  if(right!=    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	10	None	replace
64	[BUG]  [BUGGY]  if(right!=  null)  {  return  newNode;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(right!=  null)  {  return  newNode;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  newNode;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	10	None	replace
65	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  n.getFirstChild();  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  n.getFirstChild();  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()  ==  Token.STRING)  {  return  n.getFirstChild();  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	13	None	replace
66	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()  ==  Token.STRING)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	13	None	replace
67	[BUG]  [BUGGY]  if(n!=  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(n!=  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n!=  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	10	None	replace
68	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;  }	  if(right!=    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	10	None	replace
69	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  n.getType();  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  n.getType();  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()  ==  Token.STRING)  {  return  n.getType();  }	  return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	12	None	replace
70	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  return  n.getType();  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  if(n.getType()  ==  Token.STRING)  {  return  n.getType();  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n.getType()  ==  Token.STRING)  {  return  n.getType();  }	  return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	12	None	replace
71	[BUG]  [BUGGY]  result  =  lh.getString();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  lh.getString();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  lh.getString();//  Only  eval  if  they  are  the  same  type  }	  result    =    left.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	7	None	replace
72	[BUG]  [BUGGY]  result  =!undefinedLeft.getString().equals(right.getString());  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =!undefinedLeft.getString().equals(right.getString());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!undefinedLeft.getString().equals(right.getString());	      	non-compiled	[CE]  orphaned  case	8	None	replace
73	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getString());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  left.getString());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  left.getString());	  result    =    compareToUndefined(left,    right.getType());    	non-compiled	[CE]  orphaned  case	11	None	replace
74	[BUG]  [BUGGY]  result  =!right.getString().equals(right.getString()  + ": ");  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =!right.getString().equals(right.getString()  + ": ");  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(right.getString()  + ": ");	  result    =!right.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  case	9	None	replace
75	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =  compareToUndefined(left,  right);  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  right);	  return    result;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	6	None	replace
76	[BUG]  [BUGGY]  result  =!center.getString().equals(right.getString());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  result  =!center.getString().equals(right.getString());  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!center.getString().equals(right.getString());	  result    =!left.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  case	3	None	replace
77	[BUG]  [BUGGY]  return  n;  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {    [BUGGY]  return  n;  [BUGGY]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  n;	  return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	1	None	replace
