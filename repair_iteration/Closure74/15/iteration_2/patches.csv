bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left.getType()  ==  Token.STRING)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	46	None	replace
2	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n.getType()  ==  Token.STRING)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	46	None	replace
3	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left.getType()  ==  Token.STRING)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	46	None	replace
4	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()  ==  Token.STRING)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	46	None	replace
5	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.STRING)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()!=  Token.STRING)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	46	None	replace
6	[BUG]  [BUGGY]  if(left!=  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(n!=    null)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	67	None	replace
7	[BUG]  [BUGGY]  if(left!=  null)  {  return  left;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null)  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null)  {  return  left;  }	  if(n!=    null)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	67	None	replace
8	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(n!=  null)  {  return  left;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(n!=  null)  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(n!=  null)  {  return  left;  }	  if(n!=    null)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	67	None	replace
9	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME)  {  if(n!=  null)  {  return  left;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME)  {  if(n!=  null)  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null  ||  left.getType()  ==  Token.NAME)  {  if(n!=  null)  {  return  left;  }	  if(n!=    null)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	67	None	replace
10	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  if(n!=  null)  {  return  left;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  if(n!=  null)  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  if(n!=  null)  {  return  left;  }	  if(n!=    null)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	67	None	replace
11	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getString());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  left.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(right,  left.getString());	  result    =    compareToUndefined(left,    right.getString());    	non-compiled	[CE]  orphaned  case	32	None	replace
12	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op.getString());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  op.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  op.getString());	  result    =    compareToUndefined(left,    right.getString());    	non-compiled	[CE]  orphaned  case	32	None	replace
13	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getString(),  undefinedRight);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right.getString(),  undefinedRight);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  right.getString(),  undefinedRight);	  result    =    compareToUndefined(left,    right.getString());    	non-compiled	[CE]  orphaned  case	32	None	replace
14	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getString(),  undefinedLeft);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right.getString(),  undefinedLeft);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  right.getString(),  undefinedLeft);	  result    =    compareToUndefined(left,    right.getString());    	non-compiled	[CE]  orphaned  case	32	None	replace
15	[BUG]  [BUGGY]  result  =!right.getString().equals(n.getString());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getString().equals(n.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(n.getString());	  result    =!right.getString().equals(RIGHT.getString());    	non-compiled	[CE]  orphaned  case	57	None	replace
16	[BUG]  [BUGGY]  result  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  result    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	26	None	replace
17	[BUG]  [BUGGY]  result  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  result    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	26	None	replace
18	[BUG]  [BUGGY]  result  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  result    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	26	None	replace
19	[BUG]  [BUGGY]  result  =  n.getType();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  n.getType();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n.getType();	  if(right.getType()    ==    Token.STRING)    {    return    n.getType();    }    	non-compiled	[CE]  orphaned  case	69	None	replace
20	[BUG]  [BUGGY]  return  n.getType();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  n.getType();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  n.getType();	  if(right.getType()    ==    Token.STRING)    {    return    n.getType();    }    	non-compiled	[CE]  orphaned  case	69	None	replace
21	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  left.getType();  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  left.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()  ==  Token.STRING)  {  return  left.getType();  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getType();    }    	non-compiled	[CE]  orphaned  case	69	None	replace
22	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  right.getType();  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  right.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()  ==  Token.STRING)  {  return  right.getType();  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getType();    }    	non-compiled	[CE]  orphaned  case	69	None	replace
23	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING)  {  return  left.getType();  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.STRING)  {  return  left.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()!=  Token.STRING)  {  return  left.getType();  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getType();    }    	non-compiled	[CE]  orphaned  case	69	None	replace
24	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  right  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  right  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  Node    right    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	28	None	replace
25	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  right  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  right  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    right    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	28	None	replace
26	[BUG]  [BUGGY]  Node  right  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  right  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  right  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    right    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	28	None	replace
27	[BUG]  [BUGGY]  Node  right  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  right  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  right  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }	  Node    right    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	28	None	replace
28	[BUG]  [BUGGY]  Node  right  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  right  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  right  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  Node    right    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	28	None	replace
29	[BUG]  [BUGGY]  result  =  right.getType();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  right.getType();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  right.getType();	  result    =    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	40	None	replace
30	[BUG]  [BUGGY]  Result  eval  =  right.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Result  eval  =  right.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Result  eval  =  right.getType();//  Only  eval  if  they  are  the  same  type  }	  result    =    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	40	None	replace
31	[BUG]  [BUGGY]  result  =  right.getType();//  Only  eval  if  they  are  the  same  type  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  right.getType();//  Only  eval  if  they  are  the  same  type  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  right.getType();//  Only  eval  if  they  are  the  same  type	  result    =    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	40	None	replace
32	[BUG]  [BUGGY]  Result  result  =  right.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Result  result  =  right.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Result  result  =  right.getType();//  Only  eval  if  they  are  the  same  type  }	  result    =    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	40	None	replace
33	[BUG]  [BUGGY]  result  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  n.getFirstChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n.getFirstChild();	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  orphaned  case	65	None	replace
34	[BUG]  [BUGGY]  return  n.getFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  n.getFirstChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  n.getFirstChild();	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  orphaned  case	65	None	replace
35	[BUG]  [BUGGY]  return  right.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  right.getFirstChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  right.getFirstChild();	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  orphaned  case	65	None	replace
36	[BUG]  [BUGGY]  return  left.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  left.getFirstChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  left.getFirstChild();	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  orphaned  case	65	None	replace
37	[BUG]  [BUGGY]  return  result;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  result;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  result;	  return    n;    	non-compiled	[CE]  orphaned  case	77	None	replace
38	[BUG]  [BUGGY]  result  =  STRING.equals(right.getString());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  STRING.equals(right.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  STRING.equals(right.getString());	  return    n;    	non-compiled	[CE]  orphaned  case	77	None	replace
39	[BUG]  [BUGGY]  result  =  undefinedRight;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  undefinedRight;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  undefinedRight;	  return    n;    	non-compiled	[CE]  orphaned  case	77	None	replace
40	[BUG]  [BUGGY]  result  =!right.getString().equals(center.getString());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getString().equals(center.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(center.getString());	  result    =!center.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  case	76	None	replace
41	[BUG]  [BUGGY]  result  =!center.getString().equals(left.getString());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!center.getString().equals(left.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!center.getString().equals(left.getString());	  result    =!center.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  case	76	None	replace
42	[BUG]  [BUGGY]  result  =!center.getString().equals(right.getString()  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!center.getString().equals(right.getString()  +  1);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!center.getString().equals(right.getString()  +  1);	  result    =!center.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  case	76	None	replace
43	[BUG]  [BUGGY]  result  =!center.getString().equals(RIGHT.getString());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!center.getString().equals(RIGHT.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!center.getString().equals(RIGHT.getString());	  result    =!center.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  case	76	None	replace
44	[BUG]  [BUGGY]  result  =  lh.getString().equals(right.getString());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  lh.getString().equals(right.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  lh.getString().equals(right.getString());	  result    =    rn.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
45	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  n;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  n;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  n;  }	  if(right!=    null)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
46	[BUG]  [BUGGY]  result  =  n!=  null?  null  :  right.getString();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  n!=  null?  null  :  right.getString();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n!=  null?  null  :  right.getString();	  if(right!=    null)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
47	[BUG]  [BUGGY]  if(right!=  null)  {  return  result;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null)  {  return  result;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  result;  }	  if(right!=    null)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
48	[BUG]  [BUGGY]  result  =  n!=  null?  null  :  right.getType();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  n!=  null?  null  :  right.getType();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n!=  null?  null  :  right.getType();	  if(right!=    null)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
49	[BUG]  [BUGGY]  if(right!=  null)  {  return  right;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null)  {  return  right;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  right;  }	  if(right!=    null)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
50	[BUG]  [BUGGY]  result  =  n.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  n.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  result    =    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	25	None	replace
51	[BUG]  [BUGGY]  result  =  right.getString().equals(right.getString());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  right.getString().equals(right.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  right.getString().equals(right.getString());	  if(right!=    null)    {    return    left;    }    else    if(left.getType()    ==    Token.STRING)    {    result    =!right.getString().equals(right.getString());    }    	non-compiled	[CE]  orphaned  case	6	None	replace
52	[BUG]  [BUGGY]  return  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  return    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	53	None	replace
53	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  left  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  return    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	53	None	replace
54	[BUG]  [BUGGY]  return  right.getString();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  right.getString();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  right.getString();//  Only  eval  if  they  are  the  same  type  }	  return    left.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	18	None	replace
55	[BUG]  [BUGGY]  result  =  op.getString();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  op.getString();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  op.getString();//  Only  eval  if  they  are  the  same  type  }	  result    =    right.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	39	None	replace
56	[BUG]  [BUGGY]  return  left.getType();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  left.getType();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  left.getType();	  return    right.getType();    	non-compiled	[CE]  orphaned  case	50	None	replace
57	[BUG]  [BUGGY]  return  right.getType()  -  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  right.getType()  -  1;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  right.getType()  -  1;	  return    right.getType();    	non-compiled	[CE]  orphaned  case	50	None	replace
58	[BUG]  [BUGGY]  return  right.getType()  -  Token.STRING;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  right.getType()  -  Token.STRING;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  right.getType()  -  Token.STRING;	  return    right.getType();    	non-compiled	[CE]  orphaned  case	50	None	replace
59	[BUG]  [BUGGY]  return  right.getType()  &  0xFFFF;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  right.getType()  &  0xFFFF;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  right.getType()  &  0xFFFF;	  return    right.getType();    	non-compiled	[CE]  orphaned  case	50	None	replace
60	[BUG]  [BUGGY]  return  result.getType();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  result.getType();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  result.getType();	  return    right.getType();    	non-compiled	[CE]  orphaned  case	50	None	replace
61	[BUG]  [BUGGY]  return  right.getType()  &  0xfff;  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  right.getType()  &  0xfff;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  right.getType()  &  0xfff;	  return    right.getType();    	non-compiled	[CE]  orphaned  default	50	None	replace
62	[BUG]  [BUGGY]  if(right  ==  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right  ==  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right  ==  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right    ==    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	61	None	replace
63	[BUG]  [BUGGY]  if(right  ==  null)  {  return  left;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right  ==  null)  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right  ==  null)  {  return  left;  }	  if(right    ==    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	61	None	replace
64	[BUG]  [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right  ==  null  ||  right.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right    ==    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	61	None	replace
65	[BUG]  [BUGGY]  if(right  ==  null  ||  right.getType()!=  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right  ==  null  ||  right.getType()!=  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right  ==  null  ||  right.getType()!=  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right    ==    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	61	None	replace
66	[BUG]  [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right  ==  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right    ==    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	61	None	replace
67	[BUG]  [BUGGY]  result  =  ln.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  ln.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  ln.getType();//  Only  eval  if  they  are  the  same  type  }	  result    =    ln.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	41	None	replace
68	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getType(),  undefinedLeft);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right.getType(),  undefinedLeft);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  right.getType(),  undefinedLeft);	  result    =    compareToUndefined(left,    right.getType(),    undefinedRight);    	non-compiled	[CE]  orphaned  case	31	None	replace
69	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op.getType(),  undefinedRight);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  op.getType(),  undefinedRight);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  op.getType(),  undefinedRight);	  result    =    compareToUndefined(left,    right.getType(),    undefinedRight);    	non-compiled	[CE]  orphaned  case	31	None	replace
70	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getType(),  undefinedRight);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  left.getType(),  undefinedRight);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(right,  left.getType(),  undefinedRight);	  result    =    compareToUndefined(left,    right.getType(),    undefinedRight);    	non-compiled	[CE]  orphaned  case	31	None	replace
71	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getType(),  undefinedLeft);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  right.getType(),  undefinedLeft);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(right,  right.getType(),  undefinedLeft);	  result    =    compareToUndefined(left,    right.getType(),    undefinedRight);    	non-compiled	[CE]  orphaned  case	31	None	replace
72	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getType(),  undefinedLeft);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  left.getType(),  undefinedLeft);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  left.getType(),  undefinedLeft);	  result    =    compareToUndefined(left,    right.getType(),    undefinedRight);    	non-compiled	[CE]  orphaned  case	31	None	replace
73	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getType(),  undefinedRight);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  right.getType(),  undefinedRight);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(right,  right.getType(),  undefinedRight);	  result    =    compareToUndefined(left,    right.getType(),    undefinedRight);    	non-compiled	[CE]  orphaned  case	31	None	replace
74	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getType(),  undefinedRight);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  left.getType(),  undefinedRight);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  left.getType(),  undefinedRight);	  result    =    compareToUndefined(left,    right.getType(),    undefinedRight);    	non-compiled	[CE]  orphaned  case	31	None	replace
75	[BUG]  [BUGGY]  result  =  left.getString().toLowerCase();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  left.getString().toLowerCase();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  left.getString().toLowerCase();	  result    =    left.getString();    	non-compiled	[CE]  orphaned  case	10	None	replace
76	[BUG]  [BUGGY]  result  =  left.getString(),  right.getType());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  left.getString(),  right.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  left.getString(),  right.getType());	  result    =    left.getString();    	non-compiled	[CE]  	10	None	replace
77	[BUG]  [BUGGY]  if(right!=  null)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	48	None	replace
78	[BUG]  [BUGGY]  if(right!=  null)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	48	None	replace
79	[BUG]  [BUGGY]  if(right!=  null)  {  return  left.getType();  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null)  {  return  left.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  left.getType();  }	  if(right!=    null)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	48	None	replace
80	[BUG]  [BUGGY]  if(left!=  null)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	48	None	replace
81	[BUG]  [BUGGY]  if(right!=  null)  {  return  right.getType();  }  [CE]  orphaned  default  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null)  {  return  right.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  right.getType();  }	  if(right!=    null)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	48	None	replace
82	[BUG]  [BUGGY]  if(right!=  null)  {  return  right.getType();  }  else  if(Token.STRING!=  right.getString())  {  result  =!right.getString().equals(right.getString());  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null)  {  return  right.getType();  }  else  if(Token.STRING!=  right.getString())  {  result  =!right.getString().equals(right.getString());  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  right.getType();  }  else  if(Token.STRING!=  right.getString())  {  result  =!right.getString().equals(right.getString());  }	  if(right!=    null)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	48	None	replace
83	[BUG]  [BUGGY]  if(right!=  null)  {  return  newNode;  }  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null)  {  return  newNode;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  newNode;  }	  if(right!=    null)    {    return    newNode;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	64	None	replace
84	[BUG]  [BUGGY]  if(left!=  null)  {  return  newNode;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null)  {  return  newNode;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null)  {  return  newNode;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    newNode;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	64	None	replace
85	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  newNode;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  newNode;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  newNode;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    newNode;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	64	None	replace
86	[BUG]  [BUGGY]  if(left!=  null)  {  return  newNode;  }  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null)  {  return  newNode;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null)  {  return  newNode;  }	  if(right!=    null)    {    return    newNode;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	64	None	replace
87	[BUG]  [BUGGY]  result  =!right.getString().equals(result.getString());  [CE]  orphaned  default  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getString().equals(result.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(result.getString());	  result    =!result.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  default	38	None	replace
88	[BUG]  [BUGGY]  return  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  return    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	24	None	replace
89	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getString());  [CE]  orphaned  default  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  right.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(right,  right.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  orphaned  default	73	None	replace
90	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left.getString());  [CE]  orphaned  default  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  left.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(n,  left.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  orphaned  default	73	None	replace
91	[BUG]  [BUGGY]  result  =  ln.getString();  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  ln.getString();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  ln.getString();	  result    =    rn.getString();    	non-compiled	[CE]  orphaned  default	13	None	replace
92	[BUG]  [BUGGY]  result  =  rn.getString().toLowerCase();  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  rn.getString().toLowerCase();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  rn.getString().toLowerCase();	  result    =    rn.getString();    	non-compiled	[CE]  orphaned  default	13	None	replace
93	[BUG]  [BUGGY]  result  =  n!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  n!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;  }	  if(right!=    null    &&    right.getType()    ==    Token.STRING)    {    return    n;    }    	non-compiled	[CE]  	68	None	replace
94	[BUG]  [BUGGY]  result  =  n!=  null  &&  right.getType()  ==  Token.STRING;  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  n!=  null  &&  right.getType()  ==  Token.STRING;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n!=  null  &&  right.getType()  ==  Token.STRING;	  if(right!=    null    &&    right.getType()    ==    Token.STRING)    {    return    n;    }    	non-compiled	[CE]  orphaned  default	68	None	replace
95	[BUG]  [BUGGY]  result  =  n!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  n!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;	  if(right!=    null    &&    right.getType()    ==    Token.STRING)    {    return    n;    }    	non-compiled	[CE]  	68	None	replace
96	[BUG]  [BUGGY]  result  =  n!=  null  &&  right.getType()  ==  Token.STRING)  {  return  left;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  n!=  null  &&  right.getType()  ==  Token.STRING)  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n!=  null  &&  right.getType()  ==  Token.STRING)  {  return  left;  }	  if(right!=    null    &&    right.getType()    ==    Token.STRING)    {    return    n;    }    	non-compiled	[CE]  	68	None	replace
97	[BUG]  [BUGGY]  n!=  left.getString();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  n!=  left.getString();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	n!=  left.getString();	  if(right!=    null    &&    right.getType()    ==    Token.STRING)    {    return    n;    }    	non-compiled	[CE]  not  a  statement	68	None	replace
98	[BUG]  [BUGGY]  result  =  rn.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  rn.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  rn.getType();//  Only  eval  if  they  are  the  same  type  }	  result    =    rn.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	43	None	replace
99	[BUG]  [BUGGY]  result  =  right.getString()  +  1;  [CE]  orphaned  default  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  right.getString()  +  1;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  right.getString()  +  1;	  result    =    n.getString()    +    1;    	non-compiled	[CE]  orphaned  default	52	None	replace
100	[BUG]  [BUGGY]  result  =  left.getString()  +  1;  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  left.getString()  +  1;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  left.getString()  +  1;	  result    =    n.getString()    +    1;    	non-compiled	[CE]  orphaned  default	52	None	replace
101	[BUG]  [BUGGY]  result  =  right.getString()  /  1;  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  right.getString()  /  1;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  right.getString()  /  1;	  result    =    n.getString()    +    1;    	non-compiled	[CE]  orphaned  default	52	None	replace
102	[BUG]  [BUGGY]  result  =  left.getString()  /  1;  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  left.getString()  /  1;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  left.getString()  /  1;	  result    =    n.getString()    +    1;    	non-compiled	[CE]  orphaned  default	52	None	replace
103	[BUG]  [BUGGY]  result  =!left.getType().equals(right.getType());  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!left.getType().equals(right.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!left.getType().equals(right.getType());	  result    =!result.getType().equals(right.getType());    	non-compiled	[CE]  orphaned  default	16	None	replace
104	[BUG]  [BUGGY]  result  =!right.getType().equals(result.getType());  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getType().equals(result.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getType().equals(result.getType());	  result    =!result.getType().equals(right.getType());    	non-compiled	[CE]  orphaned  default	16	None	replace
105	[BUG]  [BUGGY]  result  =!result.getType().equals(right.getString());  [CE]  orphaned  default  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!result.getType().equals(right.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!result.getType().equals(right.getString());	  result    =!result.getType().equals(right.getType());    	non-compiled	[CE]  orphaned  default	16	None	replace
106	[BUG]  [BUGGY]  result  =!RIGHT.getType().equals(right.getType());  [CE]  orphaned  default  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!RIGHT.getType().equals(right.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!RIGHT.getType().equals(right.getType());	  result    =!result.getType().equals(right.getType());    	non-compiled	[CE]  orphaned  default	16	None	replace
107	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  left.getType();  }  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  left.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left.getType()  ==  Token.STRING)  {  return  left.getType();  }	  if(right.getType()    ==    Token.STRING)    {    return    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	47	None	replace
108	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  right.getType();  }  [CE]  orphaned  default  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  right.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left.getType()  ==  Token.STRING)  {  return  right.getType();  }	  if(right.getType()    ==    Token.STRING)    {    return    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	47	None	replace
109	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()  ==  Token.STRING)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	66	None	replace
110	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left.getType()  ==  Token.STRING)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	66	None	replace
111	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left.getType()  ==  Token.STRING)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	66	None	replace
112	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n.getType()  ==  Token.STRING)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	66	None	replace
113	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n.getType()  ==  Token.STRING)  {  return  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	66	None	replace
114	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.STRING)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()!=  Token.STRING)  {  return  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	66	None	replace
115	[BUG]  [BUGGY]  result  =  lh.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  lh.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  lh.getType();//  Only  eval  if  they  are  the  same  type  }	  result    =    lh.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	71	None	replace
116	[BUG]  [BUGGY]  result  =  lh.getValue();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  lh.getValue();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  lh.getValue();//  Only  eval  if  they  are  the  same  type  }	  result    =    lh.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	71	None	replace
117	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.STRING)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	3	None	replace
118	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  result;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.STRING)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	3	None	replace
119	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.STRING)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	3	None	replace
120	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null  ||  right.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.STRING)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	3	None	replace
121	[BUG]  [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.STRING)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.STRING)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right  ==  null  ||  right.getType()  ==  Token.STRING)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.STRING)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	3	None	replace
122	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  left;  }  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  ||  right.getType()  ==  Token.STRING)  {  return  left;  }	  if(right!=    null    ||    right.getType()    ==    Token.STRING)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	3	None	replace
123	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op.getType());  [CE]  orphaned  default  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  op.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(right,  op.getType());	  result    =    compareToUndefined(left,    op.getType());    	non-compiled	[CE]  orphaned  default	29	None	replace
124	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getType());  [CE]  orphaned  default  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  right.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(right,  right.getType());	  result    =    compareToUndefined(left,    op.getType());    	non-compiled	[CE]  orphaned  default	29	None	replace
125	[BUG]  [BUGGY]  result  =  compareToString(right,  op.getType());  [CE]  orphaned  default  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToString(right,  op.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToString(right,  op.getType());	  result    =    compareToUndefined(left,    op.getType());    	non-compiled	[CE]  orphaned  default	29	None	replace
126	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right.getType());  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  right.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(n,  right.getType());	  result    =    compareToUndefined(left,    op.getType());    	non-compiled	[CE]  orphaned  default	29	None	replace
127	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left.getType());  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  left.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(n,  left.getType());	  result    =    compareToUndefined(left,    op.getType());    	non-compiled	[CE]  orphaned  default	29	None	replace
128	[BUG]  [BUGGY]  result  =!RIGHT.getString().equals(right.getString());  break;  [CE]  orphaned  default  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!RIGHT.getString().equals(right.getString());  break;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!RIGHT.getString().equals(right.getString());  break;	  result    =!right.getString().equals(right.getString());    break;    	non-compiled	[CE]  orphaned  default	37	None	replace
129	[BUG]  [BUGGY]  result  =!right.getString().equals(left.getString());  break;  [CE]  orphaned  default  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getString().equals(left.getString());  break;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(left.getString());  break;	  result    =!right.getString().equals(right.getString());    break;    	non-compiled	[CE]  orphaned  default	37	None	replace
130	[BUG]  [BUGGY]  if(right  ==  null)  {  return  right.getType();  }  [CE]  orphaned  default  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right  ==  null)  {  return  right.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right  ==  null)  {  return  right.getType();  }	  if(right!=    null)    {    return    n.getType();    }    	non-compiled	[CE]  orphaned  default	49	None	replace
131	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right);//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right);//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  right);//  Only  eval  if  they  are  the  same  type  }	  result    =    undefinedRight;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	15	None	replace
132	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(right,  undefinedLeft);//  Only  eval  if  they  are  the  same  type  }	  result    =    undefinedRight;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	15	None	replace
133	[BUG]  [BUGGY]  result  =  undefinedLeft;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  undefinedLeft;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  undefinedLeft;//  Only  eval  if  they  are  the  same  type  }	  result    =    undefinedRight;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	15	None	replace
134	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(right,  undefinedRight);//  Only  eval  if  they  are  the  same  type  }	  result    =    undefinedRight;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	15	None	replace
135	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op);//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  op);//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(right,  op);//  Only  eval  if  they  are  the  same  type  }	  result    =    undefinedRight;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	15	None	replace
136	[BUG]  [BUGGY]  result  =  undefinedRight.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  undefinedRight.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  undefinedRight.getType();//  Only  eval  if  they  are  the  same  type  }	  result    =    right.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	45	None	replace
137	[BUG]  [BUGGY]  result  =  lhType.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  lhType.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  lhType.getType();//  Only  eval  if  they  are  the  same  type  }	  result    =    right.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	45	None	replace
138	[BUG]  [BUGGY]  result  =  op.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  op.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  op.getType();//  Only  eval  if  they  are  the  same  type  }	  result    =    right.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	45	None	replace
139	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getValue());  [CE]  orphaned  default  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  right.getValue());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(right,  right.getValue());	  result    =    compareToUndefined(right,    left.getType());    	non-compiled	[CE]  orphaned  default	30	None	replace
140	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(left!=    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	62	None	replace
141	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(left!=    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	62	None	replace
142	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right.getType());  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  comparisonToUndefined(left,  right.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  comparisonToUndefined(left,  right.getType());	  result    =    compareToUndefined(left,    left.getType());    	non-compiled	[CE]  orphaned  default	33	None	replace
143	[BUG]  [BUGGY]  result  =!right.getString().equals(undefinedLeft.getString());  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getString().equals(undefinedLeft.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(undefinedLeft.getString());	  result    =!undefinedLeft.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  default	72	None	replace
144	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  left  =  right.getLastChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  right.getLastChild();	  Node    left    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  default	54	None	replace
145	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  n.getFirstChild();	  Node    left    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  default	54	None	replace
146	[BUG]  [BUGGY]  Node  left  =  right.getNext();  [CE]  orphaned  default  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  left  =  right.getNext();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  right.getNext();	  Node    left    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  default	54	None	replace
147	[BUG]  [BUGGY]  Node  left  =  right.removeFirstChild();  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  left  =  right.removeFirstChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  right.removeFirstChild();	  Node    left    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  default	54	None	replace
148	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  left  =  left.getFirstChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  left.getFirstChild();	  Node    left    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  default	54	None	replace
149	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  n.getLastChild();	  Node    left    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  default	54	None	replace
150	[BUG]  [BUGGY]  n  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  n  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	n  =  left.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  n    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	23	None	replace
151	[BUG]  [BUGGY]  n  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  n  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	n  =  left.getNext();//  Only  eval  if  they  are  the  same  type  }	  n    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	23	None	replace
152	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	5	None	replace
153	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  &&  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	5	None	replace
154	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  return  result;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	5	None	replace
155	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	5	None	replace
156	[BUG]  [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right  ==  null  ||  right.getType()  ==  Token.NAME)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	5	None	replace
157	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  return  left;  }  [CE]  orphaned  default  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  return  left;  }	  if(right!=    null    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	5	None	replace
158	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op);  [CE]  orphaned  default  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  op);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  op);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  orphaned  default	75	None	replace
159	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left);  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  left);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(right,  left);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  orphaned  default	75	None	replace
160	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right);  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(n,  right);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(n,  right);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  orphaned  default	75	None	replace
161	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedRight);  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedRight);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  right,  undefinedRight);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  orphaned  default	75	None	replace
162	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral);  [CE]  orphaned  default  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  rightLiteral);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  orphaned  default	75	None	replace
163	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [CE]  orphaned  default  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  undefinedRight);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  orphaned  default	75	None	replace
164	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  left  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  Node    left    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	22	None	replace
165	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  left  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    left    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	22	None	replace
166	[BUG]  [BUGGY]  Node  left  =  right.getNext();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  left  =  right.getNext();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  right.getNext();//  Only  eval  if  they  are  the  same  type  }	  Node    left    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	22	None	replace
167	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  [CE]  orphaned  default  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  left  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type	  Node    left    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	22	None	replace
168	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  left  =  n.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  n.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  Node    left    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	22	None	replace
169	[BUG]  [BUGGY]  Node  left  =  node.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  left  =  node.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  node.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    left    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	22	None	replace
170	[BUG]  [BUGGY]  n  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  n  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	n  =  right.getLastChild();//  Only  eval  if  they  are  the  same  type  }	  n    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	27	None	replace
171	[BUG]  [BUGGY]  n  =  right.getNext();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  n  =  right.getNext();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	n  =  right.getNext();//  Only  eval  if  they  are  the  same  type  }	  n    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	27	None	replace
172	[BUG]  [BUGGY]  n  =  right.getLastChild();  [CE]  orphaned  default  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  n  =  right.getLastChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	n  =  right.getLastChild();	  n    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	27	None	replace
173	[BUG]  [BUGGY]  n  =  n.getType();  [CE]  orphaned  default  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  n  =  n.getType();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	n  =  n.getType();	  if(n.getType()    ==    Token.STRING)    {    return    n.getType();    }    	non-compiled	[CE]  orphaned  default	70	None	replace
174	[BUG]  [BUGGY]  result  =!right.getType().equals(right.getString());  [CE]  orphaned  default  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getType().equals(right.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getType().equals(right.getString());	  result    =!right.getType().equals(right.getType());    	non-compiled	[CE]  orphaned  default	14	None	replace
175	[BUG]  [BUGGY]  result  =!right.getString().equals(right.getType());  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getString().equals(right.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(right.getType());	  result    =!right.getType().equals(right.getType());    	non-compiled	[CE]  orphaned  default	14	None	replace
176	[BUG]  [BUGGY]  result  =!right.getType().equals(left.getType());  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getType().equals(left.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getType().equals(left.getType());	  result    =!right.getType().equals(right.getType());    	non-compiled	[CE]  orphaned  default	14	None	replace
177	[BUG]  [BUGGY]  if(left!=  null  ||  right!=  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null  ||  right!=  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null  ||  right!=  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	1	None	replace
178	[BUG]  [BUGGY]  if(right!=  null)  {  return  left;  }  else  if(left.getType()  ==  Token.STRING)  {  result  =!left.getString().equals(right.getString());  }  [CE]  orphaned  default  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null)  {  return  left;  }  else  if(left.getType()  ==  Token.STRING)  {  result  =!left.getString().equals(right.getString());  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  left;  }  else  if(left.getType()  ==  Token.STRING)  {  result  =!left.getString().equals(right.getString());  }	  if(right!=    null)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	1	None	replace
179	[BUG]  [BUGGY]  result  =!right.getString().equals(undefinedRight.getString());  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getString().equals(undefinedRight.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(undefinedRight.getString());	  result    =!undefinedRight.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  default	36	None	replace
180	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	4	None	replace
181	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  result;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  result;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	4	None	replace
182	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	4	None	replace
183	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	4	None	replace
184	[BUG]  [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right  ==  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	4	None	replace
185	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  left;  }  [CE]  orphaned  default  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  left;  }	  if(right!=    null    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	4	None	replace
186	[BUG]  [BUGGY]  result  =  right.getString().toLowerCase();  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  right.getString().toLowerCase();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  right.getString().toLowerCase();	  result    =    n.getString().toLowerCase();    	non-compiled	[CE]  orphaned  default	12	None	replace
187	[BUG]  [BUGGY]  result  =  n.getString().toLowerCase()  +  1;  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  n.getString().toLowerCase()  +  1;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n.getString().toLowerCase()  +  1;	  result    =    n.getString().toLowerCase();    	non-compiled	[CE]  orphaned  default	12	None	replace
188	[BUG]  [BUGGY]  result  =  n.getString().toUpperCase();  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  n.getString().toUpperCase();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n.getString().toUpperCase();	  result    =    n.getString().toLowerCase();    	non-compiled	[CE]  orphaned  default	12	None	replace
189	[BUG]  [BUGGY]  eval  =  left.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  eval  =  left.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	eval  =  left.getType();//  Only  eval  if  they  are  the  same  type  }	  result    =    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  default	42	None	replace
190	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n.getType());  [CE]  orphaned  default  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  n.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(right,  n.getType());	  result    =    compareToUndefined(left,    n.getType());    	non-compiled	[CE]  orphaned  default	56	None	replace
191	[BUG]  [BUGGY]  ||(right!=  null  &&  right.getType()  ==  Token.STRING))  {  return  left;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  ||(right!=  null  &&  right.getType()  ==  Token.STRING))  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	||(right!=  null  &&  right.getType()  ==  Token.STRING))  {  return  left;  }	  if(right!=    null)    {    return    left;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
192	[BUG]  [BUGGY]  ||(right!=  null  &&  right.getType()  ==  Token.FUNCTION))  {  return  left;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  ||(right!=  null  &&  right.getType()  ==  Token.FUNCTION))  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	||(right!=  null  &&  right.getType()  ==  Token.FUNCTION))  {  return  left;  }	  if(right!=    null)    {    return    left;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
193	[BUG]  [BUGGY]  ||(right!=  null  &&  right.getType()  ==  Token.NAME))  {  return  left;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  ||(right!=  null  &&  right.getType()  ==  Token.NAME))  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	||(right!=  null  &&  right.getType()  ==  Token.NAME))  {  return  left;  }	  if(right!=    null)    {    return    left;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
194	[BUG]  [BUGGY]  ||(right!=  null  &&  right.getType()  ==  Token.STRING))  {  return  result;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  ||(right!=  null  &&  right.getType()  ==  Token.STRING))  {  return  result;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	||(right!=  null  &&  right.getType()  ==  Token.STRING))  {  return  result;  }	  if(right!=    null)    {    return    left;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
195	[BUG]  [BUGGY]  result  =!left.getString().equals(right.getString()  + ": ");  [CE]  orphaned  default  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!left.getString().equals(right.getString()  + ": ");  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!left.getString().equals(right.getString()  + ": ");	  result    =!right.getString().equals(right.getString()    +   ":   ");    	non-compiled	[CE]  orphaned  default	74	None	replace
196	[BUG]  [BUGGY]  result  =!right.getString().equals(right.getString()  + ".: ");  [CE]  orphaned  default  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getString().equals(right.getString()  + ".: ");  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(right.getString()  + ".: ");	  result    =!right.getString().equals(right.getString()    +   ":   ");    	non-compiled	[CE]  orphaned  default	74	None	replace
197	[BUG]  [BUGGY]  result  =!right.getString().equals(right.getString()  + ",  undefinedRight: ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getString().equals(right.getString()  + ",  undefinedRight: ");  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(right.getString()  + ",  undefinedRight: ");	  result    =!right.getString().equals(right.getString()    +   ":   ");    	non-compiled	[CE]  	74	None	replace
198	[BUG]  [BUGGY]  result  =!left.getString().equals(right.getString()  + ".: ");  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!left.getString().equals(right.getString()  + ".: ");  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!left.getString().equals(right.getString()  + ".: ");	  result    =!right.getString().equals(right.getString()    +   ":   ");    	non-compiled	[CE]  orphaned  default	74	None	replace
199	[BUG]  [BUGGY]  result  =!right.getString().equals(right.getString())+ ": ";  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getString().equals(right.getString())+ ": ";  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(right.getString())+ ": ";	  result    =!right.getString().equals(right.getString()    +   ":   ");    	non-compiled	[CE]  orphaned  default	74	None	replace
200	[BUG]  [BUGGY]  result  =!ln.getString().equals(right.getString());  [CE]  orphaned  default  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!ln.getString().equals(right.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!ln.getString().equals(right.getString());	  result    =    ln.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  default	21	None	replace
201	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getValue());  [CE]  orphaned  default  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  left.getValue());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(right,  left.getValue());	  result    =    compareToUndefined(left,    right.getValue());    	non-compiled	[CE]  orphaned  default	34	None	replace
202	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getValue(),  undefinedRight);  [CE]  orphaned  default  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right.getValue(),  undefinedRight);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  right.getValue(),  undefinedRight);	  result    =    compareToUndefined(left,    right.getValue());    	non-compiled	[CE]  orphaned  default	34	None	replace
203	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op.getValue());  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  op.getValue());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  op.getValue());	  result    =    compareToUndefined(left,    right.getValue());    	non-compiled	[CE]  orphaned  default	34	None	replace
204	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getValue());  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  left.getValue());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  left.getValue());	  result    =    compareToUndefined(left,    right.getValue());    	non-compiled	[CE]  orphaned  default	34	None	replace
205	[BUG]  [BUGGY]  result  =  left.getType();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  left.getType();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  left.getType();	  result    =    right.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	45	None	replace
206	[BUG]  [BUGGY]  if(left!=  null)  {  return  left;  }  else  if(right!=  null)  {  result  =  compareToUndefined(left,  right.getString());  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null)  {  return  left;  }  else  if(right!=  null)  {  result  =  compareToUndefined(left,  right.getString());  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null)  {  return  left;  }  else  if(right!=  null)  {  result  =  compareToUndefined(left,  right.getString());  }	  if(n!=    null)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	67	None	replace
207	[BUG]  [BUGGY]  result  =  left.getString().equals(right.getString());  break;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  left.getString().equals(right.getString());  break;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  left.getString().equals(right.getString());  break;	  result    =!left.getString().equals(right.getString());    break;    	non-compiled	[CE]  	35	None	replace
208	[BUG]  [BUGGY]  result  =!left.getString().equals(right.getString()  +  1);  break;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!left.getString().equals(right.getString()  +  1);  break;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!left.getString().equals(right.getString()  +  1);  break;	  result    =!left.getString().equals(right.getString());    break;    	non-compiled	[CE]  	35	None	replace
209	[BUG]  [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right  ==  null  ||  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	5	None	replace
210	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  return  n;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  return  n;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  return  n;  }	  if(right!=    null    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	5	None	replace
211	[BUG]  [BUGGY]  result  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  right.getFirstChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  right.getFirstChild();	  result    =    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	25	None	replace
212	[BUG]  [BUGGY]  result  =  lh.getString();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  lh.getString();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  lh.getString();	  result    =    lh.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	71	None	replace
213	[BUG]  [BUGGY]  result  =  url.getString().equals(right.getString());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  url.getString().equals(right.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  url.getString().equals(right.getString());	  result    =    n.getString().equals(right.getString());    	non-compiled	[CE]  orphaned  case	9	None	replace
214	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getType());//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right.getType());//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  right.getType());//  Only  eval  if  they  are  the  same  type  }	  result    =    undefinedRight;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	15	None	replace
215	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right);//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(right,  right);//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(right,  right);//  Only  eval  if  they  are  the  same  type  }	  result    =    undefinedRight;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	15	None	replace
216	[BUG]  [BUGGY]  result  =  n.getString().toLowerCase(right.getString());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  n.getString().toLowerCase(right.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n.getString().toLowerCase(right.getString());	  result    =    n.getString().toLowerCase();    	non-compiled	[CE]  orphaned  case	12	None	replace
217	[BUG]  [BUGGY]  result  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  left.getFirstChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  left.getFirstChild();	  result    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	26	None	replace
218	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getType(),  op);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right.getType(),  op);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  right.getType(),  op);	  result    =    compareToUndefined(left,    right.getType(),    undefinedRight);    	non-compiled	[CE]  orphaned  case	31	None	replace
219	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getType(),  n);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right.getType(),  n);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  right.getType(),  n);	  result    =    compareToUndefined(left,    right.getType(),    undefinedRight);    	non-compiled	[CE]  orphaned  case	31	None	replace
220	[BUG]  [BUGGY]  if(right  ==  null)  {  return  n;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right  ==  null)  {  return  n;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right  ==  null)  {  return  n;  }	  if(right!=    null)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
221	[BUG]  [BUGGY]  if(left!=  null)  {  return  n;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null)  {  return  n;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null)  {  return  n;  }	  if(right!=    null)    {    return    n;    }    	non-compiled	[CE]  	63	None	replace
222	[BUG]  [BUGGY]  parent!=  null)  {  return  n;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  parent!=  null)  {  return  n;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	parent!=  null)  {  return  n;  }	  if(right!=    null)    {    return    n;    }    	non-compiled	[CE]  not  a  statement	63	None	replace
223	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  right  =  left.getLastChild();	  Node    right    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	28	None	replace
224	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  right  =  left.getFirstChild();	  Node    right    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	28	None	replace
225	[BUG]  [BUGGY]  if(right  ==  null)  {  return  newNode;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right  ==  null)  {  return  newNode;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right  ==  null)  {  return  newNode;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    newNode;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	64	None	replace
226	[BUG]  [BUGGY]  if(right  ==  null)  {  return  newNode;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right  ==  null)  {  return  newNode;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right  ==  null)  {  return  newNode;  }	  if(right!=    null)    {    return    newNode;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	64	None	replace
227	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  result  =  left.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  result  =  left.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left.getType()  ==  Token.STRING)  {  result  =  left.getType();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	47	None	replace
228	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  n  =  left.getFirstChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	n  =  left.getFirstChild();	  n    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	27	None	replace
229	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	n  =  right.getFirstChild();	  n    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	27	None	replace
230	[BUG]  [BUGGY]  result  =  left.getString()  -  right.getString();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  left.getString()  -  right.getString();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  left.getString()  -  right.getString();	  result    =    left.getString();    	non-compiled	[CE]  	10	None	replace
231	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  left.getFirstChild();  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  left.getFirstChild();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()  ==  Token.STRING)  {  return  left.getFirstChild();  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  	65	None	replace
232	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  left);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  left);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  	75	None	replace
233	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n.getValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  n.getValue());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  n.getValue());	  result    =    compareToUndefined(left,    right.getValue());    	non-compiled	[CE]  	34	None	replace
234	[BUG]  [BUGGY]  if(right  ==  null)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right  ==  null)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right  ==  null)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	48	None	replace
235	[BUG]  [BUGGY]  if(left!=  null)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	48	None	replace
236	[BUG]  [BUGGY]  Result  =!left.getString().equals(right.getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Result  =!left.getString().equals(right.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Result  =!left.getString().equals(right.getString());	  result    =!left.getString().equals(right.getString()    +    1);    	non-compiled	[CE]  	59	None	replace
237	[BUG]  [BUGGY]  if(left  ==  null)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left  ==  null)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left  ==  null)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right    ==    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	61	None	replace
238	[BUG]  [BUGGY]  if(right  ==  null)  {  return  result;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right  ==  null)  {  return  result;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right  ==  null)  {  return  result;  }	  if(right    ==    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	61	None	replace
239	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  n  =  left.getLastChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	n  =  left.getLastChild();	  n    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	23	None	replace
240	[BUG]  [BUGGY]  Node  left  =  right.replaceChild(n,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  left  =  right.replaceChild(n,  n);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  right.replaceChild(n,  n);	  Node    left    =    right.getFirstChild();    	non-compiled	[CE]  	54	None	replace
241	[BUG]  [BUGGY]  parent!=  null)  {  return  parent.getType();  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  parent!=  null)  {  return  parent.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	parent!=  null)  {  return  parent.getType();  }	  if(right!=    null)    {    return    n.getType();    }    	non-compiled	[CE]  not  a  statement	49	None	replace
242	[BUG]  [BUGGY]  parent  ==  null)  {  return  parent.getType();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  parent  ==  null)  {  return  parent.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	parent  ==  null)  {  return  parent.getType();  }	  if(right!=    null)    {    return    n.getType();    }    	non-compiled	[CE]  not  a  statement	49	None	replace
243	[BUG]  [BUGGY]  if(left!=  null)  {  return  right;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null)  {  return  right;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null)  {  return  right;  }	  if(right!=    null)    {    return    left;    }    	non-compiled	[CE]  	2	None	replace
244	[BUG]  [BUGGY]  parent!=  null)  {  return  left;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  parent!=  null)  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	parent!=  null)  {  return  left;  }	  if(right!=    null)    {    return    left;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
245	[BUG]  [BUGGY]  parent!=  null)  {  return  parent;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  parent!=  null)  {  return  parent;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	parent!=  null)  {  return  parent;  }	  if(right!=    null)    {    return    left;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
246	[BUG]  [BUGGY]  result  =  STRING.getString();//  Only  eval  if  they  are  the  same  type  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  STRING.getString();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  STRING.getString();//  Only  eval  if  they  are  the  same  type  }	  result    =    rn.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	43	None	replace
247	[BUG]  [BUGGY]  if(left!=  null)  {  return  right;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null)  {  return  right;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null)  {  return  right;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	1	None	replace
248	[BUG]  [BUGGY]  if(left!=  null)  {  if(right!=  null)  {  return  left;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null)  {  if(right!=  null)  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null)  {  if(right!=  null)  {  return  left;  }	  if(right!=    null)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	1	None	replace
249	[BUG]  [BUGGY]  if(left!=  null)  {  if(right!=  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null)  {  if(right!=  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null)  {  if(right!=  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	1	None	replace
250	[BUG]  [BUGGY]  if(right!=  null)  {  return  left;  }  else  if(right.getType()  ==  Token.STRING)  {  result  =!left.getString().equals(right.getString());  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null)  {  return  left;  }  else  if(right.getType()  ==  Token.STRING)  {  result  =!left.getString().equals(right.getString());  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  left;  }  else  if(right.getType()  ==  Token.STRING)  {  result  =!left.getString().equals(right.getString());  }	  if(right!=    null)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	1	None	replace
251	[BUG]  [BUGGY]  n  =  right.getType();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  n  =  right.getType();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	n  =  right.getType();	  if(right!=    null    &&    right.getType()    ==    Token.STRING)    {    return    n;    }    	non-compiled	[CE]  	68	None	replace
252	[BUG]  [BUGGY]  result  =  n  ==  null  &&  right.getType()  ==  Token.STRING)  {  return  n;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  n  ==  null  &&  right.getType()  ==  Token.STRING)  {  return  n;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n  ==  null  &&  right.getType()  ==  Token.STRING)  {  return  n;  }	  if(right!=    null    &&    right.getType()    ==    Token.STRING)    {    return    n;    }    	non-compiled	[CE]  	68	None	replace
253	[BUG]  [BUGGY]  result  =  n!=  null  &&  right.getType()  ==  Token.STRING)  {  return  newNode;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  n!=  null  &&  right.getType()  ==  Token.STRING)  {  return  newNode;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n!=  null  &&  right.getType()  ==  Token.STRING)  {  return  newNode;  }	  if(right!=    null    &&    right.getType()    ==    Token.STRING)    {    return    n;    }    	non-compiled	[CE]  	68	None	replace
254	[BUG]  [BUGGY]  result  =!right.getType().equals(right.getValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getType().equals(right.getValue());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getType().equals(right.getValue());	  result    =!right.getType().equals(right.getType());    	non-compiled	[CE]  	14	None	replace
255	[BUG]  [BUGGY]  result  =  left.getValue();//  Only  eval  if  they  are  the  same  type  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  left.getValue();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  left.getValue();//  Only  eval  if  they  are  the  same  type  }	  result    =    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	42	None	replace
256	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  n.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  n.getString());	  result    =    compareToUndefined(left,    right.getString());    	non-compiled	[CE]  	32	None	replace
257	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getString(),  op);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right.getString(),  op);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  right.getString(),  op);	  result    =    compareToUndefined(left,    right.getString());    	non-compiled	[CE]  	32	None	replace
258	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  result  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.STRING)  {  result  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()  ==  Token.STRING)  {  result  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	66	None	replace
259	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  left.getFirstChild();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  left.getFirstChild();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left.getType()  ==  Token.STRING)  {  return  left.getFirstChild();  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	66	None	replace
260	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  return  n;  }	  if(right!=    null    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	4	None	replace
261	[BUG]  [BUGGY]  return  right.getType()  -  result;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  right.getType()  -  result;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  right.getType()  -  result;	  return    right.getType();    	non-compiled	[CE]  	50	None	replace
262	[BUG]  [BUGGY]  result  =  compareToString(right,  n.getType());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToString(right,  n.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToString(right,  n.getType());	  result    =    compareToUndefined(left,    n.getType());    	non-compiled	[CE]  	56	None	replace
263	[BUG]  [BUGGY]  Node  left  =  right.removeFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  left  =  right.removeFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  right.removeFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    left    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	22	None	replace
264	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right.getString());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  comparisonToUndefined(left,  right.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  comparisonToUndefined(left,  right.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  	73	None	replace
265	[BUG]  [BUGGY]  if(right!=  right.getType())result  =  compareToUndefined(left,  right.getString());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  right.getType())result  =  compareToUndefined(left,  right.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  right.getType())result  =  compareToUndefined(left,  right.getString());	  return    right.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	44	None	replace
266	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  return  right.getType();  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  return  right.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n.getType()  ==  Token.STRING)  {  return  right.getType();  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getType();    }    	non-compiled	[CE]  	69	None	replace
267	[BUG]  [BUGGY]  ||  right.getType()  ==  Token.STRING)  {  return  n.getType();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  ||  right.getType()  ==  Token.STRING)  {  return  n.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	||  right.getType()  ==  Token.STRING)  {  return  n.getType();  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getType();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
268	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING)  {  return  right.getType();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.STRING)  {  return  right.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()!=  Token.STRING)  {  return  right.getType();  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getType();    }    	non-compiled	[CE]  	69	None	replace
269	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left.getType()  ==  Token.STRING)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	66	None	replace
270	[BUG]  [BUGGY]  if(right.getType()!=  Token.STRING)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right.getType()!=  Token.STRING)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()!=  Token.STRING)  {  return  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	66	None	replace
271	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  left.getFirstChild();  }  else  if(token.equals(right.getString()))  {  result  =  compareToUndefined(left,  right.getString());  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  left.getFirstChild();  }  else  if(token.equals(right.getString()))  {  result  =  compareToUndefined(left,  right.getString());  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()  ==  Token.STRING)  {  return  left.getFirstChild();  }  else  if(token.equals(right.getString()))  {  result  =  compareToUndefined(left,  right.getString());  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	66	None	replace
272	[BUG]  [BUGGY]  if(n!=  null)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n!=  null)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n!=  null)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	48	None	replace
273	[BUG]  [BUGGY]  if(n!=  null)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n!=  null)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n!=  null)  {  return  right.getType();//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	48	None	replace
274	[BUG]  [BUGGY]  if(n!=  null)  {  return  left.getType();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n!=  null)  {  return  left.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n!=  null)  {  return  left.getType();  }	  if(right!=    null)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	48	None	replace
275	[BUG]  [BUGGY]  if(right!=  null)result  =  compareToUndefined(left,  right.getType());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null)result  =  compareToUndefined(left,  right.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)result  =  compareToUndefined(left,  right.getType());	  return    right;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	19	None	replace
276	[BUG]  [BUGGY]  return  n.getString();//  Only  eval  if  they  are  the  same  type  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  n.getString();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  n.getString();//  Only  eval  if  they  are  the  same  type  }	  return    left.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	18	None	replace
277	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  left.getString();  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  left.getString();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()  ==  Token.STRING)  {  return  left.getString();  }	  return    left.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	18	None	replace
278	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  left.getString();  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  left.getString();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left.getType()  ==  Token.STRING)  {  return  left.getString();  }	  return    left.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	18	None	replace
279	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.STRING)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	3	None	replace
280	[BUG]  [BUGGY]  Node  left  =  right.replaceChild(n,  newNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  left  =  right.replaceChild(n,  newNode);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  right.replaceChild(n,  newNode);	  Node    left    =    right.getFirstChild();    	non-compiled	[CE]  	54	None	replace
281	[BUG]  [BUGGY]  if(left!=  null)  {  return  node;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null)  {  return  node;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null)  {  return  node;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	1	None	replace
282	[BUG]  [BUGGY]  if(left!=  null)  {  return  left;  }  else  eval  if  they  are  the  same  type  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null)  {  return  left;  }  else  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null)  {  return  left;  }  else  eval  if  they  are  the  same  type  }	  if(right!=    null)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  not  a  statement	1	None	replace
283	[BUG]  [BUGGY]  result  =!result.getString().equals(right.getString()  +  1);  break;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!result.getString().equals(right.getString()  +  1);  break;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!result.getString().equals(right.getString()  +  1);  break;	  result    =!result.getString().equals(right.getString());    break;    	non-compiled	[CE]  	55	None	replace
284	[BUG]  [BUGGY]  result  =  n.getFirstChild().getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  n.getFirstChild().getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  n.getFirstChild().getType();//  Only  eval  if  they  are  the  same  type  }	  result    =    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	40	None	replace
285	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  result  =  n.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  result  =  n.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n.getType()  ==  Token.STRING)  {  result  =  n.getType();//  Only  eval  if  they  are  the  same  type  }	  result    =    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	40	None	replace
286	[BUG]  [BUGGY]  result  =  left.getFirstChild().getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  left.getFirstChild().getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  left.getFirstChild().getType();//  Only  eval  if  they  are  the  same  type  }	  result    =    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	42	None	replace
287	[BUG]  [BUGGY]  result  =  left.getName();//  Only  eval  if  they  are  the  same  type  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  left.getName();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  left.getName();//  Only  eval  if  they  are  the  same  type  }	  result    =    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	42	None	replace
288	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getValue(),  op);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  compareToUndefined(left,  right.getValue(),  op);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  compareToUndefined(left,  right.getValue(),  op);	  result    =    compareToUndefined(left,    right.getValue());    	non-compiled	[CE]  	34	None	replace
289	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  return  n;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  return  n;  }	  if(right!=    null    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	4	None	replace
290	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  return  n;  }  else  if(!result.equals(right.getString()))  {  result  =  compareToUndefined(left,  right.getString());  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  return  n;  }  else  if(!result.equals(right.getString()))  {  result  =  compareToUndefined(left,  right.getString());  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  return  n;  }  else  if(!result.equals(right.getString()))  {  result  =  compareToUndefined(left,  right.getString());  }	  if(right!=    null    ||    right.getType()    ==    Token.FUNCTION)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	4	None	replace
291	[BUG]  [BUGGY]  result  =!right.getString().equals(right.getString()  +  1);  break;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getString().equals(right.getString()  +  1);  break;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(right.getString()  +  1);  break;	  result    =!right.getString().equals(right.getString());    break;    	non-compiled	[CE]  	37	None	replace
292	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  result;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  result;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  result;  }	  if(right!=    null    &&    right.getType()    ==    Token.STRING)    {    return    n;    }    	non-compiled	[CE]  	68	None	replace
293	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  newNode;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  newNode;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  newNode;  }	  if(right!=    null    &&    right.getType()    ==    Token.STRING)    {    return    n;    }    	non-compiled	[CE]  	68	None	replace
294	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  left;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  left;  }	  if(right!=    null    &&    right.getType()    ==    Token.STRING)    {    return    n;    }    	non-compiled	[CE]  	68	None	replace
295	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  this;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  this;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  return  this;  }	  if(right!=    null    &&    right.getType()    ==    Token.STRING)    {    return    n;    }    	non-compiled	[CE]  	68	None	replace
296	[BUG]  [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.STRING)  {  return  n;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.STRING)  {  return  n;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  &&  left.getType()  ==  Token.STRING)  {  return  n;  }	  if(right!=    null    &&    right.getType()    ==    Token.STRING)    {    return    n;    }    	non-compiled	[CE]  	68	None	replace
297	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  right  =  left.removeFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  right  =  left.removeFirstChild();//  Only  eval  if  they  are  the  same  type  }	  Node    right    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	28	None	replace
298	[BUG]  [BUGGY]  if(n!=  null  &&  left.getType()  ==  Token.STRING)  {  return  left;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n!=  null  &&  left.getType()  ==  Token.STRING)  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n!=  null  &&  left.getType()  ==  Token.STRING)  {  return  left;  }	  if(n!=    null)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	67	None	replace
299	[BUG]  [BUGGY]  if(n!=  null  &&  left.getType()  ==  Token.NAME)  {  return  left;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n!=  null  &&  left.getType()  ==  Token.NAME)  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n!=  null  &&  left.getType()  ==  Token.NAME)  {  return  left;  }	  if(n!=    null)    {    return    left;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	67	None	replace
300	[BUG]  [BUGGY]  result  =!right.getString().equals(right.getString());//  Only  eval  if  they  are  the  same  type  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getString().equals(right.getString());//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(right.getString());//  Only  eval  if  they  are  the  same  type  }	  result    =    right.getString();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	39	None	replace
301	[BUG]  [BUGGY]  if(n!=  null)  {  return  right.getType();  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n!=  null)  {  return  right.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n!=  null)  {  return  right.getType();  }	  if(right!=    null)    {    return    n.getType();    }    	non-compiled	[CE]  	49	None	replace
302	[BUG]  [BUGGY]  aughtExceptionHandler.when(n.getType()  }  )  {  result  =!left.getString().equals(right.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  aughtExceptionHandler.when(n.getType()  }  )  {  result  =!left.getString().equals(right.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	aughtExceptionHandler.when(n.getType()  }  )  {  result  =!left.getString().equals(right.getString());	  if(right!=    null)    {    return    n.getType();    }    	non-compiled	[CE]  	49	None	replace
303	[BUG]  [BUGGY]  if(left!=  null)  {  return  right.getType();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null)  {  return  right.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null)  {  return  right.getType();  }	  if(right!=    null)    {    return    n.getType();    }    	non-compiled	[CE]  	49	None	replace
304	[BUG]  [BUGGY]  result  =!result.getString().equals(right.getType());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!result.getString().equals(right.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!result.getString().equals(right.getType());	  result    =!result.getType().equals(right.getType());    	non-compiled	[CE]  	16	None	replace
305	[BUG]  [BUGGY]  result  =!lh.getType().equals(right.getType());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!lh.getType().equals(right.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!lh.getType().equals(right.getType());	  result    =!result.getType().equals(right.getType());    	non-compiled	[CE]  	16	None	replace
306	[BUG]  [BUGGY]  result  =!result.getType().equals(right.getValue());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!result.getType().equals(right.getValue());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!result.getType().equals(right.getValue());	  result    =!result.getType().equals(right.getType());    	non-compiled	[CE]  	16	None	replace
307	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  result  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  result  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n.getType()  ==  Token.STRING)  {  result  =  n.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  result    =    n.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	25	None	replace
308	[BUG]  [BUGGY]  result  =!right.getString().equals(right.getString()  + ". ");  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getString().equals(right.getString()  + ". ");  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(right.getString()  + ". ");	  result    =!right.getString().equals(right.getString()    +   ":   ");    	non-compiled	[CE]  	74	None	replace
309	[BUG]  [BUGGY]  result  =!left.getString().equals(RIGHT.getString());  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!left.getString().equals(RIGHT.getString());  break;  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!left.getString().equals(RIGHT.getString());  break;	  result    =!left.getString().equals(right.getString());    break;    	non-compiled	[CE]  orphaned  case	35	None	replace
310	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  left.getType();  }  else  if(Token.NUMBER!=  right.getType())  {  result  =  compareToUndefined(left,  right.getString());  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  left.getType();  }  else  if(Token.NUMBER!=  right.getType())  {  result  =  compareToUndefined(left,  right.getString());  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left.getType()  ==  Token.STRING)  {  return  left.getType();  }  else  if(Token.NUMBER!=  right.getType())  {  result  =  compareToUndefined(left,  right.getString());  }	  if(right.getType()    ==    Token.STRING)    {    return    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	47	None	replace
311	[BUG]  [BUGGY]  eval  if(left.getType()  ==  Token.STRING)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  eval  if(left.getType()  ==  Token.STRING)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	eval  if(left.getType()  ==  Token.STRING)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  not  a  statement	47	None	replace
312	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  left.getType();  }  else  if(token.equals(right.getString()))  {  result  =  compareToUndefined(left,  right.getString());  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  left.getType();  }  else  if(token.equals(right.getString()))  {  result  =  compareToUndefined(left,  right.getString());  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left.getType()  ==  Token.STRING)  {  return  left.getType();  }  else  if(token.equals(right.getString()))  {  result  =  compareToUndefined(left,  right.getString());  }	  if(right.getType()    ==    Token.STRING)    {    return    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	47	None	replace
313	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  right.getType();  }  else  if(Token.NUMBER!=  right.getType())  {  result  =  compareToUndefined(left,  right.getString());  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  right.getType();  }  else  if(Token.NUMBER!=  right.getType())  {  result  =  compareToUndefined(left,  right.getString());  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left.getType()  ==  Token.STRING)  {  return  right.getType();  }  else  if(Token.NUMBER!=  right.getType())  {  result  =  compareToUndefined(left,  right.getString());  }	  if(right.getType()    ==    Token.STRING)    {    return    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	47	None	replace
314	[BUG]  [BUGGY]  Node  n  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  n  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  n  =  right.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  n    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	27	None	replace
315	[BUG]  [BUGGY]  if(left!=  right.getType())  {  return  left.getType();  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  right.getType())  {  return  left.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  right.getType())  {  return  left.getType();  }	  return    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	17	None	replace
316	[BUG]  [BUGGY]  if(left!=  right.getType())result  =  compareToUndefined(left,  right.getString());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  right.getType())result  =  compareToUndefined(left,  right.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  right.getType())result  =  compareToUndefined(left,  right.getString());	  return    left.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	17	None	replace
317	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  return  left.getType();  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  return  left.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n.getType()  ==  Token.STRING)  {  return  left.getType();  }	  if(n.getType()    ==    Token.STRING)    {    return    n.getType();    }    	non-compiled	[CE]  orphaned  case	70	None	replace
318	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING)  {  return  n.getType();  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n.getType()!=  Token.STRING)  {  return  n.getType();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n.getType()!=  Token.STRING)  {  return  n.getType();  }	  if(n.getType()    ==    Token.STRING)    {    return    n.getType();    }    	non-compiled	[CE]  orphaned  case	70	None	replace
319	[BUG]  [BUGGY]  result  =  right.getNext();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =  right.getNext();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =  right.getNext();//  Only  eval  if  they  are  the  same  type  }	  result    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	26	None	replace
320	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();//  Only  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  left  =  right.getFirstChild();//  Only  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  left  =  right.getFirstChild();//  Only  if  they  are  the  same  type  }	  Node    left    =    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	22	None	replace
321	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME)  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME)  {  return  n;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null  &&  right.getType()  ==  Token.NAME)  {  return  n;  }	  if(right!=    null    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	5	None	replace
322	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null  &&  right.getType()  ==  Token.NAME)  {  return  n;//  Only  eval  if  they  are  the  same  type  }	  if(right!=    null    ||    right.getType()    ==    Token.NAME)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	5	None	replace
323	[BUG]  [BUGGY]  result  =!right.getName().equals(right.getType());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getName().equals(right.getType());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getName().equals(right.getType());	  result    =!right.getType().equals(right.getType());    	non-compiled	[CE]  orphaned  case	14	None	replace
324	[BUG]  [BUGGY]  result  =!right.getType().equals(right.getName());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getType().equals(right.getName());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getType().equals(right.getName());	  result    =!right.getType().equals(right.getType());    	non-compiled	[CE]  orphaned  case	14	None	replace
325	[BUG]  [BUGGY]  if(n  ==  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n  ==  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n  ==  null)  {  return  left;//  Only  eval  if  they  are  the  same  type  }	  if(right    ==    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	61	None	replace
326	[BUG]  [BUGGY]  if(n  ==  null)  {  return  left;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n  ==  null)  {  return  left;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n  ==  null)  {  return  left;  }	  if(right    ==    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	61	None	replace
327	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null  &&  right.getType()  ==  Token.STRING)  {  return  n;  }	  if(left!=    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	62	None	replace
328	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.STRING)  {  return  n;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.STRING)  {  return  n;  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left!=  null  &&  left.getType()  ==  Token.STRING)  {  return  n;  }	  if(left!=    null)    {    return    n;//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	62	None	replace
329	[BUG]  [BUGGY]  result  =!undefinedLeft.getString().equals(right.getString()  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!undefinedLeft.getString().equals(right.getString()  +  1);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!undefinedLeft.getString().equals(right.getString()  +  1);	  result    =!undefinedLeft.getString().equals(right.getString());    	non-compiled	[CE]  	72	None	replace
330	[BUG]  [BUGGY]  result  =!right.getString().equals(right.getString())&&!left.getString().equals(right.getString());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getString().equals(right.getString())&&!left.getString().equals(right.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(right.getString())&&!left.getString().equals(right.getString());	  result    =!right.getString().equals(RIGHT.getString());    	non-compiled	[CE]  	57	None	replace
331	[BUG]  [BUGGY]  result  =!right.getString().equals(right.getString())&&!NodeUtil.isFunctionDeclaration(n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!right.getString().equals(right.getString())&&!NodeUtil.isFunctionDeclaration(n);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!right.getString().equals(right.getString())&&!NodeUtil.isFunctionDeclaration(n);	  result    =!right.getString().equals(RIGHT.getString());    	non-compiled	[CE]  	57	None	replace
332	[BUG]  [BUGGY]  result  =!lh.getString().equals(right.getString());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!lh.getString().equals(right.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!lh.getString().equals(right.getString());	  result    =!result.getString().equals(right.getString());    	non-compiled	[CE]  	38	None	replace
333	[BUG]  [BUGGY]  result  =!result.getString().equals(right.getString()  +  1);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!result.getString().equals(right.getString()  +  1);  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!result.getString().equals(right.getString()  +  1);	  result    =!result.getString().equals(right.getString());    	non-compiled	[CE]  	38	None	replace
334	[BUG]  [BUGGY]  result  =!n.getString().equals(right.getString());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!n.getString().equals(right.getString());  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!n.getString().equals(right.getString());	  result    =!result.getString().equals(right.getString());    	non-compiled	[CE]  	38	None	replace
335	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  Node  n  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	Node  n  =  left.getFirstChild();//  Only  eval  if  they  are  the  same  type  }	  n    =    left.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	23	None	replace
336	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n.getType()  ==  Token.STRING)  {  return  left.getType();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	46	None	replace
337	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  n.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  n.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left.getType()  ==  Token.STRING)  {  return  n.getType();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	46	None	replace
338	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NAME)  {  return  n.getType();//  Only  eval  if  they  are  the  same  type  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NAME)  {  return  n.getType();//  Only  eval  if  they  are  the  same  type  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NAME)  {  return  n.getType();//  Only  eval  if  they  are  the  same  type  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  orphaned  case	46	None	replace
339	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  left.getType();  }  else  if(Token.NUMBER!=  right.getType())  {  result  =  compareToUndefined(left,  right.getString());  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  left.getType();  }  else  if(Token.NUMBER!=  right.getType())  {  result  =  compareToUndefined(left,  right.getString());  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()  ==  Token.STRING)  {  return  left.getType();  }  else  if(Token.NUMBER!=  right.getType())  {  result  =  compareToUndefined(left,  right.getString());  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getType();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	46	None	replace
340	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  return  right.getFirstChild();  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  return  right.getFirstChild();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(n.getType()  ==  Token.STRING)  {  return  right.getFirstChild();  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  	65	None	replace
341	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  n.getFirstChild();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  return  n.getFirstChild();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(left.getType()  ==  Token.STRING)  {  return  n.getFirstChild();  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  	65	None	replace
342	[BUG]  [BUGGY]  n  =  n.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  n  =  n.getFirstChild();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	n  =  n.getFirstChild();	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  	65	None	replace
343	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.STRING)  {  return  n.getFirstChild();  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.STRING)  {  return  n.getFirstChild();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.STRING)  {  return  n.getFirstChild();  }	  if(right.getType()    ==    Token.STRING)    {    return    n.getFirstChild();    }    	non-compiled	[CE]  	65	None	replace
344	[BUG]  [BUGGY]  aughtExceptionHandler.when(n,  undefinedRight)  {  result  =!left.getString().equals(right.getString());  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  aughtExceptionHandler.when(n,  undefinedRight)  {  result  =!left.getString().equals(right.getString());  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	aughtExceptionHandler.when(n,  undefinedRight)  {  result  =!left.getString().equals(right.getString());  }	  if(right!=    null)    {    return    left;    }    else    if(left.getType()    ==    Token.STRING)    {    result    =!right.getString().equals(right.getString());    }    	non-compiled	[CE]  	6	None	replace
345	[BUG]  [BUGGY]  aughtExceptionHandler.when(n.getType()  ==  Token.STRING)  {  result  =!left.getString().equals(right.getString());  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  aughtExceptionHandler.when(n.getType()  ==  Token.STRING)  {  result  =!left.getString().equals(right.getString());  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	aughtExceptionHandler.when(n.getType()  ==  Token.STRING)  {  result  =!left.getString().equals(right.getString());  }	  if(right!=    null)    {    return    left;    }    else    if(left.getType()    ==    Token.STRING)    {    result    =!right.getString().equals(right.getString());    }    	non-compiled	[CE]  	6	None	replace
346	[BUG]  [BUGGY]  aughtExceptionHandler.when(n.getType()  ==  Token.STRING)  {  result  =!right.getString().equals(right.getString());  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  aughtExceptionHandler.when(n.getType()  ==  Token.STRING)  {  result  =!right.getString().equals(right.getString());  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	aughtExceptionHandler.when(n.getType()  ==  Token.STRING)  {  result  =!right.getString().equals(right.getString());  }	  if(right!=    null)    {    return    left;    }    else    if(left.getType()    ==    Token.STRING)    {    result    =!right.getString().equals(right.getString());    }    	non-compiled	[CE]  	6	None	replace
347	[BUG]  [BUGGY]  aughtExceptionHandler.when(n,  undefinedRight)  {  result  =!right.getString().equals(right.getString());  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  aughtExceptionHandler.when(n,  undefinedRight)  {  result  =!right.getString().equals(right.getString());  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	aughtExceptionHandler.when(n,  undefinedRight)  {  result  =!right.getString().equals(right.getString());  }	  if(right!=    null)    {    return    left;    }    else    if(left.getType()    ==    Token.STRING)    {    result    =!right.getString().equals(right.getString());    }    	non-compiled	[CE]  	6	None	replace
348	[BUG]  [BUGGY]  aughtExceptionHandler.when(n.getType()  ==  Token.GETELEM)  {  result  =!left.getString().equals(right.getString());  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  aughtExceptionHandler.when(n.getType()  ==  Token.GETELEM)  {  result  =!left.getString().equals(right.getString());  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	aughtExceptionHandler.when(n.getType()  ==  Token.GETELEM)  {  result  =!left.getString().equals(right.getString());  }	  if(right!=    null)    {    return    left;    }    else    if(left.getType()    ==    Token.STRING)    {    result    =!right.getString().equals(right.getString());    }    	non-compiled	[CE]  	6	None	replace
349	[BUG]  [BUGGY]  if(right!=  null)  {  return  left.getString();  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null)  {  return  left.getString();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  left.getString();  }	  if(right!=    null)    {    return    left;    }    	non-compiled	[CE]  	2	None	replace
350	[BUG]  [BUGGY]  if(right!=  null)  {  return  left.getFirstChild();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null)  {  return  left.getFirstChild();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  left.getFirstChild();  }	  if(right!=    null)    {    return    left;    }    	non-compiled	[CE]  	2	None	replace
351	[BUG]  [BUGGY]  return  n.getString();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  n.getString();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  n.getString();	  return    right.getType();    	non-compiled	[CE]  	50	None	replace
352	[BUG]  [BUGGY]  return  result.getValue();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  result.getValue();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  result.getValue();	  return    right.getType();    	non-compiled	[CE]  	50	None	replace
353	[BUG]  [BUGGY]  return  right.getString();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  return  right.getString();  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	return  right.getString();	  return    right.getType();    	non-compiled	[CE]  	50	None	replace
354	[BUG]  [BUGGY]  result  =!center.getString().equals(right.getString()  + ": ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  result  =!center.getString().equals(right.getString()  + ": ");  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	result  =!center.getString().equals(right.getString()  + ": ");	  result    =!center.getString().equals(right.getString());    	non-compiled	[CE]  	76	None	replace
355	[BUG]  [BUGGY]  if(right!=  null)  {  return  right.getFirstChild();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right!=  null)  {  return  right.getFirstChild();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right!=  null)  {  return  right.getFirstChild();  }	  return    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	24	None	replace
356	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  right.getFirstChild();  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  break;  case  Token.STRING:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (Token.STRING  !=  right.getType())  {      [BUGGY]  if(right.getType()  ==  Token.STRING)  {  return  right.getFirstChild();  }  [BUGGY]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  left.getString().equals(right.getString());  break;  case  Token.SHNE:  case  Token.NE:  result  =  !left.getString().equals(right.getString());  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	990	991	3	replace	if(right.getType()  ==  Token.STRING)  {  return  right.getFirstChild();  }	  return    right.getFirstChild();//    Only    eval    if    they    are    the    same    type    }    	non-compiled	[CE]  	24	None	replace
