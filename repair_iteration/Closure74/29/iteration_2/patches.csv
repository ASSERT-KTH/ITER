bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  left);  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(undefinedLeft,  left);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(undefinedLeft,  left);  break;	  result    =    compareToUndefined(right,    left);    break;    	non-compiled	[CE]  orphaned  case	32	None	replace
2	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(n,  left);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(n,  left);  break;	  result    =    compareToUndefined(right,    left);    break;    	non-compiled	[CE]  orphaned  case	32	None	replace
3	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  leftLiteral);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(right,  leftLiteral);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(right,  leftLiteral);  break;	  result    =    compareToUndefined(right,    left);    break;    	non-compiled	[CE]  orphaned  case	32	None	replace
4	[BUG]  [BUGGY]  Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(right,    op);    break;    }    	non-compiled	[CE]  orphaned  case	22	None	replace
5	[BUG]  [BUGGY]  Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;	  if(undefinedLeft)    {    result    =    compareToUndefined(right,    op);    break;    }    	non-compiled	[CE]  orphaned  case	22	None	replace
6	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft  -  1);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(right,  undefinedLeft  -  1);	  result    =    compareToUndefined(left,    undefinedLeft    -    1);    	non-compiled	[CE]  orphaned  case	36	None	replace
7	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op  -  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  op  -  1);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  op  -  1);	  result    =    compareToUndefined(left,    undefinedLeft    -    1);    	non-compiled	[CE]  orphaned  case	36	None	replace
8	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft  -  2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft  -  2);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  undefinedLeft  -  2);	  result    =    compareToUndefined(left,    undefinedLeft    -    1);    	non-compiled	[CE]  orphaned  case	36	None	replace
9	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft  +  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft  +  1);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  undefinedLeft  +  1);	  result    =    compareToUndefined(left,    undefinedLeft    -    1);    	non-compiled	[CE]  orphaned  case	36	None	replace
10	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  left  -  1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(undefinedLeft,  left  -  1);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(undefinedLeft,  left  -  1);	  result    =    compareToUndefined(left,    undefinedLeft    -    1);    	non-compiled	[CE]  orphaned  case	36	None	replace
11	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight  -  1);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight  -  1);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  undefinedRight  -  1);	  result    =    compareToUndefined(left,    undefinedLeft    -    1);    	non-compiled	[CE]  orphaned  case	36	None	replace
12	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  n);  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(undefinedLeft,  n);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(undefinedLeft,  n);  break;	  result    =    compareToUndefined(left,    n);    break;    	non-compiled	[CE]  orphaned  case	40	None	replace
13	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  n,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  n,  undefinedLeft);  break;	  result    =    compareToUndefined(left,    n);    break;    	non-compiled	[CE]  orphaned  case	40	None	replace
14	[BUG]  [BUGGY]  result  =  compareToLocal(left,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToLocal(left,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToLocal(left,  undefinedLeft);  break;	  result    =    compareToLocal(left,    op);    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
15	[BUG]  [BUGGY]  result  =  compareToLocal(right,  op);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToLocal(right,  op);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToLocal(right,  op);  break;	  result    =    compareToLocal(left,    op);    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
16	[BUG]  [BUGGY]  result  =  compareToLocal(rightLiteral,  op);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToLocal(rightLiteral,  op);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToLocal(rightLiteral,  op);  break;	  result    =    compareToLocal(left,    op);    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
17	[BUG]  [BUGGY]  result  =  compareToUpperBoolean(left,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUpperBoolean(left,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUpperBoolean(left,  undefinedLeft);  break;	  result    =    compareToLocal(left,    op);    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
18	[BUG]  [BUGGY]  result  =  compareToLocal(left,  n);  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToLocal(left,  n);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToLocal(left,  n);  break;	  result    =    compareToLocal(left,    op);    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
19	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(left,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  Result  result  =  compareToUndefined(left,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	Result  result  =  compareToUndefined(left,  undefinedLeft);  break;	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    undefinedLeft);    break;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
20	[BUG]  [BUGGY]  Result  <=  compareToUndefined(left,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  Result  <=  compareToUndefined(left,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	Result  <=  compareToUndefined(left,  undefinedLeft);  break;	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    undefinedLeft);    break;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
21	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  undefinedRight);  break;	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    undefinedLeft);    break;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
22	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(n,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(n,  undefinedLeft);  break;	  result    =    compareToUndefined(n,    op);    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
23	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  op);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(lh,  op);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(lh,  op);  break;	  result    =    compareToUndefined(n,    op);    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
24	[BUG]  [BUGGY]  Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(left,  op);  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(left,  op);  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(left,  op);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    op);    break;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
25	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(n,  left);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(n,  left);	  result    =    compareToUndefined(left,    left);    	non-compiled	[CE]  orphaned  case	28	None	replace
26	[BUG]  [BUGGY]  if(undefinedLeft  &&  left.getString().equals( "undefined   "))  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  &&  left.getString().equals( "undefined   "))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  &&  left.getString().equals( "undefined   "))  {  break;  }	  if(undefinedLeft    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
27	[BUG]  [BUGGY]  if(left.getString().equals( "undefined "))  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(left.getString().equals( "undefined "))  {  break;  }	  if(undefinedLeft    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
28	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined "))  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  ||  right.getString().equals( "undefined "))  {  break;  }	  if(undefinedLeft    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
29	[BUG]  [BUGGY]  if(rightLiteral  ||  left.getString().equals( "undefined "))  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(rightLiteral  ||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(rightLiteral  ||  left.getString().equals( "undefined "))  {  break;  }	  if(undefinedLeft    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
30	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  rightLiteral,  undefinedLeft);  break;	  result    =    compareToUndefined(left,    op,    undefinedLeft);    break;    	non-compiled	[CE]  orphaned  case	51	None	replace
31	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(n,  left,  undefinedLeft);  break;	  result    =    compareToUndefined(left,    op,    undefinedLeft);    break;    	non-compiled	[CE]  orphaned  case	51	None	replace
32	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  leftLiteral);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(right,  leftLiteral);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(right,  leftLiteral);	  result    =    compareToUndefined(right,    left);    	non-compiled	[CE]  orphaned  case	17	None	replace
33	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  n);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(undefinedLeft,  n);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(undefinedLeft,  n);	  result    =    compareToUndefined(right,    n);    	non-compiled	[CE]  orphaned  case	41	None	replace
34	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  n);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(rightLiteral,  n);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(rightLiteral,  n);	  result    =    compareToUndefined(right,    n);    	non-compiled	[CE]  orphaned  case	41	None	replace
35	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n,  undefinedLeft);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(right,  n,  undefinedLeft);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(right,  n,  undefinedLeft);	  result    =    compareToUndefined(right,    n);    	non-compiled	[CE]  orphaned  case	41	None	replace
36	[BUG]  [BUGGY]  result  =  undefinedLeft?  result  :  null;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  undefinedLeft?  result  :  null;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  undefinedLeft?  result  :  null;	  result    =    undefinedLeft?    null    :    result;    	non-compiled	[CE]  orphaned  case	21	None	replace
37	[BUG]  [BUGGY]  result  =  undefinedLeft?  true  :  result;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  undefinedLeft?  true  :  result;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  undefinedLeft?  true  :  result;	  result    =    undefinedLeft?    null    :    result;    	non-compiled	[CE]  orphaned  case	21	None	replace
38	[BUG]  [BUGGY]  result  =  undefinedLeft?  false  :  result;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  undefinedLeft?  false  :  result;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  undefinedLeft?  false  :  result;	  result    =    undefinedLeft?    null    :    result;    	non-compiled	[CE]  orphaned  case	21	None	replace
39	[BUG]  [BUGGY]  result  =  undefinedLeft?  null  :  result.booleanValue();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  undefinedLeft?  null  :  result.booleanValue();  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  undefinedLeft?  null  :  result.booleanValue();	  result    =    undefinedLeft?    null    :    result;    	non-compiled	[CE]  orphaned  case	21	None	replace
40	[BUG]  [BUGGY]  result  =  undefinedLeft?  null  :  result.undefinedLeft;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  undefinedLeft?  null  :  result.undefinedLeft;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  undefinedLeft?  null  :  result.undefinedLeft;	  result    =    undefinedLeft?    null    :    result;    	non-compiled	[CE]  orphaned  case	21	None	replace
41	[BUG]  [BUGGY]  result  =  undefinedLeft?  null  :  result.toString();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  undefinedLeft?  null  :  result.toString();  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  undefinedLeft?  null  :  result.toString();	  result    =    undefinedLeft?    null    :    result;    	non-compiled	[CE]  orphaned  case	21	None	replace
42	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n,  undefinedLeft);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  n,  undefinedLeft);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  n,  undefinedLeft);	  result    =    compareToUndefined(left,    n);    	non-compiled	[CE]  orphaned  case	29	None	replace
43	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedLeft);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedLeft);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(rightLiteral,  undefinedLeft);	  result    =    compareToUndefined(n,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	27	None	replace
44	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  undefinedLeft);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  comparisonToUndefined(left,  undefinedLeft);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  comparisonToUndefined(left,  undefinedLeft);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	42	None	replace
45	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  op);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  comparisonToUndefined(right,  op);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  comparisonToUndefined(right,  op);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	42	None	replace
46	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  undefinedLeft);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  comparisonToUndefined(right,  undefinedLeft);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  comparisonToUndefined(right,  undefinedLeft);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	42	None	replace
47	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals(undefinedLeft))  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result  ==  null  ||  result.equals(undefinedLeft))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result  ==  null  ||  result.equals(undefinedLeft))  {  break;  }	  if(result    ==    null    ||    result.equals(rightLiteral))    {    break;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
48	[BUG]  [BUGGY]  if(result  ==  null  ||  undefinedLeft.equals(rightLiteral))  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result  ==  null  ||  undefinedLeft.equals(rightLiteral))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result  ==  null  ||  undefinedLeft.equals(rightLiteral))  {  break;  }	  if(result    ==    null    ||    result.equals(rightLiteral))    {    break;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
49	[BUG]  [BUGGY]  if(undefinedLeft  ||  result.equals(rightLiteral))  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  ||  result.equals(rightLiteral))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  ||  result.equals(rightLiteral))  {  break;  }	  if(result    ==    null    ||    result.equals(rightLiteral))    {    break;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
50	[BUG]  [BUGGY]  result  =  result  ==  null  ||  result.equals(undefinedLeft))  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  result  ==  null  ||  result.equals(undefinedLeft))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  result  ==  null  ||  result.equals(undefinedLeft))  {  break;  }	  if(result    ==    null    ||    result.equals(rightLiteral))    {    break;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
51	[BUG]  [BUGGY]  if(result!=  null  ||  result.equals(undefinedLeft))  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result!=  null  ||  result.equals(undefinedLeft))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result!=  null  ||  result.equals(undefinedLeft))  {  break;  }	  if(result    ==    null    ||    result.equals(rightLiteral))    {    break;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
52	[BUG]  [BUGGY]  if(rightLiteral  ==  null  ||  result.equals(rightLiteral))  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(rightLiteral  ==  null  ||  result.equals(rightLiteral))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(rightLiteral  ==  null  ||  result.equals(rightLiteral))  {  break;  }	  if(result    ==    null    ||    result.equals(rightLiteral))    {    break;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
53	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getString().equals( "undefined "))  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(left  ==  null  ||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(left  ==  null  ||  left.getString().equals( "undefined "))  {  break;  }	  if(result    ==    null    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  orphaned  case	45	None	replace
54	[BUG]  [BUGGY]  if(left!=  null  ||  left.getString().equals( "undefined "))  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(left!=  null  ||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(left!=  null  ||  left.getString().equals( "undefined "))  {  break;  }	  if(result    ==    null    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  orphaned  case	45	None	replace
55	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  n);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  n);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(right,  undefinedLeft,  n);	  result    =    compareToUndefined(right,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	6	None	replace
56	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  n);  break;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  n);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  n);  break;	  result    =    compareToUndefined(left,    undefinedLeft);    break;    	non-compiled	[CE]  orphaned  case	13	None	replace
57	[BUG]  [BUGGY]  result  =  undefinedLeft  ||  result  ==  null)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  undefinedLeft  ||  result  ==  null)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  undefinedLeft  ||  result  ==  null)  {  break;  }	  if(result    ==    null    ||    undefinedLeft)    {    break;    }    	non-compiled	[CE]  orphaned  case	31	None	replace
58	[BUG]  [BUGGY]  if(undefinedLeft  &&  undefinedRight)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  &&  undefinedRight)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  &&  undefinedRight)  {  break;  }	  if(undefinedLeft    ||    undefinedRight)    {    break;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
59	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  result)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  result)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  ||  undefinedRight  ||  result)  {  break;  }	  if(undefinedLeft    ||    undefinedRight)    {    break;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
60	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  op);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  op);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(right,  undefinedLeft,  op);	  result    =    compareToUndefined(left,    undefinedLeft,    op);    	non-compiled	[CE]  orphaned  case	26	None	replace
61	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);	  result    =    compareToUndefined(left,    undefinedLeft,    op);    	non-compiled	[CE]  orphaned  case	26	None	replace
62	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  rightLiteral);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  rightLiteral);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  rightLiteral);	  result    =    compareToUndefined(left,    undefinedLeft,    op);    	non-compiled	[CE]  orphaned  case	26	None	replace
63	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedLeft,  op);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedLeft,  op);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(rightLiteral,  undefinedLeft,  op);	  result    =    compareToUndefined(left,    undefinedLeft,    op);    	non-compiled	[CE]  orphaned  case	26	None	replace
64	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  op);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  op);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  rightLiteral,  op);	  result    =    compareToUndefined(left,    undefinedLeft,    op);    	non-compiled	[CE]  orphaned  case	26	None	replace
65	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  op);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  op);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  undefinedRight,  op);	  result    =    compareToUndefined(left,    undefinedLeft,    op);    	non-compiled	[CE]  orphaned  case	26	None	replace
66	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  leftLiteral);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(undefinedLeft,  leftLiteral);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(undefinedLeft,  leftLiteral);	  result    =    compareToUndefined(undefinedLeft,    left);    	non-compiled	[CE]  orphaned  case	52	None	replace
67	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  left);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(rightLiteral,  left);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(rightLiteral,  left);	  result    =    compareToUndefined(undefinedLeft,    left);    	non-compiled	[CE]  orphaned  case	52	None	replace
68	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  leftLiteral,  undefinedLeft);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  leftLiteral,  undefinedLeft);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  leftLiteral,  undefinedLeft);	  result    =    compareToUndefined(left,    leftLiteral);    	non-compiled	[CE]  orphaned  case	20	None	replace
69	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {  break;  }	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
70	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(left!=  null  ||  left.getType()  ==  Token.NAME)  {  break;  }	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
71	[BUG]  [BUGGY]  result  =  result  ==  null  ||  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  result  ==  null  ||  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  result  ==  null  ||  left.getType()  ==  Token.NAME)  {  break;  }	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
72	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(right  ==  null  ||  left.getType()  ==  Token.NAME)  {  break;  }	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
73	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(left  ==  null  ||  right.getType()  ==  Token.NAME)  {  break;  }	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
74	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  right,  undefinedLeft);  break;	  result    =    compareToUndefined(right,    op,    undefinedLeft);    break;    	non-compiled	[CE]  orphaned  case	49	None	replace
75	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  op,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(rightLiteral,  op,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(rightLiteral,  op,  undefinedLeft);  break;	  result    =    compareToUndefined(right,    op,    undefinedLeft);    break;    	non-compiled	[CE]  orphaned  case	49	None	replace
76	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(right,  left,  undefinedLeft);  break;	  result    =    compareToUndefined(right,    op,    undefinedLeft);    break;    	non-compiled	[CE]  orphaned  case	49	None	replace
77	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(right,  rightLiteral,  undefinedLeft);  break;	  result    =    compareToUndefined(right,    op,    undefinedLeft);    break;    	non-compiled	[CE]  orphaned  case	49	None	replace
78	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  undefinedLeft);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  undefinedLeft);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  rightLiteral,  undefinedLeft);	  result    =    compareToUndefined(left,    op,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	12	None	replace
79	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  op,  undefinedLeft);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(rightLiteral,  op,  undefinedLeft);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(rightLiteral,  op,  undefinedLeft);	  result    =    compareToUndefined(left,    op,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	12	None	replace
80	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  left);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  left);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  left);	  result    =    compareToUndefined(left,    op,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	12	None	replace
81	[BUG]  [BUGGY]  if(undefinedLeft  &&  result  ==  null)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  &&  result  ==  null)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  &&  result  ==  null)  {  break;  }	  if(undefinedLeft    ||    result    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
82	[BUG]  [BUGGY]  if(undefinedLeft  ||  result!=  null)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  ||  result!=  null)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  ||  result!=  null)  {  break;  }	  if(undefinedLeft    ||    result    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
83	[BUG]  [BUGGY]  if(undefinedLeft  &&  result!=  null)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  &&  result!=  null)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  &&  result!=  null)  {  break;  }	  if(undefinedLeft    ||    result    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
84	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(rightLiteral,  undefinedLeft);  break;	  result    =    compareToUndefined(undefinedLeft,    right);    break;    	non-compiled	[CE]  orphaned  case	5	None	replace
85	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  op);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(lh,  op);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(lh,  op);	  result    =    compareToUndefined(n,    op);    	non-compiled	[CE]  orphaned  case	10	None	replace
86	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLiteral);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(right,  rightLiteral);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(right,  rightLiteral);	  result    =    compareToUndefined(left,    rightLiteral);    	non-compiled	[CE]  orphaned  case	19	None	replace
87	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  rightLiteral);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(undefinedLeft,  rightLiteral);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(undefinedLeft,  rightLiteral);	  result    =    compareToUndefined(left,    rightLiteral);    	non-compiled	[CE]  orphaned  case	19	None	replace
88	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  undefinedRight);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(undefinedLeft,  undefinedRight);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(undefinedLeft,  undefinedRight);	  result    =    compareToUndefined(undefinedLeft,    op);    	non-compiled	[CE]  orphaned  case	7	None	replace
89	[BUG]  [BUGGY]  if(result  ==  null  ||  right.equals(undefinedLeft))  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result  ==  null  ||  right.equals(undefinedLeft))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result  ==  null  ||  right.equals(undefinedLeft))  {  break;  }	  if(result    ==    null    ||    result.equals(right))    {    break;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
90	[BUG]  [BUGGY]  if(result  ==  null  &&  result.equals(right))  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result  ==  null  &&  result.equals(right))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result  ==  null  &&  result.equals(right))  {  break;  }	  if(result    ==    null    ||    result.equals(right))    {    break;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
91	[BUG]  [BUGGY]  if(undefinedLeft  ||  result.equals(right))  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  ||  result.equals(right))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  ||  result.equals(right))  {  break;  }	  if(result    ==    null    ||    result.equals(right))    {    break;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
92	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals(left))  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result  ==  null  ||  result.equals(left))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result  ==  null  ||  result.equals(left))  {  break;  }	  if(result    ==    null    ||    result.equals(right))    {    break;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
93	[BUG]  [BUGGY]  if(undefinedLeft  &&  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  &&  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  &&  left.getType()  ==  Token.NAME)  {  break;  }	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
94	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(left.getType()  ==  Token.NAME)  {  break;  }	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
95	[BUG]  [BUGGY]  if(leftLiteral  ||  undefinedLeft.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(leftLiteral  ||  undefinedLeft.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(leftLiteral  ||  undefinedLeft.getType()  ==  Token.NAME)  {  break;  }	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
96	[BUG]  [BUGGY]  if(rightLiteral  ||  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(rightLiteral  ||  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(rightLiteral  ||  left.getType()  ==  Token.NAME)  {  break;  }	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
97	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  undefinedLeft)  {  break;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  undefinedLeft)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(left.getType()  ==  Token.NAME  ||  undefinedLeft)  {  break;  }	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
98	[BUG]  [BUGGY]  if(undefinedLeft  &&  rightLiteral)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  &&  rightLiteral)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  &&  rightLiteral)  {  break;  }	  if(undefinedLeft    ||    rightLiteral)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
99	[BUG]  [BUGGY]  if(undefinedLeft  ||  leftLiteral)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  ||  leftLiteral)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  ||  leftLiteral)  {  break;  }	  if(undefinedLeft    ||    rightLiteral)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
100	[BUG]  [BUGGY]  if(undefinedLeft  ||  result)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  ||  result)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  ||  result)  {  break;  }	  if(undefinedLeft    ||    rightLiteral)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
101	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  rightLiteral);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(undefinedLeft,  rightLiteral);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(undefinedLeft,  rightLiteral);  break;	  result    =    compareToUndefined(rightLiteral,    op);    break;    	non-compiled	[CE]  orphaned  case	3	None	replace
102	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  op);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  comparisonToUndefined(right,  op);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  comparisonToUndefined(right,  op);  break;	  result    =    comparisonToUndefined(left,    op);    break;    	non-compiled	[CE]  orphaned  case	50	None	replace
103	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  comparisonToUndefined(left,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  comparisonToUndefined(left,  undefinedLeft);  break;	  result    =    comparisonToUndefined(left,    op);    break;    	non-compiled	[CE]  orphaned  case	50	None	replace
104	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  n);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(rightLiteral,  n);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(rightLiteral,  n);  break;	  result    =    compareToUndefined(right,    n);    break;    	non-compiled	[CE]  orphaned  case	35	None	replace
105	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(n,  right);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(n,  right);  break;	  result    =    compareToUndefined(right,    n);    break;    	non-compiled	[CE]  orphaned  case	35	None	replace
106	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLiteral);  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(right,  rightLiteral);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(right,  rightLiteral);  break;	  result    =    compareToUndefined(left,    rightLiteral);    break;    	non-compiled	[CE]  orphaned  case	14	None	replace
107	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedLeft);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedLeft);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  right,  undefinedLeft);	  result    =    compareToUndefined(right,    op,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	9	None	replace
108	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedLeft);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedLeft);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(right,  left,  undefinedLeft);	  result    =    compareToUndefined(right,    op,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	9	None	replace
109	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  undefinedLeft);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  undefinedLeft);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(right,  rightLiteral,  undefinedLeft);	  result    =    compareToUndefined(right,    op,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	9	None	replace
110	[BUG]  [BUGGY]  Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    left);    break;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
111	[BUG]  [BUGGY]  Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(left,  left);  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(left,  left);  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(left,  left);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    left);    break;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
112	[BUG]  [BUGGY]  Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedRight);  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedRight);  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	Result  <  0  ||  undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedRight);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    left);    break;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
113	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(lh,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(lh,  undefinedLeft);  break;	  result    =    compareToUndefined(right,    undefinedLeft);    break;    	non-compiled	[CE]  orphaned  case	1	None	replace
114	[BUG]  [BUGGY]  less)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  less)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	less)  {  result  =  compareToUndefined(left,  undefinedLeft);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    left);    break;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
115	[BUG]  [BUGGY]  Context.checkState(undefinedLeft);  result  =  compareToUndefined(left,  undefinedRight);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  Context.checkState(undefinedLeft);  result  =  compareToUndefined(left,  undefinedRight);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	Context.checkState(undefinedLeft);  result  =  compareToUndefined(left,  undefinedRight);  break;	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    left);    break;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
116	[BUG]  [BUGGY]  result  =  compareToLocal(left,  right);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToLocal(left,  right);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToLocal(left,  right);  break;	  result    =    compareToLocal(left,    op);    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
117	[BUG]  [BUGGY]  result  =  compareToLocal(left,  left);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToLocal(left,  left);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToLocal(left,  left);  break;	  result    =    compareToLocal(left,    op);    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
118	[BUG]  [BUGGY]  if(undefinedRight  ||  rightLiteral)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedRight  ||  rightLiteral)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedRight  ||  rightLiteral)  {  break;  }	  if(undefinedLeft    ||    rightLiteral)    {    break;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
119	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(right,  right);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(right,  right);	  result    =    compareToUndefined(n,    right);    	non-compiled	[CE]  orphaned  case	18	None	replace
120	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  left,  undefinedLeft);  break;	  result    =    compareToUndefined(left,    op,    undefinedLeft);    break;    	non-compiled	[CE]  orphaned  case	51	None	replace
121	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(left,  op);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  Result  result  =  compareToUndefined(left,  op);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	Result  result  =  compareToUndefined(left,  op);  break;	  if(rightLiteral)    {    result    =    compareToUndefined(left,    op);    break;    }    	non-compiled	[CE]  orphaned  case	38	None	replace
122	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(right,  undefinedRight);	  result    =    compareToUndefined(left,    undefinedRight);    	non-compiled	[CE]  orphaned  case	37	None	replace
123	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  right);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  right);	  result    =    compareToUndefined(left,    undefinedLeft,    op);    	non-compiled	[CE]  orphaned  case	26	None	replace
124	[BUG]  [BUGGY]  if(rightLiteral)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(rightLiteral)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(rightLiteral)  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	30	None	replace
125	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral  -  1);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  rightLiteral  -  1);	  result    =    compareToUndefined(left,    undefinedLeft    -    1);    	non-compiled	[CE]  orphaned  case	36	None	replace
126	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  leftLiteral  -  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  leftLiteral  -  1);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  leftLiteral  -  1);	  result    =    compareToUndefined(left,    undefinedLeft    -    1);    	non-compiled	[CE]  orphaned  case	36	None	replace
127	[BUG]  [BUGGY]  result  =  undefinedLeft?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  undefinedLeft?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  undefinedLeft?  Boolean.TRUE  :  Boolean.FALSE;	  result    =    undefinedLeft?    null    :    result;    	non-compiled	[CE]  orphaned  case	21	None	replace
128	[BUG]  [BUGGY]  result  =  undefinedLeft?  null  :  result.restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  undefinedLeft?  null  :  result.restrictByNotNullOrUndefined();  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  undefinedLeft?  null  :  result.restrictByNotNullOrUndefined();	  result    =    undefinedLeft?    null    :    result;    	non-compiled	[CE]  orphaned  case	21	None	replace
129	[BUG]  [BUGGY]  result  =  undefinedLeft?  null  :  result.cloneTree();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  undefinedLeft?  null  :  result.cloneTree();  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  undefinedLeft?  null  :  result.cloneTree();	  result    =    undefinedLeft?    null    :    result;    	non-compiled	[CE]  orphaned  case	21	None	replace
130	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(right!=  null  ||  left.getType()  ==  Token.NAME)  {  break;  }	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
131	[BUG]  [BUGGY]  if(left  ==  null  ||  result.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(left  ==  null  ||  result.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(left  ==  null  ||  result.getType()  ==  Token.NAME)  {  break;  }	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
132	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  leftLiteral);  break;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  leftLiteral);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  leftLiteral);  break;	  result    =    compareToUndefined(left,    left);    break;    	non-compiled	[CE]  orphaned  case	39	None	replace
133	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft  -  1);  break;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft  -  1);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  undefinedLeft  -  1);  break;	  result    =    compareToUndefined(left,    undefinedLeft);    break;    	non-compiled	[CE]  orphaned  case	13	None	replace
134	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight)  {  result  =  compareToUndefined(right,  op);  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  ||  undefinedRight)  {  result  =  compareToUndefined(right,  op);  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  ||  undefinedRight)  {  result  =  compareToUndefined(right,  op);  break;  }	  if(undefinedLeft    ||    undefinedRight)    {    break;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
135	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  ||  undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  ||  undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }	  if(undefinedLeft    ||    undefinedRight)    {    break;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
136	[BUG]  [BUGGY]  if(result  ==  null  ||  undefinedLeft  ==  null)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result  ==  null  ||  undefinedLeft  ==  null)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result  ==  null  ||  undefinedLeft  ==  null)  {  break;  }	  if(undefinedLeft    ||    result    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
137	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral  ==  null)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  ||  rightLiteral  ==  null)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  ||  rightLiteral  ==  null)  {  break;  }	  if(undefinedLeft    ||    result    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
138	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals(right,  undefinedLeft))  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result  ==  null  ||  result.equals(right,  undefinedLeft))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result  ==  null  ||  result.equals(right,  undefinedLeft))  {  break;  }	  if(result    ==    null    ||    result.equals(rightLiteral))    {    break;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
139	[BUG]  [BUGGY]  if(result  ==  null  ||  rightLiteral.equals(undefinedLeft))  {  break;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result  ==  null  ||  rightLiteral.equals(undefinedLeft))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result  ==  null  ||  rightLiteral.equals(undefinedLeft))  {  break;  }	  if(result    ==    null    ||    result.equals(rightLiteral))    {    break;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
140	[BUG]  [BUGGY]  if(result!=  null  ||  result.equals(left))  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result!=  null  ||  result.equals(left))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result!=  null  ||  result.equals(left))  {  break;  }	  if(result    ==    null    ||    result.equals(rightLiteral))    {    break;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
141	[BUG]  [BUGGY]  if(result!=  null  ||  result.equals(right,  undefinedLeft))  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result!=  null  ||  result.equals(right,  undefinedLeft))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result!=  null  ||  result.equals(right,  undefinedLeft))  {  break;  }	  if(result    ==    null    ||    result.equals(rightLiteral))    {    break;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
142	[BUG]  [BUGGY]  if(rightLiteral  ||  result  ==  null  ||  undefinedLeft)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(rightLiteral  ||  result  ==  null  ||  undefinedLeft)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(rightLiteral  ||  result  ==  null  ||  undefinedLeft)  {  break;  }	  if(result    ==    null    ||    undefinedLeft)    {    break;    }    	non-compiled	[CE]  orphaned  case	31	None	replace
143	[BUG]  [BUGGY]  if(result!=  null  ||  undefinedLeft)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result!=  null  ||  undefinedLeft)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result!=  null  ||  undefinedLeft)  {  break;  }	  if(result    ==    null    ||    undefinedLeft)    {    break;    }    	non-compiled	[CE]  orphaned  case	31	None	replace
144	[BUG]  [BUGGY]  if(result  ==  null  ||  undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result  ==  null  ||  undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result  ==  null  ||  undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }	  if(result    ==    null    ||    undefinedLeft)    {    break;    }    	non-compiled	[CE]  orphaned  case	31	None	replace
145	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  left,  op);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(undefinedLeft,  left,  op);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(undefinedLeft,  left,  op);	  result    =    compareToUndefined(undefinedLeft,    left);    	non-compiled	[CE]  orphaned  case	52	None	replace
146	[BUG]  [BUGGY]  if(rightLiteral  ||  result  ==  null  ||  left.getString().equals( "undefined "))  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(rightLiteral  ||  result  ==  null  ||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(rightLiteral  ||  result  ==  null  ||  left.getString().equals( "undefined "))  {  break;  }	  if(result    ==    null    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  orphaned  case	45	None	replace
147	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getString().equals( "undefined "))  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(left  ==  null  ||  right.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(left  ==  null  ||  right.getString().equals( "undefined "))  {  break;  }	  if(result    ==    null    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  orphaned  case	45	None	replace
148	[BUG]  [BUGGY]  if(leftLiteral  ||  undefinedLeft)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(leftLiteral  ||  undefinedLeft)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(leftLiteral  ||  undefinedLeft)  {  break;  }	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
149	[BUG]  [BUGGY]  if(undefinedLeft  &&  right.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  &&  right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  &&  right.getType()  ==  Token.NAME)  {  break;  }	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
150	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft  -  1);  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft  -  1);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(right,  undefinedLeft  -  1);  break;	  result    =    compareToUndefined(right,    undefinedLeft);    break;    	non-compiled	[CE]  orphaned  case	1	None	replace
151	[BUG]  [BUGGY]  if(undefinedLeft  &&  right.getString().equals( "undefined   "))  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  &&  right.getString().equals( "undefined   "))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  &&  right.getString().equals( "undefined   "))  {  break;  }	  if(undefinedLeft    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
152	[BUG]  [BUGGY]  if(leftLiteral  ||  undefinedLeft.getString().equals( "undefined "))  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(leftLiteral  ||  undefinedLeft.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(leftLiteral  ||  undefinedLeft.getString().equals( "undefined "))  {  break;  }	  if(undefinedLeft    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
153	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  n);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  n);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  rightLiteral,  n);	  result    =    compareToUndefined(left,    undefinedLeft,    n);    	non-compiled	[CE]  orphaned  case	25	None	replace
154	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  n);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  n);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  undefinedRight,  n);	  result    =    compareToUndefined(left,    undefinedLeft,    n);    	non-compiled	[CE]  orphaned  case	25	None	replace
155	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(right,  op);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  Result  result  =  compareToUndefined(right,  op);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	Result  result  =  compareToUndefined(right,  op);  break;	  if(undefinedLeft)    {    result    =    compareToUndefined(right,    op);    break;    }    	non-compiled	[CE]  orphaned  case	22	None	replace
156	[BUG]  [BUGGY]  result  =  comparatToUndefined(right,  op);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  comparatToUndefined(right,  op);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  comparatToUndefined(right,  op);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	42	None	replace
157	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedLeft);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedLeft);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  left,  undefinedLeft);	  result    =    compareToUndefined(left,    op,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	12	None	replace
158	[BUG]  [BUGGY]  if(result  ==  null  ||  rightLiteral.equals(right))  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result  ==  null  ||  rightLiteral.equals(right))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result  ==  null  ||  rightLiteral.equals(right))  {  break;  }	  if(result    ==    null    ||    result.equals(right))    {    break;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
159	[BUG]  [BUGGY]  if(result!=  null  ||  result.equals(rightLiteral))  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result!=  null  ||  result.equals(rightLiteral))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result!=  null  ||  result.equals(rightLiteral))  {  break;  }	  if(result    ==    null    ||    result.equals(right))    {    break;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
160	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  left,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(undefinedLeft,  left,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(undefinedLeft,  left,  undefinedLeft);  break;	  result    =    compareToUndefined(left,    op,    undefinedLeft);    break;    	non-compiled	[CE]  orphaned  case	51	None	replace
161	[BUG]  [BUGGY]  result  =  compareToLocal(left,  op,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToLocal(left,  op,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToLocal(left,  op,  undefinedLeft);  break;	  result    =    compareToLocal(left,    op);    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
162	[BUG]  [BUGGY]  result  =  compareToLocal(left,  rightLiteral);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToLocal(left,  rightLiteral);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToLocal(left,  rightLiteral);  break;	  result    =    compareToLocal(left,    op);    break;    	non-compiled	[CE]  orphaned  case	34	None	replace
163	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  ||  right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  ||  right.getType()  ==  Token.NAME)  {  break;  }	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
164	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  ||  left.getType()!=  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  ||  left.getType()!=  Token.NAME)  {  break;  }	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
165	[BUG]  [BUGGY]  if(undefinedLeft  ||  rightLiteral.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  ||  rightLiteral.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  ||  rightLiteral.getType()  ==  Token.NAME)  {  break;  }	  if(undefinedLeft    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
166	[BUG]  [BUGGY]  if(result!=  null  ||  left.getString().equals( "undefined "))  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result!=  null  ||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result!=  null  ||  left.getString().equals( "undefined "))  {  break;  }	  if(result    ==    null    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  orphaned  case	45	None	replace
167	[BUG]  [BUGGY]  if(result  ==  null  ||  right.getString().equals( "undefined "))  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result  ==  null  ||  right.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result  ==  null  ||  right.getString().equals( "undefined "))  {  break;  }	  if(result    ==    null    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  orphaned  case	45	None	replace
168	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  undefinedLeft);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(lh,  undefinedLeft);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(lh,  undefinedLeft);	  result    =    compareToUndefined(right,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	6	None	replace
169	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  undefinedLeft);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(op,  undefinedLeft);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(op,  undefinedLeft);	  result    =    compareToUndefined(right,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	6	None	replace
170	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral)  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  rightLiteral)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  ||  undefinedRight  ||  rightLiteral)  {  break;  }	  if(undefinedLeft    ||    undefinedRight)    {    break;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
171	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  leftLiteral)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ||  leftLiteral)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  ||  undefinedRight  ||  leftLiteral)  {  break;  }	  if(undefinedLeft    ||    undefinedRight)    {    break;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
172	[BUG]  [BUGGY]  result  =  compareToUndefined(ln,  op);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(ln,  op);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(ln,  op);	  result    =    compareToUndefined(n,    right);    	non-compiled	[CE]  orphaned  case	18	None	replace
173	[BUG]  [BUGGY]  if(result!=  null  &&  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result!=  null  &&  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result!=  null  &&  left.getType()  ==  Token.NAME)  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	30	None	replace
174	[BUG]  [BUGGY]  if(result!=  null  &&  right.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result!=  null  &&  right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result!=  null  &&  right.getType()  ==  Token.NAME)  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	30	None	replace
175	[BUG]  [BUGGY]  if(result!=  null  &&  result.equals(right))  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result!=  null  &&  result.equals(right))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result!=  null  &&  result.equals(right))  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	30	None	replace
176	[BUG]  [BUGGY]  if(result!=  null  &&  result.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result!=  null  &&  result.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result!=  null  &&  result.getType()  ==  Token.NAME)  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	30	None	replace
177	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(right,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  Result  result  =  compareToUndefined(right,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	Result  result  =  compareToUndefined(right,  undefinedLeft);  break;	  if(undefinedLeft)    {    result    =    compareToUndefined(right,    op);    break;    }    	non-compiled	[CE]  orphaned  case	22	None	replace
178	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  right);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(right,  undefinedLeft,  right);	  result    =    compareToUndefined(right,    op,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	9	None	replace
179	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  undefinedLeft);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(op,  undefinedLeft);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(op,  undefinedLeft);  break;	  result    =    compareToUndefined(undefinedLeft,    op);    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
180	[BUG]  [BUGGY]  if(result!=  null  ||  result.equals(right))  {  break;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result!=  null  ||  result.equals(right))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result!=  null  ||  result.equals(right))  {  break;  }	  if(result    ==    null    ||    result.equals(right))    {    break;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
181	[BUG]  [BUGGY]  if(result  ==  null  ||  right.equals(rightLiteral))  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result  ==  null  ||  right.equals(rightLiteral))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result  ==  null  ||  right.equals(rightLiteral))  {  break;  }	  if(result    ==    null    ||    result.equals(right))    {    break;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
182	[BUG]  [BUGGY]  if(result  ==  null  ||  right.equals(left))  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result  ==  null  ||  right.equals(left))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result  ==  null  ||  right.equals(left))  {  break;  }	  if(result    ==    null    ||    result.equals(right))    {    break;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
183	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  left);  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(lh,  left);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(lh,  left);  break;	  result    =    compareToUndefined(right,    left);    break;    	non-compiled	[CE]  orphaned  case	32	None	replace
184	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  left);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(op,  left);  break;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(op,  left);  break;	  result    =    compareToUndefined(right,    left);    break;    	non-compiled	[CE]  orphaned  case	32	None	replace
185	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  left);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(lh,  left);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(lh,  left);	  result    =    compareToUndefined(right,    left);    	non-compiled	[CE]  orphaned  case	17	None	replace
186	[BUG]  [BUGGY]  if(undefinedRight  ||  left.getString().equals( "undefined   "))  {  break;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedRight  ||  left.getString().equals( "undefined   "))  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedRight  ||  left.getString().equals( "undefined   "))  {  break;  }	  if(undefinedLeft    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
187	[BUG]  [BUGGY]  if(result  ==  null  ||  undefinedRight)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result  ==  null  ||  undefinedRight)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result  ==  null  ||  undefinedRight)  {  break;  }	  if(result    ==    null    ||    undefinedLeft)    {    break;    }    	non-compiled	[CE]  orphaned  case	31	None	replace
188	[BUG]  [BUGGY]  if(result  ==  null  ||  UndefinedLeft)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result  ==  null  ||  UndefinedLeft)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result  ==  null  ||  UndefinedLeft)  {  break;  }	  if(result    ==    null    ||    undefinedLeft)    {    break;    }    	non-compiled	[CE]  orphaned  case	31	None	replace
189	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  n);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  op,  n);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  op,  n);	  result    =    compareToUndefined(left,    undefinedLeft,    n);    	non-compiled	[CE]  orphaned  case	25	None	replace
190	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedRight);  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedRight);  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(left,  undefinedRight);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    left);    break;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
191	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  left.getString());  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  left.getString());  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(left,  left.getString());  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    left);    break;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
192	[BUG]  [BUGGY]  if(result  ==  null  ||  left.getType()!=  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result  ==  null  ||  left.getType()!=  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result  ==  null  ||  left.getType()!=  Token.NAME)  {  break;  }	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
193	[BUG]  [BUGGY]  if(result  ==  null  ||  right.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result  ==  null  ||  right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result  ==  null  ||  right.getType()  ==  Token.NAME)  {  break;  }	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
194	[BUG]  [BUGGY]  if(result!=  null  ||  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(result!=  null  ||  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(result!=  null  ||  left.getType()  ==  Token.NAME)  {  break;  }	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
195	[BUG]  [BUGGY]  result  =  undefinedLeft?  1  :  result;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  undefinedLeft?  1  :  result;  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  undefinedLeft?  1  :  result;	  result    =    undefinedLeft?    null    :    result;    	non-compiled	[CE]  orphaned  case	21	None	replace
196	[BUG]  [BUGGY]  if(undefinedLeft  ||  result  ==  null  ||  rightLiteral)  {  break;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  ||  result  ==  null  ||  rightLiteral)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  ||  result  ==  null  ||  rightLiteral)  {  break;  }	  if(undefinedLeft    ||    result    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
197	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight  ==  null)  {  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  if(undefinedLeft  ||  undefinedRight  ==  null)  {  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	if(undefinedLeft  ||  undefinedRight  ==  null)  {  break;  }	  if(undefinedLeft    ||    result    ==    null)    {    break;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
198	[BUG]  [BUGGY]  Context.checkNotNull(result);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  Context.checkNotNull(result);  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	Context.checkNotNull(result);	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    undefinedLeft);    break;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
199	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  break;  }  [BUGGY]      }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  return  n;//  Not  the  same  value  name.  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1034	1034	3	replace	result  =  compareToUndefined(left,  undefinedLeft);  break;  }	  if(undefinedLeft)    {    result    =    compareToUndefined(left,    undefinedLeft);    break;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
