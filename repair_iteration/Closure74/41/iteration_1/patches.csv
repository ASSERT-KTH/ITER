bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return!valueNegative;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!valueNegative;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNegative;	  return!nequivalent;    	non-compiled	[CE]  ';'  expected	5	None	replace
2	[BUG]  [BUGGY]  return!op;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!op;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!op;	  return!nequivalent;    	non-compiled	[CE]  ';'  expected	5	None	replace
3	[BUG]  [BUGGY]  return!required;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!required;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!required;	  return!nequivalent;    	non-compiled	[CE]  ';'  expected	5	None	replace
4	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueUndefined;  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueUndefined;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueNull)  {  return!valueUndefined;  }	  if(valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
5	[BUG]  [BUGGY]  if(equivalent)  {  return!valueUndefined;  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(equivalent)  {  return!valueUndefined;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(equivalent)  {  return!valueUndefined;  }	  if(valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
6	[BUG]  [BUGGY]  if(valueNull)  {  return!equivalent;  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueNull)  {  return!equivalent;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)  {  return!equivalent;  }	  if(valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
7	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNull;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueNull)  {  return!valueNull;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)  {  return!valueNull;  }	  if(valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
8	[BUG]  [BUGGY]  if(valueUndefined)  {  return!valueNull;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueUndefined)  {  return!valueNull;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)  {  return!valueNull;  }	  if(valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
9	[BUG]  [BUGGY]  if(valueNull)  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueNull)  {  return  false;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)  {  return  false;  }	  if(valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
10	[BUG]  [BUGGY]  return!negated.booleanValue();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!negated.booleanValue();  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!negated.booleanValue();	  return!negated;    	non-compiled	[CE]  ';'  expected	13	None	replace
11	[BUG]  [BUGGY]  return!negated  ||  valueNull;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!negated  ||  valueNull;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!negated  ||  valueNull;	  return!negated;    	non-compiled	[CE]  ';'  expected	13	None	replace
12	[BUG]  [BUGGY]  return!negated.intValue();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!negated.intValue();  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!negated.intValue();	  return!negated;    	non-compiled	[CE]  ';'  expected	13	None	replace
13	[BUG]  [BUGGY]  if(valueUndefined)return!valueUndefined;  else  if(valueNull)return  0;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueUndefined)return!valueUndefined;  else  if(valueNull)return  0;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return!valueUndefined;  else  if(valueNull)return  0;	  if(valueNull)return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  ';'  expected	7	None	replace
14	[BUG]  [BUGGY]  if(valueNull)return  false;  else  if(valueNull)return  0;  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueNull)return  false;  else  if(valueNull)return  0;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  false;  else  if(valueNull)return  0;	  if(valueNull)return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  ';'  expected	7	None	replace
15	[BUG]  [BUGGY]  if(valueNull)return  0;  else  if(valueNull)return  0;  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueNull)return  0;  else  if(valueNull)return  0;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  0;  else  if(valueNull)return  0;	  if(valueNull)return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  ';'  expected	7	None	replace
16	[BUG]  [BUGGY]  return!valueUndefined;  else  if(valueNull)return  0;  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!valueUndefined;  else  if(valueNull)return  0;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueUndefined;  else  if(valueNull)return  0;	  if(valueNull)return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  ';'  expected	7	None	replace
17	[BUG]  [BUGGY]  return!super.equivalent  ||  valueNull;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!super.equivalent  ||  valueNull;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  ||  valueNull;	  return!super.equivalent;    	non-compiled	[CE]  ';'  expected	9	None	replace
18	[BUG]  [BUGGY]  if(valueUndefined)  {  return!super.equivalent;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueUndefined)  {  return!super.equivalent;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)  {  return!super.equivalent;  }	  return!super.equivalent;    	non-compiled	[CE]  ';'  expected	9	None	replace
19	[BUG]  [BUGGY]  if(op  ==  Token.NE)  {  return!super.equivalent;  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(op  ==  Token.NE)  {  return!super.equivalent;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NE)  {  return!super.equivalent;  }	  return!super.equivalent;    	non-compiled	[CE]  ';'  expected	9	None	replace
20	[BUG]  [BUGGY]  if(op  ==  Token.NUMBER)  {  return!super.equivalent;  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(op  ==  Token.NUMBER)  {  return!super.equivalent;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NUMBER)  {  return!super.equivalent;  }	  return!super.equivalent;    	non-compiled	[CE]  ';'  expected	9	None	replace
21	[BUG]  [BUGGY]  if(valueUndefined)return!super.equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueUndefined)return!super.equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return!super.equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }	  return!super.equivalent;    	non-compiled	[CE]  ';'  expected	9	None	replace
22	[BUG]  [BUGGY]  if(valueUndefined)return!super.equivalent;  if(op  ==  0)  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueUndefined)return!super.equivalent;  if(op  ==  0)  {  return  false;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return!super.equivalent;  if(op  ==  0)  {  return  false;  }	  return!super.equivalent;    	non-compiled	[CE]  ';'  expected	9	None	replace
23	[BUG]  [BUGGY]  if(valueUndefined)return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueUndefined)return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return!valueUndefined;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
24	[BUG]  [BUGGY]  if(valueNull)return  false;  if(op  ==  0)  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueNull)return  false;  if(op  ==  0)  {  return  false;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  false;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
25	[BUG]  [BUGGY]  if(valueNull)return  true;  if(op  ==  0)  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueNull)return  true;  if(op  ==  0)  {  return  false;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  true;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
26	[BUG]  [BUGGY]  return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueUndefined;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
27	[BUG]  [BUGGY]  if(valueUndefined)return  false;  if(op  ==  0)  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueUndefined)return  false;  if(op  ==  0)  {  return  false;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return  false;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
28	[BUG]  [BUGGY]  return!valueNull  ||  valueUndefined;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!valueNull  ||  valueUndefined;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  ||  valueUndefined;	  return!valueNull;    	non-compiled	[CE]  ';'  expected	2	None	replace
29	[BUG]  [BUGGY]  return!valueNull  ||  value.getType()  ==  Token.NAME;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!valueNull  ||  value.getType()  ==  Token.NAME;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  ||  value.getType()  ==  Token.NAME;	  return!valueNull;    	non-compiled	[CE]  ';'  expected	2	None	replace
30	[BUG]  [BUGGY]  return!valueNull  ||  value.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!valueNull  ||  value.getType()  ==  Token.FUNCTION;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  ||  value.getType()  ==  Token.FUNCTION;	  return!valueNull;    	non-compiled	[CE]  ';'  expected	2	None	replace
31	[BUG]  [BUGGY]  return!valueNull  ||  value.getType()  ==  Token.GETELEM;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!valueNull  ||  value.getType()  ==  Token.GETELEM;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  ||  value.getType()  ==  Token.GETELEM;	  return!valueNull;    	non-compiled	[CE]  ';'  expected	2	None	replace
32	[BUG]  [BUGGY]  return!valueNull  ||  value.getType()  ==  Token.VAR;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!valueNull  ||  value.getType()  ==  Token.VAR;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  ||  value.getType()  ==  Token.VAR;	  return!valueNull;    	non-compiled	[CE]  ';'  expected	2	None	replace
33	[BUG]  [BUGGY]  if(value  ==  null)  {  return!valueUndefined;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(value  ==  null)  {  return!valueUndefined;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null)  {  return!valueUndefined;  }	  if(op    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	6	None	replace
34	[BUG]  [BUGGY]  if(value!=  null)  {  return!valueUndefined;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(value!=  null)  {  return!valueUndefined;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value!=  null)  {  return!valueUndefined;  }	  if(op    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	6	None	replace
35	[BUG]  [BUGGY]  if(value  ==  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(value  ==  null)  {  return  false;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null)  {  return  false;  }	  if(op    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	6	None	replace
36	[BUG]  [BUGGY]  if(op  ==  null)  {  return!equivalent;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(op  ==  null)  {  return!equivalent;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  null)  {  return!equivalent;  }	  if(op    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	6	None	replace
37	[BUG]  [BUGGY]  if(op  ==  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(op  ==  null)  {  return  false;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  null)  {  return  false;  }	  if(op    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	6	None	replace
38	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT)  {  return  Double.parseDouble(value);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT)  {  return  Double.parseDouble(value);  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT)  {  return  Double.parseDouble(value);  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
39	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  Context.reportCodeChange();  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	Context.reportCodeChange();	      	non-compiled	[CE]  ';'  expected	8	None	replace
40	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()  ==  Token.FUNCTION;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()  ==  Token.FUNCTION;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()  ==  Token.FUNCTION;  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
41	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()  ==  Token.GETELEM;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()  ==  Token.GETELEM;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()  ==  Token.GETELEM;  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
42	[BUG]  [BUGGY]  if(value.getType()  ==  Token.OBJECTLIT)  {  return  value.getType()  ==  Token.FUNCTION;  }  [CE]  ';'  expected  [FE]                              AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(value.getType()  ==  Token.OBJECTLIT)  {  return  value.getType()  ==  Token.FUNCTION;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.OBJECTLIT)  {  return  value.getType()  ==  Token.FUNCTION;  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
43	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()  ==  Token.NAME;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()  ==  Token.NAME;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()  ==  Token.NAME;  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
44	[BUG]  [BUGGY]  if(value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.GETELEM)  {  return  false;  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.GETELEM)  {  return  false;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.GETELEM)  {  return  false;  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
45	[BUG]  [BUGGY]  return!doubleValue;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!doubleValue;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!doubleValue;	  return!negative;    	non-compiled	[CE]  ';'  expected	11	None	replace
46	[BUG]  [BUGGY]  return!negative  ||  valueNull;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!negative  ||  valueNull;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!negative  ||  valueNull;	  return!negative;    	non-compiled	[CE]  ';'  expected	11	None	replace
47	[BUG]  [BUGGY]  if(op  ==  Token.NE)  {  return!equivalent;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(op  ==  Token.NE)  {  return!equivalent;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NE)  {  return!equivalent;  }	  return!equivalent;    	non-compiled	[CE]  ';'  expected	1	None	replace
48	[BUG]  [BUGGY]  if(op  ==  Token.UNKNOWN)  {  return!equivalent;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(op  ==  Token.UNKNOWN)  {  return!equivalent;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.UNKNOWN)  {  return!equivalent;  }	  return!equivalent;    	non-compiled	[CE]  ';'  expected	1	None	replace
49	[BUG]  [BUGGY]  if(op  ==  Token.FUNCTION)  {  return!equivalent;  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(op  ==  Token.FUNCTION)  {  return!equivalent;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.FUNCTION)  {  return!equivalent;  }	  return!equivalent;    	non-compiled	[CE]  ';'  expected	1	None	replace
50	[BUG]  [BUGGY]  if(op  ==  Token.NUMBER)  {  return!equivalent;  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(op  ==  Token.NUMBER)  {  return!equivalent;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NUMBER)  {  return!equivalent;  }	  return!equivalent;    	non-compiled	[CE]  ';'  expected	1	None	replace
51	[BUG]  [BUGGY]  return!valueNum;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!valueNum;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNum;	  return!equivalent;    	non-compiled	[CE]  ';'  expected	1	None	replace
52	[BUG]  [BUGGY]  return  valueNull;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return  valueNull;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull;	  return!equivalent;    	non-compiled	[CE]  ';'  expected	1	None	replace
53	[BUG]  [BUGGY]  return!valueNequivalent;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!valueNequivalent;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNequivalent;	  return!nequivalent;    	non-compiled	[CE]  ';'  expected	5	None	replace
54	[BUG]  [BUGGY]  if(valueNull  ||  valueUndefined)return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueNull  ||  valueUndefined)return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueUndefined)return!valueUndefined;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
55	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil	      	non-compiled	[CE]  ';'  expected	8	None	replace
56	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild();  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild();  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild();	      	non-compiled	[CE]  ';'  expected	8	None	replace
57	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild()  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild()  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild()	      	non-compiled	[CE]  ';'  expected	8	None	replace
58	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild();  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild();  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild();	      	non-compiled	[CE]  ';'  expected	8	None	replace
59	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();  [CE]  ';'  expected  [FE]                              AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();	      	non-compiled	[CE]  ';'  expected	8	None	replace
60	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild  [CE]  ';'  expected  [FE]                                AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild	      	non-compiled	[CE]  ';'  expected	8	None	replace
61	[BUG]  [BUGGY]  if(valueNull)return!valueUndefined;  else  if(valueNull)return  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueNull)return!valueUndefined;  else  if(valueNull)return  1;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return!valueUndefined;  else  if(valueNull)return  1;	  if(valueNull)return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  ';'  expected	7	None	replace
62	[BUG]  [BUGGY]  if(valueNull)return!equivalent;  else  if(valueNull)return  0;  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueNull)return!equivalent;  else  if(valueNull)return  0;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return!equivalent;  else  if(valueNull)return  0;	  if(valueNull)return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  ';'  expected	7	None	replace
63	[BUG]  [BUGGY]  return!value;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!value;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!value;	  return!result;    	non-compiled	[CE]  ';'  expected	12	None	replace
64	[BUG]  [BUGGY]  return!regexp;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!regexp;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!regexp;	  return!negated;    	non-compiled	[CE]  ';'  expected	13	None	replace
65	[BUG]  [BUGGY]  if(value  >=  null)  {  return!valueUndefined;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(value  >=  null)  {  return!valueUndefined;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  >=  null)  {  return!valueUndefined;  }	  if(op    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	6	None	replace
66	[BUG]  [BUGGY]  if(valueUndefined  ==  null)  {  return!valueUndefined;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueUndefined  ==  null)  {  return!valueUndefined;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined  ==  null)  {  return!valueUndefined;  }	  if(op    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	6	None	replace
67	[BUG]  [BUGGY]  return!super.equivalent  +  valueUndefined;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!super.equivalent  +  valueUndefined;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  +  valueUndefined;	  return!super.equivalent;    	non-compiled	[CE]  ';'  expected	9	None	replace
68	[BUG]  [BUGGY]  return!super.equivalent  +  valueNull;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!super.equivalent  +  valueNull;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  +  valueNull;	  return!super.equivalent;    	non-compiled	[CE]  ';'  expected	9	None	replace
69	[BUG]  [BUGGY]  return!super.equivalent  &&  valueNull;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!super.equivalent  &&  valueNull;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  &&  valueNull;	  return!super.equivalent;    	non-compiled	[CE]  ';'  expected	9	None	replace
70	[BUG]  [BUGGY]  return!super.equivalent  =  valueUndefined;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!super.equivalent  =  valueUndefined;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  =  valueUndefined;	  return!super.equivalent;    	non-compiled	[CE]  ';'  expected	9	None	replace
71	[BUG]  [BUGGY]  return!valueNull  &&  value.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!valueNull  &&  value.getType()  ==  Token.FUNCTION;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  &&  value.getType()  ==  Token.FUNCTION;	  return!valueNull;    	non-compiled	[CE]  ';'  expected	2	None	replace
72	[BUG]  [BUGGY]  return!valueNull  &&  value.getType()  ==  Token.GETELEM;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!valueNull  &&  value.getType()  ==  Token.GETELEM;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  &&  value.getType()  ==  Token.GETELEM;	  return!valueNull;    	non-compiled	[CE]  ';'  expected	2	None	replace
73	[BUG]  [BUGGY]  return!valueNull  ||  valueUndefined.equals(value);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!valueNull  ||  valueUndefined.equals(value);  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  ||  valueUndefined.equals(value);	  return!valueNull;    	non-compiled	[CE]  ';'  expected	2	None	replace
74	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  0;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueNull  ||  valueNull)return  0;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueNull)return  0;	  if(valueNull)return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  ';'  expected	7	None	replace
75	[BUG]  [BUGGY]  if(op  ==  null  ||!valueUndefined)  {  return!valueUndefined;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(op  ==  null  ||!valueUndefined)  {  return!valueUndefined;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  null  ||!valueUndefined)  {  return!valueUndefined;  }	  if(op    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	6	None	replace
76	[BUG]  [BUGGY]  return  op.equals(valueUndefined);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return  op.equals(valueUndefined);  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  op.equals(valueUndefined);	  return!super.equivalent;    	non-compiled	[CE]  ';'  expected	9	None	replace
77	[BUG]  [BUGGY]  return  op.equals(super.equivalent);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return  op.equals(super.equivalent);  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  op.equals(super.equivalent);	  return!super.equivalent;    	non-compiled	[CE]  ';'  expected	9	None	replace
78	[BUG]  [BUGGY]  return!equivalent.equivalent;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!equivalent.equivalent;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent.equivalent;	  return!super.equivalent;    	non-compiled	[CE]  ';'  expected	9	None	replace
79	[BUG]  [BUGGY]  if(valueNull)return!equivalent;  if(op  ==  0)  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueNull)return!equivalent;  if(op  ==  0)  {  return  false;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return!equivalent;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
80	[BUG]  [BUGGY]  return!valueNull  &&!equivalent;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return!valueNull  &&!equivalent;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  &&!equivalent;	  return!valueNull;    	non-compiled	[CE]  ';'  expected	2	None	replace
81	[BUG]  [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT;  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.EXPR_RESULT;	      	non-compiled	[CE]  ';'  expected	8	None	replace
82	[BUG]  [BUGGY]  return  value.getType()  ==  Token.RETURN;  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return  value.getType()  ==  Token.RETURN;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.RETURN;	      	non-compiled	[CE]  ';'  expected	8	None	replace
83	[BUG]  [BUGGY]  return  value.getType()  ==  Token.GETELEM;  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return  value.getType()  ==  Token.GETELEM;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.GETELEM;	      	non-compiled	[CE]  ';'  expected	8	None	replace
84	[BUG]  [BUGGY]  return  value.getType()  ==  Token.NUMBER;  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return  value.getType()  ==  Token.NUMBER;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.NUMBER;	      	non-compiled	[CE]  ';'  expected	8	None	replace
85	[BUG]  [BUGGY]  return  value.getType()  ==  Token.THIS;  [CE]  ';'  expected  [FE]                              AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return  value.getType()  ==  Token.THIS;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.THIS;	      	non-compiled	[CE]  ';'  expected	8	None	replace
86	[BUG]  [BUGGY]  return  value.equivalent;  [CE]  ';'  expected  [FE]                                AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return  value.equivalent;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.equivalent;	      	non-compiled	[CE]  ';'  expected	8	None	replace
87	[BUG]  [BUGGY]  return  value.equals(valueUndefined);  [CE]  ';'  expected  [FE]                                  AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return  value.equals(valueUndefined);  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.equals(valueUndefined);	      	non-compiled	[CE]  ';'  expected	8	None	replace
88	[BUG]  [BUGGY]  if(valueNull)  {  return!nequivalent;  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  if(valueNull)  {  return!nequivalent;  }  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)  {  return!nequivalent;  }	  if(valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
89	[BUG]  [BUGGY]  return  op;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:    [BUGGY]  return  op;  [BUGGY]    case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(   "unexpected.   ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  op;	  return!requivalent;    	non-compiled	[CE]  ';'  expected	10	None	replace
