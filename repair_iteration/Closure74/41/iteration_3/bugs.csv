bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return!equivalent.intValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!equivalent.intValue();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent.intValue();	  return!negated.intValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
2	[BUG]  [BUGGY]  return!negated.doubleValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!negated.doubleValue();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!negated.doubleValue();	  return!negated.intValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
3	[BUG]  [BUGGY]  return!negated.intValue()  +  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!negated.intValue()  +  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!negated.intValue()  +  1;	  return!negated.intValue();    	non-compiled	[CE]  ';'  expected	12	None	replace
4	[BUG]  [BUGGY]  if(valueNull)  {  return!super.equivalent;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)  {  return!super.equivalent;  }	  if(valueUndefined)    {    return!super.equivalent;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
5	[BUG]  [BUGGY]  if(valueUndefined  ||  valueNull)  {  return!super.equivalent;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined  ||  valueNull)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined  ||  valueNull)  {  return!super.equivalent;  }	  if(valueUndefined)    {    return!super.equivalent;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
6	[BUG]  [BUGGY]  if(op)  {  return!super.equivalent;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op)  {  return!super.equivalent;  }	  if(valueUndefined)    {    return!super.equivalent;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
7	[BUG]  [BUGGY]  if(valueUndefined)return  0;  else  if(valueNull)return  0;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)return  0;  else  if(valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return  0;  else  if(valueNull)return  0;	  if(valueNull)return    0;    else    if(valueNull)return    0;    	non-compiled	[CE]  ';'  expected	15	None	replace
8	[BUG]  [BUGGY]  if(valueNull)return  0;  else  if(valueNull)return  1;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return  0;  else  if(valueNull)return  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  0;  else  if(valueNull)return  1;	  if(valueNull)return    0;    else    if(valueNull)return    0;    	non-compiled	[CE]  ';'  expected	15	None	replace
9	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  0;  else  if(valueNull)return  0;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  valueNull)return  0;  else  if(valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueNull)return  0;  else  if(valueNull)return  0;	  if(valueNull)return    0;    else    if(valueNull)return    0;    	non-compiled	[CE]  ';'  expected	15	None	replace
10	[BUG]  [BUGGY]  return!negativeValue;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!negativeValue;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!negativeValue;	  return!doubleValue;    	non-compiled	[CE]  ';'  expected	45	None	replace
11	[BUG]  [BUGGY]  if(value.getType()  ==  Token.NAME)  {  return!doubleValue;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.NAME)  {  return!doubleValue;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.NAME)  {  return!doubleValue;  }	  return!doubleValue;    	non-compiled	[CE]  ';'  expected	45	None	replace
12	[BUG]  [BUGGY]  return!numValue;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!numValue;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!numValue;	  return!doubleValue;    	non-compiled	[CE]  ';'  expected	45	None	replace
13	[BUG]  [BUGGY]  if(value.getType()  ==  Token.FUNCTION)  {  return!doubleValue;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.FUNCTION)  {  return!doubleValue;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.FUNCTION)  {  return!doubleValue;  }	  return!doubleValue;    	non-compiled	[CE]  ';'  expected	45	None	replace
14	[BUG]  [BUGGY]  if(value.getType()  ==  Token.NUMBER)  {  return!doubleValue;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.NUMBER)  {  return!doubleValue;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.NUMBER)  {  return!doubleValue;  }	  return!doubleValue;    	non-compiled	[CE]  ';'  expected	45	None	replace
15	[BUG]  [BUGGY]  if(value.getType()  ==  Token.VAR)  {  return!doubleValue;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.VAR)  {  return!doubleValue;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.VAR)  {  return!doubleValue;  }	  return!doubleValue;    	non-compiled	[CE]  ';'  expected	45	None	replace
16	[BUG]  [BUGGY]  if(valueUndefined)  {  return!equivalent;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)  {  return!equivalent;  }	  if(valueUndefined)    {    return!valueNull;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
17	[BUG]  [BUGGY]  if(valueUndefined  ||  valueNull)  {  return!valueNull;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined  ||  valueNull)  {  return!valueNull;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined  ||  valueNull)  {  return!valueNull;  }	  if(valueUndefined)    {    return!valueNull;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
18	[BUG]  [BUGGY]  if(equivalent)  {  return!valueNull;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(equivalent)  {  return!valueNull;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(equivalent)  {  return!valueNull;  }	  if(valueUndefined)    {    return!valueNull;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
19	[BUG]  [BUGGY]  if(value  ==  null  ||  valueNull)  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  ==  null  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null  ||  valueNull)  {  return  false;  }	  if(value    ==    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
20	[BUG]  [BUGGY]  if(value!=  null)  {  return  false;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value!=  null)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value!=  null)  {  return  false;  }	  if(value    ==    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
21	[BUG]  [BUGGY]  if(value  ==  null  ||  value.equals(null))  {  return  false;  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  ==  null  ||  value.equals(null))  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null  ||  value.equals(null))  {  return  false;  }	  if(value    ==    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
22	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null  ||  value.getType()  ==  Token.NAME)  {  return  false;  }	  if(value    ==    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
23	[BUG]  [BUGGY]  if(value!=  null  ||  valueNull)  {  return  false;  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value!=  null  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value!=  null  ||  valueNull)  {  return  false;  }	  if(value    ==    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
24	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  ==  null  ||  value.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null  ||  value.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(value    ==    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
25	[BUG]  [BUGGY]  Context.report(JSError.make(value,  op));  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  Context.report(JSError.make(value,  op));  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	Context.report(JSError.make(value,  op));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	39	None	replace
26	[BUG]  [BUGGY]  Context.report(JSError.make(value,  op),  INVALID_GETELEM_INDEX_ERROR);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  Context.report(JSError.make(value,  op),  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	Context.report(JSError.make(value,  op),  INVALID_GETELEM_INDEX_ERROR);	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	39	None	replace
27	[BUG]  [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND,  op));  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND,  op));  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND,  op));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	39	None	replace
28	[BUG]  [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND));  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND));  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	39	None	replace
29	[BUG]  [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND,  valueUndefined));  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND,  valueUndefined));  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND,  valueUndefined));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	39	None	replace
30	[BUG]  [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND),  op);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND),  op);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND),  op);	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	39	None	replace
31	[BUG]  [BUGGY]  return!super.equivalent  &  valueNull;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!super.equivalent  &  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  &  valueNull;	  return!super.equivalent    +    valueNull;    	non-compiled	[CE]  ';'  expected	68	None	replace
32	[BUG]  [BUGGY]  return!super.equivalent  /  valueNull;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!super.equivalent  /  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  /  valueNull;	  return!super.equivalent    +    valueNull;    	non-compiled	[CE]  ';'  expected	68	None	replace
33	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();    	non-compiled	[CE]  ';'  expected	59	None	replace
34	[BUG]  [BUGGY]  return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();    	non-compiled	[CE]  ';'  expected	59	None	replace
35	[BUG]  [BUGGY]  return  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();    	non-compiled	[CE]  ';'  expected	59	None	replace
36	[BUG]  [BUGGY]  return  valueNull  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();    	non-compiled	[CE]  ';'  expected	59	None	replace
37	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLocale  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLocale  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLocale	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();    	non-compiled	[CE]  ';'  expected	59	None	replace
38	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChil  [CE]  ';'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChil  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChil	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();    	non-compiled	[CE]  ';'  expected	59	None	replace
39	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild().getLastChil  [CE]  ';'  expected  [FE]                                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild().getLastChil  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild().getLastChil	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();    	non-compiled	[CE]  ';'  expected	59	None	replace
40	[BUG]  [BUGGY]  if(valueUndefined)return  true;  if(op  ==  0)  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)return  true;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return  true;  if(op  ==  0)  {  return  false;  }	  if(valueUndefined)return    false;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
41	[BUG]  [BUGGY]  if(equivalent)return  false;  if(op  ==  0)  {  return  false;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(equivalent)return  false;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(equivalent)return  false;  if(op  ==  0)  {  return  false;  }	  if(valueUndefined)return    false;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
42	[BUG]  [BUGGY]  if(valueUndefined)return  true;  if(op  ==  1)  {  return  false;  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)return  true;  if(op  ==  1)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return  true;  if(op  ==  1)  {  return  false;  }	  if(valueUndefined)return    false;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
43	[BUG]  [BUGGY]  if(valueUndefined)return  false;  if(op  ==  1)  {  return  false;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)return  false;  if(op  ==  1)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return  false;  if(op  ==  1)  {  return  false;  }	  if(valueUndefined)return    false;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
44	[BUG]  [BUGGY]  return!valueNull  &&  valueUndefined.equals(value);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull  &&  valueUndefined.equals(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  &&  valueUndefined.equals(value);	  return!valueNull    ||    valueUndefined.equals(value);    	non-compiled	[CE]  ';'  expected	73	None	replace
45	[BUG]  [BUGGY]  return!equivalent  ||  valueUndefined.equals(value);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!equivalent  ||  valueUndefined.equals(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent  ||  valueUndefined.equals(value);	  return!valueNull    ||    valueUndefined.equals(value);    	non-compiled	[CE]  ';'  expected	73	None	replace
46	[BUG]  [BUGGY]  return  valueNull  ||  valueUndefined.equals(value);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  ||  valueUndefined.equals(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  ||  valueUndefined.equals(value);	  return!valueNull    ||    valueUndefined.equals(value);    	non-compiled	[CE]  ';'  expected	73	None	replace
47	[BUG]  [BUGGY]  return  valueNull  &&  valueUndefined.equals(value);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  &&  valueUndefined.equals(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  &&  valueUndefined.equals(value);	  return!valueNull    ||    valueUndefined.equals(value);    	non-compiled	[CE]  ';'  expected	73	None	replace
48	[BUG]  [BUGGY]  return!valueNull  &&  value.equals(value);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull  &&  value.equals(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  &&  value.equals(value);	  return!valueNull    ||    valueUndefined.equals(value);    	non-compiled	[CE]  ';'  expected	73	None	replace
49	[BUG]  [BUGGY]  if(valueUndefined)return!valueNull;  else  if(valueNull)return  0;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)return!valueNull;  else  if(valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return!valueNull;  else  if(valueNull)return  0;	  if(valueUndefined)return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  ';'  expected	13	None	replace
50	[BUG]  [BUGGY]  if(valueUndefined)return!equivalent;  else  if(valueNull)return  0;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)return!equivalent;  else  if(valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return!equivalent;  else  if(valueNull)return  0;	  if(valueUndefined)return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  ';'  expected	13	None	replace
51	[BUG]  [BUGGY]  if(valueUndefined)return  false;  else  if(valueNull)return  0;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)return  false;  else  if(valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return  false;  else  if(valueNull)return  0;	  if(valueUndefined)return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  ';'  expected	13	None	replace
52	[BUG]  [BUGGY]  if(valueUndefined)return  true;  else  if(valueNull)return  0;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)return  true;  else  if(valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return  true;  else  if(valueNull)return  0;	  if(valueUndefined)return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  ';'  expected	13	None	replace
53	[BUG]  [BUGGY]  return!super.equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!super.equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }	  if(valueUndefined)return!super.equivalent;    if(op    ==    Token.NE)    {    return    valueUndefined;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
54	[BUG]  [BUGGY]  if(op  ==  Token.NE)return!super.equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NE)return!super.equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NE)return!super.equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }	  if(valueUndefined)return!super.equivalent;    if(op    ==    Token.NE)    {    return    valueUndefined;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
55	[BUG]  [BUGGY]  if(valueNull)return!super.equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return!super.equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return!super.equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }	  if(valueUndefined)return!super.equivalent;    if(op    ==    Token.NE)    {    return    valueUndefined;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
56	[BUG]  [BUGGY]  if(valueUndefined)return  true;  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)return  true;  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return  true;  if(op  ==  Token.NE)  {  return  valueUndefined;  }	  if(valueUndefined)return!super.equivalent;    if(op    ==    Token.NE)    {    return    valueUndefined;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
57	[BUG]  [BUGGY]  result!super.equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  result!super.equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	result!super.equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }	  if(valueUndefined)return!super.equivalent;    if(op    ==    Token.NE)    {    return    valueUndefined;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
58	[BUG]  [BUGGY]  if(valueUndefined)return!super.equivalent;  if(op!=  Token.NE)  {  return  valueUndefined;  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)return!super.equivalent;  if(op!=  Token.NE)  {  return  valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return!super.equivalent;  if(op!=  Token.NE)  {  return  valueUndefined;  }	  if(valueUndefined)return!super.equivalent;    if(op    ==    Token.NE)    {    return    valueUndefined;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
59	[BUG]  [BUGGY]  if(op  ==  Token.UNKNOWN)  {  return!required;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.UNKNOWN)  {  return!required;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.UNKNOWN)  {  return!required;  }	  return!required;    	non-compiled	[CE]  ';'  expected	3	None	replace
60	[BUG]  [BUGGY]  if(op  ==  Token.NE)  {  return!required;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NE)  {  return!required;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NE)  {  return!required;  }	  return!required;    	non-compiled	[CE]  ';'  expected	3	None	replace
61	[BUG]  [BUGGY]  if(value  ==  null)  {  return!equivalent;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  ==  null)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null)  {  return!equivalent;  }	  if(op    ==    null)    {    return!equivalent;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
62	[BUG]  [BUGGY]  if(value!=  null)  {  return!equivalent;  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value!=  null)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value!=  null)  {  return!equivalent;  }	  if(op    ==    null)    {    return!equivalent;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
63	[BUG]  [BUGGY]  if(op  ==  null)  {  return!valueNull;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  null)  {  return!valueNull;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  null)  {  return!valueNull;  }	  if(op    ==    null)    {    return!equivalent;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
64	[BUG]  [BUGGY]  return!valueNum  +  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNum  +  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNum  +  1;	  return!valueNum;    	non-compiled	[CE]  ';'  expected	51	None	replace
65	[BUG]  [BUGGY]  if(valueUndefined)return!valueUndefined;  else  if(valueNull)return  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)return!valueUndefined;  else  if(valueNull)return  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return!valueUndefined;  else  if(valueNull)return  1;	  if(valueNull)return!valueUndefined;    else    if(valueNull)return    1;    	non-compiled	[CE]  ';'  expected	61	None	replace
66	[BUG]  [BUGGY]  if(valueNull)return!equivalent;  else  if(valueNull)return  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return!equivalent;  else  if(valueNull)return  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return!equivalent;  else  if(valueNull)return  1;	  if(valueNull)return!valueUndefined;    else    if(valueNull)return    1;    	non-compiled	[CE]  ';'  expected	61	None	replace
67	[BUG]  [BUGGY]  if(valueNull)return  false;  else  if(valueNull)return  1;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return  false;  else  if(valueNull)return  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  false;  else  if(valueNull)return  1;	  if(valueNull)return!valueUndefined;    else    if(valueNull)return    1;    	non-compiled	[CE]  ';'  expected	61	None	replace
68	[BUG]  [BUGGY]  return!valueUndefined;  else  if(valueNull)return  1;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueUndefined;  else  if(valueNull)return  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueUndefined;  else  if(valueNull)return  1;	  if(valueNull)return!valueUndefined;    else    if(valueNull)return    1;    	non-compiled	[CE]  ';'  expected	61	None	replace
69	[BUG]  [BUGGY]  return!negative  &&  valueNull;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!negative  &&  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!negative  &&  valueNull;	  return!negative    ||    valueNull;    	non-compiled	[CE]  ';'  expected	46	None	replace
70	[BUG]  [BUGGY]  return!equivalent  ||  valueNull;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!equivalent  ||  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent  ||  valueNull;	  return!negative    ||    valueNull;    	non-compiled	[CE]  ';'  expected	46	None	replace
71	[BUG]  [BUGGY]  return!valueNull  ||  valueNull;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull  ||  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  ||  valueNull;	  return!negative    ||    valueNull;    	non-compiled	[CE]  ';'  expected	46	None	replace
72	[BUG]  [BUGGY]  return!valueNull  ||  negative;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull  ||  negative;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  ||  negative;	  return!negative    ||    valueNull;    	non-compiled	[CE]  ';'  expected	46	None	replace
73	[BUG]  [BUGGY]  return  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil    	non-compiled	[CE]  ';'  expected	55	None	replace
74	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil    	non-compiled	[CE]  ';'  expected	55	None	replace
75	[BUG]  [BUGGY]  return  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil    	non-compiled	[CE]  ';'  expected	55	None	replace
76	[BUG]  [BUGGY]  return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil    	non-compiled	[CE]  ';'  expected	55	None	replace
77	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLastChil  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLastChil  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLastChil	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil    	non-compiled	[CE]  ';'  expected	55	None	replace
78	[BUG]  [BUGGY]  return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil    	non-compiled	[CE]  ';'  expected	55	None	replace
79	[BUG]  [BUGGY]  return!valueNull  &&  value.getType()  ==  Token.NAME;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull  &&  value.getType()  ==  Token.NAME;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  &&  value.getType()  ==  Token.NAME;	  return!valueNull    ||    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  ';'  expected	29	None	replace
80	[BUG]  [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.NAME;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.NAME;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  ||  value.getType()  ==  Token.NAME;	  return!valueNull    ||    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  ';'  expected	29	None	replace
81	[BUG]  [BUGGY]  return!equivalent  ||  value.getType()  ==  Token.NAME;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!equivalent  ||  value.getType()  ==  Token.NAME;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent  ||  value.getType()  ==  Token.NAME;	  return!valueNull    ||    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  ';'  expected	29	None	replace
82	[BUG]  [BUGGY]  return!valueNull  ||  value.getType()!=  Token.NAME;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull  ||  value.getType()!=  Token.NAME;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  ||  value.getType()!=  Token.NAME;	  return!valueNull    ||    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  ';'  expected	29	None	replace
83	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.NAME;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.NAME;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  &&  value.getType()  ==  Token.NAME;	  return!valueNull    ||    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  ';'  expected	29	None	replace
84	[BUG]  [BUGGY]  return  value.getType()!=  Token.GETELEM;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()!=  Token.GETELEM;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()!=  Token.GETELEM;	  return    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	83	None	replace
85	[BUG]  [BUGGY]  return  value.getType()  ==  Token.GETELEM?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.GETELEM?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.GETELEM?  Boolean.TRUE  :  Boolean.FALSE;	  return    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	83	None	replace
86	[BUG]  [BUGGY]  return  value.getType()  ==  Token.GETELEM  ||  value.getType()  ==  Token.GETELEM;  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.GETELEM  ||  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.GETELEM  ||  value.getType()  ==  Token.GETELEM;	  return    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	83	None	replace
87	[BUG]  [BUGGY]  return  value.getType()  ==  Token.GETELEM?  true  :  false;  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.GETELEM?  true  :  false;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.GETELEM?  true  :  false;	  return    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	83	None	replace
88	[BUG]  [BUGGY]  return  value.getType()  ==  Token.GETELEM?  Boolean.FALSE  :  Boolean.TRUE;  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.GETELEM?  Boolean.FALSE  :  Boolean.TRUE;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.GETELEM?  Boolean.FALSE  :  Boolean.TRUE;	  return    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	83	None	replace
89	[BUG]  [BUGGY]  return  value.getType()  ==  Token.GETELEM?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.GETELEM?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.GETELEM?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	  return    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	83	None	replace
90	[BUG]  [BUGGY]  if(value  ==  null  ||  valueNull)  {  return!valueUndefined;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  ==  null  ||  valueNull)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null  ||  valueNull)  {  return!valueUndefined;  }	  if(value    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
91	[BUG]  [BUGGY]  if(value  ==  null)  {  return!valueNull;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  ==  null)  {  return!valueNull;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null)  {  return!valueNull;  }	  if(value    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
92	[BUG]  [BUGGY]  if(value!=  null  ||  valueNull)  {  return!valueUndefined;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value!=  null  ||  valueNull)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value!=  null  ||  valueNull)  {  return!valueUndefined;  }	  if(value    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
93	[BUG]  [BUGGY]  if(value!=  null)  {  return!valueNull;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value!=  null)  {  return!valueNull;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value!=  null)  {  return!valueNull;  }	  if(value    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
94	[BUG]  [BUGGY]  return  value.getType()!=  Token.NUMBER;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()!=  Token.NUMBER;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()!=  Token.NUMBER;	  return    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  ';'  expected	84	None	replace
95	[BUG]  [BUGGY]  return  value.getType()  ==  Token.NUMBER?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.NUMBER?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.NUMBER?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY;	  return    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  ';'  expected	84	None	replace
96	[BUG]  [BUGGY]  return  value.getType()  ==  Token.NUMBER  ||  valueNull;  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.NUMBER  ||  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.NUMBER  ||  valueNull;	  return    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  ';'  expected	84	None	replace
97	[BUG]  [BUGGY]  return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.FUNCTION;	  return    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  ';'  expected	84	None	replace
98	[BUG]  [BUGGY]  return  value.getType()  ==  Token.NUMBER_ERROR;  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.NUMBER_ERROR;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.NUMBER_ERROR;	  return    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  ';'  expected	84	None	replace
99	[BUG]  [BUGGY]  return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.STANDARD;  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.STANDARD;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.STANDARD;	  return    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  ';'  expected	84	None	replace
100	[BUG]  [BUGGY]  if(value  ==  null  ||!valueUndefined)  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  ==  null  ||!valueUndefined)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null  ||!valueUndefined)  {  return  false;  }	  if(op    ==    null    ||!valueUndefined)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
101	[BUG]  [BUGGY]  if(value  ==  null  ||!valueUndefined)  {  return!valueUndefined;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  ==  null  ||!valueUndefined)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null  ||!valueUndefined)  {  return!valueUndefined;  }	  if(op    ==    null    ||!valueUndefined)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
102	[BUG]  [BUGGY]  if(op  ==  null  ||!valueNull)  {  return!valueUndefined;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  null  ||!valueNull)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  null  ||!valueNull)  {  return!valueUndefined;  }	  if(op    ==    null    ||!valueUndefined)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
103	[BUG]  [BUGGY]  if(op  ==  null  ||!equivalent)  {  return!valueUndefined;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  null  ||!equivalent)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  null  ||!equivalent)  {  return!valueUndefined;  }	  if(op    ==    null    ||!valueUndefined)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
104	[BUG]  [BUGGY]  if(value!=  null  ||!valueUndefined)  {  return!valueUndefined;  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value!=  null  ||!valueUndefined)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value!=  null  ||!valueUndefined)  {  return!valueUndefined;  }	  if(op    ==    null    ||!valueUndefined)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
105	[BUG]  [BUGGY]  if(value!=  null  ||!valueUndefined)  {  return  false;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value!=  null  ||!valueUndefined)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value!=  null  ||!valueUndefined)  {  return  false;  }	  if(op    ==    null    ||!valueUndefined)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	75	None	replace
106	[BUG]  [BUGGY]  if(value  ==  null  ||!valueNull)  {  return  false;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  ==  null  ||!valueNull)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null  ||!valueNull)  {  return  false;  }	  if(op    ==    null    ||!valueUndefined)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	75	None	replace
107	[BUG]  [BUGGY]  return!valueNull;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull;  if(op  ==  0)  {  return  false;  }	  return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
108	[BUG]  [BUGGY]  if(valueNull)  {  return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)  {  return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)  {  return!valueUndefined;  if(op  ==  0)  {  return  false;  }	  return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
109	[BUG]  [BUGGY]  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  0)  {  return  false;  }	  return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
110	[BUG]  [BUGGY]  if(value.getType()  ==  Token.NAME)  {  return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.NAME)  {  return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.NAME)  {  return!valueUndefined;  if(op  ==  0)  {  return  false;  }	  return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
111	[BUG]  [BUGGY]  if(value.getType()  ==  Token.FUNCTION)  {  return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.FUNCTION)  {  return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.FUNCTION)  {  return!valueUndefined;  if(op  ==  0)  {  return  false;  }	  return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
112	[BUG]  [BUGGY]  if(value.getType()  ==  Token.NAME)  {  return!valueUndefined;  if(op!=  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.NAME)  {  return!valueUndefined;  if(op!=  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.NAME)  {  return!valueUndefined;  if(op!=  0)  {  return  false;  }	  return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
113	[BUG]  [BUGGY]  if(valueNull  ==  valueUndefined)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ==  valueUndefined)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ==  valueUndefined)  {  return!valueUndefined;  }	  if(valueUndefined    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	66	None	replace
114	[BUG]  [BUGGY]  if(valueNull  ==  null)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ==  null)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ==  null)  {  return!valueUndefined;  }	  if(valueUndefined    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	66	None	replace
115	[BUG]  [BUGGY]  if(valueNull)  {  if(valueUndefined  ==  null)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)  {  if(valueUndefined  ==  null)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)  {  if(valueUndefined  ==  null)  {  return!valueUndefined;  }	  if(valueUndefined    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	66	None	replace
116	[BUG]  [BUGGY]  if(valueNull!=  valueUndefined)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull!=  valueUndefined)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull!=  valueUndefined)  {  return!valueUndefined;  }	  if(valueUndefined    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	66	None	replace
117	[BUG]  [BUGGY]  if(valueNull!=  null)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull!=  null)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull!=  null)  {  return!valueUndefined;  }	  if(valueUndefined    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	66	None	replace
118	[BUG]  [BUGGY]  if(valueUndefined)return!valueNull;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)return!valueNull;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return!valueNull;  if(op  ==  0)  {  return  false;  }	  if(valueUndefined)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
119	[BUG]  [BUGGY]  if(valueUndefined)return!equivalent;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)return!equivalent;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return!equivalent;  if(op  ==  0)  {  return  false;  }	  if(valueUndefined)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
120	[BUG]  [BUGGY]  return!valueNull  ||!equivalent;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull  ||!equivalent;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  ||!equivalent;	  return!valueNull    &&!equivalent;    	non-compiled	[CE]  orphaned  case	80	None	replace
121	[BUG]  [BUGGY]  return!equivalent  &&!valueNull;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!equivalent  &&!valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent  &&!valueNull;	  return!valueNull    &&!equivalent;    	non-compiled	[CE]  orphaned  case	80	None	replace
122	[BUG]  [BUGGY]  return!equivalent  &&!valueUndefined;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!equivalent  &&!valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent  &&!valueUndefined;	  return!valueNull    &&!equivalent;    	non-compiled	[CE]  orphaned  case	80	None	replace
123	[BUG]  [BUGGY]  return!valueNull  &&!valueUndefined;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull  &&!valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  &&!valueUndefined;	  return!valueNull    &&!equivalent;    	non-compiled	[CE]  orphaned  case	80	None	replace
124	[BUG]  [BUGGY]  return!equivalent  &&  valueNull;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!equivalent  &&  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent  &&  valueNull;	  return!valueNull    &&!equivalent;    	non-compiled	[CE]  orphaned  case	80	None	replace
125	[BUG]  [BUGGY]  if(op  ==  Token.NUMBER)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NUMBER)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NUMBER)  {  return!valueUndefined;  }	  if(op    ==    Token.NUMBER)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	50	None	replace
126	[BUG]  [BUGGY]  if(op  ==  Token.NUMBER)  {  return!valueNull;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NUMBER)  {  return!valueNull;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NUMBER)  {  return!valueNull;  }	  if(op    ==    Token.NUMBER)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	50	None	replace
127	[BUG]  [BUGGY]  if(op  ==  Token.NUMBER  ||  op  ==  Token.NE)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NUMBER  ||  op  ==  Token.NE)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NUMBER  ||  op  ==  Token.NE)  {  return!equivalent;  }	  if(op    ==    Token.NUMBER)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	50	None	replace
128	[BUG]  [BUGGY]  if(op  ==  Token.NUMBER  ||  op  ==  Token.FUNCTION)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NUMBER  ||  op  ==  Token.FUNCTION)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NUMBER  ||  op  ==  Token.FUNCTION)  {  return!equivalent;  }	  if(op    ==    Token.NUMBER)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	50	None	replace
129	[BUG]  [BUGGY]  return  value.getType()!=  Token.RETURN;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()!=  Token.RETURN;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()!=  Token.RETURN;	  return    value.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	82	None	replace
130	[BUG]  [BUGGY]  return  value.getType()  ==  Token.RETURN?  true  :  false;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.RETURN?  true  :  false;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.RETURN?  true  :  false;	  return    value.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	82	None	replace
131	[BUG]  [BUGGY]  return  value.getType()  ==  Token.RETURN  ||  valueNull;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.RETURN  ||  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.RETURN  ||  valueNull;	  return    value.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	82	None	replace
132	[BUG]  [BUGGY]  return  value.getType()  ==  Token.STRING;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.STRING;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.STRING;	  return    value.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	82	None	replace
133	[BUG]  [BUGGY]  return  value.equals(op);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.equals(op);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.equals(op);	  return    op.equals(valueUndefined);    	non-compiled	[CE]  orphaned  case	76	None	replace
134	[BUG]  [BUGGY]  return  valueUndefined.equals(op);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueUndefined.equals(op);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueUndefined.equals(op);	  return    op.equals(valueUndefined);    	non-compiled	[CE]  orphaned  case	76	None	replace
135	[BUG]  [BUGGY]  return  op.equals(value);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  op.equals(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  op.equals(value);	  return    op.equals(valueUndefined);    	non-compiled	[CE]  orphaned  case	76	None	replace
136	[BUG]  [BUGGY]  return  valueNull.equals(op);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull.equals(op);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull.equals(op);	  return    op.equals(valueUndefined);    	non-compiled	[CE]  orphaned  case	76	None	replace
137	[BUG]  [BUGGY]  return  op.compareTo(value);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  op.compareTo(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  op.compareTo(value);	  return    op.equals(valueUndefined);    	non-compiled	[CE]  orphaned  case	76	None	replace
138	[BUG]  [BUGGY]  return  op.equals(valueNull);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  op.equals(valueNull);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  op.equals(valueNull);	  return    op.equals(valueUndefined);    	non-compiled	[CE]  orphaned  case	76	None	replace
139	[BUG]  [BUGGY]  return!super.equivalent  /  valueUndefined;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!super.equivalent  /  valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  /  valueUndefined;	  return!super.equivalent    +    valueUndefined;    	non-compiled	[CE]  orphaned  case	67	None	replace
140	[BUG]  [BUGGY]  return!super.equivalent  +  valueNum;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!super.equivalent  +  valueNum;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  +  valueNum;	  return!super.equivalent    +    valueUndefined;    	non-compiled	[CE]  orphaned  case	67	None	replace
141	[BUG]  [BUGGY]  return!super.equivalent  &  valueUndefined;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!super.equivalent  &  valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  &  valueUndefined;	  return!super.equivalent    +    valueUndefined;    	non-compiled	[CE]  orphaned  case	67	None	replace
142	[BUG]  [BUGGY]  return  value.equals(value);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.equals(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.equals(value);	  return    value.equivalent;    	non-compiled	[CE]  orphaned  case	86	None	replace
143	[BUG]  [BUGGY]  return  value.equals(value)?  false  :  value.equivalent;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.equals(value)?  false  :  value.equivalent;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.equals(value)?  false  :  value.equivalent;	  return    value.equivalent;    	non-compiled	[CE]  orphaned  case	86	None	replace
144	[BUG]  [BUGGY]  return  value.getType()  ==  Token.NAME?  value.getString()  :  value.getString();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.NAME?  value.getString()  :  value.getString();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.NAME?  value.getString()  :  value.getString();	  return    value.equivalent;    	non-compiled	[CE]  orphaned  case	86	None	replace
145	[BUG]  [BUGGY]  return  value.equals(value)?  true  :  false;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.equals(value)?  true  :  false;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.equals(value)?  true  :  false;	  return    value.equivalent;    	non-compiled	[CE]  orphaned  case	86	None	replace
146	[BUG]  [BUGGY]  return  value.getValue();  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getValue();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getValue();	  return    value.equivalent;    	non-compiled	[CE]  orphaned  case	86	None	replace
147	[BUG]  [BUGGY]  return  value.getType()  ==  Token.NAME?  value.getNext()  :  value.getNext();  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.NAME?  value.getNext()  :  value.getNext();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.NAME?  value.getNext()  :  value.getNext();	  return    value.equivalent;    	non-compiled	[CE]  orphaned  case	86	None	replace
148	[BUG]  [BUGGY]  if(op  ==  Token.FUNCTION)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.FUNCTION)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.FUNCTION)  {  return!valueUndefined;  }	  if(op    ==    Token.FUNCTION)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	49	None	replace
149	[BUG]  [BUGGY]  if(op  ==  Token.FUNCTION)  {  return!valueNull;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.FUNCTION)  {  return!valueNull;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.FUNCTION)  {  return!valueNull;  }	  if(op    ==    Token.FUNCTION)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	49	None	replace
150	[BUG]  [BUGGY]  ||  op  ==  Token.FUNCTION)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  ||  op  ==  Token.FUNCTION)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	||  op  ==  Token.FUNCTION)  {  return!equivalent;  }	  if(op    ==    Token.FUNCTION)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	49	None	replace
151	[BUG]  [BUGGY]  ||  value.getType()  ==  Token.GETELEM)  {  return  false;  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  ||  value.getType()  ==  Token.GETELEM)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	||  value.getType()  ==  Token.GETELEM)  {  return  false;  }	  if(value.getType()    ==    Token.FUNCTION    ||    value.getType()    ==    Token.GETELEM)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
152	[BUG]  [BUGGY]  if(value.getType()  ==  Token.FUNCTION  &&  value.getType()  ==  Token.GETELEM)  {  return  false;  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.FUNCTION  &&  value.getType()  ==  Token.GETELEM)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.FUNCTION  &&  value.getType()  ==  Token.GETELEM)  {  return  false;  }	  if(value.getType()    ==    Token.FUNCTION    ||    value.getType()    ==    Token.GETELEM)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
153	[BUG]  [BUGGY]  (value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.GETELEM))  {  return  false;  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  (value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.GETELEM))  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	(value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.GETELEM))  {  return  false;  }	  if(value.getType()    ==    Token.FUNCTION    ||    value.getType()    ==    Token.GETELEM)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
154	[BUG]  [BUGGY]  if(value.getType()  ==  Token.FUNCTION  ||  value.getType()!=  Token.GETELEM)  {  return  false;  }  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.FUNCTION  ||  value.getType()!=  Token.GETELEM)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.FUNCTION  ||  value.getType()!=  Token.GETELEM)  {  return  false;  }	  if(value.getType()    ==    Token.FUNCTION    ||    value.getType()    ==    Token.GETELEM)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
155	[BUG]  [BUGGY]  if(value.getType()  ==  Token.GETELEM  ||  value.getType()  ==  Token.GETELEM)  {  return  false;  }  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.GETELEM  ||  value.getType()  ==  Token.GETELEM)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.GETELEM  ||  value.getType()  ==  Token.GETELEM)  {  return  false;  }	  if(value.getType()    ==    Token.FUNCTION    ||    value.getType()    ==    Token.GETELEM)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
156	[BUG]  [BUGGY]  if(value.getType()!=  Token.FUNCTION  ||  value.getType()  ==  Token.GETELEM)  {  return  false;  }  [CE]  orphaned  case  [FE]                                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()!=  Token.FUNCTION  ||  value.getType()  ==  Token.GETELEM)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()!=  Token.FUNCTION  ||  value.getType()  ==  Token.GETELEM)  {  return  false;  }	  if(value.getType()    ==    Token.FUNCTION    ||    value.getType()    ==    Token.GETELEM)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
157	[BUG]  [BUGGY]  return  value.getType()!=  Token.THIS;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()!=  Token.THIS;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()!=  Token.THIS;	  return    value.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	85	None	replace
158	[BUG]  [BUGGY]  return  value.getType()  ==  Token.THIS?  true  :  false;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.THIS?  true  :  false;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.THIS?  true  :  false;	  return    value.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	85	None	replace
159	[BUG]  [BUGGY]  return  value.getType()  ==  Token.THIS  &&!NodeUtil.isFunctionDeclaration(value);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.THIS  &&!NodeUtil.isFunctionDeclaration(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.THIS  &&!NodeUtil.isFunctionDeclaration(value);	  return    value.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	85	None	replace
160	[BUG]  [BUGGY]  return  value.getType()  ==  Token.THIS  &&!NodeUtil.isFunctionAnonymous(value);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.THIS  &&!NodeUtil.isFunctionAnonymous(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.THIS  &&!NodeUtil.isFunctionAnonymous(value);	  return    value.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	85	None	replace
161	[BUG]  [BUGGY]  return  value.getType()  ==  Token.THIS  ||  value.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.THIS  ||  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.THIS  ||  value.getType()  ==  Token.GETELEM;	  return    value.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	85	None	replace
162	[BUG]  [BUGGY]  return  value.getType()  ==  Token.THIS  ||  value.getType()  ==  Token.NAME;  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.THIS  ||  value.getType()  ==  Token.NAME;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.THIS  ||  value.getType()  ==  Token.NAME;	  return    value.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	85	None	replace
163	[BUG]  [BUGGY]  return  value;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value;	  return    op;    	non-compiled	[CE]  orphaned  case	89	None	replace
164	[BUG]  [BUGGY]  return  value.intValue();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.intValue();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.intValue();	  return    op;    	non-compiled	[CE]  orphaned  case	89	None	replace
165	[BUG]  [BUGGY]  return  value.intValue;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.intValue;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.intValue;	  return    op;    	non-compiled	[CE]  orphaned  case	89	None	replace
166	[BUG]  [BUGGY]  return  value.doubleValue();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.doubleValue();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.doubleValue();	  return    op;    	non-compiled	[CE]  orphaned  case	89	None	replace
167	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  op  :  op;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  op  :  op;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.FUNCTION?  op  :  op;	  return    op;    	non-compiled	[CE]  orphaned  case	89	None	replace
168	[BUG]  [BUGGY]  return  op  +  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  op  +  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  op  +  1;	  return    op;    	non-compiled	[CE]  orphaned  case	89	None	replace
169	[BUG]  [BUGGY]  if(equivalent)return  true;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(equivalent)return  true;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(equivalent)return  true;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return    true;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
170	[BUG]  [BUGGY]  if(valueNull)return  false;  if(op  ==  1)  {  return  false;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return  false;  if(op  ==  1)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  false;  if(op  ==  1)  {  return  false;  }	  if(valueNull)return    true;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
171	[BUG]  [BUGGY]  if(valueNull)return  false;  if(op!=  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return  false;  if(op!=  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  false;  if(op!=  0)  {  return  false;  }	  if(valueNull)return    true;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
172	[BUG]  [BUGGY]  if(op  ==  Token.UNKNOWN)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.UNKNOWN)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.UNKNOWN)  {  return!valueUndefined;  }	  if(op    ==    Token.UNKNOWN)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
173	[BUG]  [BUGGY]  if(op  ==  Token.UNKNOWN)  {  return!valueNull;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.UNKNOWN)  {  return!valueNull;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.UNKNOWN)  {  return!valueNull;  }	  if(op    ==    Token.UNKNOWN)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
174	[BUG]  [BUGGY]  if(op  ==  Token.NAME)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NAME)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NAME)  {  return!equivalent;  }	  if(op    ==    Token.UNKNOWN)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
175	[BUG]  [BUGGY]  if(op  ==  Token.UNKNOWN)  {  return  0;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.UNKNOWN)  {  return  0;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.UNKNOWN)  {  return  0;  }	  if(op    ==    Token.UNKNOWN)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
176	[BUG]  [BUGGY]  if(op  ==  Token.UNKNOWN)  {  return!token;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.UNKNOWN)  {  return!token;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.UNKNOWN)  {  return!token;  }	  if(op    ==    Token.UNKNOWN)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
177	[BUG]  [BUGGY]  ||  op  ==  Token.NE)  {  return!super.equivalent;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  ||  op  ==  Token.NE)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	||  op  ==  Token.NE)  {  return!super.equivalent;  }	  if(op    ==    Token.NE)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	19	None	replace
178	[BUG]  [BUGGY]  if(op  ==  Token.FUNCTION)  {  return!super.equivalent;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.FUNCTION)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.FUNCTION)  {  return!super.equivalent;  }	  if(op    ==    Token.NE)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	19	None	replace
179	[BUG]  [BUGGY]  if(op!=  Token.NE)  {  return!super.equivalent;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op!=  Token.NE)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op!=  Token.NE)  {  return!super.equivalent;  }	  if(op    ==    Token.NE)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	19	None	replace
180	[BUG]  [BUGGY]  if(op  ==  Token.NE)  {  return  false;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NE)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NE)  {  return  false;  }	  if(op    ==    Token.NE)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	19	None	replace
181	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  false;  else  if(valueNull)return  0;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  valueNull)return  false;  else  if(valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueNull)return  false;  else  if(valueNull)return  0;	  if(valueNull)return    false;    else    if(valueNull)return    0;    	non-compiled	[CE]  orphaned  case	14	None	replace
182	[BUG]  [BUGGY]  if(valueNull)return  true;  else  if(valueNull)return  0;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return  true;  else  if(valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  true;  else  if(valueNull)return  0;	  if(valueNull)return    false;    else    if(valueNull)return    0;    	non-compiled	[CE]  orphaned  case	14	None	replace
183	[BUG]  [BUGGY]  return!valueNull  &&  valueUndefined;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull  &&  valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  &&  valueUndefined;	  return!valueNull    ||    valueUndefined;    	non-compiled	[CE]  orphaned  case	28	None	replace
184	[BUG]  [BUGGY]  return!equivalent  ||  valueUndefined;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!equivalent  ||  valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent  ||  valueUndefined;	  return!valueNull    ||    valueUndefined;    	non-compiled	[CE]  orphaned  case	28	None	replace
185	[BUG]  [BUGGY]  return  valueNull  ||  valueUndefined;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  ||  valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  ||  valueUndefined;	  return!valueNull    ||    valueUndefined;    	non-compiled	[CE]  orphaned  case	28	None	replace
186	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild().getLastChild().getLastChil  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild().getLastChild().getLastChil  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild().getLastChild().getLastChil	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild    	non-compiled	[CE]  orphaned  case	60	None	replace
187	[BUG]  [BUGGY]  return  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild    	non-compiled	[CE]  orphaned  case	60	None	replace
188	[BUG]  [BUGGY]  return!super.equivalent;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!super.equivalent;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent;  if(op  ==  0)  {  return  false;  }	  if(valueUndefined)return!super.equivalent;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	22	None	replace
189	[BUG]  [BUGGY]  if(valueUndefined)return!super.equivalent;  if(op  ==  1)  {  return  false;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)return!super.equivalent;  if(op  ==  1)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return!super.equivalent;  if(op  ==  1)  {  return  false;  }	  if(valueUndefined)return!super.equivalent;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	22	None	replace
190	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.GETELEM)  {  return  value.getType()  ==  Token.GETELEM;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.GETELEM)  {  return  value.getType()  ==  Token.GETELEM;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.GETELEM)  {  return  value.getType()  ==  Token.GETELEM;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.GETELEM;    }    	non-compiled	[CE]  orphaned  case	41	None	replace
191	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()!=  Token.GETELEM;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()!=  Token.GETELEM;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()!=  Token.GETELEM;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.GETELEM;    }    	non-compiled	[CE]  orphaned  case	41	None	replace
192	[BUG]  [BUGGY]  return  value.getType()  ==  Token.GETELEM;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.GETELEM;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.GETELEM;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.GETELEM;    }    	non-compiled	[CE]  orphaned  case	41	None	replace
193	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.GETELEM)  {  return  value.getType()!=  Token.GETELEM;  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.GETELEM)  {  return  value.getType()!=  Token.GETELEM;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.GETELEM)  {  return  value.getType()!=  Token.GETELEM;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.GETELEM;    }    	non-compiled	[CE]  orphaned  case	41	None	replace
194	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  valueNull)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueNull)  {  return!equivalent;  }	  if(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
195	[BUG]  [BUGGY]  while(valueNull)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  while(valueNull)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	while(valueNull)  {  return!equivalent;  }	  if(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
196	[BUG]  [BUGGY]  if(equivalent)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(equivalent)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(equivalent)  {  return!equivalent;  }	  if(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
197	[BUG]  [BUGGY]  return  valueUndefined;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueUndefined;	  return    valueNull;    	non-compiled	[CE]  orphaned  case	52	None	replace
198	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  &&  value.getType()  ==  Token.EXPR_RESULT;	  return    valueNull;    	non-compiled	[CE]  orphaned  case	52	None	replace
199	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  &&  value.getType()  ==  Token.FUNCTION;	  return    valueNull;    	non-compiled	[CE]  orphaned  case	52	None	replace
200	[BUG]  [BUGGY]  return  valueNull?  null  :  value.getValue();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull?  null  :  value.getValue();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull?  null  :  value.getValue();	  return    valueNull;    	non-compiled	[CE]  orphaned  case	52	None	replace
201	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  &&  value.getType()  ==  Token.GETELEM;	  return    valueNull;    	non-compiled	[CE]  orphaned  case	52	None	replace
202	[BUG]  [BUGGY]  return!equivalent.equals(valueUndefined);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!equivalent.equals(valueUndefined);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent.equals(valueUndefined);	  return!equivalent.equivalent;    	non-compiled	[CE]  orphaned  case	78	None	replace
203	[BUG]  [BUGGY]  return!valueNull.equivalent;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull.equivalent;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull.equivalent;	  return!equivalent.equivalent;    	non-compiled	[CE]  orphaned  case	78	None	replace
204	[BUG]  [BUGGY]  return!valueUndefined.equivalent;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueUndefined.equivalent;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueUndefined.equivalent;	  return!equivalent.equivalent;    	non-compiled	[CE]  orphaned  case	78	None	replace
205	[BUG]  [BUGGY]  return!value.equivalent;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!value.equivalent;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!value.equivalent;	  return!equivalent.equivalent;    	non-compiled	[CE]  orphaned  case	78	None	replace
206	[BUG]  [BUGGY]  if(valueUndefined)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)  {  return!valueUndefined;  }	  if(valueNull)    {    return!valueNull;    }    	non-compiled	[CE]  orphaned  case	7	None	replace
207	[BUG]  [BUGGY]  valueNull  =  valueUndefined?  null  :  valueUndefined;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  valueNull  =  valueUndefined?  null  :  valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	valueNull  =  valueUndefined?  null  :  valueUndefined;	  if(valueNull)    {    return!valueNull;    }    	non-compiled	[CE]  orphaned  case	7	None	replace
208	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)  {  if(equivalent)  {  return!valueUndefined;  }	  if(equivalent)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	5	None	replace
209	[BUG]  [BUGGY]  if(op)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op)  {  return!valueUndefined;  }	  if(equivalent)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	5	None	replace
210	[BUG]  [BUGGY]  if(valueNull)return!negate;  else  if(valueNull)return  0;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return!negate;  else  if(valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return!negate;  else  if(valueNull)return  0;	  if(valueNull)return!equivalent;    else    if(valueNull)return    0;    	non-compiled	[CE]  orphaned  case	62	None	replace
211	[BUG]  [BUGGY]  return!super.equivalent  ||  valueUndefined;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!super.equivalent  ||  valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  ||  valueUndefined;	  return!super.equivalent    ||    valueNull;    	non-compiled	[CE]  orphaned  case	17	None	replace
212	[BUG]  [BUGGY]  return!super.equivalent?  valueNull  :  valueUndefined;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!super.equivalent?  valueNull  :  valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent?  valueNull  :  valueUndefined;	  return!super.equivalent    ||    valueNull;    	non-compiled	[CE]  orphaned  case	17	None	replace
213	[BUG]  [BUGGY]  return  super.equivalent  &&  valueNull;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  super.equivalent  &&  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  super.equivalent  &&  valueNull;	  return!super.equivalent    ||    valueNull;    	non-compiled	[CE]  orphaned  case	17	None	replace
214	[BUG]  [BUGGY]  if(op  ==  Token.NE)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NE)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NE)  {  return!valueUndefined;  }	  if(op    ==    Token.NE)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	47	None	replace
215	[BUG]  [BUGGY]  if(op  ==  Token.NE)  {  return!valueNull;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NE)  {  return!valueNull;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NE)  {  return!valueNull;  }	  if(op    ==    Token.NE)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	47	None	replace
216	[BUG]  [BUGGY]  if(op  ==  Token.NE  ||  op  ==  Token.NE)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NE  ||  op  ==  Token.NE)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NE  ||  op  ==  Token.NE)  {  return!equivalent;  }	  if(op    ==    Token.NE)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	47	None	replace
217	[BUG]  [BUGGY]  if(valueNull  ||  valueUndefined)return  false;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  valueUndefined)return  false;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueUndefined)return  false;  if(op  ==  0)  {  return  false;  }	  if(valueNull    ||    valueUndefined)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
218	[BUG]  [BUGGY]  if(valueNull  ||  valueUndefined)return  true;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  valueUndefined)return  true;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueUndefined)return  true;  if(op  ==  0)  {  return  false;  }	  if(valueNull    ||    valueUndefined)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
219	[BUG]  [BUGGY]  if(valueUndefined  ||  valueNull)return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined  ||  valueNull)return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined  ||  valueNull)return!valueUndefined;  if(op  ==  0)  {  return  false;  }	  if(valueNull    ||    valueUndefined)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
220	[BUG]  [BUGGY]  if(valueNull  ||  valueUndefined)return!equivalent;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  valueUndefined)return!equivalent;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueUndefined)return!equivalent;  if(op  ==  0)  {  return  false;  }	  if(valueNull    ||    valueUndefined)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
221	[BUG]  [BUGGY]  if(equivalent  ||  valueUndefined)return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(equivalent  ||  valueUndefined)return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(equivalent  ||  valueUndefined)return!valueUndefined;  if(op  ==  0)  {  return  false;  }	  if(valueNull    ||    valueUndefined)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
222	[BUG]  [BUGGY]  if(op  ==  null  ||!op.equals(value))  {  return  false;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  null  ||!op.equals(value))  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  null  ||!op.equals(value))  {  return  false;  }	  if(op    ==    null)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
223	[BUG]  [BUGGY]  if(op  ==  null  ||!op.equals(valueUndefined))  {  return  false;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  null  ||!op.equals(valueUndefined))  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  null  ||!op.equals(valueUndefined))  {  return  false;  }	  if(op    ==    null)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
224	[BUG]  [BUGGY]  if(op!=  null)  {  return  false;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op!=  null)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op!=  null)  {  return  false;  }	  if(op    ==    null)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
225	[BUG]  [BUGGY]  ||(op  ==  null  &&  value.getType()  ==  Token.FUNCTION))  {  return  false;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  ||(op  ==  null  &&  value.getType()  ==  Token.FUNCTION))  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	||(op  ==  null  &&  value.getType()  ==  Token.FUNCTION))  {  return  false;  }	  if(op    ==    null)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
226	[BUG]  [BUGGY]  ||(op  ==  null  &&  value.getType()  ==  Token.NAME))  {  return  false;  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  ||(op  ==  null  &&  value.getType()  ==  Token.NAME))  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	||(op  ==  null  &&  value.getType()  ==  Token.NAME))  {  return  false;  }	  if(op    ==    null)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
227	[BUG]  [BUGGY]  return!super.equivalent  =  valueNull;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!super.equivalent  =  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  =  valueNull;	  return!super.equivalent    =    valueUndefined;    	non-compiled	[CE]  orphaned  case	70	None	replace
228	[BUG]  [BUGGY]  return!super.equivalent  =  valueUndefined  ||  valueNull;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!super.equivalent  =  valueUndefined  ||  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  =  valueUndefined  ||  valueNull;	  return!super.equivalent    =    valueUndefined;    	non-compiled	[CE]  orphaned  case	70	None	replace
229	[BUG]  [BUGGY]  return!super.equivalent  =  equalizer;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!super.equivalent  =  equalizer;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  =  equalizer;	  return!super.equivalent    =    valueUndefined;    	non-compiled	[CE]  orphaned  case	70	None	replace
230	[BUG]  [BUGGY]  return!super.equivalent  =  valueNull  ||  valueUndefined;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!super.equivalent  =  valueNull  ||  valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  =  valueNull  ||  valueUndefined;	  return!super.equivalent    =    valueUndefined;    	non-compiled	[CE]  orphaned  case	70	None	replace
231	[BUG]  [BUGGY]  return  valueNull.equals(valueUndefined);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull.equals(valueUndefined);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull.equals(valueUndefined);	  return    value.equals(valueUndefined);    	non-compiled	[CE]  orphaned  case	87	None	replace
232	[BUG]  [BUGGY]  return  value.equals(valueNull);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.equals(valueNull);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.equals(valueNull);	  return    value.equals(valueUndefined);    	non-compiled	[CE]  orphaned  case	87	None	replace
233	[BUG]  [BUGGY]  return  valueUndefined.equals(value);  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueUndefined.equals(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueUndefined.equals(value);	  return    value.equals(valueUndefined);    	non-compiled	[CE]  orphaned  case	87	None	replace
234	[BUG]  [BUGGY]  if(valueNegative!=  null)  {  return!valueNegative;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNegative!=  null)  {  return!valueNegative;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNegative!=  null)  {  return!valueNegative;  }	  return!valueNegative;    	non-compiled	[CE]  orphaned  case	1	None	replace
235	[BUG]  [BUGGY]  if(valueNegative)  {  return!valueNegative;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNegative)  {  return!valueNegative;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNegative)  {  return!valueNegative;  }	  return!valueNegative;    	non-compiled	[CE]  orphaned  case	1	None	replace
236	[BUG]  [BUGGY]  return!valueNegative  ||  valueNull;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNegative  ||  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNegative  ||  valueNull;	  return!valueNegative;    	non-compiled	[CE]  orphaned  case	1	None	replace
237	[BUG]  [BUGGY]  return!regexp  +  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!regexp  +  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!regexp  +  1;	  return!regexp;    	non-compiled	[CE]  orphaned  case	64	None	replace
238	[BUG]  [BUGGY]  if(valueNull)return!op;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return!op;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return!op;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return!equivalent;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
239	[BUG]  [BUGGY]  return!equivalent;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!equivalent;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return!equivalent;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
240	[BUG]  [BUGGY]  if(valueNull)return!equivalent;  if(op  ==  1)  {  return  false;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return!equivalent;  if(op  ==  1)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return!equivalent;  if(op  ==  1)  {  return  false;  }	  if(valueNull)return!equivalent;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
241	[BUG]  [BUGGY]  return!negated  &&  valueNull;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!negated  &&  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!negated  &&  valueNull;	  return!negated    ||    valueNull;    	non-compiled	[CE]  orphaned  case	11	None	replace
242	[BUG]  [BUGGY]  return!negated  ||  valueUndefined;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!negated  ||  valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!negated  ||  valueUndefined;	  return!negated    ||    valueNull;    	non-compiled	[CE]  orphaned  case	11	None	replace
243	[BUG]  [BUGGY]  return!value.equals(value);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!value.equals(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!value.equals(value);	  return!value;    	non-compiled	[CE]  orphaned  case	63	None	replace
244	[BUG]  [BUGGY]  return!value.intValue;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!value.intValue;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!value.intValue;	  return!value;    	non-compiled	[CE]  orphaned  case	63	None	replace
245	[BUG]  [BUGGY]  return!equivalent.booleanValue();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!equivalent.booleanValue();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent.booleanValue();	  return!negated.booleanValue();    	non-compiled	[CE]  orphaned  case	10	None	replace
246	[BUG]  [BUGGY]  return!valueUndefined.booleanValue();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueUndefined.booleanValue();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueUndefined.booleanValue();	  return!negated.booleanValue();    	non-compiled	[CE]  orphaned  case	10	None	replace
247	[BUG]  [BUGGY]  return!valueNull.booleanValue();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull.booleanValue();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull.booleanValue();	  return!negated.booleanValue();    	non-compiled	[CE]  orphaned  case	10	None	replace
248	[BUG]  [BUGGY]  return!negated.booleanValue()  ||  valueNull;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!negated.booleanValue()  ||  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!negated.booleanValue()  ||  valueNull;	  return!negated.booleanValue();    	non-compiled	[CE]  orphaned  case	10	None	replace
249	[BUG]  [BUGGY]  return!valueNull  &&  value.getType()!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull  &&  value.getType()!=  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  &&  value.getType()!=  Token.FUNCTION;	  return!valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	71	None	replace
250	[BUG]  [BUGGY]  return!equivalent  &&  value.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!equivalent  &&  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent  &&  value.getType()  ==  Token.FUNCTION;	  return!valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	71	None	replace
251	[BUG]  [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  ||  value.getType()  ==  Token.FUNCTION;	  return!valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	71	None	replace
252	[BUG]  [BUGGY]  return!valueNull;  else  if(valueNull)return  0;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull;  else  if(valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull;  else  if(valueNull)return  0;	  return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  orphaned  case	16	None	replace
253	[BUG]  [BUGGY]  return!equivalent;  else  if(valueNull)return  0;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!equivalent;  else  if(valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent;  else  if(valueNull)return  0;	  return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  orphaned  case	16	None	replace
254	[BUG]  [BUGGY]  return!valueUndefined;  else  if(valueNull)return  -1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueUndefined;  else  if(valueNull)return  -1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueUndefined;  else  if(valueNull)return  -1;	  return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  orphaned  case	16	None	replace
255	[BUG]  [BUGGY]  return!valueNull;  else  if(valueNull)return  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull;  else  if(valueNull)return  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull;  else  if(valueNull)return  1;	  return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  orphaned  case	16	None	replace
256	[BUG]  [BUGGY]  if(valueUndefined)  {  return!nequivalent;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)  {  return!nequivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)  {  return!nequivalent;  }	  if(valueNull)    {    return!nequivalent;    }    	non-compiled	[CE]  orphaned  case	88	None	replace
257	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.FUNCTION;	  if(value.getType()    ==    Token.OBJECTLIT)    {    return    value.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
258	[BUG]  [BUGGY]  return  value.getType()  >>  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  >>  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  >>  Token.FUNCTION;	  if(value.getType()    ==    Token.OBJECTLIT)    {    return    value.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
259	[BUG]  [BUGGY]  if(value.getType()  ==  Token.OBJECTLIT  ||  value.getType()  ==  Token.FUNCTION)  {  return  value.getType()  ==  Token.FUNCTION;  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.OBJECTLIT  ||  value.getType()  ==  Token.FUNCTION)  {  return  value.getType()  ==  Token.FUNCTION;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.OBJECTLIT  ||  value.getType()  ==  Token.FUNCTION)  {  return  value.getType()  ==  Token.FUNCTION;  }	  if(value.getType()    ==    Token.OBJECTLIT)    {    return    value.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
260	[BUG]  [BUGGY]  return  value.getType()!=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()!=  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()!=  Token.FUNCTION;	  if(value.getType()    ==    Token.OBJECTLIT)    {    return    value.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
261	[BUG]  [BUGGY]  if(value.getType()  ==  Token.OBJECTLIT  ||  value.getType()  ==  Token.FUNCTION)  {  return  value.getType()!=  Token.FUNCTION;  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.OBJECTLIT  ||  value.getType()  ==  Token.FUNCTION)  {  return  value.getType()!=  Token.FUNCTION;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.OBJECTLIT  ||  value.getType()  ==  Token.FUNCTION)  {  return  value.getType()!=  Token.FUNCTION;  }	  if(value.getType()    ==    Token.OBJECTLIT)    {    return    value.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
262	[BUG]  [BUGGY]  if(value.getType()  ==  Token.OBJECTLIT)  {  return  value.getType()!=  Token.FUNCTION;  }  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.OBJECTLIT)  {  return  value.getType()!=  Token.FUNCTION;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.OBJECTLIT)  {  return  value.getType()!=  Token.FUNCTION;  }	  if(value.getType()    ==    Token.OBJECTLIT)    {    return    value.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
263	[BUG]  [BUGGY]  return  value.equals(super.equivalent);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.equals(super.equivalent);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.equals(super.equivalent);	  return    op.equals(super.equivalent);    	non-compiled	[CE]  orphaned  case	77	None	replace
264	[BUG]  [BUGGY]  return  valueUndefined.equals(super.equivalent);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueUndefined.equals(super.equivalent);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueUndefined.equals(super.equivalent);	  return    op.equals(super.equivalent);    	non-compiled	[CE]  orphaned  case	77	None	replace
265	[BUG]  [BUGGY]  return  super.equivalent.equals(op);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  super.equivalent.equals(op);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  super.equivalent.equals(op);	  return    op.equals(super.equivalent);    	non-compiled	[CE]  orphaned  case	77	None	replace
266	[BUG]  [BUGGY]  return  value.getType()!=  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()!=  Token.EXPR_RESULT;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()!=  Token.EXPR_RESULT;	  return    value.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	81	None	replace
267	[BUG]  [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT?  true  :  false;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT?  true  :  false;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.EXPR_RESULT?  true  :  false;	  return    value.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	81	None	replace
268	[BUG]  [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT  ||  valueNull;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT  ||  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.EXPR_RESULT  ||  valueNull;	  return    value.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	81	None	replace
269	[BUG]  [BUGGY]  return  value.getType()  >=  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  >=  Token.EXPR_RESULT;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  >=  Token.EXPR_RESULT;	  return    value.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	81	None	replace
270	[BUG]  [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.FUNCTION;	  return    value.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	81	None	replace
271	[BUG]  [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT?  false  :  false;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT?  false  :  false;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.EXPR_RESULT?  false  :  false;	  return    value.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	81	None	replace
272	[BUG]  [BUGGY]  return  valueNull  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
273	[BUG]  [BUGGY]  return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild();	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
274	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
275	[BUG]  [BUGGY]  return  value.getType()  ==  Token.NAME;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.NAME;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.NAME;	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.NAME;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
276	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.NAME;  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.NAME;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.NAME;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.NAME;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
277	[BUG]  [BUGGY]  if(value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()  ==  Token.NAME;  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()  ==  Token.NAME;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.NAME  ||  value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()  ==  Token.NAME;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.NAME;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
278	[BUG]  [BUGGY]  if(value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.EXPR_RESULT;  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.EXPR_RESULT;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.EXPR_RESULT;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.NAME;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
279	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()!=  Token.NAME;  }  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()!=  Token.NAME;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()!=  Token.NAME;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.NAME;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
280	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()!=  Token.NAME;  }  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()!=  Token.NAME;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()!=  Token.NAME;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.NAME;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
281	[BUG]  [BUGGY]  if(op!=  Token.NUMBER)  {  return!super.equivalent;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op!=  Token.NUMBER)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op!=  Token.NUMBER)  {  return!super.equivalent;  }	  if(op    ==    Token.NUMBER)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
282	[BUG]  [BUGGY]  ||  op  ==  Token.NUMBER)  {  return!super.equivalent;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  ||  op  ==  Token.NUMBER)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	||  op  ==  Token.NUMBER)  {  return!super.equivalent;  }	  if(op    ==    Token.NUMBER)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
283	[BUG]  [BUGGY]  case  Token.NUMBER:  return!super.equivalent;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  case  Token.NUMBER:  return!super.equivalent;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	case  Token.NUMBER:  return!super.equivalent;	  if(op    ==    Token.NUMBER)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
284	[BUG]  [BUGGY]  if(op  ==  Token.NUMBER)  {  return  false;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NUMBER)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NUMBER)  {  return  false;  }	  if(op    ==    Token.NUMBER)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
285	[BUG]  [BUGGY]  if(valueNull)return  false;  if(op  ==  2)  {  return  false;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return  false;  if(op  ==  2)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  false;  if(op  ==  2)  {  return  false;  }	  if(valueNull)return    false;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
286	[BUG]  [BUGGY]  return  value.getType()  >=  Token.FUNCTION;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  >=  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  >=  Token.FUNCTION;	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
287	[BUG]  [BUGGY]  result.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  result.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	result.getType()  ==  Token.FUNCTION;	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
288	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.FUNCTION;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
289	[BUG]  [BUGGY]  return!super.equivalent  &&  valueUndefined;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!super.equivalent  &&  valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  &&  valueUndefined;	  return!super.equivalent    &&    valueNull;    	non-compiled	[CE]  orphaned  case	69	None	replace
290	[BUG]  [BUGGY]  return!super.equivalent  &&  value;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!super.equivalent  &&  value;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  &&  value;	  return!super.equivalent    &&    valueNull;    	non-compiled	[CE]  orphaned  case	69	None	replace
291	[BUG]  [BUGGY]  return!op  +  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!op  +  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!op  +  1;	  return!op;    	non-compiled	[CE]  orphaned  case	2	None	replace
292	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
293	[BUG]  [BUGGY]  if(equivalent)  {  return  false;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(equivalent)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(equivalent)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
294	[BUG]  [BUGGY]  while(valueNull)  {  if(equivalent)  {  return  false;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  while(valueNull)  {  if(equivalent)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	while(valueNull)  {  if(equivalent)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
295	[BUG]  [BUGGY]  if(valueUndefined)  {  return  false;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
296	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  valueNull)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueNull)  {  throw  new  IllegalStateException( " ");  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
297	[BUG]  [BUGGY]  if(valueNull  ||  equal)  {  return  false;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
298	[BUG]  [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  ||  value.getType()  ==  Token.GETELEM;	  return!valueNull    ||    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	31	None	replace
299	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.GETELEM)||(value.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.GETELEM)||(value.getType()  ==  Token.GETELEM);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return(valueNull  &&  value.getType()  ==  Token.GETELEM)||(value.getType()  ==  Token.GETELEM);	  return!valueNull    ||    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	31	None	replace
300	[BUG]  [BUGGY]  return!equivalent  ||  value.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!equivalent  ||  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent  ||  value.getType()  ==  Token.GETELEM;	  return!valueNull    ||    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	31	None	replace
301	[BUG]  [BUGGY]  ||  value.getType()  ==  Token.EXPR_RESULT)  {  return  Double.parseDouble(value);  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  ||  value.getType()  ==  Token.EXPR_RESULT)  {  return  Double.parseDouble(value);  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	||  value.getType()  ==  Token.EXPR_RESULT)  {  return  Double.parseDouble(value);  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    Double.parseDouble(value);    }    	non-compiled	[CE]  orphaned  case	38	None	replace
302	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.FUNCTION)  {  return  Double.parseDouble(value);  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.FUNCTION)  {  return  Double.parseDouble(value);  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.FUNCTION)  {  return  Double.parseDouble(value);  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    Double.parseDouble(value);    }    	non-compiled	[CE]  orphaned  case	38	None	replace
303	[BUG]  [BUGGY]  if(value.getType()!=  Token.EXPR_RESULT)  {  return  Double.parseDouble(value);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()!=  Token.EXPR_RESULT)  {  return  Double.parseDouble(value);  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()!=  Token.EXPR_RESULT)  {  return  Double.parseDouble(value);  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    Double.parseDouble(value);    }    	non-compiled	[CE]  orphaned  case	38	None	replace
304	[BUG]  [BUGGY]  ||(value.getType()  ==  Token.EXPR_RESULT  &&  value.getType()  ==  Token.FUNCTION))  {  return  Double.parseDouble(value);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  ||(value.getType()  ==  Token.EXPR_RESULT  &&  value.getType()  ==  Token.FUNCTION))  {  return  Double.parseDouble(value);  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	||(value.getType()  ==  Token.EXPR_RESULT  &&  value.getType()  ==  Token.FUNCTION))  {  return  Double.parseDouble(value);  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    Double.parseDouble(value);    }    	non-compiled	[CE]  orphaned  case	38	None	replace
305	[BUG]  [BUGGY]  return  Double.parseDouble(value);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  Double.parseDouble(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  Double.parseDouble(value);	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    Double.parseDouble(value);    }    	non-compiled	[CE]  orphaned  case	38	None	replace
306	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NE)  {  return  Double.parseDouble(value);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NE)  {  return  Double.parseDouble(value);  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NE)  {  return  Double.parseDouble(value);  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    Double.parseDouble(value);    }    	non-compiled	[CE]  orphaned  case	38	None	replace
307	[BUG]  [BUGGY]  return(value.getType()  ==  Token.FUNCTION)?  valueNull  :  value.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return(value.getType()  ==  Token.FUNCTION)?  valueNull  :  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return(value.getType()  ==  Token.FUNCTION)?  valueNull  :  value.getType()  ==  Token.FUNCTION;	  return!valueNull    ||    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	30	None	replace
308	[BUG]  [BUGGY]  return!equivalent  ||  value.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!equivalent  ||  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent  ||  value.getType()  ==  Token.FUNCTION;	  return!valueNull    ||    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	30	None	replace
309	[BUG]  [BUGGY]  if(valueNequivalent  ==  null)  {  return!valueNequivalent;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNequivalent  ==  null)  {  return!valueNequivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNequivalent  ==  null)  {  return!valueNequivalent;  }	  return!valueNequivalent;    	non-compiled	[CE]  orphaned  case	53	None	replace
310	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNequivalent;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)  {  return!valueNequivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)  {  return!valueNequivalent;  }	  return!valueNequivalent;    	non-compiled	[CE]  orphaned  case	53	None	replace
311	[BUG]  [BUGGY]  if(valueNequivalent!=  null)  {  return!valueNequivalent;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNequivalent!=  null)  {  return!valueNequivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNequivalent!=  null)  {  return!valueNequivalent;  }	  return!valueNequivalent;    	non-compiled	[CE]  orphaned  case	53	None	replace
312	[BUG]  [BUGGY]  if(valueNequivalent  ==  valueUndefined)  {  return!valueNequivalent;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNequivalent  ==  valueUndefined)  {  return!valueNequivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNequivalent  ==  valueUndefined)  {  return!valueNequivalent;  }	  return!valueNequivalent;    	non-compiled	[CE]  orphaned  case	53	None	replace
313	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  valueNull)return  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueNull)return  1;	  if(valueNull    ||    valueNull)return    0;    	non-compiled	[CE]  orphaned  case	74	None	replace
314	[BUG]  [BUGGY]  if(valueUndefined  ||  valueNull)return  0;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined  ||  valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined  ||  valueNull)return  0;	  if(valueNull    ||    valueNull)return    0;    	non-compiled	[CE]  orphaned  case	74	None	replace
315	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  -1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  valueNull)return  -1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueNull)return  -1;	  if(valueNull    ||    valueNull)return    0;    	non-compiled	[CE]  orphaned  case	74	None	replace
316	[BUG]  [BUGGY]  if(equivalent  ||  valueNull)return  0;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(equivalent  ||  valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(equivalent  ||  valueNull)return  0;	  if(valueNull    ||    valueNull)return    0;    	non-compiled	[CE]  orphaned  case	74	None	replace
317	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  false;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  valueNull)return  false;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueNull)return  false;	  if(valueNull    ||    valueNull)return    0;    	non-compiled	[CE]  orphaned  case	74	None	replace
318	[BUG]  [BUGGY]  return!valueNull  &&  value.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull  &&  value.getType()  ==  Token.VAR;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  &&  value.getType()  ==  Token.VAR;	  return!valueNull    ||    value.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	32	None	replace
319	[BUG]  [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.VAR;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  ||  value.getType()  ==  Token.VAR;	  return!valueNull    ||    value.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	32	None	replace
320	[BUG]  [BUGGY]  return!equivalent  ||  value.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!equivalent  ||  value.getType()  ==  Token.VAR;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent  ||  value.getType()  ==  Token.VAR;	  return!valueNull    ||    value.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	32	None	replace
321	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.VAR;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  &&  value.getType()  ==  Token.VAR;	  return!valueNull    ||    value.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	32	None	replace
322	[BUG]  [BUGGY]  return!valueNull  &&  value.getType()!=  Token.GETELEM;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull  &&  value.getType()!=  Token.GETELEM;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  &&  value.getType()!=  Token.GETELEM;	  return!valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	72	None	replace
323	[BUG]  [BUGGY]  return!equivalent  &&  value.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!equivalent  &&  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!equivalent  &&  value.getType()  ==  Token.GETELEM;	  return!valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	72	None	replace
324	[BUG]  [BUGGY]  if(valueUndefined  ||  valueNull)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined  ||  valueNull)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined  ||  valueNull)  {  return!valueUndefined;  }	  if(valueNull    ||    valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
325	[BUG]  [BUGGY]  if(valueNull  &&  valueNull)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  &&  valueNull)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  &&  valueNull)  {  return!valueUndefined;  }	  if(valueNull    ||    valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
326	[BUG]  [BUGGY]  if(valueUndefined  ||  valueNull)  {  return  false;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined  ||  valueNull)  {  return  false;  }	  if(valueNull    ||    valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
327	[BUG]  [BUGGY]  if(valueUndefined!=  null)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined!=  null)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined!=  null)  {  return!valueUndefined;  }	  if(valueUndefined    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	66	None	replace
328	[BUG]  [BUGGY]  if(valueUndefined  ==  null)  {  return  false;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined  ==  null)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined  ==  null)  {  return  false;  }	  if(valueUndefined    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	66	None	replace
329	[BUG]  [BUGGY]  if(valueUndefined  ==  null)  {  return!valueNull;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined  ==  null)  {  return!valueNull;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined  ==  null)  {  return!valueNull;  }	  if(valueUndefined    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	66	None	replace
330	[BUG]  [BUGGY]  return!valueNegative  +  valueNull;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNegative  +  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNegative  +  valueNull;	  return!valueNegative;    	non-compiled	[CE]  orphaned  case	1	None	replace
331	[BUG]  [BUGGY]  return!valueNegative  &&  valueNull;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNegative  &&  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNegative  &&  valueNull;	  return!valueNegative;    	non-compiled	[CE]  orphaned  case	1	None	replace
332	[BUG]  [BUGGY]  return(valueNull  ||  valueUndefined.equals(value));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return(valueNull  ||  valueUndefined.equals(value));  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return(valueNull  ||  valueUndefined.equals(value));	  return!valueNull    ||    valueUndefined.equals(value);    	non-compiled	[CE]  orphaned  case	73	None	replace
333	[BUG]  [BUGGY]  if(op  ==  null)return  false;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  null)return  false;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  null)return  false;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return    false;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
334	[BUG]  [BUGGY]  if(valueNull)return  false;  if(op  ==  -1)  {  return  false;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return  false;  if(op  ==  -1)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  false;  if(op  ==  -1)  {  return  false;  }	  if(valueNull)return    false;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
335	[BUG]  [BUGGY]  return!doubleValue  -  value.doubleValue();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!doubleValue  -  value.doubleValue();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!doubleValue  -  value.doubleValue();	  return!doubleValue;    	non-compiled	[CE]  orphaned  case	45	None	replace
336	[BUG]  [BUGGY]  return!doubleValue  +  valueNull;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!doubleValue  +  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!doubleValue  +  valueNull;	  return!doubleValue;    	non-compiled	[CE]  orphaned  case	45	None	replace
337	[BUG]  [BUGGY]  return!doubleValue.doubleValue();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!doubleValue.doubleValue();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!doubleValue.doubleValue();	  return!doubleValue;    	non-compiled	[CE]  orphaned  case	45	None	replace
338	[BUG]  [BUGGY]  return  value.equals(valueUndefined)&&!valueNull;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.equals(valueUndefined)&&!valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.equals(valueUndefined)&&!valueNull;	  return    value.equals(valueUndefined);    	non-compiled	[CE]  orphaned  case	87	None	replace
339	[BUG]  [BUGGY]  if(op  ==  Token.NE  ||  op  ==  Token.NE)  {  return!super.equivalent;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NE  ||  op  ==  Token.NE)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NE  ||  op  ==  Token.NE)  {  return!super.equivalent;  }	  if(op    ==    Token.NE)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	19	None	replace
340	[BUG]  [BUGGY]  if(valueUndefined  ==  Token.NE)  {  return!super.equivalent;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined  ==  Token.NE)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined  ==  Token.NE)  {  return!super.equivalent;  }	  if(op    ==    Token.NE)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	19	None	replace
341	[BUG]  [BUGGY]  if(value  ==  null)  {  return!super.equivalent;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  ==  null)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null)  {  return!super.equivalent;  }	  if(op    ==    Token.NE)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	19	None	replace
342	[BUG]  [BUGGY]  if(value  ==  null)  {  return!value;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  ==  null)  {  return!value;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null)  {  return!value;  }	  if(op    ==    null)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
343	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION  &&  value.getType()  ==  Token.GETELEM)  {  return  false;  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION  &&  value.getType()  ==  Token.GETELEM)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.FUNCTION  &&  value.getType()  ==  Token.GETELEM)  {  return  false;  }	  if(value.getType()    ==    Token.FUNCTION    ||    value.getType()    ==    Token.GETELEM)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
344	[BUG]  [BUGGY]  if(value.getType()  ==  Token.NE  ||  value.getType()  ==  Token.GETELEM)  {  return  false;  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.NE  ||  value.getType()  ==  Token.GETELEM)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.NE  ||  value.getType()  ==  Token.GETELEM)  {  return  false;  }	  if(value.getType()    ==    Token.FUNCTION    ||    value.getType()    ==    Token.GETELEM)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
345	[BUG]  [BUGGY]  if(super.equivalent)  {  return!super.equivalent;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(super.equivalent)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(super.equivalent)  {  return!super.equivalent;  }	  if(valueUndefined)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	18	None	replace
346	[BUG]  [BUGGY]  if(super.equivalent!=  valueUndefined)  {  return!super.equivalent;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(super.equivalent!=  valueUndefined)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(super.equivalent!=  valueUndefined)  {  return!super.equivalent;  }	  if(valueUndefined)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	18	None	replace
347	[BUG]  [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT  +  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT  +  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.EXPR_RESULT  +  1;	  return    value.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	81	None	replace
348	[BUG]  [BUGGY]  return  value.getType()!=  Token.EXPR_RESULT  ||  valueNull;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()!=  Token.EXPR_RESULT  ||  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()!=  Token.EXPR_RESULT  ||  valueNull;	  return    value.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	81	None	replace
349	[BUG]  [BUGGY]  if(op  ||  valueNull)return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ||  valueNull)return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ||  valueNull)return!valueUndefined;  if(op  ==  0)  {  return  false;  }	  if(valueNull    ||    valueUndefined)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
350	[BUG]  [BUGGY]  return!negNum;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!negNum;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!negNum;	  return!valueNum;    	non-compiled	[CE]  orphaned  case	51	None	replace
351	[BUG]  [BUGGY]  return!valueNum  +  valueNull;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNum  +  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNum  +  valueNull;	  return!valueNum;    	non-compiled	[CE]  orphaned  case	51	None	replace
352	[BUG]  [BUGGY]  parent  ==  null  ||  valueNull)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  parent  ==  null  ||  valueNull)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	parent  ==  null  ||  valueNull)  {  return!equivalent;  }	  if(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
353	[BUG]  [BUGGY]  parent!=  null  &&  valueNull)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  parent!=  null  &&  valueNull)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	parent!=  null  &&  valueNull)  {  return!equivalent;  }	  if(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
354	[BUG]  [BUGGY]  return  value.getType()  {  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  {  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  {  Token.FUNCTION;	  if(value.getType()    ==    Token.OBJECTLIT)    {    return    value.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
355	[BUG]  [BUGGY]  return  value.getType()  [Delete]  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  [Delete]  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  [Delete]  Token.FUNCTION;	  if(value.getType()    ==    Token.OBJECTLIT)    {    return    value.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
356	[BUG]  [BUGGY]  value.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	value.getType()  ==  Token.FUNCTION;	  if(value.getType()    ==    Token.OBJECTLIT)    {    return    value.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  orphaned  case	42	None	replace
357	[BUG]  [BUGGY]  return  valueNull  &&!equivalent;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  &&!equivalent;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  &&!equivalent;	  return!valueNull    &&!equivalent;    	non-compiled	[CE]  orphaned  case	80	None	replace
358	[BUG]  [BUGGY]  return  valueNull  ||!equivalent;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  ||!equivalent;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  ||!equivalent;	  return!valueNull    &&!equivalent;    	non-compiled	[CE]  orphaned  case	80	None	replace
359	[BUG]  [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NAME);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return(valueNull  ||  value.getType()  ==  Token.NAME);	  return!valueNull    ||    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	29	None	replace
360	[BUG]  [BUGGY]  if(op  ==  Token.FUNCTION  ||  op  ==  ROOT_LOCALE)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.FUNCTION  ||  op  ==  ROOT_LOCALE)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.FUNCTION  ||  op  ==  ROOT_LOCALE)  {  return!equivalent;  }	  if(op    ==    Token.FUNCTION)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	49	None	replace
361	[BUG]  [BUGGY]  if(op  ==  Token.FUNCTION  ||  op  ==  Token.NE)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.FUNCTION  ||  op  ==  Token.NE)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.FUNCTION  ||  op  ==  Token.NE)  {  return!equivalent;  }	  if(op    ==    Token.FUNCTION)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	49	None	replace
362	[BUG]  [BUGGY]  if(op  ==  Token.FUNCTION  ||  op  ==  Token.NUMBER)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.FUNCTION  ||  op  ==  Token.NUMBER)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.FUNCTION  ||  op  ==  Token.NUMBER)  {  return!equivalent;  }	  if(op    ==    Token.FUNCTION)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	49	None	replace
363	[BUG]  [BUGGY]  if(op  ==  Token.FUNCTION  ||  op  ==  Token.GETELEM)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.FUNCTION  ||  op  ==  Token.GETELEM)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.FUNCTION  ||  op  ==  Token.GETELEM)  {  return!equivalent;  }	  if(op    ==    Token.FUNCTION)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	49	None	replace
364	[BUG]  [BUGGY]  return  value.value;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.value;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.value;	  return    value.equivalent;    	non-compiled	[CE]  orphaned  case	86	None	replace
365	[BUG]  [BUGGY]  return  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLastChil  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLastChil  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLastChil	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil    	non-compiled	[CE]  orphaned  case	55	None	replace
366	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getNext().getLastChild().getLastChild().getLastChild().getLastChil  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getNext().getLastChild().getLastChild().getLastChild().getLastChil  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getNext().getLastChild().getLastChild().getLastChild().getLastChil	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil    	non-compiled	[CE]  orphaned  case	55	None	replace
367	[BUG]  [BUGGY]  return  valueUndefined  -  value.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLastChil  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueUndefined  -  value.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLastChil  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueUndefined  -  value.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLastChil	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil    	non-compiled	[CE]  orphaned  case	55	None	replace
368	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getNext().getLastChil  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getNext().getLastChil  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getNext().getLastChil	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChil    	non-compiled	[CE]  orphaned  case	55	None	replace
369	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.VAR);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return(valueNull  &&  value.getType()  ==  Token.VAR);	  return!valueNull    ||    value.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	32	None	replace
370	[BUG]  [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.VAR);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return(valueNull  ||  value.getType()  ==  Token.VAR);	  return!valueNull    ||    value.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	32	None	replace
371	[BUG]  [BUGGY]  if(op  ==  Token.UNKNOWN  ||  op  ==  Token.SCRIPT)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.UNKNOWN  ||  op  ==  Token.SCRIPT)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.UNKNOWN  ||  op  ==  Token.SCRIPT)  {  return!equivalent;  }	  if(op    ==    Token.UNKNOWN)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
372	[BUG]  [BUGGY]  if(op!=  Token.UNKNOWN)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op!=  Token.UNKNOWN)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op!=  Token.UNKNOWN)  {  return!valueUndefined;  }	  if(op    ==    Token.UNKNOWN)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
373	[BUG]  [BUGGY]  if(op  ==  Token.UNKNOWN  ||  op  ==  Token.CATCH)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.UNKNOWN  ||  op  ==  Token.CATCH)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.UNKNOWN  ||  op  ==  Token.CATCH)  {  return!equivalent;  }	  if(op    ==    Token.UNKNOWN)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
374	[BUG]  [BUGGY]  if(op  ==  Token.UNKNOWN  ||  op  ==  Token.THIS)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.UNKNOWN  ||  op  ==  Token.THIS)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.UNKNOWN  ||  op  ==  Token.THIS)  {  return!equivalent;  }	  if(op    ==    Token.UNKNOWN)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
375	[BUG]  [BUGGY]  if(op  ==  Token.UNKNOWN  ||  op  ==  Token.SHNE)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.UNKNOWN  ||  op  ==  Token.SHNE)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.UNKNOWN  ||  op  ==  Token.SHNE)  {  return!equivalent;  }	  if(op    ==    Token.UNKNOWN)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
376	[BUG]  [BUGGY]  if(equivalent  ||  valueNull)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(equivalent  ||  valueNull)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(equivalent  ||  valueNull)  {  return!valueUndefined;  }	  if(valueNull    ||    valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
377	[BUG]  [BUGGY]  if(valueNull)  {  return  true;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)  {  return  true;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)  {  return  true;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
378	[BUG]  [BUGGY]  if(valueNull  ||  valueUndefined)  {  return  false;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  valueUndefined)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueUndefined)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
379	[BUG]  [BUGGY]  ||  valueNull)  {  return  false;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	||  valueNull)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
380	[BUG]  [BUGGY]  return  value.getType()  >>  Token.GETELEM;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  >>  Token.GETELEM;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  >>  Token.GETELEM;	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.GETELEM;    }    	non-compiled	[CE]  orphaned  case	41	None	replace
381	[BUG]  [BUGGY]  return  value.getType()  >=  Token.GETELEM;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  >=  Token.GETELEM;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  >=  Token.GETELEM;	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.GETELEM;    }    	non-compiled	[CE]  orphaned  case	41	None	replace
382	[BUG]  [BUGGY]  Return  value.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  Return  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	Return  value.getType()  ==  Token.GETELEM;	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.GETELEM;    }    	non-compiled	[CE]  orphaned  case	41	None	replace
383	[BUG]  [BUGGY]  value.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	value.getType()  ==  Token.GETELEM;	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.GETELEM;    }    	non-compiled	[CE]  orphaned  case	41	None	replace
384	[BUG]  [BUGGY]  if(value  >=  null)  {  return  false;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  >=  null)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  >=  null)  {  return  false;  }	  if(value    ==    null)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
385	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getClass()!=  ROOT_LOCALE)  {  return  false;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  ==  null  ||  value.getClass()!=  ROOT_LOCALE)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null  ||  value.getClass()!=  ROOT_LOCALE)  {  return  false;  }	  if(value    ==    null)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
386	[BUG]  [BUGGY]  if(value  ==  null)  {  return  true;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  ==  null)  {  return  true;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null)  {  return  true;  }	  if(value    ==    null)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
387	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild    	non-compiled	[CE]  orphaned  case	60	None	replace
388	[BUG]  [BUGGY]  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NE)  {  return  valueUndefined;  }	  if(valueUndefined)return!super.equivalent;    if(op    ==    Token.NE)    {    return    valueUndefined;    }    	non-compiled	[CE]  orphaned  case	21	None	replace
389	[BUG]  [BUGGY]  if(valueUndefined)return  false;  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)return  false;  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return  false;  if(op  ==  Token.NE)  {  return  valueUndefined;  }	  if(valueUndefined)return!super.equivalent;    if(op    ==    Token.NE)    {    return    valueUndefined;    }    	non-compiled	[CE]  orphaned  case	21	None	replace
390	[BUG]  [BUGGY]  if(valueUndefined)return!equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined)return!equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined)return!equivalent;  if(op  ==  Token.NE)  {  return  valueUndefined;  }	  if(valueUndefined)return!super.equivalent;    if(op    ==    Token.NE)    {    return    valueUndefined;    }    	non-compiled	[CE]  orphaned  case	21	None	replace
391	[BUG]  [BUGGY]  return  value.getType()  >>  Token.NAME;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  >>  Token.NAME;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  >>  Token.NAME;	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.NAME;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
392	[BUG]  [BUGGY]  return  value.getType()!=  Token.NAME;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()!=  Token.NAME;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()!=  Token.NAME;	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.NAME;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
393	[BUG]  [BUGGY]  value.getType()  ==  Token.NAME;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  value.getType()  ==  Token.NAME;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	value.getType()  ==  Token.NAME;	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.NAME;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
394	[BUG]  [BUGGY]  Return  value.getType()  ==  Token.NAME;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  Return  value.getType()  ==  Token.NAME;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	Return  value.getType()  ==  Token.NAME;	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.NAME;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
395	[BUG]  [BUGGY]  return  value.getType()  >=  Token.NAME;  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  >=  Token.NAME;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  >=  Token.NAME;	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.NAME;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
396	[BUG]  [BUGGY]  return  value.getType()  ==  Token.NAME;  }  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.NAME;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.NAME;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.NAME;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
397	[BUG]  [BUGGY]  if(valueNull  ||  valueUndefined)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  valueUndefined)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueUndefined)  {  return!valueUndefined;  }	  if(op    ==    null    ||!valueUndefined)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	75	None	replace
398	[BUG]  [BUGGY]  if(valueUndefined  ==  null  ||!valueUndefined)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined  ==  null  ||!valueUndefined)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined  ==  null  ||!valueUndefined)  {  return!valueUndefined;  }	  if(op    ==    null    ||!valueUndefined)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	75	None	replace
399	[BUG]  [BUGGY]  if(valueUndefined  ==  null  ||!valueUndefined)  {  return  false;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined  ==  null  ||!valueUndefined)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined  ==  null  ||!valueUndefined)  {  return  false;  }	  if(op    ==    null    ||!valueUndefined)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	75	None	replace
400	[BUG]  [BUGGY]  if(valueNull  ||!valueUndefined)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||!valueUndefined)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||!valueUndefined)  {  return!valueUndefined;  }	  if(op    ==    null    ||!valueUndefined)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	75	None	replace
401	[BUG]  [BUGGY]  if(valueNull)return!super.equivalent;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return!super.equivalent;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return!super.equivalent;  if(op  ==  0)  {  return  false;  }	  if(valueUndefined)return!super.equivalent;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	22	None	replace
402	[BUG]  [BUGGY]  if(super.equivalent)return  false;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(super.equivalent)return  false;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(super.equivalent)return  false;  if(op  ==  0)  {  return  false;  }	  if(valueUndefined)return!super.equivalent;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	22	None	replace
403	[BUG]  [BUGGY]  if(op  ==  Token.NE  ||  op  ==  Token.NE)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NE  ||  op  ==  Token.NE)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NE  ||  op  ==  Token.NE)  {  return!valueUndefined;  }	  if(op    ==    Token.NE)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	47	None	replace
404	[BUG]  [BUGGY]  if(valueUndefined  ==  Token.NE)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined  ==  Token.NE)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined  ==  Token.NE)  {  return!equivalent;  }	  if(op    ==    Token.NE)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	47	None	replace
405	[BUG]  [BUGGY]  return  value.getType()  ==  Token.NUMBER  +  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.NUMBER  +  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.NUMBER  +  1;	  return    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  orphaned  case	84	None	replace
406	[BUG]  [BUGGY]  return  value.getType()  >=  Token.NUMBER;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  >=  Token.NUMBER;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  >=  Token.NUMBER;	  return    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  orphaned  case	84	None	replace
407	[BUG]  [BUGGY]  return  value.getType()  >>  Token.NUMBER;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  >>  Token.NUMBER;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  >>  Token.NUMBER;	  return    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  orphaned  case	84	None	replace
408	[BUG]  [BUGGY]  return  value.getType()  ==  Token.NUMBER  -  1;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.NUMBER  -  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.NUMBER  -  1;	  return    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  orphaned  case	84	None	replace
409	[BUG]  [BUGGY]  if(op  ==  null)return  true;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  null)return  true;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  null)return  true;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return    true;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
410	[BUG]  [BUGGY]  return  true;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  true;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  true;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return    true;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
411	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild().getLastChild().getLocale  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild().getLastChild().getLocale  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild().getLastChild().getLocale	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();    	non-compiled	[CE]  orphaned  case	59	None	replace
412	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();    	non-compiled	[CE]  orphaned  case	59	None	replace
413	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().get  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().get  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().get	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();    	non-compiled	[CE]  orphaned  case	59	None	replace
414	[BUG]  [BUGGY]  return!valueNequivalent  ||  valueNull;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNequivalent  ||  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNequivalent  ||  valueNull;	  return!valueNequivalent;    	non-compiled	[CE]  orphaned  case	53	None	replace
415	[BUG]  [BUGGY]  return!valueNequivalent  +  valueNull;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNequivalent  +  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNequivalent  +  valueNull;	  return!valueNequivalent;    	non-compiled	[CE]  orphaned  case	53	None	replace
416	[BUG]  [BUGGY]  return!valueNequivalent.booleanValue();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNequivalent.booleanValue();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNequivalent.booleanValue();	  return!valueNequivalent;    	non-compiled	[CE]  orphaned  case	53	None	replace
417	[BUG]  [BUGGY]  return!valueNequivalent.equals(valueUndefined);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNequivalent.equals(valueUndefined);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNequivalent.equals(valueUndefined);	  return!valueNequivalent;    	non-compiled	[CE]  orphaned  case	53	None	replace
418	[BUG]  [BUGGY]  return  value.getType()  ==  Token.RETURN  +  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.RETURN  +  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.RETURN  +  1;	  return    value.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	82	None	replace
419	[BUG]  [BUGGY]  return  value.getType()  >=  Token.RETURN;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  >=  Token.RETURN;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  >=  Token.RETURN;	  return    value.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	82	None	replace
420	[BUG]  [BUGGY]  return  value.getType()  >>  Token.RETURN;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  >>  Token.RETURN;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  >>  Token.RETURN;	  return    value.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	82	None	replace
421	[BUG]  [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.FUNCTION);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return(valueNull  ||  value.getType()  ==  Token.FUNCTION);	  return!valueNull    ||    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  orphaned  case	30	None	replace
422	[BUG]  [BUGGY]  return  valueNull.equals(super.equivalent);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull.equals(super.equivalent);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull.equals(super.equivalent);	  return    op.equals(super.equivalent);    	non-compiled	[CE]  orphaned  case	77	None	replace
423	[BUG]  [BUGGY]  return  equals(value.equivalent);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  equals(value.equivalent);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  equals(value.equivalent);	  return    op.equals(super.equivalent);    	non-compiled	[CE]  orphaned  case	77	None	replace
424	[BUG]  [BUGGY]  if(valueNull  &&  valueNull)return  0;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  &&  valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  &&  valueNull)return  0;	  if(valueNull    ||    valueNull)return    0;    	non-compiled	[CE]  orphaned  case	74	None	replace
425	[BUG]  [BUGGY]  valueUndefined  ||  equal)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  valueUndefined  ||  equal)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	valueUndefined  ||  equal)  {  return!valueUndefined;  }	  if(equivalent)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	5	None	replace
426	[BUG]  [BUGGY]  return!regexp  &&  value.equals(value);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!regexp  &&  value.equals(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!regexp  &&  value.equals(value);	  return!regexp;    	non-compiled	[CE]  orphaned  case	64	None	replace
427	[BUG]  [BUGGY]  return!regexp  &&  valueNull;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!regexp  &&  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!regexp  &&  valueNull;	  return!regexp;    	non-compiled	[CE]  orphaned  case	64	None	replace
428	[BUG]  [BUGGY]  return!value.equals(valueUndefined);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!value.equals(valueUndefined);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!value.equals(valueUndefined);	  return!value;    	non-compiled	[CE]  orphaned  case	63	None	replace
429	[BUG]  [BUGGY]  if(op)return  false;  if(valueUndefined  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op)return  false;  if(valueUndefined  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op)return  false;  if(valueUndefined  ==  0)  {  return  false;  }	  if(valueUndefined)return    false;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	27	None	replace
430	[BUG]  [BUGGY]  if(valueUndefined  ==  Token.NUMBER)  {  return!super.equivalent;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined  ==  Token.NUMBER)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined  ==  Token.NUMBER)  {  return!super.equivalent;  }	  if(op    ==    Token.NUMBER)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
431	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined;	  return    valueNull;    	non-compiled	[CE]  orphaned  case	52	None	replace
432	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getLocale();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getLocale();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getLocale();	  return    valueNull;    	non-compiled	[CE]  orphaned  case	52	None	replace
433	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.doubleValue();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.doubleValue();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.doubleValue();	  return    valueNull;    	non-compiled	[CE]  orphaned  case	52	None	replace
434	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getLanguage();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getLanguage();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getLanguage();	  return    valueNull;    	non-compiled	[CE]  orphaned  case	52	None	replace
435	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getValue();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getValue();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getValue();	  return    valueNull;    	non-compiled	[CE]  orphaned  case	52	None	replace
436	[BUG]  [BUGGY]  if(op  ==  null)  {  return  true;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  null)  {  return  true;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  null)  {  return  true;  }	  if(op    ==    null)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
437	[BUG]  [BUGGY]  if(valueNull)return  false;  else  if(valueNull)return  -1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return  false;  else  if(valueNull)return  -1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  false;  else  if(valueNull)return  -1;	  if(valueNull)return    false;    else    if(valueNull)return    0;    	non-compiled	[CE]  orphaned  case	14	None	replace
438	[BUG]  [BUGGY]  if(valueNull)return!value;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return!value;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return!value;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return!equivalent;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
439	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NUMBER)  {  return  Double.parseDouble(value);  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NUMBER)  {  return  Double.parseDouble(value);  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NUMBER)  {  return  Double.parseDouble(value);  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    Double.parseDouble(value);    }    	non-compiled	[CE]  orphaned  case	38	None	replace
440	[BUG]  [BUGGY]  return  value.getType()  ==  Token.THIS  ||  valueNull;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.THIS  ||  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.THIS  ||  valueNull;	  return    value.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	85	None	replace
441	[BUG]  [BUGGY]  return  value.getType()  ==  Token.THIS  &&  value.getFirstChild()!=  op;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.THIS  &&  value.getFirstChild()!=  op;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.THIS  &&  value.getFirstChild()!=  op;	  return    value.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	85	None	replace
442	[BUG]  [BUGGY]  return  value.getType()  ==  Token.THIS  &&  ValueUtils.isScalarValue(value);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.THIS  &&  ValueUtils.isScalarValue(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.THIS  &&  ValueUtils.isScalarValue(value);	  return    value.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	85	None	replace
443	[BUG]  [BUGGY]  return  value.getType()  >=  Token.THIS;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  >=  Token.THIS;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  >=  Token.THIS;	  return    value.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	85	None	replace
444	[BUG]  [BUGGY]  return  value.getType()  ==  Token.THIS  &&  value.getChildCount()  >  1;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.THIS  &&  value.getChildCount()  >  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.THIS  &&  value.getChildCount()  >  1;	  return    value.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	85	None	replace
445	[BUG]  [BUGGY]  if(valueNull)return  1;  else  if(valueNull)return  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return  1;  else  if(valueNull)return  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  1;  else  if(valueNull)return  1;	  if(valueNull)return    0;    else    if(valueNull)return    0;    	non-compiled	[CE]  orphaned  case	15	None	replace
446	[BUG]  [BUGGY]  if(op  ==  Token.NUMBER  ||  op  ==  Token.NUMBER)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NUMBER  ||  op  ==  Token.NUMBER)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NUMBER  ||  op  ==  Token.NUMBER)  {  return!equivalent;  }	  if(op    ==    Token.NUMBER)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	50	None	replace
447	[BUG]  [BUGGY]  return!valueUndefined;  if(op!=  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueUndefined;  if(op!=  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueUndefined;  if(op!=  0)  {  return  false;  }	  return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
448	[BUG]  [BUGGY]  return!valueUndefined;  if(op  ==  1)  {  return  false;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueUndefined;  if(op  ==  1)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueUndefined;  if(op  ==  1)  {  return  false;  }	  return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
449	[BUG]  [BUGGY]  return  valueNull;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull;  if(op  ==  0)  {  return  false;  }	  return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
450	[BUG]  [BUGGY]  return!valueUndefined;  if(op  ==  -1)  {  return  false;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueUndefined;  if(op  ==  -1)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueUndefined;  if(op  ==  -1)  {  return  false;  }	  return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
451	[BUG]  [BUGGY]  if(valueNull  ||  valueUndefined)  {  return!valueNull;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  valueUndefined)  {  return!valueNull;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueUndefined)  {  return!valueNull;  }	  if(valueNull)    {    return!valueNull;    }    	non-compiled	[CE]  orphaned  case	7	None	replace
452	[BUG]  [BUGGY]  valueNull  =  valueUndefined;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  valueNull  =  valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	valueNull  =  valueUndefined;	  if(valueNull)    {    return!valueNull;    }    	non-compiled	[CE]  orphaned  case	7	None	replace
453	[BUG]  [BUGGY]  if(valueNull)return!value;  else  if(valueNull)return  0;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return!value;  else  if(valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return!value;  else  if(valueNull)return  0;	  if(valueNull)return!equivalent;    else    if(valueNull)return    0;    	non-compiled	[CE]  orphaned  case	62	None	replace
454	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild().getLastChild  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild().getLastChild  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild().getLastChild	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild();    	non-compiled	[CE]  orphaned  case	56	None	replace
455	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getNext().getLastChild().getLastChild().getLastChil  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getNext().getLastChild().getLastChild().getLastChil  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getNext().getLastChild().getLastChild().getLastChil	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild();    	non-compiled	[CE]  orphaned  case	56	None	replace
456	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return!nequivalent;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  valueNull)  {  return!nequivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueNull)  {  return!nequivalent;  }	  if(valueNull)    {    return!nequivalent;    }    	non-compiled	[CE]  orphaned  case	88	None	replace
457	[BUG]  [BUGGY]  return  valueNull  ||!super.equivalent;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  ||!super.equivalent;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  ||!super.equivalent;	  return!super.equivalent    ||    valueNull;    	non-compiled	[CE]  orphaned  case	17	None	replace
458	[BUG]  [BUGGY]  return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild();	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
459	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getNext();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getNext();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getNext();	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
460	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getString().getLastChild().getLastChild().getLastChild().getLastChil  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getString().getLastChild().getLastChild().getLastChild().getLastChil  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getString().getLastChild().getLastChild().getLastChild().getLastChil	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
461	[BUG]  [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_ID_INVALID_GETELEM_INDEX_ERROR));  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_ID_INVALID_GETELEM_INDEX_ERROR));  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	Context.report(JSError.make(value,  NON_GLOBAL_ID_INVALID_GETELEM_INDEX_ERROR));	  Context.reportCodeChange();    	non-compiled	[CE]  orphaned  case	39	None	replace
462	[BUG]  [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_ID_INVALID_GETELEM_INDEX_ERROR),  op);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_ID_INVALID_GETELEM_INDEX_ERROR),  op);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	Context.report(JSError.make(value,  NON_GLOBAL_ID_INVALID_GETELEM_INDEX_ERROR),  op);	  Context.reportCodeChange();    	non-compiled	[CE]  orphaned  case	39	None	replace
463	[BUG]  [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_NUMBER_ERROR));  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_NUMBER_ERROR));  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	Context.report(JSError.make(value,  NON_GLOBAL_NUMBER_ERROR));	  Context.reportCodeChange();    	non-compiled	[CE]  orphaned  case	39	None	replace
464	[BUG]  [BUGGY]  if(valueNull)return  0;  if(valueUndefined)return  0;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return  0;  if(valueUndefined)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  0;  if(valueUndefined)return  0;	  return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  orphaned  case	16	None	replace
465	[BUG]  [BUGGY]  return!super.equivalent  =  valueUndefined  +  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!super.equivalent  =  valueUndefined  +  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  =  valueUndefined  +  1;	  return!super.equivalent    =    valueUndefined;    	non-compiled	[CE]  orphaned  case	70	None	replace
466	[BUG]  [BUGGY]  return  value.getType()  ==  Token.GETELEM  ||  valueNull;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.GETELEM  ||  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.GETELEM  ||  valueNull;	  return    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	83	None	replace
467	[BUG]  [BUGGY]  return  value.getType()  ==  Token.SETELEM;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.SETELEM;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.SETELEM;	  return    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	83	None	replace
468	[BUG]  [BUGGY]  return!valueUndefined.intValue();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueUndefined.intValue();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueUndefined.intValue();	  return!negated.intValue();    	non-compiled	[CE]  orphaned  case	12	None	replace
469	[BUG]  [BUGGY]  return(valueNull  ||  valueUndefined);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return(valueNull  ||  valueUndefined);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return(valueNull  ||  valueUndefined);	  return!valueNull    ||    valueUndefined;    	non-compiled	[CE]  orphaned  case	28	None	replace
470	[BUG]  [BUGGY]  if(valueNull)return  0;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  0;	  if(valueUndefined)return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  orphaned  case	13	None	replace
471	[BUG]  [BUGGY]  if(valueNull)return  0;  else  if(valueUndefined)return  0;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return  0;  else  if(valueUndefined)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  0;  else  if(valueUndefined)return  0;	  if(valueUndefined)return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  orphaned  case	13	None	replace
472	[BUG]  [BUGGY]  if(op  ==  1)return  true;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  1)return  true;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  1)return  true;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return    true;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
473	[BUG]  [BUGGY]  if(op  ==  Token.NE)return  true;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NE)return  true;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NE)return  true;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return    true;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
474	[BUG]  [BUGGY]  if(op)return  true;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op)return  true;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op)return  true;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return    true;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
475	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  Double.POSITIVE_INFINITY;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  valueNull)return  Double.POSITIVE_INFINITY;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueNull)return  Double.POSITIVE_INFINITY;	  if(valueNull    ||    valueNull)return    0;    	non-compiled	[CE]  orphaned  case	74	None	replace
476	[BUG]  [BUGGY]  if(valueNull  ||  equal)return  0;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  equal)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  equal)return  0;	  if(valueNull    ||    valueNull)return    0;    	non-compiled	[CE]  orphaned  case	74	None	replace
477	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  Double.NaN;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  valueNull)return  Double.NaN;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  valueNull)return  Double.NaN;	  if(valueNull    ||    valueNull)return    0;    	non-compiled	[CE]  orphaned  case	74	None	replace
478	[BUG]  [BUGGY]  if(op  ==  1)return  false;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  1)return  false;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  1)return  false;  if(op  ==  0)  {  return  false;  }	  if(valueUndefined)return    false;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	27	None	replace
479	[BUG]  [BUGGY]  if(op  ==  Token.NE)return  false;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NE)return  false;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NE)return  false;  if(op  ==  0)  {  return  false;  }	  if(valueUndefined)return    false;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	27	None	replace
480	[BUG]  [BUGGY]  if(op  <=  0)return  false;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  <=  0)return  false;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  <=  0)return  false;  if(op  ==  0)  {  return  false;  }	  if(valueUndefined)return    false;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	27	None	replace
481	[BUG]  [BUGGY]  if(op)return  false;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op)return  false;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op)return  false;  if(op  ==  0)  {  return  false;  }	  if(valueUndefined)return    false;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	27	None	replace
482	[BUG]  [BUGGY]  return  value.equals(valueUndefined)?  value.equivalent  :  value.equivalent;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.equals(valueUndefined)?  value.equivalent  :  value.equivalent;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.equals(valueUndefined)?  value.equivalent  :  value.equivalent;	  return    value.equivalent;    	non-compiled	[CE]  orphaned  case	86	None	replace
483	[BUG]  [BUGGY]  return  value.equals(valueUndefined)?  0  :  value.equivalent;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.equals(valueUndefined)?  0  :  value.equivalent;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.equals(valueUndefined)?  0  :  value.equivalent;	  return    value.equivalent;    	non-compiled	[CE]  orphaned  case	86	None	replace
484	[BUG]  [BUGGY]  if(value  >>  null)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  >>  null)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  >>  null)  {  return!valueUndefined;  }	  if(value    >=    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	65	None	replace
485	[BUG]  [BUGGY]  Context.report(JSError.make(value,  op,  INVALID_GETELEM_INDEX_ERROR));  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  Context.report(JSError.make(value,  op,  INVALID_GETELEM_INDEX_ERROR));  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	Context.report(JSError.make(value,  op,  INVALID_GETELEM_INDEX_ERROR));	  Context.reportCodeChange();    	non-compiled	[CE]  orphaned  case	39	None	replace
486	[BUG]  [BUGGY]  Context.report(JSError.make(value,  op),  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  Context.report(JSError.make(value,  op),  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	Context.report(JSError.make(value,  op),  BITWISE_OPERAND_OUT_OF_RANGE);	  Context.reportCodeChange();    	non-compiled	[CE]  orphaned  case	39	None	replace
487	[BUG]  [BUGGY]  Context.report(JSError.make(value,  NON_SYNTHETIC_ERROR));  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  Context.report(JSError.make(value,  NON_SYNTHETIC_ERROR));  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	Context.report(JSError.make(value,  NON_SYNTHETIC_ERROR));	  Context.reportCodeChange();    	non-compiled	[CE]  orphaned  case	39	None	replace
488	[BUG]  [BUGGY]  Context.report(JSError.make(value,  op,  NON_NUMBER_ERROR));  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  Context.report(JSError.make(value,  op,  NON_NUMBER_ERROR));  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	Context.report(JSError.make(value,  op,  NON_NUMBER_ERROR));	  Context.reportCodeChange();    	non-compiled	[CE]  orphaned  case	39	None	replace
489	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLocale();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLocale();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getLastChild().getLocale();	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLocale();    	non-compiled	[CE]  orphaned  case	59	None	replace
490	[BUG]  [BUGGY]  return  value.getType()  ==  Token.THIS  &&  value.getFirstChild()!=  null;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.THIS  &&  value.getFirstChild()!=  null;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.THIS  &&  value.getFirstChild()!=  null;	  return    value.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	85	None	replace
491	[BUG]  [BUGGY]  return  value.getType()  ==  Token.THIS  &&  value.getFirstChild()  ==  null;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.THIS  &&  value.getFirstChild()  ==  null;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.THIS  &&  value.getFirstChild()  ==  null;	  return    value.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	85	None	replace
492	[BUG]  [BUGGY]  return  value.getType()  ==  Token.THIS?  value.getFirstChild().getNext()  :  null;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.THIS?  value.getFirstChild().getNext()  :  null;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.THIS?  value.getFirstChild().getNext()  :  null;	  return    value.getType()    ==    Token.THIS;    	non-compiled	[CE]  orphaned  case	85	None	replace
493	[BUG]  [BUGGY]  if(op  ==  null  ||!equivalent)  {  return  false;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  null  ||!equivalent)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  null  ||!equivalent)  {  return  false;  }	  if(op    ==    null)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	36	None	replace
494	[BUG]  [BUGGY]  return!valueNegative.equals(valueUndefined);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNegative.equals(valueUndefined);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNegative.equals(valueUndefined);	  return!valueNegative;    	non-compiled	[CE]  orphaned  case	1	None	replace
495	[BUG]  [BUGGY]  return!valueNegative.equals(value);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNegative.equals(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNegative.equals(value);	  return!valueNegative;    	non-compiled	[CE]  orphaned  case	1	None	replace
496	[BUG]  [BUGGY]  if(value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.GETELEM)return  false;  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.GETELEM)return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.GETELEM)return  false;  }	  if(value.getType()    ==    Token.FUNCTION    ||    value.getType()    ==    Token.GETELEM)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
497	[BUG]  [BUGGY]  if(value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.GETELEM)return  false;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.GETELEM)return  false;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.FUNCTION  ||  value.getType()  ==  Token.GETELEM)return  false;	  if(value.getType()    ==    Token.FUNCTION    ||    value.getType()    ==    Token.GETELEM)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
498	[BUG]  [BUGGY]  if(value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.GETELEM)  {  return  false;  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.GETELEM)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.GETELEM)  {  return  false;  }	  if(value.getType()    ==    Token.FUNCTION    ||    value.getType()    ==    Token.GETELEM)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
499	[BUG]  [BUGGY]  return  value.compareTo(valueUndefined);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.compareTo(valueUndefined);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.compareTo(valueUndefined);	  return    value.equals(valueUndefined);    	non-compiled	[CE]  orphaned  case	87	None	replace
500	[BUG]  [BUGGY]  return!result.booleanValue();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!result.booleanValue();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!result.booleanValue();	  return!negated.booleanValue();    	non-compiled	[CE]  orphaned  case	10	None	replace
501	[BUG]  [BUGGY]  if(op  ==  Token.NE  ||  op  ==  Token.THIS)  {  return!super.equivalent;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NE  ||  op  ==  Token.THIS)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NE  ||  op  ==  Token.THIS)  {  return!super.equivalent;  }	  if(op    ==    Token.NE)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	19	None	replace
502	[BUG]  [BUGGY]  if(op  ==  Token.NE  ||  op  ==  Token.NUMBER)  {  return!super.equivalent;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NE  ||  op  ==  Token.NUMBER)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NE  ||  op  ==  Token.NUMBER)  {  return!super.equivalent;  }	  if(op    ==    Token.NE)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	19	None	replace
503	[BUG]  [BUGGY]  if(op  ==  Token.NE  ||  op  ==  Token.NUMBER)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NE  ||  op  ==  Token.NUMBER)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NE  ||  op  ==  Token.NUMBER)  {  return!equivalent;  }	  if(op    ==    Token.NE)    {    return!equivalent;    }    	non-compiled	[CE]  orphaned  case	47	None	replace
504	[BUG]  [BUGGY]  return  op.compareTo(value.equivalent);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  op.compareTo(value.equivalent);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  op.compareTo(value.equivalent);	  return    op.equals(super.equivalent);    	non-compiled	[CE]  orphaned  case	77	None	replace
505	[BUG]  [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT?  value.getFirstChild().getNext()  :  null;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT?  value.getFirstChild().getNext()  :  null;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.EXPR_RESULT?  value.getFirstChild().getNext()  :  null;	  return    value.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	81	None	replace
506	[BUG]  [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT  &&  value.getFirstChild()!=  null;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT  &&  value.getFirstChild()!=  null;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.EXPR_RESULT  &&  value.getFirstChild()!=  null;	  return    value.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	81	None	replace
507	[BUG]  [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT  &&  value.getChildCount()  >  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.EXPR_RESULT  &&  value.getChildCount()  >  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.EXPR_RESULT  &&  value.getChildCount()  >  1;	  return    value.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	81	None	replace
508	[BUG]  [BUGGY]  return!super.equivalent  =  valueUndefined?  valueNull  :  valueUndefined;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!super.equivalent  =  valueUndefined?  valueNull  :  valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!super.equivalent  =  valueUndefined?  valueNull  :  valueUndefined;	  return!super.equivalent    =    valueUndefined;    	non-compiled	[CE]  orphaned  case	70	None	replace
509	[BUG]  [BUGGY]  return!result  ||  valueNull;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!result  ||  valueNull;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!result  ||  valueNull;	  return!negated    ||    valueNull;    	non-compiled	[CE]  orphaned  case	11	None	replace
510	[BUG]  [BUGGY]  if(op  ==  Token.NE  ||  op  ==  Token.NE)  {  return  valueUndefined;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NE  ||  op  ==  Token.NE)  {  return  valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NE  ||  op  ==  Token.NE)  {  return  valueUndefined;  }	  if(valueUndefined)return!super.equivalent;    if(op    ==    Token.NE)    {    return    valueUndefined;    }    	non-compiled	[CE]  orphaned  case	21	None	replace
511	[BUG]  [BUGGY]  if(op!=  Token.NE)  {  return  valueUndefined;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op!=  Token.NE)  {  return  valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op!=  Token.NE)  {  return  valueUndefined;  }	  if(valueUndefined)return!super.equivalent;    if(op    ==    Token.NE)    {    return    valueUndefined;    }    	non-compiled	[CE]  orphaned  case	21	None	replace
512	[BUG]  [BUGGY]  return(valueNull  <=  valueUndefined)||  valueUndefined.equals(value);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return(valueNull  <=  valueUndefined)||  valueUndefined.equals(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return(valueNull  <=  valueUndefined)||  valueUndefined.equals(value);	  return!valueNull    ||    valueUndefined.equals(value);    	non-compiled	[CE]  orphaned  case	73	None	replace
513	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild().getLastChild().getLastChild  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild().getLastChild().getLastChild  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild().getLastChild().getLastChild	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild    	non-compiled	[CE]  orphaned  case	60	None	replace
514	[BUG]  [BUGGY]  return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild    	non-compiled	[CE]  orphaned  case	60	None	replace
515	[BUG]  [BUGGY]  if(op  ==  null  ||  value.equals(null))  {  return  false;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  null  ||  value.equals(null))  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  null  ||  value.equals(null))  {  return  false;  }	  if(op    ==    null)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
516	[BUG]  [BUGGY]  return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.GETELEM;	  return    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  orphaned  case	84	None	replace
517	[BUG]  [BUGGY]  return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.THIS;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.THIS;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.THIS;	  return    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  orphaned  case	84	None	replace
518	[BUG]  [BUGGY]  return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.STRING;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.STRING;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.STRING;	  return    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  orphaned  case	84	None	replace
519	[BUG]  [BUGGY]  return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.CALL;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.CALL;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.NUMBER  ||  value.getType()  ==  Token.CALL;	  return    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  orphaned  case	84	None	replace
520	[BUG]  [BUGGY]  if(op  ==  -1)return!super.equivalent;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  -1)return!super.equivalent;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  -1)return!super.equivalent;  if(op  ==  0)  {  return  false;  }	  if(valueUndefined)return!super.equivalent;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	22	None	replace
521	[BUG]  [BUGGY]  if(op  ==  1)return  false;  if(valueUndefined)return!super.equivalent;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  1)return  false;  if(valueUndefined)return!super.equivalent;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  1)return  false;  if(valueUndefined)return!super.equivalent;  if(op  ==  0)  {  return  false;  }	  if(valueUndefined)return!super.equivalent;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	22	None	replace
522	[BUG]  [BUGGY]  if(valueUndefined  ==  null  ||  valueNull)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined  ==  null  ||  valueNull)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined  ==  null  ||  valueNull)  {  return!valueUndefined;  }	  if(valueUndefined    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	66	None	replace
523	[BUG]  [BUGGY]  if(valueUndefined  ==  null)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueUndefined  ==  null)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueUndefined  ==  null)  {  return!equivalent;  }	  if(valueUndefined    ==    null)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	66	None	replace
524	[BUG]  [BUGGY]  if(op)return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op)return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op)return!valueUndefined;  if(op  ==  0)  {  return  false;  }	  if(valueUndefined)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
525	[BUG]  [BUGGY]  if(op  >  0)return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  >  0)return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  >  0)return!valueUndefined;  if(op  ==  0)  {  return  false;  }	  if(valueUndefined)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
526	[BUG]  [BUGGY]  if(valueNull  ||  equal)  {  return!valueUndefined;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  equal)  {  return!valueUndefined;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  equal)  {  return!valueUndefined;  }	  if(valueNull    ||    valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
527	[BUG]  [BUGGY]  if(valueNull  ||  equalizer  ==  null)  {  return  false;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  equalizer  ==  null)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  equalizer  ==  null)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
528	[BUG]  [BUGGY]  if(valueNull)return  false;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	9	None	replace
529	[BUG]  [BUGGY]  if(nequivalent)  {  return!equivalent;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(nequivalent)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(nequivalent)  {  return!equivalent;  }	  if(valueNull)    {    return!nequivalent;    }    	non-compiled	[CE]  orphaned  case	88	None	replace
530	[BUG]  [BUGGY]  if(nequivalent)  {  return!valueNull;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(nequivalent)  {  return!valueNull;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(nequivalent)  {  return!valueNull;  }	  if(valueNull)    {    return!nequivalent;    }    	non-compiled	[CE]  	88	None	replace
531	[BUG]  [BUGGY]  while(valueNull)  {  return!valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  while(valueNull)  {  return!valueNull;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	while(valueNull)  {  return!valueNull;  }	  if(valueNull)    {    return!valueNull;    }    	non-compiled	[CE]  	7	None	replace
532	[BUG]  [BUGGY]  if(op)  {  return!equivalent;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op)  {  return!equivalent;  }	  if(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	6	None	replace
533	[BUG]  [BUGGY]  if(op  ==  Token.FUNCTION  ||  op  ==  Token.SEMI)  {  return!equivalent;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.FUNCTION  ||  op  ==  Token.SEMI)  {  return!equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.FUNCTION  ||  op  ==  Token.SEMI)  {  return!equivalent;  }	  if(op    ==    Token.FUNCTION)    {    return!equivalent;    }    	non-compiled	[CE]  	49	None	replace
534	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.SEMI;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.SEMI;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.SEMI;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.NAME;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
535	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.LONG;  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.LONG;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.LONG;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.NAME;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
536	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.FUNCTION;  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.FUNCTION;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.FUNCTION;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.NAME;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
537	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.CALL;  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.CALL;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.NAME)  {  return  value.getType()  ==  Token.CALL;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.NAME;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
538	[BUG]  [BUGGY]  if(valueNull)return  null;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return  null;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  null;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return    false;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
539	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NAME);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return(valueNull  &&  value.getType()  ==  Token.NAME);	  return!valueNull    ||    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	29	None	replace
540	[BUG]  [BUGGY]  return  value.getType()  ==  Token.RETURN?  value.getFirstChild().getNext()  :  Integer.parseInt(value.getLastChild().getString());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.RETURN?  value.getFirstChild().getNext()  :  Integer.parseInt(value.getLastChild().getString());  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.RETURN?  value.getFirstChild().getNext()  :  Integer.parseInt(value.getLastChild().getString());	  return    value.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	82	None	replace
541	[BUG]  [BUGGY]  return  value.getType()  ==  Token.RETURN?  value.getFirstChild().getNext()  :  Integer.parseInt(value.getLastChild());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.RETURN?  value.getFirstChild().getNext()  :  Integer.parseInt(value.getLastChild());  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.RETURN?  value.getFirstChild().getNext()  :  Integer.parseInt(value.getLastChild());	  return    value.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	82	None	replace
542	[BUG]  [BUGGY]  return  value.getType()  ==  Token.RETURN?  value.getFirstChild().getNext()  :  Integer.MAX_VALUE;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.RETURN?  value.getFirstChild().getNext()  :  Integer.MAX_VALUE;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.RETURN?  value.getFirstChild().getNext()  :  Integer.MAX_VALUE;	  return    value.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	82	None	replace
543	[BUG]  [BUGGY]  return  value.getType()  ==  Token.RETURN?  value.getFirstChild().getNext()  :  Integer.toString(value.getLastChild().getString());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.RETURN?  value.getFirstChild().getNext()  :  Integer.toString(value.getLastChild().getString());  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.RETURN?  value.getFirstChild().getNext()  :  Integer.toString(value.getLastChild().getString());	  return    value.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	82	None	replace
544	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getString().getLastChild().getLastChild();	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
545	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild();	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
546	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getString();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getString();  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getFirstChild().getLastChild().getLastChild().getString();	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild();    	non-compiled	[CE]  orphaned  case	58	None	replace
547	[BUG]  [BUGGY]  return  value.getType()  ==  Token.GETELEM  &&  value.getFirstChild()!=  null;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.GETELEM  &&  value.getFirstChild()!=  null;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.GETELEM  &&  value.getFirstChild()!=  null;	  return    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	83	None	replace
548	[BUG]  [BUGGY]  return  value.getType()  ==  Token.GETELEM  &&  value.getChildCount()  >  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.GETELEM  &&  value.getChildCount()  >  1;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.GETELEM  &&  value.getChildCount()  >  1;	  return    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	83	None	replace
549	[BUG]  [BUGGY]  return  value.getType()  ==  Token.GETELEM  ||  value.getType()  ==  Token.SETELEM;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  value.getType()  ==  Token.GETELEM  ||  value.getType()  ==  Token.SETELEM;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  value.getType()  ==  Token.GETELEM  ||  value.getType()  ==  Token.SETELEM;	  return    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	83	None	replace
550	[BUG]  [BUGGY]  return!valueUndefined;  op  =  0;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueUndefined;  op  =  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueUndefined;  op  =  0;	  return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
551	[BUG]  [BUGGY]  if(op  ==  1)  {  return  false;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  1)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  1)  {  return  false;  }	  return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
552	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.STRING;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.STRING;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  &&  value.getType()  ==  Token.STRING;	  return    valueNull;    	non-compiled	[CE]  orphaned  case	52	None	replace
553	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.NUMBER;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.NUMBER;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  &&  value.getType()  ==  Token.NUMBER;	  return    valueNull;    	non-compiled	[CE]  orphaned  case	52	None	replace
554	[BUG]  [BUGGY]  result  =  value.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  result  =  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	result  =  value.getType()  ==  Token.FUNCTION;	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
555	[BUG]  [BUGGY]  Return  value.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  Return  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	Return  value.getType()  ==  Token.FUNCTION;	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
556	[BUG]  [BUGGY]  result  |=  value.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  result  |=  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	result  |=  value.getType()  ==  Token.FUNCTION;	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.FUNCTION;    }    	non-compiled	[CE]  orphaned  case	40	None	replace
557	[BUG]  [BUGGY]  if(valueNull)return  null;  else  if(valueNull)return  0;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull)return  null;  else  if(valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull)return  null;  else  if(valueNull)return  0;	  if(valueNull)return    false;    else    if(valueNull)return    0;    	non-compiled	[CE]  orphaned  case	14	None	replace
558	[BUG]  [BUGGY]  return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueUndefined  -  value.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild()    	non-compiled	[CE]  orphaned  case	57	None	replace
559	[BUG]  [BUGGY]  return!valueUndefined;  else  if(valueNull  ||  valueNull)return  0;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueUndefined;  else  if(valueNull  ||  valueNull)return  0;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueUndefined;  else  if(valueNull  ||  valueNull)return  0;	  return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  orphaned  case	16	None	replace
560	[BUG]  [BUGGY]  return!valueUndefined;  else  if(valueNull)return  false;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueUndefined;  else  if(valueNull)return  false;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueUndefined;  else  if(valueNull)return  false;	  return!valueUndefined;    else    if(valueNull)return    0;    	non-compiled	[CE]  orphaned  case	16	None	replace
561	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.VAR)  {  return  Double.parseDouble(value);  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.VAR)  {  return  Double.parseDouble(value);  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.VAR)  {  return  Double.parseDouble(value);  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    Double.parseDouble(value);    }    	non-compiled	[CE]  orphaned  case	38	None	replace
562	[BUG]  [BUGGY]  return!doubleValue  -  valueUndefined;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!doubleValue  -  valueUndefined;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!doubleValue  -  valueUndefined;	  return!doubleValue;    	non-compiled	[CE]  orphaned  case	45	None	replace
563	[BUG]  [BUGGY]  return!regexp.equals(value);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!regexp.equals(value);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!regexp.equals(value);	  return!regexp;    	non-compiled	[CE]  orphaned  case	64	None	replace
564	[BUG]  [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.GETELEM);  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return(valueNull  ||  value.getType()  ==  Token.GETELEM);	  return!valueNull    ||    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	31	None	replace
565	[BUG]  [BUGGY]  return!requivalent.equivalent;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!requivalent.equivalent;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!requivalent.equivalent;	  return!equivalent.equivalent;    	non-compiled	[CE]  orphaned  case	78	None	replace
566	[BUG]  [BUGGY]  if(op  ==  0)return  false;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  0)return  false;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  0)return  false;	  if(valueNull)return!equivalent;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
567	[BUG]  [BUGGY]  if(op  ==  null)return!equivalent;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  null)return!equivalent;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  null)return!equivalent;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return!equivalent;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
568	[BUG]  [BUGGY]  if(op  ==  -1)return!equivalent;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  -1)return!equivalent;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  -1)return!equivalent;  if(op  ==  0)  {  return  false;  }	  if(valueNull)return!equivalent;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	79	None	replace
569	[BUG]  [BUGGY]  if(op  ==  Token.NUMBER  ||  op  ==  Token.NE)  {  return!super.equivalent;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NUMBER  ||  op  ==  Token.NE)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NUMBER  ||  op  ==  Token.NE)  {  return!super.equivalent;  }	  if(op    ==    Token.NUMBER)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
570	[BUG]  [BUGGY]  if(op  ==  Token.NUMBER  ||  op  ==  Token.NUMBER)  {  return!super.equivalent;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NUMBER  ||  op  ==  Token.NUMBER)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NUMBER  ||  op  ==  Token.NUMBER)  {  return!super.equivalent;  }	  if(op    ==    Token.NUMBER)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
571	[BUG]  [BUGGY]  if(op  ==  Token.NUMBER  ||  op  ==  ValueUtils.EMPTY)  {  return!super.equivalent;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(op  ==  Token.NUMBER  ||  op  ==  ValueUtils.EMPTY)  {  return!super.equivalent;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(op  ==  Token.NUMBER  ||  op  ==  ValueUtils.EMPTY)  {  return!super.equivalent;  }	  if(op    ==    Token.NUMBER)    {    return!super.equivalent;    }    	non-compiled	[CE]  orphaned  case	20	None	replace
572	[BUG]  [BUGGY]  return!valueNull  &&!requivalent;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return!valueNull  &&!requivalent;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return!valueNull  &&!requivalent;	  return!valueNull    &&!equivalent;    	non-compiled	[CE]  orphaned  case	80	None	replace
573	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getNext().getLastChild().getLastChild().getLastChild  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getNext().getLastChild().getLastChild().getLastChild  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  -  valueUndefined.getFirstChild().getLastChild().getNext().getLastChild().getLastChild().getLastChild	  return    valueNull    -    valueUndefined.getFirstChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild();    	non-compiled	[CE]  orphaned  case	56	None	replace
574	[BUG]  [BUGGY]  if(valueNull  ||  op)return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(valueNull  ||  op)return!valueUndefined;  if(op  ==  0)  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(valueNull  ||  op)return!valueUndefined;  if(op  ==  0)  {  return  false;  }	  if(valueNull    ||    valueUndefined)return!valueUndefined;    if(op    ==    0)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
575	[BUG]  [BUGGY]  if(value  ==  null)return  false;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  ==  null)return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null)return  false;  }	  if(value    ==    null)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
576	[BUG]  [BUGGY]  if(value  ==  null  ||  value.equals(equivalent))  {  return  false;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value  ==  null  ||  value.equals(equivalent))  {  return  false;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value  ==  null  ||  value.equals(equivalent))  {  return  false;  }	  if(value    ==    null)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	35	None	replace
577	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.GETELEM)return  value.getType()  ==  Token.GETELEM;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.GETELEM)return  value.getType()  ==  Token.GETELEM;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT  ||  value.getType()  ==  Token.GETELEM)return  value.getType()  ==  Token.GETELEM;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.GETELEM;    }    	non-compiled	[CE]  orphaned  case	41	None	replace
578	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()  >>  Token.GETELEM;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()  >>  Token.GETELEM;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT)  {  return  value.getType()  >>  Token.GETELEM;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.GETELEM;    }    	non-compiled	[CE]  orphaned  case	41	None	replace
579	[BUG]  [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT)return  value.getType()  ==  Token.GETELEM;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  if(value.getType()  ==  Token.EXPR_RESULT)return  value.getType()  ==  Token.GETELEM;  }  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	if(value.getType()  ==  Token.EXPR_RESULT)return  value.getType()  ==  Token.GETELEM;  }	  if(value.getType()    ==    Token.EXPR_RESULT)    {    return    value.getType()    ==    Token.GETELEM;    }    	non-compiled	[CE]  orphaned  case	41	None	replace
580	[BUG]  [BUGGY]  return  valueNull  ||!negative;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:      [BUGGY]  return  valueNull  ||!negative;  [BUGGY]      case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1137	1137	3	replace	return  valueNull  ||!negative;	  return!negative    ||    valueNull;    	non-compiled	[CE]  orphaned  case	46	None	replace
