bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right);  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  right);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  right);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
2	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  undefinedRight);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
3	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedRight);  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedRight);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  op,  undefinedRight);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
4	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedLeft);  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedLeft);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  op,  undefinedLeft);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
5	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getString());  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  left.getString());  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  left.getString());	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
6	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left);  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(n,  left);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  left);	  result    =    compareToUndefined(n,    op);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
7	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right);  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(n,  right);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  right);	  result    =    compareToUndefined(n,    op);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
8	[BUG]  [BUGGY]  result  =  compareToUndefined(ln,  op);  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(ln,  op);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(ln,  op);	  result    =    compareToUndefined(n,    op);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
9	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  op);  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(lh,  op);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(lh,  op);	  result    =    compareToUndefined(n,    op);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
10	[BUG]  [BUGGY]  result  =  compareToUndefined(rn,  op);  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(rn,  op);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(rn,  op);	  result    =    compareToUndefined(n,    op);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
11	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left);  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(right,  left);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  left);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
12	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedLeft);  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedLeft);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  op,  undefinedLeft);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
13	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  undefinedRight);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
14	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedRight);  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedRight);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  op,  undefinedRight);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
15	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  undefinedLeft);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
16	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op);  break;  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(right,  op);  break;  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  op);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  case,  default,  or  	7	None	replace
17	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right);  break;  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  right);  break;  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  right);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  case,  default,  or  	7	None	replace
18	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  break;  [CE]  case,  default,  or  [FE]                        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  break;  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  undefinedRight);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  case,  default,  or  	7	None	replace
19	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  op);  break;  [CE]  case,  default,  or  [FE]                          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(n,  op);  break;  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  op);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  case,  default,  or  	7	None	replace
20	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedRight);  break;  [CE]  case,  default,  or  [FE]                            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedRight);  break;  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  op,  undefinedRight);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  case,  default,  or  	7	None	replace
21	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  break;  [CE]  case,  default,  or  [FE]                              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  break;  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  undefinedLeft);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  case,  default,  or  	7	None	replace
22	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedLeft);  break;  [CE]  case,  default,  or  [FE]                                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedLeft);  break;  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  op,  undefinedLeft);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  case,  default,  or  	7	None	replace
23	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left);  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  left);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  left);	  result    =    matchToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
24	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op);  return  result;  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  op);  return  result;  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  op);  return  result;	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
25	[BUG]  [BUGGY]  result  =  compareToUndefined(left.getString(),  op);  [CE]  case,  default,  or  [FE]                        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left.getString(),  op);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left.getString(),  op);	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
26	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(left,  op);  [CE]  case,  default,  or  [FE]                          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  Result  result  =  compareToUndefined(left,  op);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	Result  result  =  compareToUndefined(left,  op);	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
27	[BUG]  [BUGGY]  result  =  compareResult;  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareResult;  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareResult;	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
28	[BUG]  [BUGGY]  result  =  null;  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  null;  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  null;	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
29	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  op,  undefinedRight);  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  comparisonToUndefined(left,  op,  undefinedRight);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  comparisonToUndefined(left,  op,  undefinedRight);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
30	[BUG]  [BUGGY]  if(result  ==  null)  {  result  =  compareToUndefined(left,  op);  break;  }  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result  ==  null)  {  result  =  compareToUndefined(left,  op);  break;  }  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null)  {  result  =  compareToUndefined(left,  op);  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
31	[BUG]  [BUGGY]  if(result  ==  null)  {  result  =  compareToUndefined(right,  op);  break;  }  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result  ==  null)  {  result  =  compareToUndefined(right,  op);  break;  }  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null)  {  result  =  compareToUndefined(right,  op);  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
32	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  op);  break;  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  comparisonToUndefined(left,  op);  break;  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  comparisonToUndefined(left,  op);  break;	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
33	[BUG]  [BUGGY]  result  =  comparatToUndefined(left,  op);  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  comparatToUndefined(left,  op);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  comparatToUndefined(left,  op);	  result    =    comparisonToUndefined(right,    op);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
34	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left);  break;  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  left);  break;  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  left);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  case,  default,  or  	7	None	replace
35	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n);  break;  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  n);  break;  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  n);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  case,  default,  or  	7	None	replace
36	[BUG]  [BUGGY]  if(right!=  null)  {  break;  }  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(right!=  null)  {  break;  }  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(right!=  null)  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
37	[BUG]  [BUGGY]  if(undefinedLeft)  {  break;  }  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(undefinedLeft)  {  break;  }  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(undefinedLeft)  {  break;  }	  if(undefinedRight)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
38	[BUG]  [BUGGY]  if(rightLiteral)  {  break;  }  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(rightLiteral)  {  break;  }  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(rightLiteral)  {  break;  }	  if(undefinedRight)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
39	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  left);  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(right,  op,  left);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  op,  left);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
40	[BUG]  [BUGGY]  if(result!=  null  &&  left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result!=  null  &&  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result!=  null  &&  left.getString().equals( "undefined "))  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
41	[BUG]  [BUGGY]  if(result!=  null  &&  right.getString().equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result!=  null  &&  right.getString().equals( "null "))  {  break;  }  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result!=  null  &&  right.getString().equals( "null "))  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
42	[BUG]  [BUGGY]  if(result!=  null  &&  right.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result!=  null  &&  right.getString().equals( "undefined "))  {  break;  }  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result!=  null  &&  right.getString().equals( "undefined "))  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
43	[BUG]  [BUGGY]  if(result!=  null  &&  left.getString().equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result!=  null  &&  left.getString().equals( "null "))  {  break;  }  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result!=  null  &&  left.getString().equals( "null "))  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	10	None	replace
44	[BUG]  [BUGGY]  if(undefinedRight  ||  left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(undefinedRight  ||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(undefinedRight  ||  left.getString().equals( "undefined "))  {  break;  }	  if(undefinedRight)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
45	[BUG]  [BUGGY]  if(result  ==  null  ||  undefinedRight)  {  break;  }  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result  ==  null  ||  undefinedRight)  {  break;  }  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  undefinedRight)  {  break;  }	  if(undefinedRight)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
46	[BUG]  [BUGGY]  if(undefinedRight  ||  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(undefinedRight  ||  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(undefinedRight  ||  left.getType()  ==  Token.NAME)  {  break;  }	  if(undefinedRight)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	11	None	replace
47	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  op,  undefinedRight);  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  comparisonToUndefined(right,  op,  undefinedRight);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  comparisonToUndefined(right,  op,  undefinedRight);	  result    =    comparisonToUndefined(right,    op);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
48	[BUG]  [BUGGY]  if(result  ==  null  ||  left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result  ==  null  ||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  left.getString().equals( "undefined "))  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
49	[BUG]  [BUGGY]  if(result  ==  null  ||  left.getString().equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result  ==  null  ||  left.getString().equals( "null "))  {  break;  }  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  left.getString().equals( "null "))  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
50	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals( " "))  {  break;  }  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result  ==  null  ||  result.equals( " "))  {  break;  }  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  result.equals( " "))  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
51	[BUG]  [BUGGY]  if(result  ==  null  ||  right.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  if(result  ==  null  ||  right.getString().equals( "undefined "))  {  break;  }  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  right.getString().equals( "undefined "))  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	9	None	replace
52	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  undefinedRight);  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(n,  undefinedRight);  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  undefinedRight);	  result    =    compareToUndefined(n,    op);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
53	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getString());  break;  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);    [BUGGY]  result  =  compareToUndefined(left,  left.getString());  break;  [BUGGY]    }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  left.getString());  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  case,  default,  or  	7	None	replace
