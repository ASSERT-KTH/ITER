bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  op);  break;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  comparisonToUndefined(right,  op);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  comparisonToUndefined(right,  op);  break;	  result    =    comparisonToUndefined(left,    op);    break;    	non-compiled	[CE]  case,  default,  or  	32	None	replace
2	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right);  break;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  comparisonToUndefined(left,  right);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  comparisonToUndefined(left,  right);  break;	  result    =    comparisonToUndefined(left,    op);    break;    	non-compiled	[CE]  case,  default,  or  	32	None	replace
3	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left.getType()  ==  Token.NAME)  {  break;  }	  if(undefinedRight    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	46	None	replace
4	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  undefinedRight.getType()  ==  Token.NAME)  {  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  undefinedRight.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left.getType()  ==  Token.NAME  ||  undefinedRight.getType()  ==  Token.NAME)  {  break;  }	  if(undefinedRight    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  case,  default,  or  '}'  expected	46	None	replace
5	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.NAME)  {  break;  }	  if(undefinedRight    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  case,  default,  or  '}'  expected	46	None	replace
6	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  undefinedRight.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  undefinedRight.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left.getType()  ==  Token.NAME  ||  undefinedRight.getType()  ==  Token.FUNCTION)  {  break;  }	  if(undefinedRight    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  case,  default,  or  '}'  expected	46	None	replace
7	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {  break;  }	  if(undefinedRight    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  case,  default,  or  '}'  expected	46	None	replace
8	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(undefinedRight    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  case,  default,  or  '}'  expected	46	None	replace
9	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getString().equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left  ==  null  ||  left.getString().equals( "null "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left  ==  null  ||  left.getString().equals( "null "))  {  break;  }	  if(result    ==    null    ||    left.getString().equals(   "null   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	49	None	replace
10	[BUG]  [BUGGY]  if(left!=  null  ||  left.getString().equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left!=  null  ||  left.getString().equals( "null "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left!=  null  ||  left.getString().equals( "null "))  {  break;  }	  if(result    ==    null    ||    left.getString().equals(   "null   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	49	None	replace
11	[BUG]  [BUGGY]  Result  <=  compareToUndefined(right,  op);  break;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  Result  <=  compareToUndefined(right,  op);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	Result  <=  compareToUndefined(right,  op);  break;	  if(result    ==    null)    {    result    =    compareToUndefined(right,    op);    break;    }    	non-compiled	[CE]  case,  default,  or  	31	None	replace
12	[BUG]  [BUGGY]  Result  <  N,  V>  result  =  compareToUndefined(right,  op);  break;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  Result  <  N,  V>  result  =  compareToUndefined(right,  op);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	Result  <  N,  V>  result  =  compareToUndefined(right,  op);  break;	  if(result    ==    null)    {    result    =    compareToUndefined(right,    op);    break;    }    	non-compiled	[CE]  case,  default,  or  	31	None	replace
13	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(right,  op);  break;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  Result  result  =  compareToUndefined(right,  op);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	Result  result  =  compareToUndefined(right,  op);  break;	  if(result    ==    null)    {    result    =    compareToUndefined(right,    op);    break;    }    	non-compiled	[CE]  case,  default,  or  	31	None	replace
14	[BUG]  [BUGGY]  Result  <  N,  V>  result  =  compareToUndefined(left,  op);  break;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  Result  <  N,  V>  result  =  compareToUndefined(left,  op);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	Result  <  N,  V>  result  =  compareToUndefined(left,  op);  break;	  if(result    ==    null)    {    result    =    compareToUndefined(right,    op);    break;    }    	non-compiled	[CE]  case,  default,  or  	31	None	replace
15	[BUG]  [BUGGY]  result  =  compareToUndefined(ln,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(ln,  right);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(ln,  right);	  result    =    compareToUndefined(ln,    op);    	non-compiled	[CE]  case,  default,  or  	8	None	replace
16	[BUG]  [BUGGY]  result  =  compareToUndefined(ln,  left);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(ln,  left);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(ln,  left);	  result    =    compareToUndefined(ln,    op);    	non-compiled	[CE]  case,  default,  or  	8	None	replace
17	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedRight);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  right,  undefinedRight);	  result    =    comparisonToUndefined(left,    op,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
18	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right,  undefinedRight);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  comparisonToUndefined(left,  right,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  comparisonToUndefined(left,  right,  undefinedRight);	  result    =    comparisonToUndefined(left,    op,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
19	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedRight);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  left,  undefinedRight);	  result    =    comparisonToUndefined(left,    op,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
20	[BUG]  [BUGGY]  if(undefinedLeft  ||  undefinedRight)  {  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(undefinedLeft  ||  undefinedRight)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(undefinedLeft  ||  undefinedRight)  {  break;  }	  if(result    ==    null    ||    undefinedRight)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	45	None	replace
21	[BUG]  [BUGGY]  if(result  ==  null  ||  undefinedLeft)  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result  ==  null  ||  undefinedLeft)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  undefinedLeft)  {  break;  }	  if(result    ==    null    ||    undefinedRight)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	45	None	replace
22	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedRight);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  left,  undefinedRight);	  result    =    compareToUndefined(right,    op,    left);    	non-compiled	[CE]  case,  default,  or  	39	None	replace
23	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedLeft);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedLeft);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  left,  undefinedLeft);	  result    =    compareToUndefined(right,    op,    left);    	non-compiled	[CE]  case,  default,  or  	39	None	replace
24	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right,  left);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(n,  right,  left);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  right,  left);	  result    =    compareToUndefined(right,    op,    left);    	non-compiled	[CE]  case,  default,  or  	39	None	replace
25	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left,  right);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(n,  left,  right);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  left,  right);	  result    =    compareToUndefined(right,    op,    left);    	non-compiled	[CE]  case,  default,  or  	39	None	replace
26	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  n);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  n);	  result    =    compareToUndefined(n,    left);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
27	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedRight);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  left,  undefinedRight);	  result    =    compareToUndefined(n,    left);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
28	[BUG]  [BUGGY]  if(right!=  null  ||  right.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(right!=  null  ||  right.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(right!=  null  ||  right.getString().equals( "undefined "))  {  break;  }	  if(result    ==    null    ||    right.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	51	None	replace
29	[BUG]  [BUGGY]  if(right  ==  null  ||  right.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(right  ==  null  ||  right.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(right  ==  null  ||  right.getString().equals( "undefined "))  {  break;  }	  if(result    ==    null    ||    right.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	51	None	replace
30	[BUG]  [BUGGY]  Result  <=  compareToUndefined(left,  op);  break;  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  Result  <=  compareToUndefined(left,  op);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	Result  <=  compareToUndefined(left,  op);  break;	  if(result    ==    null)    {    result    =    compareToUndefined(left,    op);    break;    }    	non-compiled	[CE]  case,  default,  or  	30	None	replace
31	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(left,  op);  break;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  Result  result  =  compareToUndefined(left,  op);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	Result  result  =  compareToUndefined(left,  op);  break;	  if(result    ==    null)    {    result    =    compareToUndefined(left,    op);    break;    }    	non-compiled	[CE]  case,  default,  or  	30	None	replace
32	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getString());  break;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  right.getString());  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  right.getString());  break;	  result    =    compareToUndefined(left,    left.getString());    break;    	non-compiled	[CE]  case,  default,  or  	53	None	replace
33	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op.getString());  break;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  op.getString());  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  op.getString());  break;	  result    =    compareToUndefined(left,    left.getString());    break;    	non-compiled	[CE]  case,  default,  or  	53	None	replace
34	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getString());  break;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  left.getString());  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  left.getString());  break;	  result    =    compareToUndefined(left,    left.getString());    break;    	non-compiled	[CE]  case,  default,  or  	53	None	replace
35	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op.getString());  break;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  op.getString());  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  op.getString());  break;	  result    =    compareToUndefined(left,    left.getString());    break;    	non-compiled	[CE]  case,  default,  or  	53	None	replace
36	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left.getString());  break;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(n,  left.getString());  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  left.getString());  break;	  result    =    compareToUndefined(left,    left.getString());    break;    	non-compiled	[CE]  case,  default,  or  	53	None	replace
37	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  n);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  n);	  result    =    compareToUndefined(n,    right);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
38	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right,  undefinedRight);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(n,  right,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  right,  undefinedRight);	  result    =    compareToUndefined(n,    right);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
39	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  undefinedLeft);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(n,  undefinedLeft);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  undefinedLeft);	  result    =    compareToUndefined(right,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	13	None	replace
40	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  undefinedLeft);	  result    =    compareToUndefined(right,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	13	None	replace
41	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  op,  undefinedLeft);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  comparisonToUndefined(right,  op,  undefinedLeft);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  comparisonToUndefined(right,  op,  undefinedLeft);	  result    =    comparisonToUndefined(right,    op,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	47	None	replace
42	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  left,  undefinedRight);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  comparisonToUndefined(right,  left,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  comparisonToUndefined(right,  left,  undefinedRight);	  result    =    comparisonToUndefined(right,    op,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	47	None	replace
43	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(right,  op);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  Result  result  =  compareToUndefined(right,  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	Result  result  =  compareToUndefined(right,  op);	  Result    result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
44	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(left,  right);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  Result  result  =  compareToUndefined(left,  right);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	Result  result  =  compareToUndefined(left,  right);	  Result    result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
45	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(left,  undefinedRight);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  Result  result  =  compareToUndefined(left,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	Result  result  =  compareToUndefined(left,  undefinedRight);	  Result    result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
46	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(left,  op,  undefinedRight);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  Result  result  =  compareToUndefined(left,  op,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	Result  result  =  compareToUndefined(left,  op,  undefinedRight);	  Result    result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
47	[BUG]  [BUGGY]  result  =  compareToUndefined(rn,  left);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(rn,  left);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(rn,  left);	  result    =    compareToUndefined(rn,    op);    	non-compiled	[CE]  case,  default,  or  	10	None	replace
48	[BUG]  [BUGGY]  if(left!=  null  &&  left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left!=  null  &&  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left!=  null  &&  left.getString().equals( "undefined "))  {  break;  }	  if(result!=    null    &&    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	40	None	replace
49	[BUG]  [BUGGY]  result  =  (left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  (left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  (left.getString().equals( "undefined "))  {  break;  }	  if(result!=    null    &&    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	40	None	replace
50	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left);  break;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  left);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  left);  break;	  result    =    compareToUndefined(left,    left);    break;    	non-compiled	[CE]  case,  default,  or  	34	None	replace
51	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left);  break;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(n,  left);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  left);  break;	  result    =    compareToUndefined(left,    left);    break;    	non-compiled	[CE]  case,  default,  or  	34	None	replace
52	[BUG]  [BUGGY]  if(right!=  null  &&  right.getString().equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(right!=  null  &&  right.getString().equals( "null "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(right!=  null  &&  right.getString().equals( "null "))  {  break;  }	  if(result!=    null    &&    right.getString().equals(   "null   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	41	None	replace
53	[BUG]  [BUGGY]  if(result  ==  null  &&  right.getString().equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result  ==  null  &&  right.getString().equals( "null "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  &&  right.getString().equals( "null "))  {  break;  }	  if(result!=    null    &&    right.getString().equals(   "null   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	41	None	replace
54	[BUG]  [BUGGY]  if(result  ==  null  &&  left.getString().equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result  ==  null  &&  left.getString().equals( "null "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  &&  left.getString().equals( "null "))  {  break;  }	  if(result!=    null    &&    right.getString().equals(   "null   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	41	None	replace
55	[BUG]  [BUGGY]  result  =  this.compareResult;  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  this.compareResult;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  this.compareResult;	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
56	[BUG]  [BUGGY]  result  =  getFallThrough(left.getString());  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  getFallThrough(left.getString());  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  getFallThrough(left.getString());	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
57	[BUG]  [BUGGY]  result  =  getFallThrough(right,  op);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  getFallThrough(right,  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  getFallThrough(right,  op);	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
58	[BUG]  [BUGGY]  result  =  getFallThrough(result);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  getFallThrough(result);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  getFallThrough(result);	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
59	[BUG]  [BUGGY]  result  =  getFallThrough(left,  op);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  getFallThrough(left,  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  getFallThrough(left,  op);	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
60	[BUG]  [BUGGY]  result  =  getFallThrough(result,  op);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  getFallThrough(result,  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  getFallThrough(result,  op);	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
61	[BUG]  [BUGGY]  result  =  getFallThrough(result.getString());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  getFallThrough(result.getString());  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  getFallThrough(result.getString());	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
62	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getString());  return  result;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  left.getString());  return  result;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  left.getString());  return  result;	  result    =    compareToUndefined(left,    op);    return    result;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
63	[BUG]  [BUGGY]  result  =  matchToUndefined(right,  op);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  matchToUndefined(right,  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  matchToUndefined(right,  op);	  result    =    null;    	non-compiled	[CE]  case,  default,  or  	28	None	replace
64	[BUG]  [BUGGY]  result  =  n.getString();  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  n.getString();  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  n.getString();	  result    =    null;    	non-compiled	[CE]  case,  default,  or  	28	None	replace
65	[BUG]  [BUGGY]  result  =  n.getFirstChild();  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  n.getFirstChild();  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  n.getFirstChild();	  result    =    null;    	non-compiled	[CE]  case,  default,  or  	28	None	replace
66	[BUG]  [BUGGY]  result  =  compareResult.toString();  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareResult.toString();  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareResult.toString();	  result    =    null;    	non-compiled	[CE]  case,  default,  or  	28	None	replace
67	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);  break;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  undefinedRight);  break;	  result    =    compareToUndefined(left,    undefinedRight);    break;    	non-compiled	[CE]  case,  default,  or  	18	None	replace
68	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  undefinedRight);  break;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(n,  undefinedRight);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  undefinedRight);  break;	  result    =    compareToUndefined(left,    undefinedRight);    break;    	non-compiled	[CE]  case,  default,  or  	18	None	replace
69	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);  break;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  undefinedLeft);  break;	  result    =    compareToUndefined(left,    undefinedRight);    break;    	non-compiled	[CE]  case,  default,  or  	18	None	replace
70	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right);  break;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(n,  right);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  right);  break;	  result    =    compareToUndefined(n,    op);    break;    	non-compiled	[CE]  case,  default,  or  	19	None	replace
71	[BUG]  [BUGGY]  result  =  compareToUndefined(ln,  op);  break;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(ln,  op);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(ln,  op);  break;	  result    =    compareToUndefined(n,    op);    break;    	non-compiled	[CE]  case,  default,  or  	19	None	replace
72	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  op);  break;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(lh,  op);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(lh,  op);  break;	  result    =    compareToUndefined(n,    op);    break;    	non-compiled	[CE]  case,  default,  or  	19	None	replace
73	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLiteral);  break;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  rightLiteral);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  rightLiteral);  break;	  result    =    compareToUndefined(right,    op);    break;    	non-compiled	[CE]  case,  default,  or  	16	None	replace
74	[BUG]  [BUGGY]  if(left!=  null  &&  left.getString().equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left!=  null  &&  left.getString().equals( "null "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left!=  null  &&  left.getString().equals( "null "))  {  break;  }	  if(result!=    null    &&    left.getString().equals(   "null   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	43	None	replace
75	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(undefinedLeft,  right);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(undefinedLeft,  right);	  result    =    compareToUndefined(right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
76	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  undefinedLeft);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(lh,  undefinedLeft);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(lh,  undefinedLeft);	  result    =    compareToUndefined(right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
77	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  op);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  undefinedLeft,  op);	  result    =    compareToUndefined(right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
78	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result  ==  null  ||  result.equals( "null "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  result.equals( "null "))  {  break;  }	  if(result    ==    null    ||    result.equals(   "   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
79	[BUG]  [BUGGY]  result  =  result  ==  null?  null  :  result.equals( "   "))  {  break;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  result  ==  null?  null  :  result.equals( "   "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  result  ==  null?  null  :  result.equals( "   "))  {  break;  }	  if(result    ==    null    ||    result.equals(   "   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
80	[BUG]  [BUGGY]  result  =  result  ==  null  ||  result.equals( "   "))  {  break;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  result  ==  null  ||  result.equals( "   "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  result  ==  null  ||  result.equals( "   "))  {  break;  }	  if(result    ==    null    ||    result.equals(   "   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
81	[BUG]  [BUGGY]  result  =  result  ==  null  &&  result.equals( "   "))  {  break;  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  result  ==  null  &&  result.equals( "   "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  result  ==  null  &&  result.equals( "   "))  {  break;  }	  if(result    ==    null    ||    result.equals(   "   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
82	[BUG]  [BUGGY]  result  =  result  ==  null  ||  result.equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  result  ==  null  ||  result.equals( "null "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  result  ==  null  ||  result.equals( "null "))  {  break;  }	  if(result    ==    null    ||    result.equals(   "   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
83	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getString());  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  left.getString());  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  left.getString());	  result    =    compareToUndefined(right,    left);    	non-compiled	[CE]  case,  default,  or  	11	None	replace
84	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.cloneTree());  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  left.cloneTree());  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  left.cloneTree());	  result    =    compareToUndefined(right,    left);    	non-compiled	[CE]  case,  default,  or  	11	None	replace
85	[BUG]  [BUGGY]  result  =  comparatToUndefined(left,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  comparatToUndefined(left,  right);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  comparatToUndefined(left,  right);	  result    =    comparatToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	33	None	replace
86	[BUG]  [BUGGY]  result  =  comparatToUndefined(right,  op);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  comparatToUndefined(right,  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  comparatToUndefined(right,  op);	  result    =    comparatToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	33	None	replace
87	[BUG]  [BUGGY]  result  =  comparatToUndefined(left,  op,  undefinedRight);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  comparatToUndefined(left,  op,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  comparatToUndefined(left,  op,  undefinedRight);	  result    =    comparatToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	33	None	replace
88	[BUG]  [BUGGY]  result  =  comparatToUndefined(left,  undefinedRight);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  comparatToUndefined(left,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  comparatToUndefined(left,  undefinedRight);	  result    =    comparatToUndefined(left,    op);    	non-compiled	[CE]  case,  default,  or  	33	None	replace
89	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral);  break;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  rightLiteral);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  case,  default,  or  	17	None	replace
90	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);	  result    =    compareToUndefined(left,    op,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
91	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedLeft);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedLeft);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  right,  undefinedLeft);	  result    =    compareToUndefined(right,    op,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	12	None	replace
92	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right,  undefinedLeft);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(n,  right,  undefinedLeft);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  right,  undefinedLeft);	  result    =    compareToUndefined(right,    op,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	12	None	replace
93	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  undefinedLeft);  break;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(n,  undefinedLeft);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  undefinedLeft);  break;	  result    =    compareToUndefined(left,    undefinedLeft);    break;    	non-compiled	[CE]  case,  default,  or  	21	None	replace
94	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedRight);  break;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedRight);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  right,  undefinedRight);  break;	  result    =    compareToUndefined(left,    op,    undefinedRight);    break;    	non-compiled	[CE]  case,  default,  or  	20	None	replace
95	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedRight);  break;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedRight);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  op,  undefinedRight);  break;	  result    =    compareToUndefined(left,    op,    undefinedRight);    break;    	non-compiled	[CE]  case,  default,  or  	20	None	replace
96	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedRight);  break;  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedRight);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  left,  undefinedRight);  break;	  result    =    compareToUndefined(left,    op,    undefinedRight);    break;    	non-compiled	[CE]  case,  default,  or  	20	None	replace
97	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedLeft);  break;  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedLeft);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  op,  undefinedLeft);  break;	  result    =    compareToUndefined(left,    op,    undefinedRight);    break;    	non-compiled	[CE]  case,  default,  or  	20	None	replace
98	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(lh,  right);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(lh,  right);	  result    =    compareToUndefined(lh,    op);    	non-compiled	[CE]  case,  default,  or  	9	None	replace
99	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  left);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(lh,  left);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(lh,  left);	  result    =    compareToUndefined(lh,    op);    	non-compiled	[CE]  case,  default,  or  	9	None	replace
100	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  op,  undefinedRight);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(lh,  op,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(lh,  op,  undefinedRight);	  result    =    compareToUndefined(lh,    op);    	non-compiled	[CE]  case,  default,  or  	9	None	replace
101	[BUG]  [BUGGY]  if(right!=  null  &&  right.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(right!=  null  &&  right.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(right!=  null  &&  right.getString().equals( "undefined "))  {  break;  }	  if(result!=    null    &&    right.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	42	None	replace
102	[BUG]  [BUGGY]  if(result!=  null  &&  rightLiteral.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result!=  null  &&  rightLiteral.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result!=  null  &&  rightLiteral.getString().equals( "undefined "))  {  break;  }	  if(result!=    null    &&    right.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	42	None	replace
103	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  undefinedLeft);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  undefinedLeft);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  undefinedRight,  undefinedLeft);	  result    =    compareToUndefined(left,    op,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
104	[BUG]  [BUGGY]  reason(undefinedLeft)  {  break;  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  reason(undefinedLeft)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	reason(undefinedLeft)  {  break;  }	  if(undefinedLeft)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	37	None	replace
105	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	aughtExceptionHandler.throwInternal();	  if(undefinedLeft)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	37	None	replace
106	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedLeft);  break;  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedLeft);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  right,  undefinedLeft);  break;	  result    =    compareToUndefined(left,    op,    undefinedLeft);    break;    	non-compiled	[CE]  case,  default,  or  	22	None	replace
107	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedLeft);  break;  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedLeft);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  left,  undefinedLeft);  break;	  result    =    compareToUndefined(left,    op,    undefinedLeft);    break;    	non-compiled	[CE]  case,  default,  or  	22	None	replace
108	[BUG]  [BUGGY]  if(left!=  null  ||  left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left!=  null  ||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left!=  null  ||  left.getString().equals( "undefined "))  {  break;  }	  if(result    ==    null    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	48	None	replace
109	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left  ==  null  ||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left  ==  null  ||  left.getString().equals( "undefined "))  {  break;  }	  if(result    ==    null    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	48	None	replace
110	[BUG]  [BUGGY]  result  =  compareToUndefined(left.getString(),  right);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left.getString(),  right);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left.getString(),  right);	  result    =    compareToUndefined(left.getString(),    op);    	non-compiled	[CE]  case,  default,  or  	25	None	replace
111	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getString(),  op);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  right.getString(),  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  right.getString(),  op);	  result    =    compareToUndefined(left.getString(),    op);    	non-compiled	[CE]  case,  default,  or  	25	None	replace
112	[BUG]  [BUGGY]  result  =  compareToUndefined(right.getString(),  op);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right.getString(),  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right.getString(),  op);	  result    =    compareToUndefined(left.getString(),    op);    	non-compiled	[CE]  case,  default,  or  	25	None	replace
113	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  op);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  left.getString(),  op);	  result    =    compareToUndefined(left.getString(),    op);    	non-compiled	[CE]  case,  default,  or  	25	None	replace
114	[BUG]  [BUGGY]  result  =  compareToUndefined(right.getString(),  right);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right.getString(),  right);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right.getString(),  right);	  result    =    compareToUndefined(left.getString(),    op);    	non-compiled	[CE]  case,  default,  or  	25	None	replace
115	[BUG]  [BUGGY]  result  =  compareToUndefined(left.getString(),  right,  op);  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left.getString(),  right,  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left.getString(),  right,  op);	  result    =    compareToUndefined(left.getString(),    op);    	non-compiled	[CE]  case,  default,  or  	25	None	replace
116	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getString());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  right.getString());  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  right.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	5	None	replace
117	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op.getString());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  op.getString());  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  op.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	5	None	replace
118	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op.getString());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  op.getString());  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  op.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	5	None	replace
119	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getString());  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  right.getString());  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  right.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	5	None	replace
120	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left.getString());  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(n,  left.getString());  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  left.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	5	None	replace
121	[BUG]  [BUGGY]  if(left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left.getString().equals( "undefined "))  {  break;  }	  if(undefinedRight    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	44	None	replace
122	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getString().equals( "undefined   "))  {  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(undefinedLeft  ||  left.getString().equals( "undefined   "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(undefinedLeft  ||  left.getString().equals( "undefined   "))  {  break;  }	  if(undefinedRight    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	44	None	replace
123	[BUG]  [BUGGY]  result  ||  left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  ||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  ||  left.getString().equals( "undefined "))  {  break;  }	  if(undefinedRight    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	44	None	replace
124	[BUG]  [BUGGY]  ||  left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  ||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	||  left.getString().equals( "undefined "))  {  break;  }	  if(undefinedRight    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	44	None	replace
125	[BUG]  [BUGGY]  if(left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  break;  }	  if(undefinedRight    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	44	None	replace
126	[BUG]  [BUGGY]  if(right  ==  null)  {  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(right  ==  null)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(right  ==  null)  {  break;  }	  if(right!=    null)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	36	None	replace
127	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight  -  1);  break;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight  -  1);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  undefinedRight  -  1);  break;	  result    =    compareToUndefined(left,    undefinedRight);    break;    	non-compiled	[CE]  case,  default,  or  	18	None	replace
128	[BUG]  [BUGGY]  Result  =  compareToUndefined(right,  op);  break;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  Result  =  compareToUndefined(right,  op);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	Result  =  compareToUndefined(right,  op);  break;	  if(result    ==    null)    {    result    =    compareToUndefined(right,    op);    break;    }    	non-compiled	[CE]  case,  default,  or  	31	None	replace
129	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right);  return  result;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  right);  return  result;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  right);  return  result;	  result    =    compareToUndefined(left,    op);    return    result;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
130	[BUG]  [BUGGY]  if(left!=  null)  {  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left!=  null)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left!=  null)  {  break;  }	  if(right!=    null)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	36	None	replace
131	[BUG]  [BUGGY]  if(left  ==  null)  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left  ==  null)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left  ==  null)  {  break;  }	  if(right!=    null)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	36	None	replace
132	[BUG]  [BUGGY]  if(result  ==  null  &&  left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result  ==  null  &&  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  &&  left.getString().equals( "undefined "))  {  break;  }	  if(result!=    null    &&    right.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	42	None	replace
133	[BUG]  [BUGGY]  if(result  ==  null  &&  right.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result  ==  null  &&  right.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  &&  right.getString().equals( "undefined "))  {  break;  }	  if(result!=    null    &&    right.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	42	None	replace
134	[BUG]  [BUGGY]  result  =  comparatorToUndefined(left,  op);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  comparatorToUndefined(left,  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  comparatorToUndefined(left,  op);	  result    =    null;    	non-compiled	[CE]  case,  default,  or  	28	None	replace
135	[BUG]  [BUGGY]  result  =  comparatorToUndefined(right,  op);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  comparatorToUndefined(right,  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  comparatorToUndefined(right,  op);	  result    =    null;    	non-compiled	[CE]  case,  default,  or  	28	None	replace
136	[BUG]  [BUGGY]  if(left  ||  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left  ||  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left  ||  left.getType()  ==  Token.NAME)  {  break;  }	  if(undefinedRight    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	46	None	replace
137	[BUG]  [BUGGY]  if(leftLiteral  ||  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(leftLiteral  ||  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(leftLiteral  ||  left.getType()  ==  Token.NAME)  {  break;  }	  if(undefinedRight    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	46	None	replace
138	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  undefinedRight)  {  break;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  undefinedRight)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left.getType()  ==  Token.NAME  ||  undefinedRight)  {  break;  }	  if(undefinedRight    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	46	None	replace
139	[BUG]  [BUGGY]  if(rightLiteral  ||  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(rightLiteral  ||  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(rightLiteral  ||  left.getType()  ==  Token.NAME)  {  break;  }	  if(undefinedRight    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	46	None	replace
140	[BUG]  [BUGGY]  if(undefinedLeft  ||  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(undefinedLeft  ||  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(undefinedLeft  ||  left.getType()  ==  Token.NAME)  {  break;  }	  if(undefinedRight    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	46	None	replace
141	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left,  op);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(n,  left,  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(n,  left,  op);	  result    =    compareToUndefined(n,    left);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
142	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedLeft);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedLeft);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  left,  undefinedLeft);	  result    =    compareToUndefined(left,    op,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
143	[BUG]  [BUGGY]  if(rightLiteral  ||  left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(rightLiteral  ||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(rightLiteral  ||  left.getString().equals( "undefined "))  {  break;  }	  if(undefinedRight    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	44	None	replace
144	[BUG]  [BUGGY]  if(leftLiteral  ||  left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(leftLiteral  ||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(leftLiteral  ||  left.getString().equals( "undefined "))  {  break;  }	  if(undefinedRight    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	44	None	replace
145	[BUG]  [BUGGY]  if(right.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(right.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(right.getString().equals( "undefined "))  {  break;  }	  if(undefinedRight    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	44	None	replace
146	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedRight  +  1);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedRight  +  1);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  op,  undefinedRight  +  1);	  result    =    compareToUndefined(left,    op,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
147	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedRight  +  1);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  op,  undefinedRight  +  1);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  op,  undefinedRight  +  1);	  result    =    compareToUndefined(right,    op,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	14	None	replace
148	[BUG]  [BUGGY]  if(right!=  null  &&  left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(right!=  null  &&  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(right!=  null  &&  left.getString().equals( "undefined "))  {  break;  }	  if(result!=    null    &&    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	40	None	replace
149	[BUG]  [BUGGY]  if(result!=  null  &&  left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result!=  null  &&  left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result!=  null  &&  left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  break;  }	  if(result!=    null    &&    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	40	None	replace
150	[BUG]  [BUGGY]  if(result  ==  null  ||  undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result  ==  null  ||  undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }	  if(result    ==    null    ||    undefinedRight)    {    break;    }    	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	replace
151	[BUG]  [BUGGY]  if(undefinedRight  ==  null  ||  result  ==  null)  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(undefinedRight  ==  null  ||  result  ==  null)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(undefinedRight  ==  null  ||  result  ==  null)  {  break;  }	  if(result    ==    null    ||    undefinedRight)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	45	None	replace
152	[BUG]  [BUGGY]  if(result  ==  null  ||  undefinedRight)  {  result  =  compareToUndefined(right,  op);  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result  ==  null  ||  undefinedRight)  {  result  =  compareToUndefined(right,  op);  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  undefinedRight)  {  result  =  compareToUndefined(right,  op);  break;  }	  if(result    ==    null    ||    undefinedRight)    {    break;    }    	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	replace
153	[BUG]  [BUGGY]  if(result  ==  null  ||  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result  ==  null  ||  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  left.getType()  ==  Token.NAME)  {  break;  }	  if(result    ==    null    ||    undefinedRight)    {    break;    }    	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	replace
154	[BUG]  [BUGGY]  if(result  ==  null  ||  right)  {  break;  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result  ==  null  ||  right)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  right)  {  break;  }	  if(result    ==    null    ||    undefinedRight)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	45	None	replace
155	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getString().equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(right  ==  null  ||  left.getString().equals( "null "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(right  ==  null  ||  left.getString().equals( "null "))  {  break;  }	  if(result    ==    null    ||    left.getString().equals(   "null   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	49	None	replace
156	[BUG]  [BUGGY]  if(result!=  null  ||  left.getString().equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result!=  null  ||  left.getString().equals( "null "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result!=  null  ||  left.getString().equals( "null "))  {  break;  }	  if(result    ==    null    ||    left.getString().equals(   "null   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	49	None	replace
157	[BUG]  [BUGGY]  if(result!=  null  ||  left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result!=  null  ||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result!=  null  ||  left.getString().equals( "undefined "))  {  break;  }	  if(result    ==    null    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	48	None	replace
158	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(right  ==  null  ||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(right  ==  null  ||  left.getString().equals( "undefined "))  {  break;  }	  if(result    ==    null    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	48	None	replace
159	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().quoteAsString(right);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  JsonStringEncoder.getInstance().quoteAsString(right);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  JsonStringEncoder.getInstance().quoteAsString(right);	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
160	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().quoteAsString(result);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  JsonStringEncoder.getInstance().quoteAsString(result);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  JsonStringEncoder.getInstance().quoteAsString(result);	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
161	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString(right,  op);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString(right,  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  JsonStringEncoder.getInstance().encodeAsString(right,  op);	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
162	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().reportCodeChange();  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  JsonStringEncoder.getInstance().reportCodeChange();  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  JsonStringEncoder.getInstance().reportCodeChange();	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
163	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().quoteAsString( "name ");  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  JsonStringEncoder.getInstance().quoteAsString( "name ");  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  JsonStringEncoder.getInstance().quoteAsString( "name ");	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
164	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString(right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString(right);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  JsonStringEncoder.getInstance().encodeAsString(right);	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
165	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedRight,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(undefinedRight,  right);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(undefinedRight,  right);	  result    =    compareToUndefined(right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
166	[BUG]  [BUGGY]  Result  =  compareToUndefined(left,  op);  break;  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  Result  =  compareToUndefined(left,  op);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	Result  =  compareToUndefined(left,  op);  break;	  if(result    ==    null)    {    result    =    compareToUndefined(left,    op);    break;    }    	non-compiled	[CE]  case,  default,  or  	30	None	replace
167	[BUG]  [BUGGY]  if(right!=  null  &&  left.getString().equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(right!=  null  &&  left.getString().equals( "null "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(right!=  null  &&  left.getString().equals( "null "))  {  break;  }	  if(result!=    null    &&    right.getString().equals(   "null   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	41	None	replace
168	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.cloneTree());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  left.cloneTree());  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  left.cloneTree());	  result    =    compareToUndefined(left,    left);    	non-compiled	[CE]  case,  default,  or  	23	None	replace
169	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedRight);  break;  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedRight);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  left,  undefinedRight);  break;	  result    =    compareToUndefined(left,    op,    undefinedLeft);    break;    	non-compiled	[CE]  case,  default,  or  	22	None	replace
170	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedLeft);  break;  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedLeft);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  left,  undefinedLeft);  break;	  result    =    compareToUndefined(left,    op,    undefinedLeft);    break;    	non-compiled	[CE]  case,  default,  or  	22	None	replace
171	[BUG]  [BUGGY]  result  =  compareToUndefined(newNode,  left);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(newNode,  left);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(newNode,  left);	  result    =    compareToUndefined(right,    left);    	non-compiled	[CE]  case,  default,  or  	11	None	replace
172	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  op);  break;  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(left,  op);  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(left,  op);  break;  }	  if(undefinedLeft)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	37	None	replace
173	[BUG]  [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }	  if(undefinedLeft)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	37	None	replace
174	[BUG]  [BUGGY]  if(result!=  null  ||  result.equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result!=  null  ||  result.equals( "null "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result!=  null  ||  result.equals( "null "))  {  break;  }	  if(result    ==    null    ||    result.equals(   "   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
175	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result  ==  null  ||  result.equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  result.equals( "undefined "))  {  break;  }	  if(result    ==    null    ||    result.equals(   "   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
176	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals( "  <  unknown> "))  {  break;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result  ==  null  ||  result.equals( "  <  unknown> "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  result.equals( "  <  unknown> "))  {  break;  }	  if(result    ==    null    ||    result.equals(   "   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
177	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals( "- "))  {  break;  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result  ==  null  ||  result.equals( "- "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  result.equals( "- "))  {  break;  }	  if(result    ==    null    ||    result.equals(   "   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
178	[BUG]  [BUGGY]  if(result!=  null  ||  result.equals( " "))  {  break;  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result!=  null  ||  result.equals( " "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result!=  null  ||  result.equals( " "))  {  break;  }	  if(result    ==    null    ||    result.equals(   "   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
179	[BUG]  [BUGGY]  if(result)  {  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result)  {  break;  }	  if(rightLiteral)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	38	None	replace
180	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight  -  1);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight  -  1);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  undefinedRight  -  1);	  result    =    compareToUndefined(left,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
181	[BUG]  [BUGGY]  result  =  compareResult(right,  op);  break;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareResult(right,  op);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareResult(right,  op);  break;	  result    =    compareToUndefined(right,    op);    break;    	non-compiled	[CE]  case,  default,  or  	16	None	replace
182	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n);  break;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  n);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  n);  break;	  result    =    compareToUndefined(right,    op);    break;    	non-compiled	[CE]  case,  default,  or  	16	None	replace
183	[BUG]  [BUGGY]  if(left  ==  null  &&  left.getString().equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left  ==  null  &&  left.getString().equals( "null "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left  ==  null  &&  left.getString().equals( "null "))  {  break;  }	  if(result!=    null    &&    left.getString().equals(   "null   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	43	None	replace
184	[BUG]  [BUGGY]  result  =  compareToUndefined(newNode,  right);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(newNode,  right);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(newNode,  right);	  result    =    compareToUndefined(n,    right);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
185	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  false);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  false);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  left.getString(),  false);	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	5	None	replace
186	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  undefinedRight);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  left.getString(),  undefinedRight);	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	5	None	replace
187	[BUG]  [BUGGY]  result  =  compareToUndefined(newNode,  undefinedRight);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(newNode,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(newNode,  undefinedRight);	  result    =    compareToUndefined(right,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	13	None	replace
188	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  undefinedRight);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  comparisonToUndefined(left,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  comparisonToUndefined(left,  undefinedRight);	  result    =    compareToUndefined(right,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	13	None	replace
189	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedRight,  undefinedLeft);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  undefinedRight,  undefinedLeft);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  undefinedRight,  undefinedLeft);	  result    =    compareToUndefined(right,    op,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	12	None	replace
190	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  undefinedLeft);  break;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(op,  undefinedLeft);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(op,  undefinedLeft);  break;	  result    =    compareToUndefined(left,    undefinedLeft);    break;    	non-compiled	[CE]  case,  default,  or  	21	None	replace
191	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedRight,  left);  break;  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(undefinedRight,  left);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(undefinedRight,  left);  break;	  result    =    compareToUndefined(left,    undefinedLeft);    break;    	non-compiled	[CE]  case,  default,  or  	21	None	replace
192	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  undefinedRight);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(op,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(op,  undefinedRight);	  result    =    compareToUndefined(left,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
193	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  op);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  undefinedRight,  op);	  result    =    compareToUndefined(left,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
194	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  op);  break;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  op);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  left.getString(),  op);  break;	  result    =    compareToUndefined(left,    left.getString());    break;    	non-compiled	[CE]  case,  default,  or  	53	None	replace
195	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  undefinedLeft);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(op,  undefinedLeft);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(op,  undefinedLeft);	  result    =    compareToUndefined(right,    undefinedLeft);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
196	[BUG]  [BUGGY]  result  =  compareResult.compareTo(left,  op);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareResult.compareTo(left,  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareResult.compareTo(left,  op);	  result    =    null;    	non-compiled	[CE]  case,  default,  or  	28	None	replace
197	[BUG]  [BUGGY]  result  =  compareResult.compareTo(right,  op);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareResult.compareTo(right,  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareResult.compareTo(right,  op);	  result    =    null;    	non-compiled	[CE]  case,  default,  or  	28	None	replace
198	[BUG]  [BUGGY]  result  =  compareResult.toLowerCase();  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareResult.toLowerCase();  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareResult.toLowerCase();	  result    =    null;    	non-compiled	[CE]  case,  default,  or  	28	None	replace
199	[BUG]  [BUGGY]  if(result!=  null  ||  right.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result!=  null  ||  right.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result!=  null  ||  right.getString().equals( "undefined "))  {  break;  }	  if(result    ==    null    ||    right.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	51	None	replace
200	[BUG]  [BUGGY]  if(result!=  null  ||  undefinedRight)  {  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result!=  null  ||  undefinedRight)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result!=  null  ||  undefinedRight)  {  break;  }	  if(result    ==    null    ||    undefinedRight)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	45	None	replace
201	[BUG]  [BUGGY]  if(result  ==  null  ||  undefinedRight  <=  0)  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result  ==  null  ||  undefinedRight  <=  0)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  undefinedRight  <=  0)  {  break;  }	  if(result    ==    null    ||    undefinedRight)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	45	None	replace
202	[BUG]  [BUGGY]  if(result  ==  null  ||  undefinedRight  >  0)  {  break;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result  ==  null  ||  undefinedRight  >  0)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  undefinedRight  >  0)  {  break;  }	  if(result    ==    null    ||    undefinedRight)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	45	None	replace
203	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedRight,  op);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(undefinedRight,  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(undefinedRight,  op);	  result    =    compareToUndefined(left,    op);    return    result;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
204	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  undefinedRight);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(lh,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(lh,  undefinedRight);	  result    =    compareToUndefined(right,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	13	None	replace
205	[BUG]  [BUGGY]  if(right!=  null  ||  left.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(right!=  null  ||  left.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(right!=  null  ||  left.getString().equals( "undefined "))  {  break;  }	  if(right!=    null)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	36	None	replace
206	[BUG]  [BUGGY]  result  =  new  Boolean(compareResult.booleanValue());  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  new  Boolean(compareResult.booleanValue());  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  new  Boolean(compareResult.booleanValue());	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
207	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString( "u "  +  left.getString());  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString( "u "  +  left.getString());  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  JsonStringEncoder.getInstance().encodeAsString( "u "  +  left.getString());	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
208	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().quoteAsString( "compareResult ");  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  JsonStringEncoder.getInstance().quoteAsString( "compareResult ");  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  JsonStringEncoder.getInstance().quoteAsString( "compareResult ");	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
209	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString( "u "  +  left.getString()));  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsString( "u "  +  left.getString()));  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  JsonStringEncoder.getInstance().encodeAsString( "u "  +  left.getString()));	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
210	[BUG]  [BUGGY]  result  =  new  Boolean(result.booleanValue());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  new  Boolean(result.booleanValue());  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  new  Boolean(result.booleanValue());	  result    =    compareResult;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
211	[BUG]  [BUGGY]  if(result  ==  null  ||  right.getString().equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result  ==  null  ||  right.getString().equals( "null "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  right.getString().equals( "null "))  {  break;  }	  if(result!=    null    &&    right.getString().equals(   "null   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	41	None	replace
212	[BUG]  [BUGGY]  if(right.getString().equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(right.getString().equals( "null "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(right.getString().equals( "null "))  {  break;  }	  if(result!=    null    &&    right.getString().equals(   "null   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	41	None	replace
213	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  right);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  op,  right);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  op,  right);	  result    =    compareToUndefined(right,    op,    left);    	non-compiled	[CE]  case,  default,  or  	39	None	replace
214	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  left,  undefinedRight);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  op,  left,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  op,  left,  undefinedRight);	  result    =    compareToUndefined(right,    op,    left);    	non-compiled	[CE]  case,  default,  or  	39	None	replace
215	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  op);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  right,  op);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  right,  op);	  result    =    compareToUndefined(right,    op,    left);    	non-compiled	[CE]  case,  default,  or  	39	None	replace
216	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  left);  break;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(op,  left);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(op,  left);  break;	  result    =    compareToUndefined(left,    n);    break;    	non-compiled	[CE]  case,  default,  or  	35	None	replace
217	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  undefinedRight);  break;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(op,  undefinedRight);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(op,  undefinedRight);  break;	  result    =    compareToUndefined(left,    undefinedRight);    break;    	non-compiled	[CE]  case,  default,  or  	18	None	replace
218	[BUG]  [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(undefinedLeft  ||  right.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(undefinedLeft  ||  right.getString().equals( "undefined "))  {  break;  }	  if(undefinedLeft)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	37	None	replace
219	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  left);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  left);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  undefinedRight,  left);	  result    =    compareToUndefined(left,    op,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
220	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right);  break;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  right);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  right);  break;	  result    =    compareToUndefined(left,    right);    break;    	non-compiled	[CE]  case,  default,  or  	17	None	replace
221	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals( "* "))  {  break;  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(result  ==  null  ||  result.equals( "* "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(result  ==  null  ||  result.equals( "* "))  {  break;  }	  if(result    ==    null    ||    result.equals(   "   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	50	None	replace
222	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedRight,  left);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  undefinedRight,  left);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  undefinedRight,  left);	  result    =    compareToUndefined(right,    op,    undefinedRight);    	non-compiled	[CE]  case,  default,  or  	14	None	replace
223	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(right,  right);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(right,  right);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  case,  default,  or  	1	None	replace
224	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  left);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(op,  left);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(op,  left);	  result    =    compareToUndefined(right,    left);    	non-compiled	[CE]  case,  default,  or  	11	None	replace
225	[BUG]  [BUGGY]  result  =  compareToUndefined(left.getString(),  op,  undefinedRight);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left.getString(),  op,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left.getString(),  op,  undefinedRight);	  result    =    compareToUndefined(left.getString(),    op);    	non-compiled	[CE]  case,  default,  or  	25	None	replace
226	[BUG]  [BUGGY]  result  =  compareToUndefined(left.getString(),  left.getString());  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left.getString(),  left.getString());  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left.getString(),  left.getString());	  result    =    compareToUndefined(left.getString(),    op);    	non-compiled	[CE]  case,  default,  or  	25	None	replace
227	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  undefinedRight.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  undefinedRight.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left.getType()  ==  Token.NAME  ||  undefinedRight.getType()  ==  Token.GETELEM)  {  break;  }	  if(undefinedRight    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  case,  default,  or  '}'  expected	46	None	replace
228	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  undefinedRight.getType()  ==  Token.VAR)  {  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  undefinedRight.getType()  ==  Token.VAR)  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left.getType()  ==  Token.NAME  ||  undefinedRight.getType()  ==  Token.VAR)  {  break;  }	  if(undefinedRight    ||    left.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  case,  default,  or  '}'  expected	46	None	replace
229	[BUG]  [BUGGY]  result  =  compareToUndefined(ln,  op,  undefinedRight);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(ln,  op,  undefinedRight);  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(ln,  op,  undefinedRight);	  result    =    compareToUndefined(ln,    op);    	non-compiled	[CE]  case,  default,  or  	8	None	replace
230	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	aughtExceptionHandler.throwAsIgnoredException( " ");	  if(rightLiteral)    {    break;    }    	non-compiled	[CE]  case,  default,  or  	38	None	replace
231	[BUG]  [BUGGY]  if(undefinedRight  ||  right.getString().equals( "undefined "))  {  break;  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(undefinedRight  ||  right.getString().equals( "undefined "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(undefinedRight  ||  right.getString().equals( "undefined "))  {  break;  }	  if(undefinedRight    ||    left.getString().equals(   "undefined   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	44	None	replace
232	[BUG]  [BUGGY]  if(left.getString().equals( "null "))  {  break;  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  if(left.getString().equals( "null "))  {  break;  }  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	if(left.getString().equals( "null "))  {  break;  }	  if(result    ==    null    ||    left.getString().equals(   "null   "))    {    break;    }    	non-compiled	[CE]  case,  default,  or  	49	None	replace
233	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  op);  break;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  op);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  undefinedRight,  op);  break;	  result    =    compareToUndefined(left,    op,    undefinedRight);    break;    	non-compiled	[CE]  case,  default,  or  	20	None	replace
234	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  left);  break;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  left);  break;  [BUGGY]      }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1027	1027	3	replace	result  =  compareToUndefined(left,  undefinedRight,  left);  break;	  result    =    compareToUndefined(left,    op,    undefinedRight);    break;    	non-compiled	[CE]  case,  default,  or  	20	None	replace
