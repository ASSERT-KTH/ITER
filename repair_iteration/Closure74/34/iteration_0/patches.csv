bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))    ||  (Token.VOID  ==  right.getType()  	non-compiled	[CE]  orphaned  case	67	None	replace
2	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  [BUGGY]  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));	boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))    ||  (Token.VOID  ==  right.getType()  	non-compiled	[CE]  orphaned  case	67	None	replace
3	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  [BUGGY]  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))	boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))    ||  (Token.VOID  ==  right.getType()  	non-compiled	[CE]  orphaned  case	67	None	replace
4	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]          AssertionFailedError  [CONTEXT]  return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))    ||  (Token.VOID  ==  right.getType()  	non-compiled	[CE]  orphaned  case	67	None	replace
5	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]            AssertionFailedError  [CONTEXT]  return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))    ||  (Token.VOID  ==  right.getType()  	non-compiled	[CE]  orphaned  case	67	None	replace
6	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  [CE]  orphaned  case  [FE]              AssertionFailedError  [CONTEXT]  return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  [BUGGY]  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));	boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))    ||  (Token.VOID  ==  right.getType()  	non-compiled	[CE]  orphaned  case	67	None	replace
7	[BUG]  [BUGGY]    [CE]  orphaned  case  [FE]                AssertionFailedError  [CONTEXT]  return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  [BUGGY]    [BUGGY]  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	  	boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))    ||  (Token.VOID  ==  right.getType()  	non-compiled	[CE]  orphaned  case	67	None	replace
8	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  [BUGGY]  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))	boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))    ||  (Token.VOID  ==  right.getType()  	non-compiled	[CE]  orphaned  case	67	None	replace
9	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()  [BUGGY]  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild()	boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))    ||  (Token.VOID  ==  right.getType()  	non-compiled	[CE]  orphaned  case	67	None	replace
10	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [BUGGY]  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()	boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))    ||  (Token.VOID  ==  right.getType()  	non-compiled	[CE]  orphaned  case	67	None	replace
11	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  [CE]  orphaned  case  [FE]          AssertionFailedError  [CONTEXT]  return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  [BUGGY]  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  left.getType()  &&  left.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))	boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))    ||  (Token.VOID  ==  right.getType()  	non-compiled	[CE]  orphaned  case	67	None	replace
12	[BUG]  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  return  n;  }  }  int  op  =  n.getType();  boolean  result;    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  [BUGGY]  boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  [BUGGY]  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  }  else  if  (!rightLiteral)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	903	905	3	replace	boolean  undefinedRight  =  ((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()	boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))    ||  (Token.VOID  ==  right.getType()  	non-compiled	[CE]  orphaned  case	67	None	replace
